# AUTOGENERATED! DO NOT EDIT! File to edit: dev/8.7_interpretability.info_theory_processing.ipynb (unless otherwise specified).

__all__ = ['__load_hf_tokenizer_model', 'get_tokens_frequency_hf_tkzr']

# Cell

import pandas as pd
from tokenizers import Tokenizer
from pathlib import Path
import sentencepiece as spm
import logging
import os
from typing import Dict, Optional
from pprint import pprint

# Cell

def __load_hf_tokenizer_model(path: str) -> Tokenizer:
    """
    Function to load a saved HuggingFace tokenizer

    :param path: Path containing the tokenizer file
    :return:
    """

    if not check_file_existence(path):
        msg = 'HuggingFace model could no be loaded'
        logging.error(msg)
        raise Exception(msg)
    return Tokenizer.from_file(path)

# Cell

def get_tokens_frequency_hf_tkzr(df: pd.DataFrame,
                                  tokenizer_path: str,
                                  include_pad_token:Optional[bool]=False) -> Dict[str, int]:
    """
    Function to get the frequencies given a tokenizer

    :param df: DataFrame containing the code snippets
    :param tokenizer_path: Path containing the file for the HF Tokenizer to be loaded
    :return: Dictionary containing the frequency of tokens for the given set of code snippets
    """
    freqs = { }
    tokenizer = __load_hf_tokenizer_model(tokenizer_path)
    for idx, row in df.iterrows():
        tokens = tokenizer.encode(row.code).tokens

        for tok in tokens:
            if tok == "<pad>" and not include_pad_token:
                continue
            freqs[tok] = freqs[tok]+1 if tok in freqs.keys() else 1

    return freqs