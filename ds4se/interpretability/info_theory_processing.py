# AUTOGENERATED! DO NOT EDIT! File to edit: dev/8.7_interpretability.info_theory_processing.ipynb (unless otherwise specified).

__all__ = ['logger', '__load_hf_tokenizer_model', 'get_tokens_frequency_hf_tkzr']

# Cell

import pandas as pd

from tokenizers import Tokenizer
import sentencepiece as spm

from pathlib import Path
from pprint import pprint

from typing import Dict, Optional

from ..mgmnt.prep.bpe_tokenization import CustomTokenizer, HFTokenizer

# Cell

import logging
logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)
logger = logging.getLogger()

# Cell

def __load_hf_tokenizer_model(path: str) -> Tokenizer:
    """
    Function to load a saved HuggingFace tokenizer

    :param path: Path containing the tokenizer file
    :return:
    """

    if not check_file_existence(path):
        msg = 'HuggingFace model could no be loaded'
        logging.error(msg)
        raise Exception(msg)
    return Tokenizer.from_file(path)

# Cell

def get_tokens_frequency_hf_tkzr(df: pd.DataFrame,
                                  tokenizer: CustomTokenizer,
                                  include_pad_token:Optional[bool]=False) -> Dict[str, int]:
    """
    Function to get the frequencies of a code dataset given a tokenizer.

    :param df: DataFrame containing the code snippets
    :param tokenizer: CustomTokenizer instance (HF or SP) with the corresponding implementation for tokenization

    :return: Dictionary containing the frequency of tokens for the given set of code snippets.
    """
    freqs = { }

    for idx, row in df.iterrows():
        tokens = tokenizer.tokenize_txt(row.code)

        for tok in tokens:
            if tok == "<pad>" and not include_pad_token:
                continue
            freqs[tok] = freqs[tok]+1 if tok in freqs.keys() else 1

    return freqs