▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁/** ▁* ▁Used ▁for ▁the ▁patient ▁to ▁report ▁adverse ▁events . ▁*/ ▁import ▁java . sql . SQLException ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . EmailUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . Email ; ▁import ▁edu . nc su . cs c . itrust . beans . AdverseEventBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PersonnelBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AdverseEventDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . validate . AdverseEvent Validator ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁public ▁class ▁Report AdverseEvent Action ▁{ ▁private ▁long ▁loggedInMID ; ▁private ▁EmailUtil ▁emailer ; ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁PersonnelDAO ▁personnelDAO ; ▁private ▁AdverseEventDAO ▁adverseEventDAO ; ▁private ▁TransactionDAO ▁transactionDAO ; ▁private ▁long ▁hcpID ; ▁private ▁AdverseEvent Validator ▁validator ; ▁public ▁Report AdverseEvent Action ( String ▁hcpID , ▁DAOFactory ▁factory , ▁long ▁loggedInMID ){ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . personnelDAO ▁= ▁factory . get PersonnelDAO (); ▁this . emailer ▁= ▁new ▁EmailUtil ( factory ); ▁this . adverseEventDAO ▁= ▁factory . get AdverseEventDAO (); ▁this . transactionDAO ▁= ▁factory . get TransactionDAO (); ▁this . hcpID ▁= ▁Long . parse Long ( hcpID ); ▁this . validator ▁= ▁new ▁AdverseEvent Validator (); ▁} ▁/** ▁* ▁Constructor ▁used ▁to ▁send ▁e - mail s ▁only ▁*/ ▁public ▁Report AdverseEvent Action ( DAOFactory ▁factory , ▁long ▁loggedInMID ){ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . personnelDAO ▁= ▁factory . get PersonnelDAO (); ▁this . emailer ▁= ▁new ▁EmailUtil ( factory ); ▁this . adverseEventDAO ▁= ▁factory . get AdverseEventDAO (); ▁this . transactionDAO ▁= ▁factory . get TransactionDAO (); ▁this . validator ▁= ▁new ▁AdverseEvent Validator (); ▁} ▁/** ▁* ▁Method ▁that ▁send s ▁exact ly ▁one ▁e - mail ▁to ▁ each ▁MID ▁in ▁the ▁list ▁of ▁Adverse ▁Events ▁* ▁@ param ▁aeList ▁The ▁list ▁of ▁adverse ▁Event ▁ Bean s ▁that ▁need ▁to ▁be ▁act ed ▁upon ▁* ▁@ return ▁E List ▁The ▁list ▁of ▁e - mail s ▁sent ▁for ▁testing ▁purposes ▁*/ ▁public ▁Email ▁ sendMail s ( List < AdverseEventBean > ▁aeList ) ▁throw s ▁iTrustException , ▁ FormValidat ionException , ▁DBException ▁{ ▁List < String > ▁MID list ▁= ▁new ▁ArrayList < String > (); ▁String ▁patientID ▁= ▁""; ▁for ( AdverseEventBean ▁beaner ▁: ▁aeList ){ ▁patientID ▁= ▁beaner . get MID (); ▁String ▁new De sc ▁= ▁" ▁Drug : ▁" ▁+ ▁beaner . getDrug () ▁+ ▁" ▁ (" ▁+ ▁beaner . get Code () ▁+ ▁" ) ▁Description : ▁" ▁+ ▁beaner . get Description (); ▁beaner . set Description ( new De sc ); ▁} ▁for ( AdverseEventBean ▁bean o ▁: ▁aeList ){ ▁if (! MID list . contains ( bean o . getPrescriber ())){ ▁MID list . add ( bean o . getPrescriber ()); ▁} ▁} ▁Email ▁email ▁= ▁new ▁Email (); ▁for ( String ▁num ▁: ▁MID list ){ ▁String ▁message ▁= ▁" ▁Patient : ▁" ▁+ ▁patientDAO . getName ( Long . parse Long ( patientID )) ▁+ ▁" ▁( MID ▁" ▁+ ▁patientID ▁+ ▁" ) ▁Has ▁Reported ▁the ▁following ▁adverse ▁event ( s ) "; ▁for ( AdverseEventBean ▁bean o ▁: ▁aeList ){ ▁if ( bean o . getPrescriber (). equals ( num )){ ▁message ▁= ▁message ▁+ ▁bean o . get Description (); ▁} ▁} ▁String ▁fromEmail ; ▁email . set From (" no reply @ itrust . com "); ▁PatientBean ▁sender ▁= ▁patientDAO . getPatient ( loggedInMID ); ▁PersonnelBean ▁receiver ▁= ▁personnelDAO . getPersonnel ( Long . parse Long ( num )); ▁List < String > ▁toList ▁= ▁new ▁ArrayList < String > (); ▁toList . add ( receiver . getEmail ()); ▁fromEmail ▁= ▁sender . getEmail (); ▁email . s etToList ( toList ); ▁email . set From ( fromEmail ); ▁email . set Subject ( String . format (" Adverse ▁Event ▁Report ( Prescription ) ")); ▁email . s etBody ( message ); ▁emailer . sendEmail ( email ); ▁transactionDAO . log Transaction ( TransactionType . SEND _ MESSAGE , ▁loggedInMID ); ▁} ▁return ▁email ; ▁} ▁/** ▁* ▁A ▁method ▁used ▁to ▁send ▁a ▁single ▁e - mail . ▁Used ▁in ▁immunizations . ▁* ▁@ param ▁aeBean ▁* ▁@ return ▁Email ▁return s ▁the ▁Email ▁for ▁testing ▁purposes . ▁*/ ▁public ▁Email ▁ sendMail ▁( AdverseEventBean ▁aeBean ) throw s ▁iTrustException , ▁ FormValidat ionException , ▁DBException { ▁Email ▁email ▁= ▁new ▁Email (); ▁String ▁fromEmail ; ▁email . set From (" no reply @ itrust . com "); ▁List < String > ▁toList ▁= ▁new ▁ArrayList < String > (); ▁PatientBean ▁sender ▁= ▁patientDAO . getPatient ( loggedInMID ); ▁PersonnelBean ▁receiver ▁= ▁personnelDAO . getPersonnel ( hcpID ); ▁toList . add ( receiver . getEmail ()); ▁fromEmail ▁= ▁sender . getEmail (); ▁email . s etToList ( toList ); ▁email . set From ( fromEmail ); ▁email . set Subject ( String . format (" Adverse ▁Event ▁Report ▁( Immunization ) ")); ▁email . s etBody ( String . format ( ▁" ▁Patient : ▁" ▁+ ▁patientDAO . getName ( Long . parse Long ( aeBean . get MID ())) ▁+ ▁" ▁( MID ▁" ▁+ ▁aeBean . get MID () ▁+ ▁" ) ▁Has ▁Reported ▁the ▁following ▁adverse ▁event " ▁+ ▁" ▁Drug : ▁" ▁+ ▁aeBean . getDrug () ▁+ ▁" (" ▁+ ▁aeBean . get Code () ▁+ ▁" ) ▁Description : ▁" ▁+ ▁aeBean . get Description () ▁ )); ▁emailer . sendEmail ( email ); ▁transactionDAO . log Transaction ( TransactionType . SEND _ MESSAGE , ▁loggedInMID ); ▁return ▁email ; ▁} ▁/** ▁* ▁Method ▁used ▁to ▁add ▁a ▁report ▁to ▁the ▁data ▁base ▁* ▁@ param ▁aeBean ▁The ▁adverse ▁event ▁to ▁add ▁* ▁@ return ▁a ▁string ▁for ▁testing ▁purposes ▁only ▁* ▁@ throw s ▁iTrustException ▁* ▁@ throw s ▁ FormValidat ionException ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁String ▁ addReport ( AdverseEventBean ▁aeBean ) throw s ▁iTrustException , ▁ FormValidat ionException , ▁DBException ▁{ ▁try { ▁validator . validate ( aeBean ); ▁} catch ▁( FormValidat ionException ▁e ){ ▁e . print Stack T race (); ▁return ▁e . getMessage (); ▁} ▁try { ▁adverseEventDAO . addReport ( aeBean , ▁hcpID ); ▁} ▁catch ( ▁DBException ▁e ▁ ){ ▁throw ▁new ▁iTrustException ( e . getMessage ()); ▁} ▁/** ▁* ▁ Old ▁code ▁used ▁to ▁send ▁a ▁single ▁e - mail . ▁ K ee p ▁for ▁reference ▁Email ▁email ▁= ▁new ▁Email (); ▁String ▁senderName ; ▁String ▁fromEmail ; ▁email . set From (" no reply @ itrust . com "); ▁List < String > ▁toList ▁= ▁new ▁ArrayList < String > (); ▁PatientBean ▁sender ▁= ▁patientDAO . getPatient ( loggedInMID ); ▁PersonnelBean ▁receiver ▁= ▁personnelDAO . getPersonnel ( hcpID ); ▁toList . add ( receiver . getEmail ()); ▁senderName ▁= ▁sender . getF ullName (); ▁fromEmail ▁= ▁sender . getEmail (); ▁email . s etToList ( toList ); ▁email . set From ( fromEmail ); ▁email . set Subject ( String . format (" Adverse ▁Event ▁Report ")); ▁email . s etBody ( String . format ( ▁" ▁Patient : ▁" ▁+ ▁patientDAO . getName ( Long . parse Long ( aeBean . get MID ())) ▁+ ▁" ▁( MID ▁" ▁+ ▁aeBean . get MID () ▁+ ▁" ) ▁Has ▁Reported ▁the ▁following ▁adverse ▁event ( s ) " ▁+ ▁" ▁Drug : ▁" ▁+ ▁aeBean . getDrug () ▁+ ▁" (" ▁+ ▁aeBean . get Code () ▁+ ▁" ) ▁Description : ▁" ▁+ ▁aeBean . get Description () ▁ )); ▁emailer . sendEmail ( email ); ▁transactionDAO . log Transaction ( TransactionType . SEND _ MESSAGE , ▁loggedInMID ); */ ▁transactionDAO . log Transaction ( TransactionType . AD VERS E _ EVENT , ▁loggedInMID ); ▁return ▁""; ▁} ▁}