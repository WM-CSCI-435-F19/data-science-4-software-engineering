▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Vector ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . HospitalBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PersonnelBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PrescriptionBean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . HospitalBean Loader ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . Personnel Loader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . enums . Role ; ▁/** ▁* ▁Used ▁for ▁ managing ▁information ▁relat ed ▁to ▁personnel : ▁HCPs , ▁UAP s , ▁ Admin s ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁PersonnelDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁PersonnelLoader ▁personnelLoader ; ▁private ▁HospitalBean Loader ▁hospital BeanLoader ; ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁PersonnelDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁personnelLoader ▁= ▁new ▁PersonnelLoader (); ▁hospital BeanLoader ▁= ▁new ▁HospitalBean Loader (); ▁} ▁/** ▁* ▁Returns ▁the ▁name ▁for ▁a ▁given ▁MID ▁* ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁personnel ▁in ▁question . ▁* ▁@ return ▁A ▁String ▁representing ▁the ▁name ▁of ▁the ▁personnel . ▁* ▁@ throw s ▁iTrustException ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁String ▁getName ( long ▁mid ) ▁throw s ▁iTrustException , ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁pstmt ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁pstmt ▁= ▁conn . prepare Statement (" SEL ECT ▁firstName , ▁lastName ▁FROM ▁Personnel ▁ WH ERE ▁MID =?" ); ▁pstmt . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ; ▁rs ▁= ▁pstmt . execute Query (); ▁if ▁( rs . next ()) ▁{ ▁return ▁rs . get String (" firstName ") ▁+ ▁" ▁" ▁+ ▁rs . get String (" lastName "); ▁} ▁else ▁{ ▁throw ▁new ▁iTrustException (" User ▁does ▁not ▁exist "); ▁} ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁pstmt ); ▁} ▁} ▁/** ▁* ▁Add s ▁an ▁empty ▁personnel , ▁and ▁return s ▁the ▁MID . ▁* ▁* ▁@ return ▁A ▁long ▁indicat ing ▁the ▁new ▁MID . ▁* ▁@ param ▁role ▁A ▁ {@ link ▁Role } ▁enum ▁indicat ing ▁the ▁personnel ' s ▁specific ▁role . ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁long ▁ addEmpty Personnel ( Role ▁role ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁long ▁new ID ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁Personnel ( Role ) ▁VALUES (?) "); ▁ps . set String ( 1, ▁role . name ()); ▁ps . execute Update (); ▁new ID ▁= ▁DBUtil . getLast Insert ( conn ); ▁return ▁new ID ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Retrieve s ▁a ▁PersonnelBean ▁with ▁all ▁of ▁the ▁specific ▁information ▁for ▁a ▁given ▁employee . ▁* ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁personnel ▁in ▁question . ▁* ▁@ return ▁A ▁PersonnelBean ▁representing ▁the ▁employee . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁PersonnelBean ▁getPersonnel ( long ▁mid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁Personnel ▁ WH ERE ▁MID ▁= ▁? "); ▁ps . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁if ▁( rs . next ()) ▁{ ▁return ▁personnelLoader . loadSingle ( rs ); ▁} ▁else ▁return ▁null ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Updates ▁the ▁demographic s ▁for ▁a ▁personnel . ▁* ▁* ▁@ param ▁p ▁The ▁personnel ▁bean ▁with ▁the ▁updated ▁information . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁ editPersonnel ( PersonnelBean ▁p ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁Personnel ▁SET ▁A MID =?, firstName =?, lastName =?, " ▁+ ▁" phone 1=?, phone 2=?, phone 3=?, ▁address 1=?, address 2=?, city =?, ▁state =?, ▁zip =?, ▁zip 1=?, ▁zip 2=?, ▁email =?, ▁ MessageFilter =?" ▁+ ▁" ▁ WH ERE ▁MID =?" ); ▁personnelLoader . load Parameters ( ps , ▁p ); ▁ps . s etLong ( 16 , ▁p . get MID ()); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Indicate s ▁whether ▁a ▁certain ▁personnel ▁is ▁in ▁the ▁database . ▁* ▁* ▁@ param ▁pid ▁The ▁MID ▁of ▁the ▁personnel ▁in ▁question . ▁* ▁@ return ▁A ▁boolean ▁indicat ing ▁whether ▁this ▁personnel ▁exists . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁boolean ▁check Personnel E xists ( long ▁pid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁Personnel ▁ WH ERE ▁MID =?" ); ▁ps . s etLong ( 1, ▁pid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁rs . next (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁all ▁of ▁the ▁hospitals ▁this ▁LHCP ▁is ▁associate d ▁with . ▁* ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁personnel ▁in ▁question . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁HospitalBean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < HospitalBean > ▁ getHospitals ( long ▁mid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁HCP AssignedHos ▁ha h , Hospitals ▁ h ▁" ▁+ ▁" WH ERE ▁ha h . HCPID =? ▁AND ▁ha h . HosID = h . HospitalID ▁OR DER ▁ BY ▁ HospitalName ▁ASC "); ▁ps . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁hospital BeanLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁all ▁personnel ▁in ▁the ▁database . ▁* ▁* ▁@ return ▁A ▁java . util . List ▁of ▁personnel . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < PersonnelBean > ▁getAll Personnel () ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁personnel ▁where ▁role ▁in ▁( ' hcp ',' uap ',' er ' ) ▁" ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁personnelLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁UAP s ▁who ▁work ▁for ▁this ▁LHCP . ▁* ▁* ▁@ param ▁hcpid ▁The ▁MID ▁of ▁the ▁personnel ▁in ▁question . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁UAP s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < PersonnelBean > ▁get UAP s For HCP ( long ▁hcpid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁Personnel ▁ WH ERE ▁MID ▁IN ▁( SEL ECT ▁UAP ▁FROM ▁HCP Relation s ▁ WH ERE ▁HCP =? )"); ▁ps . s etLong ( 1, ▁hcpid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁personnelLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Give n ▁a ▁prescription ▁that ▁has ▁been ▁given , ▁this ▁method ▁return s ▁all ▁the ▁information ▁for ▁the ▁* ▁doctor ▁who ▁authorized ▁that ▁prescription . ▁* ▁* ▁@ param ▁prescription ▁The ▁ PrescriptionBean ▁describ ing ▁the ▁prescription ▁in ▁question . ▁* ▁@ return ▁The ▁PersonnelBean ▁describ ing ▁the ▁doctor ▁who ▁authorized ▁it . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁PersonnelBean ▁get Prescribing Doctor ( PrescriptionBean ▁prescription ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁Personnel ▁ WH ERE ▁MID ▁IN ▁( SEL ECT ▁HCPID ▁FROM ▁OfficeVisits ▁ WH ERE ▁ID =? )"); ▁ps . s etLong ( 1, ▁prescription . get VisitID ()); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁personnelLoader . load List ( rs ) . get (0); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁M atch es ▁all ▁personnel ▁who ▁have ▁names ▁ LIKE ▁( a s ▁in ▁SQL ) ▁the ▁first ▁and ▁last ▁names ▁passed ▁in . ▁* ▁* ▁@ param ▁first ▁The ▁first ▁name ▁to ▁be ▁searched ▁for . ▁* ▁@ param ▁last ▁The ▁last ▁name ▁to ▁be ▁searched ▁for . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁personnel ▁who ▁match ▁these ▁names . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < PersonnelBean > ▁ searchFor Personnel With Name ( String ▁first , ▁String ▁last ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁if ▁( first . equals ("%") ▁&& ▁last . equals ("%") ) ▁return ▁new ▁ Vector < PersonnelBean > (); ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁personnel ▁ WH ERE ▁firstName ▁ LIKE ▁? ▁AND ▁lastName ▁ LIKE ▁? "); ▁ps . set String ( 1, ▁first ); ▁ps . set String (2, ▁last ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁personnelLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}