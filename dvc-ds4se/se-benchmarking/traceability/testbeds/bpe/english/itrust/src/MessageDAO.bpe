▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . MessageBean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . MessageBean Loader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁/** ▁* ▁Used ▁for ▁the ▁logging ▁mechanism . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁MessageDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁MessageBean Loader ▁ mbLoader ; ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁MessageDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁this . mbLoader ▁= ▁new ▁MessageBean Loader (); ▁} ▁/** ▁* ▁Get s ▁all ▁the ▁messages ▁for ▁a ▁certain ▁user ▁MID . ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁user ▁to ▁be ▁look ed ▁up . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁MessageBeans . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁List < MessageBean > ▁ getMessage s For ( long ▁mid ) ▁throw s ▁SQLException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁message ▁ WH ERE ▁to _ id ▁= ▁? ▁OR DER ▁ BY ▁sent _ date ▁DESC "); ▁ps . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁List < MessageBean > ▁mbList ▁= ▁this . mbLoader . load List ( rs ); ▁DBUtil . close Connection ( conn , ▁ps ); ▁return ▁mbList ; ▁} ▁/** ▁* ▁Get s ▁all ▁the ▁messages ▁for ▁a ▁certain ▁user ▁MID ▁sort ed ▁by ▁ascending ▁time . ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁user ▁to ▁be ▁look ed ▁up . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁MessageBeans . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁List < MessageBean > ▁ getMessage s Time Ascending ( long ▁mid ) ▁throw s ▁SQLException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁message ▁ WH ERE ▁to _ id ▁= ▁? ▁OR DER ▁ BY ▁sent _ date ▁ASC "); ▁ps . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁List < MessageBean > ▁mbList ▁= ▁this . mbLoader . load List ( rs ); ▁DBUtil . close Connection ( conn , ▁ps ); ▁return ▁mbList ; ▁} ▁/** ▁* ▁Get s ▁all ▁the ▁messages ▁for ▁a ▁certain ▁user ▁MID ▁sort ed ▁by ▁name ▁ascending . ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁user ▁to ▁be ▁look ed ▁up . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁MessageBeans . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁List < MessageBean > ▁ getMessagesName Ascending ( long ▁mid ) ▁throw s ▁SQLException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁ResultSet ▁rs ; ▁conn ▁= ▁factory . get Connection (); ▁if ( mid ▁>= ▁( long ) ▁ 999999999 ){ ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁message .* ▁FROM ▁message , ▁patients ▁ WH ERE ▁message . from _ id = patients . mid ▁AND ▁message . to _ id =? ▁OR DER ▁ BY ▁patients . lastName ▁ASC , ▁patients . firstName ▁ASC , ▁message . sent _ date ▁ASC "); ▁ps . s etLong ( 1, ▁mid ); ▁rs ▁= ▁ps . execute Query (); ▁} ▁else { ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁message .* ▁FROM ▁message , ▁personnel ▁ WH ERE ▁message . from _ id = personnel . mid ▁AND ▁message . to _ id =? ▁OR DER ▁ BY ▁personnel . lastName ▁ASC , ▁personnel . firstName ▁ASC , ▁message . sent _ date ▁ASC "); ▁ps . s etLong ( 1, ▁mid ); ▁rs ▁= ▁ps . execute Query (); ▁} ▁List < MessageBean > ▁mbList ▁= ▁this . mbLoader . load List ( rs ); ▁DBUtil . close Connection ( conn , ▁ps ); ▁return ▁mbList ; ▁} ▁/** ▁* ▁Get s ▁all ▁the ▁messages ▁for ▁a ▁certain ▁user ▁MID ▁sort ed ▁by ▁name ▁descending . ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁user ▁to ▁be ▁look ed ▁up . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁MessageBeans . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁List < MessageBean > ▁ getMessagesName Descending ( long ▁mid ) ▁throw s ▁SQLException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁ResultSet ▁rs ; ▁conn ▁= ▁factory . get Connection (); ▁if ( mid ▁>= ▁( long ) ▁ 999999999 ){ ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁message .* ▁FROM ▁message , ▁patients ▁ WH ERE ▁message . from _ id = patients . mid ▁AND ▁message . to _ id =? ▁OR DER ▁ BY ▁patients . lastName ▁DESC , ▁patients . firstName ▁DESC , ▁message . sent _ date ▁DESC "); ▁ps . s etLong ( 1, ▁mid ); ▁rs ▁= ▁ps . execute Query (); ▁} ▁else { ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁message .* ▁FROM ▁message , ▁personnel ▁ WH ERE ▁message . from _ id = personnel . mid ▁AND ▁message . to _ id =? ▁OR DER ▁ BY ▁personnel . lastName ▁DESC , ▁personnel . firstName ▁DESC , ▁message . sent _ date ▁DESC "); ▁ps . s etLong ( 1, ▁mid ); ▁rs ▁= ▁ps . execute Query (); ▁} ▁List < MessageBean > ▁mbList ▁= ▁this . mbLoader . load List ( rs ); ▁DBUtil . close Connection ( conn , ▁ps ); ▁return ▁mbList ; ▁} ▁/** ▁* ▁Get s ▁all ▁the ▁messages ▁from ▁a ▁certain ▁user ▁MID . ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁user ▁to ▁be ▁look ed ▁up . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁MessageBeans . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁List < MessageBean > ▁ getMessagesFrom ( long ▁mid ) ▁throw s ▁SQLException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁message ▁ WH ERE ▁from _ id ▁= ▁? ▁OR DER ▁ BY ▁sent _ date ▁DESC "); ▁ps . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁List < MessageBean > ▁mbList ▁= ▁this . mbLoader . load List ( rs ); ▁DBUtil . close Connection ( conn , ▁ps ); ▁return ▁mbList ; ▁} ▁/** ▁* ▁Get s ▁all ▁the ▁messages ▁for ▁a ▁certain ▁user ▁MID ▁sort ed ▁by ▁ascending ▁time . ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁user ▁to ▁be ▁look ed ▁up . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁MessageBeans . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁List < MessageBean > ▁ getMessagesFrom Time Ascending ( long ▁mid ) ▁throw s ▁SQLException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁message ▁ WH ERE ▁from _ id ▁= ▁? ▁OR DER ▁ BY ▁sent _ date ▁ASC "); ▁ps . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁List < MessageBean > ▁mbList ▁= ▁this . mbLoader . load List ( rs ); ▁DBUtil . close Connection ( conn , ▁ps ); ▁return ▁mbList ; ▁} ▁/** ▁* ▁Get s ▁all ▁the ▁messages ▁for ▁a ▁certain ▁user ▁MID ▁sort ed ▁by ▁name ▁ascending . ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁user ▁to ▁be ▁look ed ▁up . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁MessageBeans . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁List < MessageBean > ▁get MessagesFromName Ascending ( long ▁mid ) ▁throw s ▁SQLException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁ResultSet ▁rs ; ▁conn ▁= ▁factory . get Connection (); ▁if ( mid ▁>= ▁( long ) ▁ 999999999 ){ ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁message .* ▁FROM ▁message , ▁patients ▁ WH ERE ▁message . to _ id = patients . mid ▁AND ▁message . from _ id =? ▁OR DER ▁ BY ▁patients . lastName ▁ASC , ▁patients . firstName ▁ASC , ▁message . sent _ date ▁ASC "); ▁ps . s etLong ( 1, ▁mid ); ▁rs ▁= ▁ps . execute Query (); ▁} ▁else { ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁message .* ▁FROM ▁message , ▁personnel ▁ WH ERE ▁message . to _ id = personnel . mid ▁AND ▁message . from _ id =? ▁OR DER ▁ BY ▁personnel . lastName ▁ASC , ▁personnel . firstName ▁ASC , ▁message . sent _ date ▁ASC "); ▁ps . s etLong ( 1, ▁mid ); ▁rs ▁= ▁ps . execute Query (); ▁} ▁List < MessageBean > ▁mbList ▁= ▁this . mbLoader . load List ( rs ); ▁DBUtil . close Connection ( conn , ▁ps ); ▁return ▁mbList ; ▁} ▁/** ▁* ▁Get s ▁all ▁the ▁messages ▁for ▁a ▁certain ▁user ▁MID ▁sort ed ▁by ▁name ▁descending . ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁user ▁to ▁be ▁look ed ▁up . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁MessageBeans . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁List < MessageBean > ▁get MessagesFromName Descending ( long ▁mid ) ▁throw s ▁SQLException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁ResultSet ▁rs ; ▁conn ▁= ▁factory . get Connection (); ▁if ( mid ▁>= ▁( long ) ▁ 999999999 ){ ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁message .* ▁FROM ▁message , ▁patients ▁ WH ERE ▁message . to _ id = patients . mid ▁AND ▁message . from _ id =? ▁OR DER ▁ BY ▁patients . lastName ▁DESC , ▁patients . firstName ▁DESC , ▁message . sent _ date ▁DESC "); ▁ps . s etLong ( 1, ▁mid ); ▁rs ▁= ▁ps . execute Query (); ▁} ▁else { ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁message .* ▁FROM ▁message , ▁personnel ▁ WH ERE ▁message . to _ id = personnel . mid ▁AND ▁message . from _ id =? ▁OR DER ▁ BY ▁personnel . lastName ▁DESC , ▁personnel . firstName ▁DESC , ▁message . sent _ date ▁DESC "); ▁ps . s etLong ( 1, ▁mid ); ▁rs ▁= ▁ps . execute Query (); ▁} ▁List < MessageBean > ▁mbList ▁= ▁this . mbLoader . load List ( rs ); ▁DBUtil . close Connection ( conn , ▁ps ); ▁return ▁mbList ; ▁} ▁/** ▁* ▁Add s ▁a ▁message ▁to ▁the ▁database . ▁* ▁@ param ▁mBean ▁A ▁bean ▁representing ▁the ▁message ▁to ▁be ▁added . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁void ▁add Message ( MessageBean ▁mBean ) ▁throw s ▁SQLException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁conn ▁= ▁factory . get Connection (); ▁if ▁( mBean . getParent MessageI d () ▁== ▁0 L ) ▁{ ▁ps ▁= ▁conn . prepare Statement ( ▁" INSERT ▁INT O ▁message ▁( from _ id , ▁to _ id , ▁sent _ date , ▁message , ▁subject , ▁been _ read ) ▁" ▁+ ▁" VALUES ▁(?, ▁? , ▁ NO W (), ▁? , ▁? , ▁? )"); ▁this . mbLoader . load Parameters ( ps , ▁mBean ); ▁} ▁else ▁{ ▁ps ▁= ▁conn . prepare Statement ( ▁" INSERT ▁INT O ▁message ▁( from _ id , ▁to _ id , ▁sent _ date , ▁message , ▁subject , ▁been _ read , ▁parent _ msg _ id ) ▁" ▁+ ▁" ▁VALUES ▁(?, ▁? , ▁ NO W (), ▁? , ▁? , ▁? , ▁? )"); ▁this . mbLoader . load Parameters ( ps , ▁mBean ); ▁} ▁ps . execute Update (); ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁public ▁void ▁update Read ( MessageBean ▁mBean ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁message ▁SET ▁been _ read =1 ▁ WH ERE ▁message _ id =?" ); ▁ps . s etLong ( 1, ▁mBean . getMessage Id ()); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}