▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁/** ▁* ▁Used ▁by ▁PHA s ▁to ▁view ▁the ▁reported ▁adverse ▁events ▁*/ ▁import ▁java . sql . SQLException ; ▁import ▁java . text . ParseException ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . EmailUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . AdverseEventBean ; ▁import ▁edu . nc su . cs c . itrust . beans . Email ; ▁import ▁edu . nc su . cs c . itrust . beans . MessageBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AdverseEventDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁public ▁class ▁Monitor AdverseEvent Action ▁{ ▁private ▁long ▁loggedInMID ; ▁private ▁EmailUtil ▁emailer ; ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁AdverseEventDAO ▁adverseEventDAO ; ▁private ▁TransactionDAO ▁transactionDAO ; ▁private ▁S endMessageAction ▁ messenger ; ▁/** ▁* ▁Constructor ▁* ▁@ param ▁factory ▁* ▁@ param ▁loggedInMID ▁*/ ▁public ▁Monitor AdverseEvent Action ( DAOFactory ▁factory , ▁long ▁loggedInMID ){ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . transactionDAO ▁= ▁factory . get TransactionDAO (); ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . emailer ▁= ▁new ▁EmailUtil ( factory ); ▁this . adverseEventDAO ▁= ▁factory . get AdverseEventDAO (); ▁this . messenger ▁= ▁new ▁S endMessageAction ( factory , ▁loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁reports ▁between ▁specified ▁dates ▁* ▁@ param ▁is Prescription ▁ Boolean ▁to ▁return ▁prescriptions ▁or ▁immunizations ▁* ▁@ param ▁start ▁The ▁start ing ▁date ▁* ▁@ param ▁end ▁The ▁ ending ▁date ▁* ▁@ return ▁the ▁list ▁of ▁events ▁* ▁@ throw s ▁iTrustException ▁* ▁@ throw s ▁ FormValidat ionException ▁* ▁@ throw s ▁SQLException ▁* ▁@ throw s ▁ParseException ▁*/ ▁public ▁List < AdverseEventBean > ▁get Report s ( boolean ▁is Prescription , ▁String ▁start , ▁String ▁end ) throw s ▁iTrustException , ▁ FormValidat ionException , ▁SQLException , ▁ParseException ▁{ ▁if ( is Prescription ) ▁{ ▁transactionDAO . log Transaction ( TransactionType . AD VERS E _ EVENT , ▁loggedInMID , ▁0 L , ▁" Adverse ▁Prescription ▁Reports ▁ Requested . "); ▁return ▁adverseEventDAO . get P er script ion s ( start , ▁end ); ▁} ▁else ▁{ ▁// is ▁ Immunization ▁transactionDAO . log Transaction ( TransactionType . AD VERS E _ EVENT , ▁loggedInMID , ▁0 L , ▁" Adverse ▁ Immunization ▁Report ▁ Requested . "); ▁return ▁adverseEventDAO . get Immunizations ( start , ▁end ); ▁} ▁} ▁/** ▁* ▁Returns ▁the ▁patient ' s ▁name ▁* ▁@ param ▁MID ▁the ▁MID ▁of ▁the ▁patient ▁to ▁return ▁the ▁name ▁for . ▁* ▁@ return ▁*/ ▁public ▁String ▁getName ( long ▁MID ) ▁{ ▁try ▁{ ▁return ▁patientDAO . getName ( MID ); ▁} ▁catch ( DBException ▁e ) ▁{ ▁return ▁""; ▁} ▁catch ( iTrustException ▁e ) ▁{ ▁return ▁" Patient ▁no ▁long er ▁exists "; ▁} ▁} ▁/** ▁* ▁Send s ▁an ▁e - mail ▁to ▁a ▁patient ▁requesting ▁more ▁information ▁* ▁@ param ▁patientMID ▁The ▁patient ▁to ▁receive ▁the ▁message ▁* ▁@ param ▁message ▁The ▁message ▁* ▁@ return ▁string ▁for ▁testing ▁purposes ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁String ▁ sendEmail ( long ▁patientMID , ▁String ▁message ) ▁throw s ▁DBException { ▁String ▁rValue ; ▁List < String > ▁toList ▁= ▁new ▁ArrayList < String > (); ▁PatientBean ▁receiver ▁= ▁patientDAO . getPatient ( patientMID ); ▁toList . add ( receiver . getEmail ()); ▁Email ▁mail ▁= ▁new ▁Email (); ▁mail . s etBody ( message ); ▁mail . set From ( loggedInMID ▁+ ▁" "); ▁mail . s etToList ( toList ); ▁emailer . sendEmail ( mail ); ▁transactionDAO . log Transaction ( TransactionType . AD VERS E _ EVENT , ▁loggedInMID , ▁0 L , ▁" Requested ▁more ▁information "); ▁rValue ▁= ▁"" ▁+ ▁mail . get From () ▁+ ▁" ▁" ▁+ ▁mail . getBody (); ▁return ▁rValue ; ▁} ▁/** ▁* ▁Method ▁used ▁to ▁remove ▁an ▁adverse ▁event ▁report ▁* ▁* ▁@ param ▁id ▁the ▁id ▁of ▁the ▁report ▁to ▁be ▁removed ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁void ▁remove ( int ▁id ) ▁throw s ▁DBException , ▁iTrustException , ▁ FormValidat ionException { ▁long ▁HCPMID ; ▁try { ▁ AdverseEventBean ▁aeBean ▁= ▁adverseEventDAO . get Report ( id ); ▁adverseEventDAO . remove Report ( id ); ▁HCPMID ▁= ▁adverseEventDAO . get HCPMID ( id ); ▁MessageBean ▁mBeanTwo ▁= ▁new ▁MessageBean (); ▁MessageBean ▁mBeanOne ▁= ▁new ▁MessageBean (); ▁String ▁body ▁= ▁" An ▁adverse ▁event ▁for ▁" ▁+ ▁aeBean . getDrug () ▁+ ▁" ▁per sc ri b ed ▁to ▁" ▁+ ▁patientDAO . getName ( Long . parse Long ( aeBean . get MID ())) ▁+" ▁with ▁description : ▁ (" ▁+ ▁aeBean . get Description () + ▁" ) ▁was ▁removed . "; ▁mBeanOne . setTo ( Long . parse Long ( aeBean . get MID ()) ); ▁mBeanTwo . setTo ( HCPMID ); ▁mBeanOne . set Subject (" Subject "); ▁mBeanTwo . set Subject (" Subject "); ▁mBeanOne . s etBody ( body ); ▁mBeanTwo . s etBody ( body ); ▁mBeanOne . set From ( loggedInMID ); ▁mBeanTwo . set From ( loggedInMID ); ▁ messenger . sendMessage ( mBean On e ); ▁ messenger . sendMessage ( mBean T wo ); ▁transactionDAO . log Transaction ( TransactionType . AD VERS E _ EVENT , ▁loggedInMID , ▁0 L , ▁" Adverse ▁Event ▁Report ▁Remove d "); ▁} catch ( SQLException ▁e ){ ▁throw ▁new ▁DBException ( e ); ▁} ▁} ▁}