▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁edu . nc su . cs c . itrust . beans . DiagnosisBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . ICDCodesDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . validate . DiagnosisBean Validator ; ▁/** ▁* ▁Handle s ▁updating ▁the ▁ICD ▁Code ▁( Diagnosis ) ▁List ▁Used ▁by ▁edit ICDCodes . jsp ▁* ▁* ▁The ▁Intern ational ▁Statistic al ▁ Classification ▁of ▁Diseases ▁and ▁Re lated ▁Health ▁Problems ▁* ▁( most ▁common ly ▁known ▁by ▁the ▁abbreviat ion ▁ICD ) ▁provide s ▁codes ▁to ▁class ify ▁diseases ▁and ▁a ▁* ▁wid e ▁variet y ▁of ▁sign s , ▁symptoms , ▁a b normal ▁finding s , ▁compl aints , ▁so cial ▁circu m stance s ▁and ▁* ▁external ▁cause s ▁of ▁in ju ry ▁or ▁disease . ▁* ▁* ▁@ see ▁http :// w ww . c d c . g ov / nc h s / icd 9 . htm ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁Update ICDCode ListAction ▁{ ▁private ▁long ▁performerID ▁= ▁0; ▁private ▁ICDCodesDAO ▁icdDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁DiagnosisBean Validator ▁validator ▁= ▁new ▁DiagnosisBean Validator (); ▁/** ▁* ▁Set ▁up ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁performerID ▁The ▁MID ▁of ▁the ▁person ▁ ud pat ing ▁the ▁ICD s . ▁*/ ▁public ▁Update ICDCode ListAction ( DAOFactory ▁factory , ▁long ▁performerID ) ▁{ ▁this . performerID ▁= ▁performerID ; ▁transDAO ▁= ▁factory . get TransactionDAO (); ▁icdDAO ▁= ▁factory . get ICDCodesDAO (); ▁} ▁/** ▁* ▁Add s ▁a ▁new ▁ICD ▁code ▁( diagnosis ) ▁based ▁on ▁the ▁DiagnosisBean ▁passed ▁as ▁a ▁ param ▁* ▁* ▁@ param ▁diagn ▁* ▁The ▁new ▁diagnosis ▁( ICD ▁code ) ▁* ▁@ return ▁Status ▁message ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁String ▁add ICDCode ( DiagnosisBean ▁diagn ) ▁throw s ▁ FormValidat ionException ▁{ ▁validator . validate ( diagn ); ▁try ▁{ ▁if ▁( icdDAO . add ICDCode ( diagn )) ▁{ ▁transDAO . log Transaction ( TransactionType . MANA GE _ DIAGNOSIS _ CODE , ▁performerID , ▁0 L , ▁" add ed ▁ICD ▁code ▁" ▁+ ▁diagn . getICDCode ()); ▁return ▁" Success : ▁" ▁+ ▁diagn . getICDCode () ▁+ ▁" ▁- ▁" ▁+ ▁diagn . get Description () ▁+ ▁" ▁added "; ▁} ▁else ▁return ▁" The ▁database ▁has ▁become ▁corrupt . ▁P lease ▁contact ▁the ▁system ▁administrator ▁for ▁assi stance . "; ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁return ▁e . getMessage (); ▁} ▁catch ▁( iTrustException ▁e ) ▁{ ▁return ▁e . getMessage (); ▁} ▁} ▁/** ▁* ▁Updates ▁a ▁diagnosis ▁with ▁new ▁information ▁from ▁the ▁DiagnosisBean ▁passed ▁as ▁a ▁ param ▁* ▁* ▁@ param ▁diagn ▁* ▁new ▁information ▁to ▁update ▁( but ▁same ▁code ) ▁* ▁@ return ▁Status ▁message ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁String ▁update Information ( DiagnosisBean ▁diagn ) ▁throw s ▁ FormValidat ionException ▁{ ▁validator . validate ( diagn ); ▁try ▁{ ▁int ▁rows ▁= ▁icdDAO . update Code ( diagn ); ▁if ▁(0 ▁== ▁rows ) ▁{ ▁return ▁" Error : ▁Code ▁not ▁found . "; ▁} ▁else ▁{ ▁transDAO . log Transaction ( TransactionType . MANA GE _ DIAGNOSIS _ CODE , ▁performerID , ▁0 L , ▁" updated ▁ICD ▁code ▁" ▁+ ▁diagn . getICDCode ()); ▁return ▁" Success : ▁" ▁+ ▁rows ▁+ ▁" ▁row ( s ) ▁updated "; ▁} ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁return ▁e . getMessage (); ▁} ▁} ▁}