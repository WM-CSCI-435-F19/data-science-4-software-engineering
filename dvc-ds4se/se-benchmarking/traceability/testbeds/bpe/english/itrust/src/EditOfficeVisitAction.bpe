▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . text . ParseException ; ▁import ▁java . text . SimpleDateFormat ; ▁import ▁java . util . Arrays ; ▁import ▁java . util . Date ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . action . base . OfficeVisit BaseAction ; ▁import ▁edu . nc su . cs c . itrust . beans . Email ; ▁import ▁edu . nc su . cs c . itrust . beans . HospitalBean ; ▁import ▁edu . nc su . cs c . itrust . beans . LabProcedureBean ; ▁import ▁edu . nc su . cs c . itrust . beans . MedicationBean ; ▁import ▁edu . nc su . cs c . itrust . beans . OfficeVisitBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PrescriptionBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . beans . DrugInteraction Bean ; ▁import ▁edu . nc su . cs c . itrust . beans . AllergyBean ; ▁import ▁edu . nc su . cs c . itrust . beans . Prescription ReportBean ; ▁import ▁edu . nc su . cs c . itrust . beans . forms . EditOfficeVisit Form ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AllergyDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . DrugInteraction DAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . HospitalsDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . LabProcedureDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . NDCodesDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . OfficeVisitDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . validate . EditOfficeVisit Validator ; ▁/** ▁* ▁Edit s ▁the ▁office ▁visits ▁of ▁a ▁patient ▁Used ▁by ▁e ditOfficeVisit . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁EditOfficeVisit Action ▁extends ▁OfficeVisit BaseAction ▁{ ▁private ▁EditOfficeVisit Validator ▁validator ▁= ▁new ▁EditOfficeVisit Validator (); ▁private ▁PersonnelDAO ▁personnelDAO ; ▁private ▁HospitalsDAO ▁hospitalDAO ; ▁private ▁OfficeVisitDAO ▁ovDAO ; ▁private ▁LabProcedureDAO ▁lpDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁DrugInteraction DAO ▁ drugDAO ; ▁private ▁AllergyDAO ▁allergyDAO ; ▁private ▁PatientDAO ▁patDAO ; ▁private ▁NDCodesDAO ▁ndcDAO ; ▁private ▁long ▁loggedInMID ; ▁private ▁long ▁pid ; ▁/** ▁* ▁Used ▁to ▁identify ▁the ▁sub action s ▁that ▁can ▁comp r ise ▁an ▁office ▁visit ▁action . ▁* ▁Sub action s ▁help ▁direct ▁the ▁action ' s ▁logic ▁because ▁some time s ▁multiple ▁* ▁office ▁visit ▁action s ▁can ▁occur ▁within ▁one ▁transaction . ▁*/ ▁private ▁enum ▁ OVSubAction ▁{ ▁ADD _ DIAGNOSIS , ▁ REM OVE _ DIAGNOSIS , ▁ADD _ PROCEDURE , ▁ REM OVE _ PROCEDURE , ▁ADD _ MEDICATION , ▁ REM OVE _ MEDICATION , ▁ADD _ LAB _ PROCEDURE , ▁ REM OVE _ LAB _ PROCEDURE , ▁ADD _ IMMUNIZATION , ▁ REM OVE _ IMMUNIZATION ▁} ; ▁/** ▁* ▁Patient ▁id ▁and ▁office ▁visit ▁id ▁validated ▁by ▁super ▁class ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁to ▁be ▁used ▁in ▁creating ▁the ▁DAOs ▁for ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁user ▁who ▁is ▁authoriz ing ▁this ▁action . ▁* ▁@ param ▁pidString ▁The ▁patient ▁who ▁this ▁action ▁is ▁performed ▁on . ▁* ▁@ param ▁ovIDString ▁The ▁ID ▁of ▁the ▁office ▁visit ▁in ▁p la y . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁EditOfficeVisit Action ( DAOFactory ▁factory , ▁long ▁loggedInMID , ▁String ▁pidString , ▁String ▁ovIDString ) ▁throw s ▁iTrustException ▁{ ▁super ( factory , ▁pidString , ▁ovIDString ); ▁pid ▁= ▁Long . parse Long ( pidString ); ▁ovDAO ▁= ▁factory . get OfficeVisitDAO (); ▁this . personnelDAO ▁= ▁factory . get PersonnelDAO (); ▁this . hospital DAO ▁= ▁factory . get HospitalsDAO (); ▁this . l p DAO ▁= ▁factory . get LabProcedureDAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . drugDAO ▁= ▁factory . get DrugInteraction DAO (); ▁this . allergyDAO ▁= ▁factory . get AllergyDAO (); ▁this . n d c DAO ▁= ▁factory . get NDCodesDAO (); ▁this . pat DAO ▁= ▁factory . get PatientDAO (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁} ▁/** ▁* ▁Returns ▁the ▁office ▁visit ▁bean ▁for ▁the ▁office ▁visit ▁* ▁* ▁@ return ▁the ▁OfficeVisitBean ▁of ▁the ▁office ▁visit ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁OfficeVisitBean ▁getOfficeVisit () ▁throw s ▁iTrustException ▁{ ▁OfficeVisitBean ▁officeVisit ▁= ▁ovDAO . getOfficeVisit ( ovID ); ▁transDAO . log Transaction ( TransactionType . VI EW _ OFF ICE _ VISIT , ▁loggedInMID , ▁pid , ▁" EditOff ceVisit ▁- ▁View ▁office ▁visits "); ▁return ▁officeVisit ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁the ▁lab ▁procedures ▁that ▁have ▁been ▁done ▁in ▁an ▁office ▁visit . ▁* ▁* ▁@ param ▁mid ▁the ▁doctor ▁the ▁visit ▁was ▁with ▁* ▁@ param ▁ovid ▁the ▁office ▁visit ' s ▁id ▁* ▁@ return ▁a ▁list ▁of ▁the ▁lab ▁procedures ▁that ▁we re ▁done ▁in ▁that ▁visit ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LabProcedureBean > ▁ getLabProcedure s ( long ▁mid , ▁long ▁ovid ) ▁throw s ▁DBException ▁{ ▁transDAO . log Transaction ( TransactionType . VI EW _ LAB _ PROCEDURE , ▁loggedInMID , ▁pid , ▁" EditOff ceVisit ▁- ▁View ▁lab ▁procedures "); ▁return ▁lpDAO . getAll LabProceduresFor Doc OV ( mid , ▁ovid ); ▁} ▁/** ▁* ▁This ▁is ▁a ▁list ▁of ▁all ▁hospitals , ▁ordered ▁by ▁the ▁office ▁visit ' s ▁hcp ▁ FIRST ▁* ▁* ▁@ param ▁hcpID ▁* ▁@ return ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < HospitalBean > ▁ getHospitals ( long ▁hcpID ) ▁throw s ▁iTrustException ▁{ ▁List < HospitalBean > ▁hcpsHospitals ▁= ▁personnelDAO . getHospitals ( hcpID ); ▁List < HospitalBean > ▁allHospitals ▁= ▁hospitalDAO . getAll Hospitals (); ▁return ▁combine List s ( hcp s Hospitals , ▁allHospitals ); ▁} ▁/** ▁* ▁C om b ine s ▁two ▁list s ▁of ▁hospitals ▁* ▁* ▁@ param ▁hcpsHospitals ▁hospitals ▁the ▁HCP ▁is ▁assigned ▁to ▁* ▁@ param ▁allHospitals ▁all ▁ h op s it al s ▁* ▁@ return ▁the ▁combine d ▁list ▁*/ ▁private ▁List < HospitalBean > ▁combine List s ( List < HospitalBean > ▁hcpsHospitals , ▁List < HospitalBean > ▁allHospitals ) ▁{ ▁for ▁( HospitalBean ▁ hos ▁: ▁allHospitals ) ▁{ ▁if ▁(! hcp s Hospitals . contains ( hos )) ▁hcpsHospitals . add ( hos ); ▁} ▁return ▁hcpsHospitals ; ▁} ▁/** ▁* ▁Updates ▁the ▁office ▁visit ▁with ▁information ▁from ▁the ▁form ▁passed ▁in ▁* ▁* ▁@ param ▁form ▁* ▁information ▁to ▁update ▁* ▁@ return ▁" success " ▁or ▁exception ' s ▁message ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁String ▁update Information ( EditOfficeVisit Form ▁form ) ▁throw s ▁ FormValidat ionException ▁{ ▁String ▁confirm ▁= ▁""; ▁try ▁{ ▁checkAdd SubAction ( OVSubAction . ADD _ DIAGNOSIS , ▁form . getA ddDiagID (), ▁ovID , ▁null ); ▁checkAdd SubAction ( OVSubAction . ADD _ PROCEDURE , ▁form . getA ddProcID (), ▁ovID , ▁null ); ▁checkAdd SubAction ( OVSubAction . ADD _ IMMUNIZATION , ▁form . getA ddImmunizationID (), ▁ovID , ▁null , ▁form . getHcp ID ()); ▁checkAdd SubAction ( OVSubAction . ADD _ LAB _ PROCEDURE , ▁form . getA ddLabProcID (), ▁ovID , ▁null ); ▁checkAdd Prescription ( form , ▁ovID ); ▁check Remove SubAction ( OVSubAction . REM OVE _ DIAGNOSIS , ▁form . getR emoveDiagID ()); ▁check Remove SubAction ( OVSubAction . REM OVE _ LAB _ PROCEDURE , ▁form . getR emoveLabProcID ()); ▁check Remove SubAction ( OVSubAction . REM OVE _ PROCEDURE , ▁form . getR emoveProcID ()); ▁check Remove SubAction ( OVSubAction . REM OVE _ IMMUNIZATION , ▁form . get Remove ImmunizationID ()); ▁check Remove SubAction ( OVSubAction . REM OVE _ MEDICATION , ▁form . getR emoveMedID ()); ▁update Ov ( form ); ▁transDAO . log Transaction ( TransactionType . DOC U MENT _ OFF ICE _ VISIT , ▁loggedInMID , ▁getOfficeVisit (). getPatientID (), ▁" EditOfficeVisit ▁- ▁edited ▁office ▁visit ▁" ▁+ ▁ovID ); ▁confirm ▁= ▁" success "; ▁return ▁confirm ; ▁} ▁catch ▁( iTrustException ▁e ) ▁{ ▁e . print Stack T race (); ▁return ▁e . getMessage (); ▁} ▁} ▁public ▁String ▁has Interaction ( String ▁drug , ▁String ▁pid , ▁String ▁startdate , ▁String ▁enddate ) ▁throw s ▁iTrustException { ▁String ▁response ▁= ▁""; ▁try ▁{ ▁ SimpleDateFormat ▁original ▁= ▁new ▁ SimpleDateFormat (" MM / dd / yyyy "); ▁ SimpleDateFormat ▁needed ▁= ▁new ▁ SimpleDateFormat (" yyyy / MM / dd "); ▁Date ▁start ▁= ▁original . parse ( start date ); ▁startdate ▁= ▁needed . format ( start ); ▁Date ▁end ▁= ▁original . parse ( end date ); ▁enddate ▁= ▁needed . format ( end ); ▁startdate ▁= ▁startdate . replace All ("/ ", ▁"-" ); ▁enddate ▁= ▁enddate . replace All ("/ ", ▁"-" ); ▁List < Prescription ReportBean > ▁prBean List ▁= ▁ovDAO . getPrescription Report sBy Date ( Long . parse Long ( pid ) , ▁startdate , ▁enddate ); ▁List < DrugInteraction Bean > ▁dBean List ▁= ▁ drugDAO . get Interactions ( drug ); ▁for ▁( Prescription ReportBean ▁prBean ▁: ▁prBean List ){ ▁String ▁ presDrug ▁= ▁prBean . getPrescription (). get Medication (). getNDCode (); ▁for ▁( DrugInteraction Bean ▁dBean ▁: ▁dBean List ){ ▁String ▁ intDrug 1 ▁= ▁dBean . get FirstDrug (); ▁String ▁ intDrug 2 ▁= ▁dBean . get SecondDrug (); ▁if ▁( presDrug . equals ( intDrug 1) ▁&& ▁drug . equals ( intDrug 2 )){ ▁response ▁+= ▁" Currently ▁ Presc ri b ed : ▁" ▁+ ▁prBean . getPrescription (). get Medication (). get Description () ▁+ ▁" . ▁Start ▁Date : ▁" ▁+ ▁prBean . getPrescription (). getStartDate Str () ▁+ ▁" , ▁End ▁Date : ▁" ▁+ ▁prBean . getPrescription (). getEndDate Str () ▁+ ▁" . ▁" ; ▁response ▁+= ▁" Interactions : ▁" ▁+ ▁prBean . getPrescription (). get Medication (). get Description () ▁+ ▁" ▁- ▁" ▁+ ▁ndcDAO . getNDCode ( ( d Bean . get SecondDrug ())) . get Description () ▁+ ▁" . ▁" ; ▁response ▁+= ▁" Description : ▁" ▁+ ▁dBean . get Description () ▁+ ▁" ▁" ; ▁} ▁else ▁if ▁( presDrug . equals ( intDrug 2) ▁&& ▁drug . equals ( intDrug 1 )){ ▁response ▁+= ▁" Currently ▁ Presc ri b ed : ▁" ▁+ ▁prBean . getPrescription (). get Medication (). get Description () ▁+ ▁" . ▁Start ▁Date : ▁" ▁+ ▁prBean . getPrescription (). getStartDate Str () ▁+ ▁" , ▁End ▁Date : ▁" ▁+ ▁prBean . getPrescription (). getEndDate Str () ▁+ ▁" . ▁" ; ▁response ▁+= ▁" Interactions : ▁" ▁+ ▁prBean . getPrescription (). get Medication (). get Description () ▁+ ▁" ▁- ▁" ▁+ ▁ndcDAO . getNDCode ( d Bean . get FirstDrug ()). get Description () ▁+ ▁" . ▁" ; ▁response ▁+= ▁" Description : ▁" ▁+ ▁dBean . get Description () ▁+ ▁" ▁" ; ▁} ▁} ▁} ▁} ▁catch ▁( DBException ▁e ){ ▁e . print Stack T race (); ▁throw ▁new ▁iTrustException ( e . getMessage ()); ▁} ▁catch ▁( ParseException ▁e ){ ▁e . print Stack T race (); ▁throw ▁new ▁iTrustException ( e . getMessage ()); ▁} ▁return ▁response ; ▁} ▁public ▁String ▁is Allergy On List ( String ▁pat MID , ▁String ▁n d code ) ▁throw s ▁iTrustException { ▁String ▁response ▁= ▁""; ▁try ▁{ ▁List < AllergyBean > ▁allergy List ▁= ▁allergyDAO . get Allergies ( Long . parse Long ( pat MID )); ▁if ▁( allergy List . is Empty ()) ▁return ▁response ; ▁MedicationBean ▁med Bean ▁= ▁ndcDAO . getNDCode ( n d code ); ▁if ( med Bean ▁== ▁null ) ▁return ▁response ; ▁String ▁new Drug ▁= ▁med Bean . get Description (); ▁for ▁( AllergyBean ▁allergyBean ▁: ▁allergy List ){ ▁String ▁current All er Drug ▁= ▁allergyBean . get Description (); ▁// Allergy : ▁A sp ir in . ▁First ▁Found : ▁12 / 20 /2008 . ▁if ▁( new Drug . equals ( current All er Drug )){ ▁response ▁+= ▁" Allergy : ▁" ▁+ ▁new Drug ▁+ ▁" . ▁First ▁Found : ▁" ▁+ ▁allergyBean . getFirstFound Str (); ▁} ▁} ▁} ▁catch ▁( DBException ▁e ){ ▁e . print Stack T race (); ▁throw ▁new ▁iTrustException ( e . getMessage ()); ▁} ▁return ▁response ; ▁} ▁/** ▁* ▁* ▁Send s ▁e - mail ▁regard ing ▁the ▁prescribed ▁da nger ous ▁drug . ▁* ▁* ▁@ param ▁hcpID ▁HCP ▁the ▁prescription ▁is ▁made ▁by ▁* ▁@ param ▁ patID ▁ID ▁of ▁the ▁patient ▁prescription ▁is ▁for ▁* ▁@ param ▁problem ▁The ▁allergy ▁and / or ▁interaction ▁that ▁is ▁the ▁problem ▁* ▁@ return ▁the ▁sent ▁e - mail ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁Email ▁makeEmail App ( long ▁hcpID , ▁String ▁ patID , ▁String ▁problem ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁PatientBean ▁p ▁= ▁patDAO . getPatient ( Long . parse Long ( patID )); ▁String ▁hcpName ▁= ▁personnelDAO . getName ( hcpID ); ▁Email ▁email ▁= ▁new ▁Email (); ▁email . set From (" no - reply @ itrust . com "); ▁email . s etToList ( Arrays . a s List ( p . getEmail ()) ); ▁email . set Subject (" HCP ▁has ▁prescribed ▁you ▁a ▁potential ly ▁da nger ous ▁medication "); ▁email . s etBody ( String ▁ . format ( ▁"% s ▁has ▁prescribed ▁a ▁medication ▁that ▁you ▁are ▁all er g ic ▁to ▁or ▁that ▁has ▁a ▁known ▁interaction ▁with ▁a ▁drug ▁you ▁are ▁currently ▁taking . ▁% s ", ▁hcpName , ▁problem )); ▁return ▁email ; ▁} ▁/** ▁* ▁Add s ▁a ▁prescription ▁to ▁an ▁office ▁visit ▁* ▁* ▁@ param ▁form ▁the ▁information ▁about ▁the ▁prescription ▁* ▁@ param ▁ovID ▁the ▁id ▁for ▁the ▁office ▁visit ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁private ▁void ▁checkAdd Prescription ( EditOfficeVisit Form ▁form , ▁long ▁ovID ) ▁throw s ▁DBException , ▁ FormValidat ionException ▁{ ▁if ▁( form . getA ddMedID () ▁ != ▁null ▁&& ▁! " " . equals ( form . getA ddMedID ())) ▁{ ▁new ▁EditOfficeVisit Validator ( true ) . validate ( form ); ▁ PrescriptionBean ▁pres ▁= ▁new ▁ PrescriptionBean (); ▁pres . set Dosage ( Integer . value Of ( form . get Dosage ()) ); ▁pres . setEndDate Str ( form . getEndDate ()); ▁pres . setStartDate Str ( form . getStartDate ()); ▁pres . set Instructions ( form . get Instructions ()); ▁MedicationBean ▁med ▁= ▁new ▁MedicationBean (); ▁med . set NDCode ( form . getA ddMedID ()); ▁pres . set Medication ( med ); ▁pres . set VisitID ( ovID ); ▁transDAO . log Transaction ( TransactionType . ADD _ PRESCRIPTION , ▁loggedInMID , ▁pid , ▁" EditOff ceVisit ▁- ▁Add ▁prescription ▁- ▁" ▁+ ▁pres . get Medication (). getNDCode ()); ▁ovDAO . add Prescription ( pres ); ▁} ▁} ▁/** ▁* ▁Updates ▁the ▁office ▁visit . ▁* ▁* ▁@ param ▁form ▁form ▁with ▁all ▁the ▁information ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁private ▁void ▁update Ov ( EditOfficeVisit Form ▁form ) ▁throw s ▁DBException , ▁ FormValidat ionException ▁{ ▁validator . validate ( form ); ▁OfficeVisitBean ▁ov ▁= ▁new ▁OfficeVisitBean ( ovID ); ▁ov . set Notes ( form . get Notes ()); ▁ov . setVisitDate Str ( form . getVisitDate ()); ▁ov . setHcp ID ( Long . value Of ( form . getHcp ID ()) ); ▁ov . set PatientID ( Long . value Of ( form . getPatientID ()) ); ▁ov . set HospitalID ( form . get HospitalID ()); ▁transDAO . log Transaction ( TransactionType . UPDATE _ OFF ICE _ VISIT , ▁loggedInMID , ▁pid , ▁" EditOff ceVisit ▁- ▁Update ▁office ▁visit "); ▁ovDAO . update ( ov ); ▁} ▁/** ▁* ▁Add s ▁a ▁diagnosis ▁or ▁a ▁procedure ▁to ▁an ▁office ▁visit ▁* ▁* ▁@ param ▁action ▁the ▁type ▁of ▁action ▁to ▁add ▁* ▁@ param ▁code ▁the ▁CPT ▁code ▁of ▁the ▁action ▁* ▁@ param ▁visitID ▁the ▁office ▁visit ▁to ▁add ▁the ▁action ▁to ▁* ▁@ param ▁dateOfDeath ▁the ▁date ▁of ▁death , ▁if ▁needed ▁* ▁@ return ▁true ▁if ▁the ▁operation ▁completed ; ▁false ▁if ▁the ▁code ▁was ▁null ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁private ▁boolean ▁checkAdd SubAction ( OVSubAction ▁action , ▁String ▁code , ▁long ▁visitID , ▁String ▁dateOfDeath ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁if ▁( code ▁== ▁null ▁|| ▁"" . equals ( code )) ▁{ ▁return ▁false ; ▁} ▁else ▁{ ▁switch ▁( action ) ▁{ ▁case ▁ADD _ DIAGNOSIS : ▁ovDAO . add Diagnosis ToOfficeVisit ( Double . value Of ( code ) , ▁visitID ); ▁break ; ▁case ▁ADD _ IMMUNIZATION : ▁case ▁ADD _ PROCEDURE : ▁ovDAO . add Procedure ToOfficeVisit ( code , ▁visitID , ▁" "); ▁break ; ▁case ▁ADD _ LAB _ PROCEDURE : ▁ovDAO . add LabProcedure ToOfficeVisit ( code , ▁visitID , ▁pid ); ▁break ; ▁default : ▁return ▁false ; ▁} ▁return ▁true ; ▁} ▁} ▁private ▁boolean ▁checkAdd SubAction ( OVSubAction ▁action , ▁String ▁code , ▁long ▁visitID , ▁String ▁dateOfDeath , ▁String ▁hcpid ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁if ▁( code ▁== ▁null ▁|| ▁"" . equals ( code )) ▁{ ▁return ▁false ; ▁} ▁else ▁{ ▁ovDAO . add Procedure ToOfficeVisit ( code , ▁visitID , ▁hcpid ); ▁return ▁true ; ▁} ▁} ▁/** ▁* ▁Remove s ▁an ▁action ▁from ▁an ▁office ▁visit ▁* ▁* ▁@ param ▁action ▁type ▁of ▁action ▁to ▁remove ▁* ▁@ param ▁input ▁id ▁for ▁the ▁action ▁to ▁remove ▁* ▁@ return ▁true ▁if ▁the ▁operation ▁completed ; ▁false ▁if ▁the ▁code ▁was ▁null ▁* ▁@ throw s ▁DBException ▁*/ ▁private ▁boolean ▁check Remove SubAction ( OVSubAction ▁action , ▁String ▁input ) ▁throw s ▁DBException ▁{ ▁if ▁( input ▁== ▁null ▁|| ▁"" . equals ( input )) ▁return ▁false ; ▁long ▁ removeID ; ▁try ▁{ ▁ removeID ▁= ▁Long . value Of ( input ); ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁e . print Stack T race (); ▁return ▁false ; ▁} ▁switch ▁( action ) ▁{ ▁case ▁ REM OVE _ DIAGNOSIS : ▁ovDAO . remove Diagnosis From OfficeVisit ( removeID ); ▁break ; ▁case ▁ REM OVE _ IMMUNIZATION : ▁case ▁ REM OVE _ PROCEDURE : ▁ovDAO . remove Procedure From OfficeVisit ( removeID ); ▁break ; ▁case ▁ REM OVE _ MEDICATION : ▁ovDAO . remove Prescription ( removeID ); ▁break ; ▁case ▁ REM OVE _ LAB _ PROCEDURE : ▁ovDAO . remove LabProcedure From OfficeVisit ( removeID ); ▁break ; ▁} ▁return ▁true ; ▁} ▁}