▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . Date U ti l ; ▁import ▁edu . nc su . cs c . itrust . beans . VisitFlag ; ▁import ▁edu . nc su . cs c . itrust . beans . forms . VisitReminder ReturnForm ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . VisitReminder ReturnFormLoader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁/** ▁* ▁Used ▁for ▁queries ▁relat ed ▁to ▁patient ▁reminders ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁VisitReminders DAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁VisitReminders DAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁patients ▁associate d ▁with ▁a ▁given ▁HCP . ▁* ▁* ▁@ param ▁hcpid ▁The ▁MID ▁of ▁the ▁HCP ▁in ▁question . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁Visit ▁Reminder ▁Form s . ▁*/ ▁public ▁List < VisitReminder ReturnForm > ▁getPatient s ( long ▁hcpid ) ▁throw s ▁DBException ▁{ ▁VisitReminder ReturnForm ▁temp ; ▁VisitReminder ReturnFormLoader ▁loader ▁= ▁new ▁VisitReminder ReturnFormLoader (); ▁List < VisitReminder ReturnForm > ▁patients ▁= ▁new ▁ArrayList < VisitReminder ReturnForm > (); ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁ResultSet ▁rs ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement ( ▁" SEL ECT ▁DISTINCT " ▁+ ▁" ▁? ▁as ▁hid , ▁" ▁+ ▁" ▁dhcp . patientid , ▁" ▁+ ▁" ▁p . lastName , ▁" ▁+ ▁" ▁p . firstName , ▁" ▁+ ▁" ▁p . phone 1, ▁" ▁+ ▁" ▁p . phone 2 , ▁" ▁+ ▁" ▁p . phone 3 ▁" ▁+ ▁" ▁FROM ▁" ▁+ ▁" ▁Patients ▁p , ▁" ▁+ ▁" ▁declaredhcp ▁dhcp ▁" ▁+ ▁" ▁ WH ERE ▁" ▁+ ▁" ▁dhcp . hcpid ▁= ▁? ▁" ▁+ ▁" ▁AND ▁" ▁+ ▁" ▁p . MID ▁= ▁dhcp . patientid ▁" ▁+ ▁" ▁AND ▁" ▁+ ▁" ▁p . date of death ▁is ▁null ▁" ▁+ ▁" ▁AND ▁" ▁+ ▁" ▁p . dateofbirth ▁> ▁DATE _ SUB ( CUR DATE (), ▁ INTERVAL ▁19 ▁YEAR ) ▁" ▁ ); ▁ps . s etLong ( 1, ▁hcpid ); ▁ps . s etLong (2, ▁hcpid ); ▁rs ▁= ▁ps . execute Query (); ▁while ▁( rs . next ()) ▁{ ▁temp ▁= ▁loader . loadSingle ( rs ); ▁patients . add ( temp ); ▁} ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁return ▁patients ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁patients ▁who ▁need ▁a ▁visit ▁for ▁this ▁HCP . ▁This ▁means : ▁* ▁* ▁A li ve ▁patient , ▁no ▁office ▁visit ▁for ▁> ▁1 ▁ y r , ▁diagnosed : ▁- ▁Diabetes : ▁250 . xx ▁- ▁A sthma : ▁493 . xx ▁- ▁* ▁ Ci rc ul a tory - System ▁Disease : ▁[ ▁390.0 0 ▁ , ▁459.99 ▁ ] ▁* ▁* ▁@ param ▁hcpid ▁The ▁MID ▁of ▁the ▁HCP ▁in ▁question . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁visit ▁reminders . ▁*/ ▁public ▁List < VisitReminder ReturnForm > ▁getDiagnose d Visit Needers ( long ▁hcpid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁ResultSet ▁rs ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement ( ▁" SEL ECT ▁DISTINCT " ▁+ ▁" ▁? ▁as ▁hid , ▁" ▁+ ▁" ▁ov . PatientID , ▁" ▁+ ▁" ▁p . lastName , ▁" ▁+ ▁" ▁p . firstName , ▁" ▁+ ▁" ▁p . phone 1, ▁" ▁+ ▁" ▁p . phone 2 , ▁" ▁+ ▁" ▁p . phone 3, ▁" ▁+ ▁" ▁ovd . ICDCode , ▁" ▁+ ▁" ▁ov . visitDate ▁" ▁+ ▁" ▁FROM ▁" ▁+ ▁" ▁Patients ▁p , ▁" ▁+ ▁" ▁OfficeVisits ▁ov , ▁" ▁+ ▁" ▁OVDiagnosis ▁ovd ▁" ▁+ ▁" ▁ WH ERE ▁" ▁+ ▁" ▁p . MID ▁= ▁ov . PatientID ▁" ▁+ ▁" ▁AND ▁" ▁+ ▁" ▁ov . ID ▁= ▁ovd . VisitID ▁" ▁+ ▁" ▁AND ▁" ▁+ ▁" ▁p . DateOfDeath ▁is ▁null ▁" ▁+ ▁" ▁AND ▁" ▁+ ▁" ▁ov . visitDate ▁< = ▁DATE _ SUB ( CUR DATE (), ▁ INTERVAL ▁1 ▁YEAR ) ▁" ▁+ ▁" ▁AND ▁" ▁+ ▁" ▁( ▁" ▁+ ▁" ▁ovd . ICDCode ▁BE TW EEN ▁? ▁AND ▁? ▁" ▁// 250 . 0 0 ▁AND ▁250 . 99 ▁+ ▁" ▁OR ▁" ▁+ ▁" ▁ovd . ICDCode ▁BE TW EEN ▁? ▁AND ▁? ▁" ▁// 39 0 . 0 0 ▁AND ▁459.99 ▁+ ▁" ▁OR ▁" ▁+ ▁" ▁ovd . ICDCode ▁BE TW EEN ▁? ▁AND ▁? ▁" ▁// 493.0 0 ▁AND ▁493 . 99 ▁+ ▁" ▁ ) " ▁+ ▁" GROUP ▁ BY ▁" ▁+ ▁" ▁p . MID ▁" ▁+ ▁" OR DER ▁ BY ▁" ▁+ ▁" ▁p . lastName , ▁p . firstName , ▁ov . PatientID ▁" ); ▁ps . s etLong ( 1, ▁hcpid ); ▁ps . set Float (2, ▁250.0 f ); ▁ps . set Float ( 3, ▁250 . 99 f ); ▁ps . set Float ( 4, ▁390.0 f ); ▁ps . set Float (5, ▁459.99 f ); ▁ps . set Float (6, ▁ 493.0 f ); ▁ps . set Float ( 7, ▁493 . 99 f ); ▁rs ▁= ▁ps . execute Query (); ▁List < VisitReminder ReturnForm > ▁patients ▁= ▁new ▁ArrayList < VisitReminder ReturnForm > (); ▁VisitReminder ReturnForm ▁temp ; ▁VisitReminder ReturnFormLoader ▁loader ▁= ▁new ▁VisitReminder ReturnFormLoader (); ▁while ▁( rs . next ()) ▁{ ▁temp ▁= ▁loader . loadSingle ( rs ); ▁temp . add VisitFlag ( new ▁VisitFlag ( VisitFlag . DIAGNOSED , ▁rs . get String ( 8)) ); ▁temp . add VisitFlag ( new ▁VisitFlag ( VisitFlag . LAST _ VISIT , ▁rs . get String ( 9)) ); ▁patients . add ( temp ); ▁} ▁return ▁patients ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁old ▁pe ople ▁who ▁need ▁a ▁ flu ▁shot ▁* ▁* ▁ CURRENT ▁S P EC : ▁A li ve ▁patient , ▁over ▁50 ▁years ▁old , ▁no ▁ flu ▁shot ▁- ▁9065 6, ▁9065 8, ▁90660 ▁a ) ▁dur ing ▁the ▁months ▁* ▁0 9 ▁- ▁12 ▁of ▁current ▁calendar ▁year ▁if ▁in ▁0 9 ▁- ▁12 ▁b ) ▁dur ing ▁the ▁months ▁0 9 ▁- ▁12 ▁of ▁last ▁calendar ▁year ▁if ▁* ▁not ▁in ▁0 9 ▁- ▁12 ▁* ▁* ▁Determine s ▁current ▁date ▁and ▁calls ▁one ▁of ▁two ▁private ▁methods ▁these ▁methods ▁return ▁different ▁sets ▁of ▁* ▁pe ople ▁- ▁a : ▁pe ople ▁who ▁have n ' t ▁had ▁a ▁ flu ▁shot ▁yet ▁this ▁year ▁and ▁need ▁one ▁- ▁b : ▁pe ople ▁who ▁mis s ed ▁last ▁* ▁year ' s ▁ flu ▁shot ▁and ▁need ▁a ▁check - up ▁* ▁* ▁@ return ▁A ▁java . util . List ▁of ▁Visit ▁Reminder ▁Form s . ▁* ▁@ param ▁hcpid ▁The ▁MID ▁of ▁the ▁HCP ▁in ▁question . ▁* ▁@ param ▁patient Birth day ▁The ▁ birth day ▁of ▁the ▁patient ▁in ▁question . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < VisitReminder ReturnForm > ▁get Flu Shot Del in que nt s ( long ▁hcpid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁ResultSet ▁rs ▁= ▁null ; ▁/* ▁* ▁Fal l ▁200 7 ▁ Bu g ▁ Fi x : ▁Use ▁the ▁correct ▁range ▁for ▁a ▁zero - based ▁calendar ▁( eg ▁ January ▁is ▁0) ▁* ▁*/ ▁boolean ▁thisYear ▁= ▁DateUtil . current ly InMonthRange ( 8, ▁11 ); ▁String ▁flag Type ▁= ▁thisYear ▁? ▁VisitFlag . MISSING _ MEDICATION ▁: ▁VisitFlag . MI SSED _ MEDICATION ; ▁java . sql . Date ▁ september ▁= ▁new ▁java . sql . Date ( 0 l ) , ▁december ▁= ▁new ▁java . sql . Date ( 0 l ); ▁DateUtil . set SQL Month R an ge ( september , ▁ 8, ▁thisYear ▁? ▁0 ▁: ▁1, ▁december , ▁11 , ▁thisYear ▁? ▁0 ▁: ▁1); ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁DISTINCT ▁" ▁+ ▁" ? ▁as ▁hid , ▁ov . patientid , ▁p . lastname , ▁p . firstname , ▁" ▁+ ▁" p . phone 1, ▁p . phone 2 , ▁p . phone 3 ▁" ▁+ ▁" FROM ▁OfficeVisits ▁ov , ▁Patients ▁p ▁" ▁+ ▁" WH ERE ▁ov . patientid = p . mid ▁" ▁+ ▁" AND ▁p . date of death ▁IS ▁NULL ▁" ▁+ ▁" AND ▁p . dateofbirth ▁< ▁DATE _ SUB ( CUR DATE (), ▁ INTERVAL ▁50 ▁YEAR ) ▁" ▁+ ▁" AND ▁patient id ▁NOT ▁IN ▁" ▁+ ▁" ( SEL ECT ▁patient id ▁FROM ▁OfficeVisits ▁ov , ▁OVMedication ▁ om ▁" ▁+ ▁" WH ERE ▁ov . id = om . visitid ▁" ▁+ ▁" AND ▁NDCode ▁IN ▁( 90 6 56 , ▁9065 8, ▁90660 ) ▁" ▁+ ▁" AND ▁( ( StartDate ▁BE TW EEN ▁? ▁AND ▁? ) ▁" ▁+ ▁" OR ▁( EndDate ▁BE TW EEN ▁? ▁AND ▁? ))) ▁" ▁+ ▁" OR DER ▁ BY ▁ lastname , ▁ firstname , ▁ov . patientid "); ▁ps . s etLong ( 1, ▁hcpid ); ▁ps . setDate (2, ▁ september ); ▁ps . setDate ( 3, ▁december ); ▁ps . setDate ( 4, ▁ september ); ▁ps . setDate (5, ▁december ); ▁rs ▁= ▁ps . execute Query (); ▁List < VisitReminder ReturnForm > ▁patients ▁= ▁new ▁ArrayList < VisitReminder ReturnForm > (); ▁VisitReminder ReturnForm ▁temp ; ▁VisitReminder ReturnFormLoader ▁loader ▁= ▁new ▁VisitReminder ReturnFormLoader (); ▁while ▁( rs . next ()) ▁{ ▁temp ▁= ▁loader . loadSingle ( rs ); ▁temp . add VisitFlag ( new ▁VisitFlag ( flag Type , ▁" Flu ▁ Shot ")); ▁patients . add ( temp ); ▁} ▁return ▁patients ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}