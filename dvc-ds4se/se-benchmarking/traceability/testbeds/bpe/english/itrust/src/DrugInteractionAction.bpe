▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . beans . DrugInteraction Bean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . DrugInteraction DAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . validate . DrugInteraction Validator ; ▁/** ▁* ▁Used ▁by ▁Edit DrugInteraction . jsp ▁to ▁edit ▁and ▁get ▁information ▁about ▁drug ▁interactions . ▁* ▁*/ ▁public ▁class ▁DrugInteraction Action ▁{ ▁private ▁DrugInteraction DAO ▁ drugDAO ; ▁private ▁TransactionDAO ▁ tr an DAO ; ▁private ▁DrugInteraction Validator ▁validator ; ▁long ▁loggedInMID ; ▁/** ▁* ▁Set s ▁up ▁defaults ▁* ▁* ▁@ param ▁factory ▁The ▁DAO ▁factory ▁to ▁be ▁used ▁for ▁generat ing ▁the ▁DAOs ▁for ▁this ▁action . ▁* ▁*/ ▁public ▁DrugInteraction Action ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁this . drugDAO ▁= ▁factory . get DrugInteraction DAO (); ▁this . tr an DAO ▁= ▁factory . get TransactionDAO (); ▁this . validator ▁= ▁new ▁DrugInteraction Validator (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁} ▁/** ▁* ▁Method ▁to ▁report ▁an ▁interaction ▁* ▁@ param ▁firstDrug ▁* ▁@ param ▁secondDrug ▁* ▁@ param ▁description ▁* ▁@ return ▁*/ ▁public ▁String ▁report Interaction ( String ▁firstDrug , ▁String ▁secondDrug , ▁String ▁description ) ▁throw s ▁iTrustException , FormValidat ionException { ▁if ▁( firstDrug . equals ( secondDrug )){ ▁return ▁" Interactions ▁can ▁only ▁be ▁recorded ▁between ▁two ▁different ▁drugs "; ▁} ▁DrugInteraction Bean ▁drugInt ▁= ▁new ▁DrugInteraction Bean (); ▁drugInt . set FirstDrug ( firstDrug ); ▁drugInt . set SecondDrug ( secondDrug ); ▁drugInt . set Description ( description ); ▁try ▁{ ▁validator . validate ( drug Int ); ▁if ▁( drugDAO . report Interaction ( firstDrug , secondDrug , description )){ ▁ tr an DAO . log Transaction ( TransactionType . DRUG _ INTERACTION , ▁loggedInMID ); ▁return ▁" Interaction ▁recorded ▁successfully "; ▁} ▁else ▁{ ▁return ▁" Interaction ▁could ▁not ▁be ▁added "; ▁} ▁} ▁catch ▁( DBException ▁e ){ ▁e . print Stack T race (); ▁return ▁e . getMessage (); ▁} ▁} ▁/** ▁* ▁Method ▁to ▁delete ▁an ▁interaction ▁* ▁@ param ▁firstDrug ▁* ▁@ param ▁secondDrug ▁* ▁@ return ▁*/ ▁public ▁String ▁delete Interaction ( String ▁firstDrug , String ▁secondDrug ) ▁throw s ▁iTrustException , ▁ FormValidat ionException { ▁DrugInteraction Bean ▁drugInt ▁= ▁new ▁DrugInteraction Bean (); ▁drugInt . set FirstDrug ( firstDrug ); ▁drugInt . set SecondDrug ( secondDrug ); ▁drugInt . set Description (" blank "); ▁try ▁{ ▁validator . validate ( drug Int ); ▁if ▁( drugDAO . delete Interaction ( firstDrug , secondDrug )){ ▁ tr an DAO . log Transaction ( TransactionType . DRUG _ INTERACTION , ▁loggedInMID ); ▁return ▁" Interaction ▁delete d ▁successfully "; ▁} ▁else ▁{ ▁return ▁" Interaction ▁could ▁not ▁be ▁delete d "; ▁} ▁} ▁catch ▁( DBException ▁e ){ ▁e . print Stack T race (); ▁throw ▁new ▁iTrustException ( e . getMessage ()); ▁} ▁} ▁/** ▁* ▁Method ▁to ▁return ▁a ▁list ▁of ▁drug ▁interactions ▁for ▁a ▁given ▁drug ▁* ▁@ param ▁drugCode ▁- ▁The ▁ND ▁Code ▁of ▁the ▁drug ▁* ▁@ return ▁*/ ▁public ▁List < DrugInteraction Bean > ▁get Interactions ( String ▁drugCode ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁return ▁ drugDAO . get Interactions ( drug Code ); ▁} ▁catch ▁( DBException ▁e ){ ▁throw ▁new ▁iTrustException ( e . getMessage ()); ▁} ▁} ▁}