▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . util . Date ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . sql . Timestamp ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . RemoteMonitoring DataBean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . RemoteMonitoring DataBeanLoader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Used ▁for ▁the ▁keep ing ▁ tr ack ▁of ▁remote ▁monitoring ▁data . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁*/ ▁public ▁class ▁ RemoteMonitoring DAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁ RemoteMonitoring DataBeanLoader ▁loader ▁= ▁new ▁ RemoteMonitoring DataBeanLoader (); ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁ RemoteMonitoring DAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Returns ▁patient ▁data ▁for ▁a ▁given ▁HCP ▁* ▁* ▁@ return ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < RemoteMonitoring DataBean > ▁getPatient sData ( long ▁loggedInMID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁ RemoteMonitoring List s ▁ WH ERE ▁HCPMID =? ▁OR DER ▁ BY ▁PatientMID "); ▁ps . s etLong ( 1, ▁loggedInMID ); ▁ResultSet ▁ patientRS ▁= ▁ps . execute Query (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁ RemoteMonitoring Data ▁ WH ERE ▁time log g ed ▁>= ▁ CURRENT _ DATE ▁OR DER ▁ BY ▁PatientID , ▁timeLogged ▁DESC "); ▁ResultSet ▁data RS ▁= ▁ps . execute Query (); ▁List < String > ▁patient List ▁= ▁new ▁ArrayList < String > (); ▁while ( patientRS . next ()) ▁{ ▁patient List . add ( patientRS . getLong (" PatientMID ") ▁+ ▁" "); ▁} ▁List < RemoteMonitoring DataBean > ▁dataList ▁= ▁loader . load List ( data RS ); ▁int ▁i , ▁j ; ▁// Go ▁through ▁all ▁patients ▁and ▁remove ▁any ▁that ▁are n ' t ▁ monitor ed ▁by ▁this ▁HCP ▁for ( i ▁= ▁0; ▁i ▁< ▁dataList . size (); ▁i ++) ▁{ ▁if (! patientList . contains ( data List . get ( i ) . get PatientMID () ▁+ ▁" ")) ▁{ ▁dataList . remove ( i ); ▁i -- ; ▁} ▁} ▁// Add ▁values ▁in ▁patient ▁list ▁with ▁no ▁data ▁for ▁today ▁to ▁list . ▁boolean ▁ itsThere ; ▁for ( i ▁= ▁0; ▁i ▁< ▁patient List . size (); ▁i ++) ▁{ ▁ itsThere ▁= ▁false ; ▁for ( j ▁= ▁0; ▁j ▁< ▁dataList . size (); ▁j ++) ▁{ ▁if ( ( data List . get ( j ) . get PatientMID () ▁+ ▁" "). equals ( patientList . get ( i ))) ▁{ ▁ itsThere ▁= ▁true ; ▁break ; ▁} ▁} ▁if (! itsThere ) ▁{ ▁dataList . add ( new ▁ RemoteMonitoring DataBean ( Long . parse Long ( patientList . get ( i ))) ); ▁} ▁} ▁return ▁dataList ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁public ▁List < RemoteMonitoring DataBean > ▁get PatientData By Date ( long ▁patientMID , ▁Date ▁lower , ▁Date ▁upper ) ▁throw s ▁DBException { ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try { ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁remote monitor ing data ▁ WH ERE ▁PatientID =? ▁AND ▁timeLogged ▁>= ▁? ▁AND ▁timeLogged ▁< = ▁? ▁OR DER ▁ BY ▁timeLogged ▁DESC "); ▁ps . s etLong ( 1, ▁patientMID ); ▁ps . set Timestamp (2, ▁new ▁Timestamp ( lower . getTime ()) ); ▁// ▁add ▁1 ▁day ' s ▁wor th ▁to ▁include ▁the ▁upper ▁ps . set Timestamp ( 3, ▁new ▁Timestamp ( upper . getTime () ▁+ ▁1000 L ▁* ▁60 L ▁* ▁60 ▁* ▁24 L )); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁List < RemoteMonitoring DataBean > ▁dataList ▁= ▁loader . load List ( rs ); ▁return ▁dataList ; ▁} catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Store ▁data ▁for ▁a ▁given ▁patient ▁in ▁the ▁ RemoteMonitoring Data ▁table ▁* ▁* ▁@ param ▁patientMID ▁The ▁MID ▁of ▁the ▁patient ▁* ▁@ param ▁systolic BloodPressure ▁The ▁systolic ▁blood ▁pressure ▁of ▁the ▁patient ▁* ▁@ param ▁diastolic BloodPressure ▁The ▁diastolic ▁blood ▁pressure ▁of ▁the ▁patient ▁* ▁@ param ▁glucoseLevel ▁The ▁glucose ▁level ▁of ▁the ▁patient ▁* ▁@ param ▁reporterRole ▁The ▁role ▁of ▁the ▁person ▁that ▁reported ▁these ▁monitoring ▁stats ▁* ▁@ param ▁reporterMID ▁The ▁MID ▁of ▁the ▁person ▁that ▁reported ▁these ▁monitoring ▁stats ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁store PatientData ( long ▁patientMID , ▁int ▁systolic BloodPressure , ▁int ▁diastolic BloodPressure , ▁int ▁glucoseLevel , ▁String ▁reporterRole , ▁long ▁reporterMID ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁if ( get Number OfDa ily E ntries ( patientMID ) ▁>= ▁10 ) ▁throw ▁new ▁iTrustException (" Patient ▁entries ▁for ▁today ▁cannot ▁exceed ▁10 . "); ▁if ( reporterRole . equals (" patient ▁representative ")) ▁validateP R ( reporterMID , ▁patientMID ); ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁ RemoteMonitoring Data ( PatientID , ▁systolic BloodPressure , ▁" ▁+ ▁" diastolic BloodPressure , ▁glucoseLevel , ▁ ReporterRole , ▁ ReporterID ) ▁VALUES (?,?,?,?,?,? )"); ▁ps . s etLong ( 1, ▁patientMID ); ▁ps . s etLong (2, ▁systolic BloodPressure ); ▁ps . set Int ( 3, ▁diastolic BloodPressure ); ▁ps . set Int ( 4, ▁glucoseLevel ); ▁ps . set String (5, ▁reporterRole ); ▁ps . s etLong (6, ▁reporterMID ); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Store ▁data ▁for ▁a ▁given ▁patient ▁in ▁the ▁ RemoteMonitoring Data ▁table ▁* ▁* ▁@ param ▁patientMID ▁The ▁MID ▁of ▁the ▁patient ▁* ▁@ param ▁systolic BloodPressure ▁The ▁systolic ▁blood ▁pressure ▁of ▁the ▁patient ▁* ▁@ param ▁diastolic BloodPressure ▁The ▁diastolic ▁blood ▁pressure ▁of ▁the ▁patient ▁* ▁@ param ▁glucoseLevel ▁The ▁glucose ▁level ▁of ▁the ▁patient ▁* ▁@ param ▁reporterRole ▁The ▁role ▁of ▁the ▁person ▁that ▁reported ▁these ▁monitoring ▁stats ▁* ▁@ param ▁reporterMID ▁The ▁MID ▁of ▁the ▁person ▁that ▁reported ▁these ▁monitoring ▁stats ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁store PatientData ( long ▁patientMID , ▁int ▁glucoseLevel , ▁String ▁reporterRole , ▁long ▁reporterMID ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁if ( get Number OfDa ily E ntries ( patientMID ) ▁>= ▁10 ) ▁throw ▁new ▁iTrustException (" Patient ▁entries ▁for ▁today ▁cannot ▁exceed ▁10 . "); ▁if ( reporterRole . equals (" patient ▁representative ")) ▁validateP R ( reporterMID , ▁patientMID ); ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁ RemoteMonitoring Data ( PatientID , ▁glucoseLevel , ▁ ReporterRole , ▁ ReporterID ) ▁VALUES (?,?,?,? )"); ▁ps . s etLong ( 1, ▁patientMID ); ▁ps . set Int (2, ▁glucoseLevel ); ▁ps . set String ( 3, ▁reporterRole ); ▁ps . s etLong ( 4, ▁reporterMID ); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Store ▁data ▁for ▁a ▁given ▁patient ▁in ▁the ▁ RemoteMonitoring Data ▁table ▁* ▁* ▁@ param ▁patientMID ▁The ▁MID ▁of ▁the ▁patient ▁* ▁@ param ▁systolic BloodPressure ▁The ▁systolic ▁blood ▁pressure ▁of ▁the ▁patient ▁* ▁@ param ▁diastolic BloodPressure ▁The ▁diastolic ▁blood ▁pressure ▁of ▁the ▁patient ▁* ▁@ param ▁glucoseLevel ▁The ▁glucose ▁level ▁of ▁the ▁patient ▁* ▁@ param ▁reporterRole ▁The ▁role ▁of ▁the ▁person ▁that ▁reported ▁these ▁monitoring ▁stats ▁* ▁@ param ▁reporterMID ▁The ▁MID ▁of ▁the ▁person ▁that ▁reported ▁these ▁monitoring ▁stats ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁store PatientData ( long ▁patientMID , ▁int ▁systolic BloodPressure , ▁int ▁diastolic BloodPressure , ▁String ▁reporterRole , ▁long ▁reporterMID ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁if ( get Number OfDa ily E ntries ( patientMID ) ▁>= ▁10 ) ▁throw ▁new ▁iTrustException (" Patient ▁entries ▁for ▁today ▁cannot ▁exceed ▁10 . "); ▁if ( reporterRole . equals (" patient ▁representative ")) ▁validateP R ( reporterMID , ▁patientMID ); ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁ RemoteMonitoring Data ( PatientID , ▁systolic BloodPressure , ▁" ▁+ ▁" diastolic BloodPressure , ▁ ReporterRole , ▁ ReporterID ) ▁VALUES (?,?,?,?,? )"); ▁ps . s etLong ( 1, ▁patientMID ); ▁ps . s etLong (2, ▁systolic BloodPressure ); ▁ps . set Int ( 3, ▁diastolic BloodPressure ); ▁ps . set String ( 4, ▁reporterRole ); ▁ps . s etLong (5, ▁reporterMID ); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Private ▁method ▁to ▁get ▁the ▁number ▁of ▁entries ▁for ▁a ▁certain ▁patientID ▁for ▁today . ▁* ▁@ param ▁patientMID ▁* ▁@ return ▁the ▁number ▁of ▁entries ▁* ▁@ throw s ▁DBException ▁*/ ▁private ▁int ▁get Number OfDa ily E ntries ( long ▁patientMID ) ▁throw s ▁DBException { ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁ RemoteMonitoring Data ▁ WH ERE ▁PatientID =? ▁AND ▁DATE ( timeLogged ) = CURRENT _ DATE "); ▁ps . s etLong ( 1, ▁patientMID ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁List < RemoteMonitoring DataBean > ▁patients ▁= ▁loader . load List ( rs ); ▁return ▁patients . size (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁public ▁void ▁validateP R ( long ▁representative MID , ▁long ▁patientMID ) ▁throw s ▁iTrustException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁Representatives ▁ WH ERE ▁ RepresenterMID =? ▁AND ▁ RepresenteeMID =?" ); ▁ps . s etLong ( 1, ▁representative MID ); ▁ps . s etLong (2, ▁patientMID ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁if (! rs . next ()) ▁// no ▁rows ▁throw ▁new ▁iTrustException (" Represent er ▁is ▁not ▁valid ▁for ▁patient ▁" ▁+ ▁patientMID ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Add ▁a ▁patient ▁to ▁the ▁list ▁of ▁HCPs ' ▁monitoring ▁list s ▁of ▁Patients ▁* ▁* ▁@ param ▁patientMID ▁The ▁MID ▁of ▁the ▁patient ▁* ▁@ param ▁HCPMID ▁The ▁MID ▁of ▁the ▁HCP ▁* ▁@ return ▁true ▁if ▁added ▁successfully , ▁false ▁if ▁already ▁in ▁list ▁*/ ▁public ▁boolean ▁ addPatient ToList ( long ▁patientMID , ▁long ▁HCPMID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁ RemoteMonitoring List s ▁ WH ERE ▁PatientMID ▁= ▁? ▁AND ▁HCPMID ▁= ▁? "); ▁ps . s etLong ( 1, ▁patientMID ); ▁ps . s etLong (2, ▁HCPMID ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁if ( rs . next ()) ▁return ▁false ; ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁ RemoteMonitoring List s ( PatientMID , ▁HCPMID ) ▁VALUES (?,? )"); ▁ps . s etLong ( 1, ▁patientMID ); ▁ps . s etLong (2, ▁HCPMID ); ▁ps . execute Update (); ▁return ▁true ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Remove ▁a ▁patient ▁from ▁the ▁list ▁of ▁HCPs ' ▁monitoring ▁list s ▁of ▁Patients ▁* ▁* ▁@ param ▁patientMID ▁The ▁MID ▁of ▁the ▁patient ▁* ▁@ param ▁HCPMID ▁The ▁MID ▁of ▁the ▁HCP ▁* ▁@ return ▁true ▁if ▁removed ▁successfully , ▁false ▁if ▁not ▁in ▁list ▁*/ ▁public ▁boolean ▁remove Patient From List ( long ▁patientMID , ▁long ▁HCPMID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁/* ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁ RemoteMonitoring List ▁ WH ERE ▁PatientMID ▁= ▁? ▁AND ▁HCPMID ▁= ▁? "); ▁ps . s etLong ( 1, ▁patientMID ); ▁ps . s etLong (2, ▁HCPMID ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁if (! rs . next ()) ▁return ▁false ; */ ▁ps ▁= ▁conn . prepare Statement (" DE LETE ▁FROM ▁ RemoteMonitoring List s ▁ WH ERE ▁PatientMID ▁= ▁? ▁AND ▁HCPMID ▁= ▁? "); ▁ps . s etLong ( 1, ▁patientMID ); ▁ps . s etLong (2, ▁HCPMID ); ▁if ( ps . execute Update () ▁== ▁0) ▁return ▁false ; ▁return ▁true ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}