▁p ackage ▁edu . nc su . cs c . itrust . validate ; ▁import ▁java . text . ParseException ; ▁import ▁java . text . SimpleDateFormat ; ▁import ▁java . util . Date ; ▁import ▁edu . nc su . cs c . itrust . action . EditOfficeVisit Action ; ▁import ▁edu . nc su . cs c . itrust . beans . forms . EditOfficeVisit Form ; ▁import ▁edu . nc su . cs c . itrust . exception . ErrorList ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁/** ▁* ▁Used ▁to ▁validate ▁updating ▁an ▁office ▁visit , ▁by ▁ {@ link ▁EditOfficeVisit Action } ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁EditOfficeVisit Validator ▁extends ▁ BeanValidator < EditOfficeVisit Form > ▁{ ▁private ▁boolean ▁validate Prescription ▁= ▁false ; ▁/** ▁* ▁The ▁default ▁constructor . ▁*/ ▁public ▁EditOfficeVisit Validator () ▁{ ▁} ▁public ▁EditOfficeVisit Validator ( boolean ▁validate Prescription ) ▁{ ▁this . validate Prescription ▁= ▁validate Prescription ; ▁} ▁/** ▁* ▁Perform s ▁the ▁act ▁of ▁validat ing ▁the ▁bean ▁in ▁question , ▁which ▁varie s ▁depend ing ▁on ▁the ▁* ▁type ▁of ▁validator . ▁If ▁the ▁validation ▁does ▁not ▁succeed , ▁a ▁ {@ link ▁ FormValidat ionException } ▁is ▁thrown . ▁* ▁* ▁@ param ▁p ▁A ▁bean ▁of ▁the ▁type ▁to ▁be ▁validated . ▁*/ ▁@ O verride ▁public ▁void ▁validate ( EditOfficeVisit Form ▁form ) ▁throw s ▁ FormValidat ionException ▁{ ▁ErrorList ▁errorList ▁= ▁new ▁ErrorList (); ▁errorList . add If Not Null ( check Format (" HCP ▁ID ", ▁form . getHcp ID (), ▁ ValidationFormat . MID , ▁false )); ▁errorList . add If Not Null ( check Format (" Hospital ▁ID ", ▁form . get HospitalID (), ▁ ValidationFormat . HOSPITAL _ ID , ▁true )); ▁errorList . add If Not Null ( check Format (" Notes ", ▁form . get Notes (), ▁ ValidationFormat . NOTES , ▁true )); ▁errorList . add If Not Null ( check Format (" Patient ▁ID ", ▁form . getPatientID (), ▁ ValidationFormat . MID , ▁false )); ▁errorList . add If Not Null ( check Format (" Visit ▁Date ", ▁form . getVisitDate (), ▁ ValidationFormat . DATE , ▁false )); ▁if ▁( validate Prescription ) ▁{ ▁errorList . add If Not Null ( check Format (" Start ▁Date ", ▁form . getStartDate (), ▁ ValidationFormat . DATE , ▁false )); ▁errorList . add If Not Null ( check Format (" End ▁Date ", ▁form . getEndDate (), ▁ ValidationFormat . DATE , ▁false )); ▁errorList . add If Not Null ( check Format (" Instructions ", ▁form . get Instructions (), ▁ ValidationFormat . NOTES , ▁true )); ▁errorList . add If Not Null ( check Int (" Dosage ", ▁form . get Dosage (), ▁0, ▁999 9 , ▁false )); ▁if ▁( ( check Format (" Start ▁Date ", ▁form . getStartDate (), ▁ ValidationFormat . DATE , ▁false )) ▁== ▁"" ▁&& ▁( check Format (" End ▁Date ", ▁form . getEndDate (), ▁ ValidationFormat . DATE , ▁false )) ▁== ▁" ") ▁{ ▁Date ▁ s d ▁= ▁null ; ▁Date ▁ ed ▁= ▁null ; ▁try ▁{ ▁ s d ▁= ▁new ▁ SimpleDateFormat (" MM / dd / yyyy "). parse ( form . getStartDate ()); ▁ ed ▁= ▁new ▁ SimpleDateFormat (" MM / dd / yyyy "). parse ( form . getEndDate ()); ▁String ▁date Error ▁= ▁null ; ▁if ▁( s d . after ( ed )) ▁{ ▁date Error ▁= ▁" The ▁start ▁date ▁of ▁the ▁prescription ▁must ▁be ▁before ▁the ▁end ▁date . "; ▁} ▁errorList . add If Not Null ( date Error ); ▁} ▁catch ▁( ParseException ▁e ) ▁{ ▁errorList . add If Not Null ( ValidationFormat . DATE . get Description ()); ▁} ▁} ▁} ▁if ▁( errorList . has Errors ()) ▁throw ▁new ▁ FormValidat ionException ( errorList ); ▁} ▁}