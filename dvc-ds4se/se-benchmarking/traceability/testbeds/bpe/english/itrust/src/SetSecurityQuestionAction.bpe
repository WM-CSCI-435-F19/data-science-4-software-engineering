▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁edu . nc su . cs c . itrust . beans . SecurityQA ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AuthDAO ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . validate . SecurityQA Validator ; ▁/** ▁* ▁Handle s ▁setting ▁and ▁retriev ing ▁the ▁security ▁question s / answer s ▁for ▁user s ▁Used ▁by ▁* ▁patient / editM y Demographics . jsp , ▁staff / editM y Demographics . jsp , ▁staff / editPersonnel l . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁Set SecurityQuestion Action ▁{ ▁private ▁AuthDAO ▁authDAO ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁Set s ▁up ▁defaults ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁r LoggedInMID ▁The ▁MID ▁of ▁the ▁user ▁who ▁is ▁setting ▁the ir ▁security ▁question . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁Set SecurityQuestion Action ( DAOFactory ▁factory , ▁long ▁r LoggedInMID ) ▁throw s ▁iTrustException ▁{ ▁this . authDAO ▁= ▁factory . get AuthDAO (); ▁loggedInMID ▁= ▁check MID ( r LoggedInMID ); ▁} ▁/** ▁* ▁Updates ▁information ▁in ▁the ▁database ▁from ▁the ▁information ▁hel d ▁in ▁the ▁SecurityQA ▁bean ▁passed ▁as ▁a ▁ param ▁* ▁* ▁@ param ▁a ▁* ▁ SecurityQuestion Bean ▁that ▁hold s ▁new ▁information ▁* ▁@ throw s ▁Exception ▁*/ ▁public ▁void ▁update Information ( SecurityQA ▁a ) ▁throw s ▁Exception ▁{ ▁SecurityQA Validator ▁ s q a v ▁= ▁new ▁SecurityQA Validator (); ▁ s q a v . validate ( a ); ▁authDAO . set SecurityQuestion Answer ( a . get Question (), ▁a . get Answer (), ▁loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁a ▁SecurityQA ▁bean ▁hold ing ▁the ▁security ▁info ▁for ▁the ▁currently ▁logged ▁in ▁user ▁* ▁* ▁@ return ▁SecurityQA ▁for ▁logged InM id ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁SecurityQA ▁retrieve Information () ▁throw s ▁iTrustException ▁{ ▁SecurityQA ▁toRet ▁= ▁new ▁SecurityQA (); ▁toRet . set Answer ( authDAO . get S ecurityAnswer ( loggedInMID )); ▁toRet . set Question ( authDAO . get SecurityQuestion ( loggedInMID )); ▁return ▁toRet ; ▁} ▁/** ▁* ▁Check s ▁to ▁make ▁sure ▁the ▁MID ▁exists ▁in ▁iTrust ▁* ▁* ▁@ param ▁mid ▁MID ▁to ▁check ▁* ▁@ return ▁return s ▁the ▁MID ▁if ▁the ▁user ▁is ▁valid , ▁otherwise , ▁throw s ▁an ▁exception ▁* ▁@ throw s ▁iTrustException ▁*/ ▁private ▁long ▁check MID ( long ▁mid ) ▁throw s ▁iTrustException ▁{ ▁if ▁(! authDAO . check User E xists ( mid )) ▁throw ▁new ▁iTrustException (" MID ▁" ▁+ ▁mid ▁+ ▁" ▁is ▁not ▁a ▁user ! "); ▁return ▁mid ; ▁} ▁}