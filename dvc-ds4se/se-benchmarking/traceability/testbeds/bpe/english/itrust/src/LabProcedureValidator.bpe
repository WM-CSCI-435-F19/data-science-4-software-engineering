▁p ackage ▁edu . nc su . cs c . itrust . validate ; ▁import ▁edu . nc su . cs c . itrust . beans . LabProcedureBean ; ▁import ▁edu . nc su . cs c . itrust . exception . ErrorList ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁public ▁class ▁LabProcedure Validator ▁{ ▁/** ▁* ▁Perform s ▁the ▁act ▁of ▁validat ing ▁the ▁bean ▁in ▁question , ▁which ▁varie s ▁depend ing ▁on ▁the ▁* ▁type ▁of ▁validator . ▁If ▁the ▁validation ▁does ▁not ▁succeed , ▁a ▁ {@ link ▁ FormValidat ionException } ▁is ▁thrown . ▁* ▁* ▁@ param ▁p ▁A ▁bean ▁of ▁the ▁type ▁to ▁be ▁validated . ▁*/ ▁public ▁void ▁validate ( LabProcedureBean ▁b ) ▁throw s ▁ FormValidat ionException ▁{ ▁ErrorList ▁errorList ▁= ▁new ▁ErrorList (); ▁errorList . add If Not Null ( check Format (" LOINC ", ▁b . getLo inc (), ▁ ValidationFormat . LOINC , ▁false )); ▁errorList . add If Not Null ( check Format (" Commentary ", ▁b . get Commentary (), ▁ ValidationFormat . COMMENTS , ▁true )); ▁errorList . add If Not Null ( check Format (" Results ", ▁b . get Commentary (), ▁ ValidationFormat . COMMENTS , ▁true )); ▁errorList . add If Not Null ( check Format (" Status ", ▁b . get Status (), ▁ ValidationFormat . LAB _ STAT US , ▁false )); ▁errorList . add If Not Null ( check Format (" Rights ", ▁b . get Rights (), ▁ ValidationFormat . LAB _ R IG H T S , ▁false )); ▁if ▁( errorList . has Errors ()) ▁throw ▁new ▁ FormValidat ionException ( errorList ); ▁} ▁ protected ▁String ▁check Format ( String ▁name , ▁String ▁value , ▁ ValidationFormat ▁format , ▁boolean ▁isNullable ) ▁{ ▁String ▁errorMessage ▁= ▁name ▁+ ▁" : ▁" ▁+ ▁format . get Description (); ▁if ▁( value ▁== ▁null ▁|| ▁"" . equals ( value )) ▁return ▁isNullable ▁? ▁"" ▁: ▁errorMessage ; ▁if ▁( format . getR egex (). match er ( value ) . matches ()) ▁return ▁""; ▁else ▁return ▁errorMessage ; ▁} ▁}