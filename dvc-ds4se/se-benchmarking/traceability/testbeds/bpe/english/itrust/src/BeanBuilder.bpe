▁p ackage ▁edu . nc su . cs c . itrust ; ▁import ▁java . beans . Int ro sp e ct or ; ▁import ▁java . beans . Pr opertyDescriptor ; ▁import ▁java . lang . ref le ct . Method ; ▁import ▁java . util . HashMap ; ▁import ▁java . util . Map ; ▁/** ▁* ▁T akes ▁a ▁parameter ▁map ▁and ▁create s ▁a ▁bean ▁from ▁that ▁map ▁of ▁the ▁appropriate ▁type . ▁* ▁@ param ▁< T > ▁The ▁type ▁to ▁be ▁returned ▁from ▁the ▁appropriate ▁parameter ▁map . ▁*/ ▁public ▁class ▁ BeanBuilder < T > ▁{ ▁/** ▁* ▁The ▁code ▁here ▁is ▁not ▁ ob v i ous , ▁but ▁this ▁method ▁should ▁not ▁need ▁re w ri ting ▁un less ▁a ▁bug ▁is ▁found ▁* ▁* ▁@ param ▁map ▁- ▁* ▁typically ▁a ▁request . getParameterMap ; ▁also ▁can ▁be ▁a ▁HashMap ▁* ▁@ param ▁bean ▁- ▁* ▁an ▁instantiat ed ▁bean ▁to ▁be ▁loaded . ▁Load ed ▁bean ▁is ▁returned . ▁* ▁@ return ▁a ▁loaded ▁" bean " ▁* ▁@ throw s ▁Exception ▁- ▁* ▁S ever al ▁exception s ▁are ▁thrown ▁here , ▁so ▁pro mo tion ▁see med ▁fit ting ▁*/ ▁// ▁this ▁warning ▁is ▁only ▁suppress ed ▁because ▁ Map ▁is n ' t ▁parameter ized ▁( old ▁JSP ) ▁@ S uppress Warning s (" un checked ") ▁public ▁T ▁build ( Map ▁map , ▁T ▁bean ) ▁throw s ▁Exception ▁{ ▁// ▁Java Bean s ▁should ▁not ▁have ▁over loaded ▁methods , ▁according ▁to ▁the ir ▁API ▁// ▁( a ▁st u pid ▁limitation ! ) ▁// ▁N ever the less , ▁we ▁should ▁check ▁for ▁it ▁check O ver loaded Method s ( bean ); ▁// ▁Use ▁an ▁int ro sp e ct or ▁to ▁find ▁all ▁of ▁the ▁get X X X ▁or ▁set X X X , ▁we ▁only ▁want ▁// ▁the ▁set X X X ▁P r opertyDescriptor [ ] ▁p r opertyDescriptor s ▁= ▁In tr o sp e ct or . get Bean Info ( bean . getClass ()) ▁ . getPr opertyDescriptor s (); ▁for ▁( Pr opertyDescriptor ▁descriptor ▁: ▁p r opertyDescriptor s ) ▁{ ▁// ▁if ▁object ▁is ▁null , ▁e i ther ▁it ▁was ▁ignored ▁or ▁empty ▁- ▁just ▁go ▁with ▁// ▁bean ' s ▁default ▁String [ ] ▁value ▁= ▁( String [ ] ) ▁map . get ( de script or . getName ()); ▁Method ▁writeMethod ▁= ▁descriptor . get Write Method (); ▁if ▁(!" class " . equals ( de script or . getName ()) ▁&& ▁value ▁ != ▁null ▁&& ▁writeMethod ▁ != ▁null ) ▁{ ▁// ▁descriptor ' s ▁name ▁is ▁the ▁name ▁of ▁your ▁proper ty ; ▁like ▁// ▁firstName ▁// ▁only ▁take ▁the ▁first ▁string ▁try ▁{ ▁// ▁S kip ▁the ▁setter s ▁for ▁enumeration s ▁if ▁( write Method . getParameter Type s () [0 ] . get E num C on st ant s () ▁== ▁null ) ▁writeMethod . i nvoke ( bean , ▁new ▁Object [ ] ▁{ ▁value [0 ] ▁} ); ▁} ▁catch ▁( Illegal A rgumentException ▁e ) ▁{ ▁// ▁Throw ▁a ▁more ▁informati ve ▁exception ▁throw ▁new ▁Illegal A rgumentException ( e . getMessage () ▁+ ▁" ▁with ▁" ▁+ ▁writeMethod . getName () ▁+ ▁" ▁and ▁" ▁+ ▁value [0 ] ); ▁} ▁} ▁} ▁return ▁bean ; ▁} ▁/** ▁* ▁Check s ▁for ▁over loaded ▁methods ▁* ▁* ▁@ param ▁bean ▁item ▁to ▁check ▁*/ ▁private ▁void ▁check O ver loaded Method s ( T ▁bean ) ▁{ ▁Method [ ] ▁methods ▁= ▁bean . getClass (). get De cl ar ed Method s (); ▁HashMap < String , ▁String > ▁name Map ▁= ▁new ▁HashMap < String , ▁String > ( method s . length ); ▁for ▁( Method ▁method ▁: ▁methods ) ▁{ ▁if ▁( name Map . get ( method . getName ()) ▁ != ▁null ) ▁throw ▁new ▁Illegal A rgumentException ( bean . getClass (). getName () ▁+ ▁" ▁should ▁not ▁have ▁any ▁over loaded ▁methods , ▁like ▁" ▁+ ▁method . getName ()); ▁if ▁(!" equals " . equals ( method . getName ())) ▁// ▁allow ▁an ▁equals ▁override ▁name Map . put ( method . getName (), ▁" e xists "); ▁} ▁} ▁}