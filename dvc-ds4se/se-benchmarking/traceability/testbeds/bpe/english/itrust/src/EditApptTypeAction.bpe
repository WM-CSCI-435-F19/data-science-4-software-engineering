▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . beans . ApptTypeBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . ApptTypeDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . validate . ApptTypeBean Validator ; ▁public ▁class ▁Edit ApptTypeAction ▁{ ▁private ▁long ▁loggedInMID ; ▁private ▁ApptTypeDAO ▁ apptTypeDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁ApptTypeBean Validator ▁validator ▁= ▁new ▁ApptTypeBean Validator (); ▁public ▁Edit ApptTypeAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . apptTypeDAO ▁= ▁factory . get ApptTypeDAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁} ▁public ▁List < ApptTypeBean > ▁ getApptType s () ▁throw s ▁SQLException ▁{ ▁return ▁ apptTypeDAO . getApptType s (); ▁} ▁public ▁String ▁add ApptType ( ApptTypeBean ▁apptType ) ▁throw s ▁SQLException , ▁ FormValidat ionException ▁{ ▁validator . validate ( apptType ); ▁List < ApptTypeBean > ▁list ▁= ▁this . getApptType s (); ▁for ( ApptTypeBean ▁a ▁: ▁list ) ▁{ ▁if ( a . getName (). equals ( apptType . getName ())) ▁return ▁" Appointment ▁Type : ▁"+ apptType . getName ()+" ▁already ▁exists . "; ▁} ▁try ▁{ ▁if ▁( apptTypeDAO . add ApptType ( apptType )) ▁{ ▁transDAO . log Transaction ( TransactionType . ADD _ APPT _ TYPE , ▁loggedInMID , ▁0 L , ▁" Added ▁Appointment ▁Type ▁" ▁+ ▁apptType . getName ()); ▁return ▁" Success : ▁" ▁+ ▁apptType . getName () ▁+ ▁" ▁- ▁ Duration : ▁" ▁+ ▁apptType . getDuration () ▁+ ▁" ▁added "; ▁} ▁else ▁return ▁" The ▁database ▁has ▁become ▁corrupt . ▁P lease ▁contact ▁the ▁system ▁administrator ▁for ▁assi stance . "; ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁return ▁e . getMessage (); ▁} ▁} ▁public ▁String ▁ editApptType ( ApptTypeBean ▁apptType ) ▁throw s ▁SQLException , ▁ FormValidat ionException ▁{ ▁validator . validate ( apptType ); ▁List < ApptTypeBean > ▁list ▁= ▁this . getApptType s (); ▁int ▁flag ▁= ▁0; ▁for ( ApptTypeBean ▁a ▁: ▁list ) ▁{ ▁if ( a . getName (). equals ( apptType . getName ())) ▁{ ▁flag ▁= ▁1; ▁if ( a . getDuration () ▁== ▁apptType . getDuration ()) ▁return ▁" Appointment ▁Type : ▁"+ apptType . getName ()+" ▁already ▁has ▁a ▁duration ▁of ▁"+ apptType . getDuration ()+" ▁minutes . "; ▁break ; ▁} ▁} ▁if ( flag ▁== ▁0) ▁{ ▁return ▁" Appointment ▁Type : ▁"+ apptType . getName ()+" ▁you ▁are ▁try ing ▁to ▁update ▁does ▁not ▁exist . "; ▁} ▁try ▁{ ▁if ▁( apptTypeDAO . editApptType ( apptType )) ▁{ ▁transDAO . log Transaction ( TransactionType . UPDATE _ APPT _ TYPE , ▁loggedInMID , ▁0 L , ▁" Updated ▁Appointment ▁Type ▁" ▁+ ▁apptType . getName ()); ▁return ▁" Success : ▁" ▁+ ▁apptType . getName () ▁+ ▁" ▁- ▁ Duration : ▁" ▁+ ▁apptType . getDuration () ▁+ ▁" ▁updated "; ▁} ▁else ▁return ▁" The ▁database ▁has ▁become ▁corrupt . ▁P lease ▁contact ▁the ▁system ▁administrator ▁for ▁assi stance . "; ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁return ▁e . getMessage (); ▁} ▁} ▁public ▁int ▁ getDuration By Type ( String ▁at ) ▁throw s ▁SQLException ▁{ ▁List < ApptTypeBean > ▁list ▁= ▁this . getApptType s (); ▁for ( ApptTypeBean ▁a ▁: ▁list ) ▁{ ▁if ( a . getName (). equals ( at )) ▁return ▁a . getDuration (); ▁} ▁return ▁0; ▁} ▁}