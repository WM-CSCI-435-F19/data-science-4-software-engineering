▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . beans . HospitalBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . HospitalsDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Manage s ▁the ▁assignment ▁of ▁HCPs ▁to ▁hospitals ▁Used ▁by ▁hospital Assignments . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁Manage Hospital Assignments Action ▁{ ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁PersonnelDAO ▁personnelDAO ; ▁private ▁HospitalsDAO ▁hospitalsDAO ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁Set ▁up ▁defaults ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁user ▁ managing ▁hospitals . ▁*/ ▁public ▁Manage Hospital Assignments Action ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . personnelDAO ▁= ▁factory . get PersonnelDAO (); ▁this . hospital s DAO ▁= ▁factory . get HospitalsDAO (); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁hospitals ▁to ▁which ▁the ▁given ▁mid ▁is ▁not ▁currently ▁assigned ▁* ▁* ▁@ param ▁midString ▁* ▁@ return ▁list ▁of ▁HospitalBean s ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < HospitalBean > ▁get Available Hospitals ( String ▁midString ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁mid ▁= ▁Long . value Of ( midString ); ▁List < HospitalBean > ▁allHospitals ▁= ▁hospitalsDAO . getAll Hospitals (); ▁List < HospitalBean > ▁ ourHospitals ▁= ▁personnelDAO . getHospitals ( mid ); ▁while ▁(! ourHospitals . is Empty ()) ▁{ ▁allHospitals . remove ( ourHospitals . remove (0) ); ▁} ▁return ▁allHospitals ; ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁throw ▁new ▁iTrustException (" HCP ' s ▁MID ▁not ▁a ▁number "); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁hospitals ▁to ▁which ▁the ▁given ▁mid ▁is ▁currently ▁assigned ▁* ▁* ▁@ param ▁midString ▁* ▁@ return ▁list ▁of ▁H o sp tial Bean s ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < HospitalBean > ▁get Assigned Hospitals ( String ▁midString ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁mid ▁= ▁Long . value Of ( midString ); ▁return ▁personnelDAO . getHospitals ( mid ); ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁throw ▁new ▁iTrustException (" HCP ' s ▁MID ▁not ▁a ▁number "); ▁} ▁} ▁/** ▁* ▁Assign s ▁the ▁mid ▁to ▁the ▁hospital ▁* ▁* ▁@ param ▁midString ▁The ▁MID ▁of ▁the ▁person ▁assigned ▁to ▁the ▁hospital ▁as ▁a ▁String . ▁* ▁@ param ▁hospitalID ▁The ▁ID ▁of ▁the ▁hospital . ▁* ▁@ return ▁message ▁indicat ing ▁the ▁status ▁of ▁the ▁assignment ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁assign HCP To Hospital ( String ▁midString , ▁String ▁hospitalID ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁hcpID ▁= ▁Long . value Of ( midString ); ▁boolean ▁confirm ▁= ▁hospitalsDAO . assign Hospital ( hcpID , ▁hospitalID ); ▁if ▁( confirm ) ▁{ / * ▁* ▁only ▁patient ▁is ▁ ment ion ed ▁for ▁transaction ▁type ▁0, ▁but ▁spec ▁look s ▁like ▁personnel ▁* ▁should ▁be ▁included ▁too . . . ▁*/ ▁transDAO . log Transaction ( TransactionType . E NTER _ EDIT _ DEMOGRAPHICS , ▁loggedInMID , ▁hcpID , ▁" HCP ▁ Assigned ▁to ▁Hospital "); ▁return ▁" HCP ▁successfully ▁assigned . "; ▁} ▁else ▁return ▁" Assignment ▁did ▁not ▁occur "; ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁throw ▁new ▁iTrustException (" HCP ' s ▁MID ▁not ▁a ▁number "); ▁} ▁} ▁/** ▁* ▁Remove s ▁HCPs ▁assignment ▁to ▁the ▁designated ▁hospital ▁* ▁* ▁@ param ▁midString ▁* ▁the ▁HCP ' s ▁mid ▁* ▁@ param ▁hospitalID ▁* ▁the ▁hospital ▁id ▁to ▁be ▁removed ▁* ▁@ return ▁Status ▁message ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁ removeHCP Assignment To Hospital ( String ▁midString , ▁String ▁hospitalID ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁hcpID ▁= ▁Long . value Of ( midString ); ▁boolean ▁confirm ▁= ▁hospitalsDAO . remove Hospital Assignment ( hcpID , ▁hospitalID ); ▁if ▁( confirm ) ▁{ ▁transDAO . log Transaction ( TransactionType . E NTER _ EDIT _ DEMOGRAPHICS , ▁loggedInMID , ▁hcpID , ▁" HCP ▁unassigned ▁from ▁hospital "); ▁return ▁" HCP ▁successfully ▁unassigned "; ▁} ▁else ▁return ▁" HCP ▁not ▁unassigned "; ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁throw ▁new ▁iTrustException (" HCP ' s ▁MID ▁not ▁a ▁number "); ▁} ▁} ▁/** ▁* ▁Remove s ▁all ▁hospital ▁assignment s ▁for ▁the ▁given ▁hcp ▁mid ▁* ▁* ▁@ param ▁midString ▁* ▁HCP ' s ▁mid ▁* ▁@ return ▁status ▁message ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁int ▁remove All AssignmentsFrom HCP ( String ▁midString ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁hcpID ▁= ▁Long . value Of ( midString ); ▁int ▁numAssignments ▁= ▁hospitalsDAO . remove All Hospital AssignmentsFrom ( hcpID ); ▁if ▁(0 ▁< ▁numAssignments ) ▁{ ▁transDAO . log Transaction ( TransactionType . E NTER _ EDIT _ DEMOGRAPHICS , ▁loggedInMID , ▁hcpID , ▁" HCP ▁unassigned ▁from ▁all ▁hospital "); ▁} ▁return ▁numAssignments ; ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁throw ▁new ▁iTrustException (" HCP ' s ▁MID ▁not ▁a ▁number "); ▁} ▁} ▁/** ▁* ▁Check s ▁if ▁the ▁hcpID ▁ param ▁is ▁a ▁HCP ▁* ▁* ▁@ param ▁hcpID ▁* ▁the ▁String ▁to ▁be ▁checked ▁* ▁@ return ▁the ▁mid ▁as ▁a ▁long ▁if ▁the ▁hcpID ▁is ▁a ▁HCP ' s ▁mid ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁long ▁check HCPID ( String ▁hcpID ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁pid ▁= ▁Long . value Of ( hcpID ); ▁if ▁( personnelDAO . check Personnel E xists ( pid )) ▁return ▁pid ; ▁else ▁throw ▁new ▁iTrustException (" HCP ▁does ▁not ▁exist "); ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁throw ▁new ▁iTrustException (" HCP ▁ID ▁is ▁not ▁a ▁number : ▁" ▁+ ▁e . getMessage ()); ▁} ▁} ▁}