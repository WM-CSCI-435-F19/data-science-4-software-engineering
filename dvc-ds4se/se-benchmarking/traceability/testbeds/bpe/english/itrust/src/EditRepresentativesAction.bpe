▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . action . base . P atientBaseAction ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AuthDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . Role ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Edit s ▁a ▁patient ' s ▁personal ▁representatives . ▁Used ▁by ▁hcp / edit Representatives . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁Edit Representatives Action ▁extends ▁P atientBaseAction ▁{ ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁AuthDAO ▁authDAO ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁S uper ▁class ▁validate s ▁the ▁patient ▁mid ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁in ▁creating ▁the ▁DAOs ▁for ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁patient ▁editing ▁his / her ▁representatives . ▁* ▁@ param ▁pidString ▁The ▁MID ▁of ▁the ▁representative ▁in ▁question . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁Edit Representatives Action ( DAOFactory ▁factory , ▁long ▁loggedInMID , ▁String ▁pidString ) ▁throw s ▁iTrustException ▁{ ▁super ( factory , ▁pidString ); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . authDAO ▁= ▁factory . get AuthDAO (); ▁} ▁/** ▁* ▁Return ▁a ▁list ▁of ▁patients ▁that ▁pid ▁represents ▁* ▁* ▁@ param ▁pid ▁The ▁id ▁of ▁the ▁personnel ▁we ▁are ▁look ing ▁up ▁representees ▁for . ▁* ▁@ return ▁a ▁list ▁of ▁PatientBeans ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < PatientBean > ▁get Represented ( long ▁pid ) ▁throw s ▁iTrustException ▁{ ▁return ▁patientDAO . get Represented ( pid ); ▁} ▁/** ▁* ▁Make s ▁the ▁patient ▁( pid ) ▁represent ▁the ▁input ▁mid ▁parameter ▁* ▁* ▁@ param ▁pidString ▁* ▁the ▁mid ▁of ▁the ▁person ▁who ▁will ▁be ▁represented ▁( the ▁representee ) ▁* ▁@ return ▁a ▁message ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁add Representative ( String ▁pidString ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁representee ▁= ▁Long . value Of ( pidString ); ▁if ▁( authDAO . getUserRole ( representee ) ▁ != ▁Role . PATIENT ) ▁throw ▁new ▁iTrustException (" This ▁user ▁is ▁not ▁a ▁patient ! "); ▁else ▁if ▁( s uper . pid ▁== ▁representee ) ▁throw ▁new ▁iTrustException (" This ▁user ▁cannot ▁represent ▁them s el ve s . "); ▁boolean ▁confirm ▁= ▁patientDAO . add Representative ( pid , ▁representee ); ▁if ▁( confirm ) ▁{ ▁transDAO . log Transaction ( TransactionType . DE CLA RE _ REPRESENTATIVE , ▁loggedInMID , ▁pid , ▁" patient ▁" ▁+ ▁pid ▁+ ▁" ▁now ▁represents ▁patient ▁" ▁+ ▁representee ); ▁return ▁" Patient ▁represented "; ▁} ▁else ▁return ▁" No ▁change ▁made "; ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁return ▁" MID ▁not ▁a ▁number "; ▁} ▁} ▁/** ▁* ▁Make s ▁the ▁patient ▁( pid ) ▁no ▁long er ▁represent ▁the ▁input ▁mid ▁ param ▁* ▁* ▁@ param ▁input ▁* ▁the ▁mid ▁of ▁the ▁person ▁be ▁represented ▁( representee ) ▁* ▁@ return ▁a ▁message ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁remove Representative ( String ▁input ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁representee ▁= ▁Long . value Of ( input ); ▁boolean ▁confirm ▁= ▁patientDAO . remove Representative ( pid , ▁representee ); ▁if ▁( confirm ) ▁{ ▁transDAO . log Transaction ( TransactionType . DE CLA RE _ REPRESENTATIVE , ▁loggedInMID , ▁pid , ▁" patient ▁" ▁+ ▁pid ▁+ ▁" ▁no ▁long er ▁represents ▁patient ▁" ▁+ ▁representee ); ▁return ▁" Patient ▁represented "; ▁} ▁else ▁return ▁" No ▁change ▁made "; ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁return ▁" MID ▁not ▁a ▁number "; ▁} ▁} ▁}