▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . action . base . P atientBaseAction ; ▁import ▁edu . nc su . cs c . itrust . beans . HealthRecord ; ▁import ▁edu . nc su . cs c . itrust . beans . forms . HealthRecordForm ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AuthDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . HealthRecordsDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . validate . HealthRecordForm Validator ; ▁/** ▁* ▁Edit s ▁the ▁health ▁histor y ▁of ▁a ▁patient , ▁used ▁by ▁edit Basic Health . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁E ditHealthHistory Action ▁extends ▁P atientBaseAction ▁{ ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁ HealthRecordsDAO ▁hrDAO ; ▁private ▁AuthDAO ▁authDAO ; ▁private ▁long ▁loggedInMID ; ▁private ▁ HealthRecordForm Validator ▁validator ▁= ▁new ▁ HealthRecordForm Validator (); ▁/** ▁* ▁The ▁patient ▁ID ▁is ▁validated ▁by ▁the ▁superclass ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁which ▁will ▁be ▁used ▁to ▁generate ▁the ▁DAOs ▁used ▁for ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁user ▁authoriz ing ▁this ▁action . ▁* ▁@ param ▁pidString ▁The ▁patient ▁( or ▁other ▁user ) ▁who ▁is ▁being ▁edited . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁E ditHealthHistory Action ( DAOFactory ▁factory , ▁long ▁loggedInMID , ▁String ▁pidString ) ▁throw s ▁iTrustException ▁{ ▁super ( factory , ▁pidString ); ▁this . hrDAO ▁= ▁factory . get HealthRecordsDAO (); ▁this . authDAO ▁= ▁factory . get AuthDAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁} ▁/** ▁* ▁return s ▁the ▁patient ▁name ▁* ▁* ▁@ return ▁patient ▁name ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁get PatientName () ▁throw s ▁DBException , ▁iTrustException ▁{ ▁return ▁authDAO . getUserName ( pid ); ▁} ▁/** ▁* ▁Add s ▁a ▁health ▁record ▁for ▁the ▁given ▁patient ▁* ▁* ▁@ param ▁pid ▁The ▁patient ▁record ▁who ▁is ▁being ▁edited . ▁* ▁@ param ▁hr ▁The ▁filled ▁out ▁health ▁record ▁form ▁to ▁be ▁added . ▁* ▁@ return ▁message ▁- ▁" Information ▁Recorded " ▁or ▁exception ' s ▁message ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁String ▁add HealthRecord ( long ▁pid , ▁ HealthRecordForm ▁hr ) ▁throw s ▁ FormValidat ionException , ▁iTrustException ▁{ ▁validator . validate ( hr ); ▁HealthRecord ▁record ▁= ▁transfer Form ( pid , ▁hr ); ▁hrDAO . add ( record ); ▁transDAO . log Transaction ( TransactionType . E NTER _ EDIT _ PHR , ▁loggedInMID , ▁pid , ▁" E ditHealthHistory ▁- ▁Add ▁Record "); ▁return ▁" Information ▁Recorded "; ▁} ▁/** ▁* ▁Mo ve s ▁the ▁information ▁from ▁the ▁form ▁to ▁a ▁HealthRecord ▁* ▁* ▁@ param ▁pid ▁Patient ▁of ▁interest ▁* ▁@ param ▁form ▁Form ▁to ▁be ▁ tr an s lated ▁* ▁@ return ▁a ▁HealthRecord ▁containing ▁all ▁the ▁information ▁in ▁the ▁form ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁private ▁HealthRecord ▁transfer Form ( long ▁pid , ▁ HealthRecordForm ▁form ) ▁throw s ▁ FormValidat ionException ▁{ ▁HealthRecord ▁record ▁= ▁new ▁HealthRecord (); ▁record . set PatientID ( pid ); ▁record . s etPersonnelID ( loggedInMID ); ▁record . set BloodPressureD ( Integer . value Of ( form . get BloodPressureD ()) ); ▁record . set BloodPressureN ( Integer . value Of ( form . get BloodPressureN ()) ); ▁record . set CholesterolHDL ( Integer . value Of ( form . get CholesterolHDL ()) ); ▁record . set CholesterolLDL ( Integer . value Of ( form . get CholesterolLDL ()) ); ▁record . set CholesterolTri ( Integer . value Of ( form . get CholesterolTri ()) ); ▁if ▁( record . getTotalC holesterol () ▁< ▁100 ▁|| ▁record . getTotalC holesterol () ▁> ▁60 0 ) ▁throw ▁new ▁ FormValidat ionException (" Total ▁cholesterol ▁must ▁be ▁in ▁ [100 , 6 0 0 ] "); ▁record . setHeight ( Double . value Of ( form . get Height ()) ); ▁record . set Weight ( Double . value Of ( form . get Weight ()) ); ▁record . set Smoker ( Boolean . value Of ( form . get I s Smoker ()) ); ▁return ▁record ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁HealthRecords ▁for ▁the ▁given ▁patient ▁* ▁* ▁@ param ▁pid ▁The ▁ID ▁of ▁the ▁patient ▁to ▁look ▁up ▁* ▁@ return ▁list ▁of ▁HealthRecords ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < HealthRecord > ▁getAll HealthRecords ( long ▁pid ) ▁throw s ▁iTrustException ▁{ ▁transDAO . log Transaction ( TransactionType . VI EW _ HEA L TH _ RECORDS , ▁loggedInMID , ▁pid , ▁" E ditHealthHistory ▁- ▁View ▁Records "); ▁return ▁hrDAO . getAll HealthRecords ( pid ); ▁} ▁}