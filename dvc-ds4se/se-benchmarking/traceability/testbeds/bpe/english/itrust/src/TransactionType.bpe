▁p ackage ▁edu . nc su . cs c . itrust . enums ; ▁/** ▁* ▁All ▁of ▁the ▁possible ▁transaction ▁types , ▁in ▁no ▁particular ▁order , ▁used ▁in ▁pro d u c ing ▁the ▁operational ▁profile . ▁*/ ▁public ▁enum ▁TransactionType ▁{ ▁E NTER _ EDIT _ DEMOGRAPHICS ( 1, ▁" Enter / Edit ▁patient / personnel ▁demographic s "), ▁ DE CLA RE _ HCP (2, ▁" View ▁HCP ▁/ ▁Change ▁designat ion "), ▁A L LOW _ D IS AL LOW _ ACCESS ( 3, ▁" Allow / Di s allow ▁access ▁to ▁patient ▁diagnosis "), ▁ VI EW _ ACCESS _ LOG ( 4, ▁" View ▁patient ' s ▁record ▁access ▁log "), ▁ VI EW _ RECORDS (5, ▁" View ▁patient ' s ▁medical ▁records "), ▁AUTHENTICAT E _ USER (6, ▁" Authenticate ▁user "), ▁E NTER _ EDIT _ PHR ( 7, ▁" Enter / Edit ▁Personal ▁Health ▁Information "), ▁DO CU MENT _ OFF ICE _ VISIT ( 8, ▁" Document ▁an ▁office ▁visit "), ▁ CRE ATE _ DISABLE _ PATIENT _ HCP ( 9 , ▁" Create ▁or ▁disable ▁a ▁patient ▁or ▁hcp "), ▁ MANA GE _ DIAGNOSIS _ CODE ( 10 , ▁" Manage ▁ICD 9 CM ▁diagnosis ▁codes "), ▁REQUEST _ BIO SUR VE IL L ANCE ( 1 1, ▁" Request ▁bio su rv e ill ance "), ▁ MANA GE _ PROCEDURE _ CODE ( 12 , ▁" Manage ▁CPT ▁Procedure ▁Codes "), ▁ MANA GE _ DRUG _ CODE ( 13 , ▁" Manage ▁ND ▁Drug ▁Codes "), ▁ IDENTIF Y _ RIS K _ FACTORS ( 14 , ▁" Id ent ify ▁risk ▁factors ▁for ▁chronic ▁diseases "), ▁CA US E _ OF _ DE ATH ( 15 , ▁" E xa mine ▁cause - of - death ▁ tr end s "), ▁ DE CLA RE _ REPRESENTATIVE ( 16 , ▁" De c la re ▁Personal ▁Health ▁ Representative "), ▁ PATIENT _ REMINDERS ( 17 , ▁" Pro act ive ly ▁determine ▁necessary ▁patient ▁care "), ▁ MA IN TAIN _ HOSPITAL S ( 18 , ▁" M aintain ▁hospital ▁listing "), ▁ VI EW _ PRESCRIPTION _ REPORT ( 19 , ▁" View ▁prescription ▁report "), ▁ VI EW _ HOSPITAL _ STAT S ( 20 , ▁" View ▁hospital ▁st at is tic s "), ▁ VI EW _ COMPRE HEN SIVE _ RE C OR D ( 21, ▁" View ▁comp reh ensive ▁patient ▁report "), ▁ VI EW _ EM ER G ENC Y _ REPORT ( 22, ▁" View ▁emergency ▁patient ▁report "), ▁ COMPRE HEN SIVE _ REPORT _ REQUEST ( 2 8, ▁" Comp reh ensive ▁patient ▁report "), ▁ VI EW _ LAB _ PROCEDURE ( 29 , ▁" View ▁lab ▁procedure "), ▁E NTER _ EDIT _ LAB _ PROCEDURE ( 30, ▁" Enter / Edit ▁lab ▁procedure "), ▁ MANA GE _ LOINC ( 3 1, ▁" Enter / Edit ▁LOINC ▁Code "), ▁ADD _ PATIENT _ SURVEY ( 32 , ▁" Added ▁Patient ▁Survey "), ▁View _ HCP _ SURVEY _ RESULTS ( 3 3, ▁" View ▁HCP ▁survey ▁results "), ▁ VI EW _ PATIENT _ LIST ( 34 , ▁" View ▁Patient ▁List "), ▁ FI ND _ HCP S _ WITH _ E XP ( 3 5 , ▁" Find ▁LHCP s ▁with ▁expe r ience ▁with ▁a ▁diagnosis "), ▁ VI EW _ HEA L TH _ RECORDS ( 3 6, ▁" View ▁Patient ▁Health ▁Records "), ▁ VI EW _ OFF ICE _ VISIT ( 3 7, ▁" View ▁Office ▁Visit "), ▁ADD _ PRESCRIPTION ( 38 , ▁" Add ▁Prescription "), ▁ UPDATE _ OFF ICE _ VISIT ( 39 , ▁" Update ▁an ▁Office ▁Visit "), ▁ SEND _ MESSAGE ( 40 , ▁" Send ▁a ▁Message "), ▁ VI EW _ RE NEW AL _ N E ED S _ PATIENT S ( 4 1, ▁" View ▁renewal ▁needs ▁patients "), ▁ SEND _ RE F ERR AL ( 4 2 , ▁" Refer ▁patient ▁to ▁hcp "), ▁ CRE ATE _ DISABLE _ ER ( 43 , ▁" Create / disable ▁emergency ▁responder "), ▁T ELE MEDIC INE _ MONITORING ( 45 , ▁" Telemedicine ▁monitoring "), ▁ CRE ATE _ DISABLE _ PHA ( 4 7, ▁" Create / disable ▁public ▁health ▁agent "), ▁ DRUG _ INTERACTION ( 48 , ▁" Drug ▁Interaction "), ▁ AD VERS E _ EVENT ( 49 , ▁" Adverse ▁Event ▁Report "), ▁LOG IN _ FAIL U RE ( 50 , ▁" Login ▁ Failure "), ▁ UPDATE _ APPT _ TYPE ( 5 1, ▁" Update ▁an ▁Appointment ▁Type "), ▁ADD _ APPT _ TYPE (52 , ▁" Add ▁an ▁Appointment ▁Type "), ▁ADD _ APPT ( 5 3, ▁" Appointment ▁Added "), ▁ SEND _ REMINDERS ( 5 4, ▁" Reminders ▁Sent "); ▁// ▁S 1, ▁S 3, ▁S 5 , ▁S 7, ▁S 8, ▁S 14 , ▁S 16 , ▁S 19 , ▁S 21, ▁S 2 2 . ▁public ▁static ▁final ▁String ▁patient ViewableStr ▁= ▁" 1, 3, 5 , 7, 8, 14 , 16 , 19 , 21, 22, 30, 39 , 45 "; ▁public ▁static ▁final ▁int [ ] ▁patient View able ▁= ▁{ ▁1, ▁ 3, ▁5 , ▁ 7, ▁ 8, ▁14, ▁16 , ▁19 , ▁ 21, ▁ 22, ▁30 , ▁ 39 , ▁ 45 ▁} ; ▁private ▁TransactionType ( int ▁code , ▁String ▁description ) ▁{ ▁this . code ▁= ▁code ; ▁this . description ▁= ▁description ; ▁} ▁private ▁int ▁code ; ▁private ▁String ▁description ; ▁public ▁int ▁get Code () ▁{ ▁return ▁code ; ▁} ▁public ▁String ▁get Description () ▁{ ▁return ▁description ; ▁} ▁public ▁static ▁TransactionType ▁parse ( int ▁code ) ▁{ ▁for ▁( TransactionType ▁type ▁: ▁TransactionType . values ()) ▁{ ▁if ▁( type . code ▁== ▁code ) ▁return ▁type ; ▁} ▁throw ▁new ▁Illegal A rgumentException (" No ▁transaction ▁type ▁exists ▁for ▁code ▁" ▁+ ▁code ); ▁} ▁}