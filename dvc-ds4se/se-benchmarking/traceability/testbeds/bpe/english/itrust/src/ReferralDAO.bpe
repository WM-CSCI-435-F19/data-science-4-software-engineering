▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . ReferralBean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . ReferralBean Loader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁/** ▁* ▁Used ▁to ▁update ▁referrals , ▁and ▁f et c h ▁list s ▁of ▁referrals ▁sent ▁to ▁and ▁* ▁from ▁HCPs . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁*/ ▁public ▁class ▁ReferralDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁ReferralBean Loader ▁referralLoader ; ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁ReferralDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁referralLoader ▁= ▁new ▁ReferralBean Loader (); ▁} ▁/** ▁* ▁Get s ▁a ▁list ▁of ▁all ▁referrals ▁sent ▁from ▁an ▁HCP ▁* ▁@ param ▁mid ▁The ▁HCP ' s ▁mid . ▁* ▁@ return ▁The ▁list ▁of ▁the ▁referrals ▁they ▁sent . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < ReferralBean > ▁ getReferralsSent From ( long ▁mid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁referrals ▁ WH ERE ▁ SenderID ▁= ▁? "); ▁ps . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁referralLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Get s ▁a ▁list ▁of ▁all ▁referrals ▁sent ▁to ▁an ▁HCP ▁* ▁@ param ▁mid ▁The ▁HCP ' s ▁mid . ▁* ▁@ return ▁The ▁list ▁of ▁the ▁referrals ▁sent ▁to ▁them . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < ReferralBean > ▁ getReferralsSent To ( long ▁mid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁referrals ▁ WH ERE ▁ ReceiverID ▁= ▁? "); ▁ps . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁referralLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Updates ▁a ▁given ▁referral ▁in ▁the ▁database . ▁* ▁@ param ▁r ▁The ▁referral ▁to ▁update . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁edit Referral ( ReferralBean ▁r ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁referrals ▁SET ▁PatientID =?, SenderID =?, ReceiverID =?, " ▁+ ▁" ReferralDetails =?, Consultation Details =?, Status =? ▁ WH ERE ▁ID =?" ); ▁referralLoader . load Parameters ( ps , ▁r ); ▁ps . s etLong ( 7, ▁r . get Id ()); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Add s ▁a ▁given ▁referral ▁to ▁the ▁database . ▁* ▁@ param ▁r ▁The ▁referral ▁to ▁add . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁add Referral ( ReferralBean ▁r ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁referrals ▁( PatientID , SenderID , ReceiverID , " ▁+ ▁" ReferralDetails , Consultation Details , Status ) ▁" ▁+ ▁" VALUES ▁ (?,?,?,?,?,? )"); ▁referralLoader . load Parameters ( ps , ▁r ); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}