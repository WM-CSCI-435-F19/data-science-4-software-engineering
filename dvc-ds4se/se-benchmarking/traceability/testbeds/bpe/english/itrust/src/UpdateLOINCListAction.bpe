▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . beans . LOINCbean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . LOINCDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . validate . LOINC BeanValidator ; ▁/** ▁* ▁Handle s ▁updating ▁the ▁LOINC ▁Used . ▁* ▁* ▁Log ical ▁O bservation ▁Identifier s ▁Name s ▁and ▁Codes ▁( LOINC ) ▁is ▁a ▁database ▁and ▁universal ▁* ▁ standard ▁for ▁identify ing ▁medical ▁l aboratory ▁ o bservation s . ▁* ▁* ▁@ see ▁http :// loinc . org / ▁*/ ▁public ▁class ▁Update LOINCListAction ▁{ ▁private ▁long ▁performerID ▁= ▁0; ▁private ▁LOINCDAO ▁lDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁LOINC BeanValidator ▁validator ▁= ▁new ▁LOINC BeanValidator (); ▁/** ▁* ▁Set s ▁up ▁defaults ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁performerID ▁The ▁MID ▁of ▁the ▁person ▁updating ▁the ▁LOINC s . ▁*/ ▁public ▁Update LOINCListAction ( DAOFactory ▁factory , ▁long ▁performerID ) ▁{ ▁this . performerID ▁= ▁performerID ; ▁transDAO ▁= ▁factory . get TransactionDAO (); ▁lDAO ▁= ▁factory . get LOINCDAO (); ▁} ▁/** ▁* ▁Add s ▁a ▁new ▁LOINC ▁* ▁* ▁@ param ▁diagn ▁* ▁New ▁LOINC ▁* ▁@ return ▁Status ▁message ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁String ▁add ( LOINCbean ▁diagn ) ▁throw s ▁ FormValidat ionException , ▁iTrustException ▁{ ▁validator . validate ( diagn ); ▁List < LOINCbean > ▁lblist ▁= ▁lDAO . getAll LOINC (); ▁boolean ▁correct ID ▁= ▁false ; ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁lblist . size (); ▁i ++) ▁{ ▁if ▁( lb list . get ( i ) . get LabProcedureCode (). equals ( diagn . get LabProcedureCode ())) ▁{ ▁correct ID ▁= ▁true ; ▁i ▁= ▁lblist . size (); ▁} ▁} ▁if ▁( correct ID ) ▁{ ▁throw ▁new ▁ FormValidat ionException (" Error : ▁Code ▁already ▁exists . "); ▁} ▁lDAO . add LOINC ( diagn ); ▁transDAO . log Transaction ( TransactionType . MANA GE _ LOINC , ▁performerID , ▁0 L , ▁" add ed ▁LOINC ▁code ▁" ▁+ ▁diagn . get LabProcedureCode ()); ▁return ▁" Success : ▁" ▁+ ▁diagn . get LabProcedureCode () ▁+ ▁" ▁added "; ▁} ▁/** ▁* ▁Updates ▁a ▁LOINC ▁* ▁* ▁@ param ▁diagn ▁* ▁new ▁information ▁to ▁update ▁( but ▁same ▁code ) ▁* ▁@ return ▁Status ▁message ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁String ▁update Information ( LOINCbean ▁diagn ) ▁throw s ▁ FormValidat ionException ▁{ ▁validator . validate ( diagn ); ▁try ▁{ ▁int ▁rows ▁= ▁lDAO . update ( diagn ); ▁if ▁(0 ▁== ▁rows ) ▁{ ▁return ▁" Error : ▁Code ▁not ▁found . "; ▁} ▁else ▁{ ▁transDAO . log Transaction ( TransactionType . MANA GE _ LOINC , ▁performerID , ▁0 L , ▁" updated ▁LOINC ▁code ▁" ▁+ ▁diagn . get LabProcedureCode ()); ▁return ▁" Success : ▁" ▁+ ▁diagn . get LabProcedureCode () ▁+ ▁" ▁updated "; ▁} ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁return ▁e . getMessage (); ▁} ▁} ▁}