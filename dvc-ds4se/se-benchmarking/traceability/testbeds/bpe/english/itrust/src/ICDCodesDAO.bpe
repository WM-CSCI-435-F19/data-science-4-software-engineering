▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . DiagnosisBean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . DiagnosisBean Loader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Used ▁for ▁ managing ▁all ▁ICD ▁codes . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁* ▁The ▁Intern ational ▁Statistic al ▁ Classification ▁of ▁Diseases ▁and ▁Re lated ▁Health ▁Problems ▁* ▁( most ▁common ly ▁known ▁by ▁the ▁abbreviat ion ▁ICD ) ▁provide s ▁codes ▁to ▁class ify ▁diseases ▁and ▁a ▁* ▁wid e ▁variet y ▁of ▁sign s , ▁symptoms , ▁a b normal ▁finding s , ▁compl aints , ▁so cial ▁circu m stance s ▁and ▁* ▁external ▁cause s ▁of ▁in ju ry ▁or ▁disease . ▁* ▁* ▁@ see ▁http :// w ww . c d c . g ov / nc h s / icd 9 . htm ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁ICDCodesDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁DiagnosisBean Loader ▁diagnosisLoader ▁= ▁new ▁DiagnosisBean Loader (); ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁ICDCodesDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Returns ▁all ▁ICD 9 CM ▁codes ▁sort ed ▁by ▁code ▁* ▁* ▁@ return ▁java . util . List ▁of ▁DiagnosisBean s ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < DiagnosisBean > ▁getAll ICDCodes () ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁ICDCodes ▁OR DER ▁ BY ▁ CODE "); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁diagnosisLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁particular ▁description ▁for ▁a ▁given ▁code ▁* ▁* ▁@ param ▁code ▁The ▁String ▁representation ▁of ▁the ▁code . ▁* ▁@ return ▁A ▁DiagnosisBean ▁of ▁the ▁code . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁DiagnosisBean ▁ getICDCode ( String ▁code ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁ICDCodes ▁ WH ERE ▁Code ▁= ▁? "); ▁ps . set String ( 1, ▁code ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁if ▁( rs . next ()) ▁return ▁diagnosisLoader . loadSingle ( rs ); ▁return ▁null ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Add s ▁an ▁ICD 9 CM ▁code . ▁Returns ▁whether ▁or ▁not ▁the ▁change ▁was ▁made . ▁* ▁* ▁@ param ▁diag ▁The ▁DiagnosisBean ▁representing ▁the ▁changes . ▁* ▁@ return ▁A ▁boolean ▁indicat ing ▁success . ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁add ICDCode ( DiagnosisBean ▁diag ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁ICDCodes ▁( Code , ▁Description , ▁Chronic ) ▁" ▁+ ▁" VALUES ▁(?,?,? )"); ▁ps . set String ( 1, ▁diag . getICDCode ()); ▁ps . set String (2, ▁diag . get Description ()); ▁ps . set String ( 3, ▁diag . get Classification ()); ▁return ▁(1 ▁== ▁ps . execute Update ()); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁if ▁(1 062 ▁== ▁e . get ErrorCode ()) ▁throw ▁new ▁iTrustException (" Error : ▁Code ▁already ▁exists . "); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Changes ▁a ▁the ▁description ▁of ▁a ▁particular ▁code . ▁* ▁* ▁@ param ▁diag ▁A ▁DiagnosisBean ▁representing ▁the ▁changes . ▁* ▁@ return ▁A ▁boolean ▁indicat ing ▁the ▁number ▁of ▁updated ▁rows . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁int ▁update Code ( DiagnosisBean ▁diag ) ▁throw s ▁DBException ▁{ ▁int ▁rows ; ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁ICDCodes ▁SET ▁Description ▁= ▁? , ▁Chronic ▁= ▁? ▁ WH ERE ▁Code ▁= ▁? "); ▁ps . set String ( 1, ▁diag . get Description ()); ▁ps . set String (2, ▁diag . get Classification ()); ▁ps . set String ( 3, ▁diag . getICDCode ()); ▁rows ▁= ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁return ▁rows ; ▁} ▁}