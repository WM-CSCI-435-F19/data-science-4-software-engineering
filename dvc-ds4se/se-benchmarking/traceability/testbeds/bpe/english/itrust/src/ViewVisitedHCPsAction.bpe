▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . List ; ▁import ▁java . util . ArrayList ; ▁import ▁edu . nc su . cs c . itrust . beans . PersonnelBean ; ▁import ▁edu . nc su . cs c . itrust . beans . OfficeVisitBean ; ▁import ▁edu . nc su . cs c . itrust . beans . HCPVisitBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . OfficeVisitDAO ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁ Action ▁class ▁for ▁ViewVisitedHCPs . jsp ▁* ▁*/ ▁public ▁class ▁ViewVisitedHCPs Action ▁{ ▁private ▁long ▁patientMID ; ▁private ▁PersonnelDAO ▁docDAO ; ▁private ▁OfficeVisitDAO ▁visitDAO ; ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁ArrayList < HCPVisitBean > ▁visits ; ▁private ▁ DeclareHCPAction ▁declareAction ; ▁private ▁ArrayList < PersonnelBean > ▁filterList ; ▁/** ▁* ▁Set ▁up ▁defaults ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁person ▁viewing ▁the ▁visit ed ▁HCPs . ▁*/ ▁public ▁ViewVisitedHCPs Action ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁patientMID ▁= ▁loggedInMID ; ▁docDAO ▁= ▁factory . get PersonnelDAO (); ▁visitDAO ▁= ▁factory . get OfficeVisitDAO (); ▁patientDAO ▁= ▁factory . get PatientDAO (); ▁visits ▁= ▁new ▁ArrayList < HCPVisitBean > (); ▁declareAction ▁= ▁new ▁ DeclareHCPAction ( factory , ▁loggedInMID ); ▁filterList ▁= ▁new ▁ArrayList < PersonnelBean > (); ▁} ▁/** ▁* ▁Add s ▁all ▁the ▁office ▁visits ▁to ▁a ▁global ▁array ▁* ▁* ▁@ throw s ▁iTrustException ▁*/ ▁private ▁void ▁process OfficeVisits () ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁List < OfficeVisitBean > ▁ovlist ▁= ▁visitDAO . get AllOfficeVisits ( patientMID ); ▁HCPVisitBean ▁visitBean ; ▁List < PersonnelBean > ▁dhcps ▁= ▁patientDAO . getDeclaredHCP s ( patientMID ); ▁boolean ▁ tmp ; ▁PersonnelBean ▁pb ; ▁ArrayList < PersonnelBean > ▁ removeID s ▁= ▁new ▁ArrayList < PersonnelBean > (); ▁for ▁( OfficeVisitBean ▁ov : ▁ovlist ) ▁{ ▁visitBean ▁= ▁new ▁HCPVisitBean (); ▁pb ▁= ▁docDAO . getPersonnel ( ov . getHcp ID ()); ▁visitBean . set HCPMID ( ov . getHcp ID ()); ▁visitBean . set HCPName ( pb . getF ullName ()); ▁visitBean . set OVDate ( ov . getVisitDate Str ()); ▁visitBean . set HCPSpecialty ( pb . get Specialty ()); ▁visitBean . set HCPAddr ( pb . getStreetAddress 1() ▁+" ▁"+ ▁pb . getStreetAddress 2() ▁+" ▁"+ ▁pb . get City () ▁+ ", ▁"+ ▁pb . get State () ▁+" ▁"+ ▁pb . getZip ()); ▁if ▁( true ▁== ▁( tmp ▁= ▁patientDAO . check DeclaredHCP ( patientMID , ▁ov . getHcp ID ())) ) ▁{ ▁visitBean . set Designated ( tmp ); ▁if ▁(! d hcp s . is Empty ()) ▁{ ▁for ▁( PersonnelBean ▁hcp ▁: ▁dhcps ) ▁{ ▁if ▁( hcp . get MID () ▁== ▁ov . getHcp ID ()) ▁{ ▁ removeID s . add ( hcp ); ▁} ▁} ▁if ▁(! removeID s . is Empty ()) ▁{ ▁for ▁( PersonnelBean ▁p bean : ▁ removeID s ) ▁{ ▁dhcps . remove ( p bean ); ▁} ▁} ▁} ▁} ▁visits . add ( visitBean ); ▁} ▁for ▁( PersonnelBean ▁hcp ▁: ▁dhcps ) ▁{ ▁visitBean ▁= ▁new ▁HCPVisitBean (); ▁visitBean . set HCPMID ( hcp . get MID ()); ▁visitBean . set HCPName ( hcp . getF ullName ()); ▁visitBean . set OVDate (" "); ▁visitBean . set HCPSpecialty ( hcp . get Specialty ()); ▁visitBean . set HCPAddr ( hcp . getStreetAddress 1() ▁+" ▁"+ ▁hcp . getStreetAddress 2() ▁+" ▁"+ ▁hcp . get City () ▁+ ", ▁"+ ▁hcp . get State () ▁+" ▁"+ ▁hcp . getZip ()); ▁visitBean . set Designated ( true ); ▁visits . add ( visitBean ); ▁} ▁} ▁catch ▁( DBException ▁ dbe ) ▁{ ▁throw ▁new ▁iTrustException ( dbe . getMessage ()); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁the ▁visit ed ▁HCPs ▁* ▁@ return ▁list ▁of ▁all ▁the ▁visit ed ▁HCPs ▁*/ ▁public ▁List < HCPVisitBean > ▁ getVisit ed HCP s () ▁{ ▁try ▁{ ▁process OfficeVisits (); ▁for ( int ▁i ▁= ▁0; ▁i < visits . size (); ▁i ++ ){ ▁for ( int ▁j ▁= ▁i +1 ; ▁j < visits . size (); ▁j ++ ){ ▁if ( visits . get ( i ) . get HCPMID ()== visits . get ( j ) . get HCPMID ()){ ▁visits . remove ( visits . get ( j )); ▁j -- ; ▁} ▁} ▁} ▁} ▁catch ▁( iTrustException ▁ ie ) ▁{ ▁} ▁return ▁visits ; ▁} ▁/** ▁* ▁Set ▁a ▁given ▁HCP ▁as ▁undeclared ▁* ▁* ▁@ param ▁name ▁HCP ▁to ▁undeclare ▁* ▁@ return ▁An ▁empty ▁string . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁undeclare HCP ( String ▁name ) ▁throw s ▁iTrustException ▁{ ▁HCPVisitBean ▁remove ▁= ▁null ; ▁for ▁( HCPVisitBean ▁visit : ▁visits ) ▁{ ▁if ▁(0 ▁== ▁visit . get HCPName (). to Lower Case (). compareTo ( name . to Lower Case ())) ▁{ ▁Long ▁mid ▁= ▁Long . value Of ( visit . get HCPMID ()); ▁// if ▁( patientDAO . check DeclaredHCP ( patientMID , ▁visit . get HCPMID ())) ▁{ ▁declareAction . undeclare HCP ( mid . to String ()); ▁// } ▁visit . set Designated ( false ); ▁if ▁(0 ▁== ▁visit . get OVDate (). compareTo ("")) ▁{ ▁remove ▁= ▁visit ; ▁} ▁} ▁} ▁if ▁( null ▁ != ▁remove ) ▁{ ▁visits . remove ( remove ); ▁} ▁return ▁""; ▁} ▁/** ▁* ▁Set ▁a ▁given ▁HCP ▁as ▁declared ▁* ▁* ▁@ param ▁name ▁HCP ▁to ▁declare ▁* ▁@ return ▁An ▁empty ▁string . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁declare HCP ( String ▁name ) ▁throw s ▁iTrustException ▁{ ▁boolean ▁match ▁= ▁false ; ▁for ▁( HCPVisitBean ▁visit : ▁visits ) ▁{ ▁if ▁(0 ▁== ▁visit . get HCPName (). to Lower Case (). compareTo ( name . to Lower Case ())) ▁{ ▁match ▁= ▁true ; ▁Long ▁mid ▁= ▁Long . value Of ( visit . get HCPMID ()); ▁if ▁(! patientDAO . check DeclaredHCP ( patientMID , ▁visit . get HCPMID ())) ▁{ ▁declareAction . d eclareHCP ( mid . to String ()); ▁} ▁visit . set Designated ( true ); ▁} ▁} ▁if ▁(! match ) ▁{ ▁List < PersonnelBean > ▁doclist ▁= ▁docDAO . getAll Personnel (); ▁for ▁( PersonnelBean ▁ele : ▁doclist ) ▁{ ▁if ▁(0 ▁== ▁name . compareTo ( ele . getF ullName ())) ▁{ ▁HCPVisitBean ▁visitBean ; ▁visitBean ▁= ▁new ▁HCPVisitBean (); ▁visitBean . set HCPMID ( ele . get MID ()); ▁visitBean . set HCPName ( ele . getF ullName ()); ▁visitBean . set OVDate (" "); ▁visitBean . set HCPSpecialty ( ele . get Specialty ()); ▁visitBean . set HCPAddr ( ele . getStreetAddress 1() ▁+" ▁"+ ▁ele . getStreetAddress 2() ▁+" ▁"+ ▁ele . get City () ▁+ ", ▁"+ ▁ele . get State () ▁+" ▁"+ ▁ele . getZip ()); ▁visitBean . set Designated ( true ); ▁Long ▁mid ▁= ▁Long . value Of ( ele . get MID ()); ▁if ▁(! patientDAO . check DeclaredHCP ( patientMID , ▁mid )) ▁{ ▁declareAction . d eclareHCP ( mid . to String ()); ▁visits . add ( visitBean ); ▁} ▁} ▁} ▁} ▁return ▁""; ▁} ▁/** ▁* ▁Check ▁to ▁see ▁if ▁a ▁given ▁HCP ▁is ▁declared ▁* ▁@ param ▁mid ▁HCP ▁to ▁check ▁* ▁@ return ▁true ▁if ▁the ▁HCP ▁is ▁declared , ▁otherwise ▁false ▁*/ ▁public ▁boolean ▁ checkDeclared ( long ▁mid ) ▁{ ▁try ▁{ ▁return ▁patientDAO . check DeclaredHCP ( patientMID , ▁mid ); ▁} ▁catch ▁( DBException ▁ dbe ) ▁{ ▁return ▁false ; ▁} ▁} ▁/** ▁* ▁Filter ▁the ▁list ▁of ▁HCPs ▁by ▁last ▁name , ▁specialty , ▁or ▁zip ▁code . ▁* ▁@ param ▁do c ▁sort ▁by ▁last ▁name ▁* ▁@ param ▁specialty ▁sort ▁by ▁specialty ▁* ▁@ param ▁zip ▁sort ▁by ▁zip ▁* ▁@ return ▁sort ed ▁list ▁of ▁HCPs ▁*/ ▁public ▁List < PersonnelBean > ▁filter HCP List ( String ▁do c , ▁String ▁specialty , ▁String ▁zip ) ▁{ ▁List < PersonnelBean > ▁doclist ; ▁try ▁{ ▁doclist ▁= ▁docDAO . getAll Personnel (); ▁for ▁( PersonnelBean ▁ele : ▁doclist ) ▁{ ▁if ▁( ele . get LastName (). to Lower Case (). contains ( do c . to Lower Case ())) ▁{ ▁if ▁( null ▁ != ▁specialty ▁&& ▁! specialty . equals ("")) ▁{ ▁if ▁(0 ▁== ▁specialty . to Lower Case (). compareTo ( ele . get Specialty (). to Lower Case ())) ▁{ ▁if ▁( null ▁ != ▁zip ▁&& ▁! zip . equals ("")) ▁{ ▁if ▁( ele . getZip (). contains ( zip . substring (0, ▁2))) ▁{ ▁filterList . add ( ele ); ▁} ▁} ▁else ▁{ ▁filterList . add ( ele ); ▁} ▁} ▁} ▁else ▁if ▁( null ▁ != ▁zip ▁&& ▁! zip . equals ("")) ▁{ ▁if ▁( ele . getZip (). contains ( zip . substring (0, ▁2))) ▁{ ▁filterList . add ( ele ); ▁} ▁} ▁else ▁{ ▁filterList . add ( ele ); ▁} ▁} ▁} ▁} ▁catch ▁( DBException ▁ dbe ) ▁{ ▁} ▁return ▁filterList ; ▁} ▁}