▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . EmailUtil ; ▁import ▁edu . nc su . cs c . itrust . action . base . P atientBaseAction ; ▁import ▁edu . nc su . cs c . itrust . beans . PersonnelBean ; ▁import ▁edu . nc su . cs c . itrust . beans . AllergyBean ; ▁import ▁edu . nc su . cs c . itrust . beans . DiagnosisBean ; ▁import ▁edu . nc su . cs c . itrust . beans . Email ; ▁import ▁edu . nc su . cs c . itrust . beans . FamilyMemberBean ; ▁import ▁edu . nc su . cs c . itrust . beans . HealthRecord ; ▁import ▁edu . nc su . cs c . itrust . beans . OfficeVisitBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AllergyDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . FamilyDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . HealthRecordsDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . ICDCodesDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . OfficeVisitDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . No HealthRecords Exception ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . risk . Chronic DiseaseMediator ; ▁import ▁edu . nc su . cs c . itrust . risk . RiskChecker ; ▁import ▁edu . nc su . cs c . itrust . validate . AllergyBean Validator ; ▁/** ▁* ▁Edit s ▁the ▁patient ▁health ▁record ▁for ▁a ▁given ▁patient ▁Used ▁by ▁e ditPHR . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁EditPHRAction ▁extends ▁P atientBaseAction ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁AllergyDAO ▁allergyDAO ; ▁private ▁FamilyDAO ▁familyDAO ; ▁private ▁ HealthRecordsDAO ▁hrDAO ; ▁private ▁OfficeVisitDAO ▁ovDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁ICDCodesDAO ▁icdDAO ; ▁private ▁long ▁loggedInMID ; ▁private ▁Chronic DiseaseMediator ▁diseaseMediator ; ▁private ▁PersonnelDAO ▁personnelDAO ; ▁private ▁PersonnelBean ▁HCP UAP ; ▁private ▁PatientBean ▁patient ; ▁private ▁EmailUtil ▁emailutil ; ▁/** ▁* ▁S uper ▁class ▁validate s ▁the ▁patient ▁id ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁to ▁be ▁used ▁in ▁creating ▁DAOs ▁for ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁currently ▁logged ▁in ▁user ▁who ▁is ▁authoriz ing ▁this ▁action . ▁* ▁@ param ▁pidString ▁The ▁MID ▁of ▁the ▁patient ▁who se ▁personal ▁health ▁records ▁are ▁being ▁added . ▁* ▁@ throw s ▁iTrustException ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁No HealthRecords Exception ▁*/ ▁public ▁EditPHRAction ( DAOFactory ▁factory , ▁long ▁loggedInMID , ▁String ▁pidString ) ▁throw s ▁iTrustException , ▁DBException ▁{ ▁super ( factory , ▁pidString ); ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . allergyDAO ▁= ▁factory . get AllergyDAO (); ▁this . familyDAO ▁= ▁factory . get FamilyDAO (); ▁this . hrDAO ▁= ▁factory . get HealthRecordsDAO (); ▁this . ovDAO ▁= ▁factory . get OfficeVisitDAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . icdDAO ▁= ▁factory . get ICDCodesDAO (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . personnelDAO ▁= ▁factory . get PersonnelDAO (); ▁this . HCP UAP ▁= ▁personnelDAO . getPersonnel ( loggedInMID ); ▁this . patient ▁= ▁patientDAO . getPatient ( pid ); ▁emailutil ▁= ▁new ▁EmailUtil ( factory ); ▁this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Add s ▁an ▁allergy ▁to ▁the ▁patient ' s ▁records ▁* ▁* ▁@ param ▁pid ▁* ▁@ param ▁description ▁* ▁@ return ▁" Allergy ▁Added ", ▁exception ▁message , ▁a ▁list ▁of ▁invalid ▁fields , ▁or ▁"" ▁( only ▁if ▁description ▁is ▁* ▁null ) ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁update Allergies ( long ▁pid , ▁String ▁description ) ▁throw s ▁iTrustException ▁{ ▁emailutil . sendEmail ( makeEmail ()); ▁if ▁( description ▁ != ▁null ▁&& ▁! description . equals ("")) ▁{ ▁try ▁{ ▁AllergyBean ▁bean ▁= ▁new ▁AllergyBean (); ▁bean . set Description ( description ); ▁AllergyBean Validator ▁a b v ▁= ▁new ▁AllergyBean Validator (); ▁a b v . validate ( bean ); ▁allergyDAO . add Allergy ( pid , ▁description ); ▁transDAO . log Transaction ( TransactionType . E NTER _ EDIT _ PHR , ▁loggedInMID , ▁pid , ▁" EditPHR ▁- ▁added ▁allergy ▁" ▁+ ▁description ); ▁return ▁" Allergy ▁Added "; ▁} ▁catch ▁( FormValidat ionException ▁e 2) ▁{ ▁return ▁"< span ▁class = error > Error : ▁I nvalid ▁Field s -- " ▁+ ▁e 2 . get ErrorList () ▁+ ▁"</ span >< p ▁/> "; ▁} ▁} ▁else ▁return ▁""; ▁} ▁/** ▁* ▁Returns ▁a ▁PatientBean ▁for ▁the ▁patient ▁* ▁* ▁@ return ▁PatientBean ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁PatientBean ▁getPatient () ▁throw s ▁iTrustException ▁{ ▁transDAO . log Transaction ( TransactionType . VI EW _ RECORDS , ▁loggedInMID , ▁pid , ▁" EditPHR ▁- ▁view ▁patient ▁record ▁" ); ▁return ▁patientDAO . getPatient ( pid ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁AllergyBeans ▁for ▁the ▁patient ▁* ▁* ▁@ return ▁list ▁of ▁AllergyBeans ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < AllergyBean > ▁get Allergies () ▁throw s ▁iTrustException ▁{ ▁return ▁allergyDAO . get Allergies ( pid ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁ FamilyMemberBean s ▁for ▁the ▁patient ▁* ▁* ▁@ return ▁list ▁of ▁ FamilyMemberBean s ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < FamilyMemberBean > ▁get Family () ▁throw s ▁iTrustException ▁{ ▁List < FamilyMemberBean > ▁fam ▁= ▁new ▁ArrayList < FamilyMemberBean > (); ▁List < FamilyMemberBean > ▁parents ▁= ▁null ; ▁parents ▁= ▁familyDAO . getParent s ( pid ); ▁fam . addAll ( parents ); ▁fam . addAll ( familyDAO . get Siblings ( pid )); ▁fam . addAll ( familyDAO . get Children ( pid )); ▁if ( parents ▁ != ▁null ) ▁{ ▁List < FamilyMemberBean > ▁grandparents ▁= ▁new ▁ArrayList < FamilyMemberBean > (); ▁for ( FamilyMemberBean ▁parent ▁: ▁parents ) ▁{ ▁grandparents . addAll ( familyDAO . getParent s ( parent . get Mid ()) ); ▁} ▁fam . addAll ( grandparents ); ▁for ( FamilyMemberBean ▁gp ▁: ▁grandparents ) ▁{ ▁gp . set Relation (" G randparent "); ▁} ▁} ▁transDAO . log Transaction ( TransactionType . VI EW _ RECORDS , ▁loggedInMID , ▁pid , ▁" EditPHR ▁- ▁view ▁patient ▁family ▁information ▁" ); ▁return ▁fam ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁HealthRecords ▁for ▁the ▁patient ▁* ▁* ▁@ return ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < HealthRecord > ▁getAll HealthRecords () ▁throw s ▁iTrustException ▁{ ▁List < HealthRecord > ▁all HealthRecords ▁= ▁hrDAO . getAll HealthRecords ( pid ); ▁transDAO . log Transaction ( TransactionType . VI EW _ HEA L TH _ RECORDS , ▁loggedInMID , ▁pid , ▁" EditPHR ▁- ▁ Viewed ▁patient ▁records "); ▁return ▁all HealthRecords ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁OfficeVisitBean s ▁* ▁* ▁@ return ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < OfficeVisitBean > ▁get AllOfficeVisits () ▁throw s ▁iTrustException ▁{ ▁transDAO . log Transaction ( TransactionType . VI EW _ OFF ICE _ VISIT , ▁loggedInMID , ▁pid , ▁" EditPHR ▁- ▁view ▁patient ▁office ▁visits ▁" ); ▁return ▁ovDAO . get AllOfficeVisits ( pid ); ▁} ▁/** ▁* ▁Returns ▁a ▁complete ▁OfficeVisitBean ▁given ▁a ▁visitID ▁* ▁* ▁@ return ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁OfficeVisitBean ▁get Complete OfficeVisit ( long ▁visitID ) ▁throw s ▁iTrustException ▁{ ▁return ▁ovDAO . getOfficeVisit ( visitID ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁diseases ▁for ▁which ▁the ▁patient ▁is ▁at ▁risk ▁* ▁* ▁@ return ▁list ▁of ▁RiskChecker s ▁* ▁@ throw s ▁iTrustException ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < RiskChecker > ▁getDisease sAtRisk () ▁throw s ▁No HealthRecords Exception , iTrustException , DBException ▁{ ▁this . disease Media to r ▁= ▁new ▁Chronic DiseaseMediator ( factory , ▁pid ); ▁transDAO . log Transaction ( TransactionType . IDENTIF Y _ RIS K _ FACTORS , ▁loggedInMID , ▁pid , ▁" Check ▁for ▁risk ▁factors "); ▁return ▁diseaseMediator . getDisease AtRisk (); ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁particular ▁family ▁member ▁has ▁high ▁blood ▁pressure ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁to ▁check ▁* ▁@ return ▁true ▁if ▁the ▁family ▁member ▁has ▁high ▁blood ▁pressure . ▁Fal se ▁if ▁there ▁are ▁no ▁records ▁or ▁the ▁family ▁member ▁does ▁not ▁have ▁high ▁blood ▁pressure ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁does FamilyMemberHave High BP ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁List < HealthRecord > ▁records ▁= ▁hrDAO . getAll HealthRecords ( member . get Mid ()); ▁if ( records . size () ▁== ▁0) ▁return ▁false ; ▁for ( HealthRecord ▁record ▁: ▁records ) ▁{ ▁if ( record . getBloodPressure Systolic () ▁> ▁240 ▁|| ▁record . getBloodPressure Diastolic () ▁> ▁120 ▁ ) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁particular ▁family ▁member ▁has ▁high ▁cholesterol ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁to ▁check ▁* ▁@ return ▁true ▁if ▁the ▁family ▁member ▁has ▁high ▁cholesterol . ▁Fal se ▁if ▁there ▁are ▁no ▁records ▁or ▁the ▁family ▁member ▁does ▁not ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁does FamilyMemberHave High Cholesterol ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁List < HealthRecord > ▁records ▁= ▁hrDAO . getAll HealthRecords ( member . get Mid ()); ▁if ( records . size () ▁== ▁0) ▁return ▁false ; ▁for ( HealthRecord ▁record ▁: ▁records ) ▁{ ▁if ( record . get CholesterolHDL () ▁< ▁35 ▁|| ▁record . get CholesterolLDL () ▁> ▁250 ▁ ) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁particular ▁family ▁member ▁has ▁diabetes ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁to ▁check ▁* ▁@ return ▁true ▁if ▁the ▁family ▁member ▁has ▁diabetes . ▁Fal se ▁if ▁there ▁are ▁no ▁records ▁or ▁the ▁family ▁member ▁does ▁not ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁does FamilyMemberHave Diabetes ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁List < DiagnosisBean > ▁diagnoses ▁= ▁patientDAO . getDiagnose s ( member . get Mid ()); ▁if ( diagnoses . size () ▁== ▁0) ▁return ▁false ; ▁for ( DiagnosisBean ▁diag ▁: ▁diagnoses ) ▁{ ▁if ( diag . getICDCode (). start sWith (" 250 ")) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁particular ▁family ▁member ▁has ▁cancer ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁to ▁check ▁* ▁@ return ▁true ▁if ▁the ▁family ▁member ▁has ▁cancer . ▁Fal se ▁if ▁there ▁are ▁no ▁records ▁or ▁the ▁family ▁member ▁does ▁not ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁does FamilyMemberHave Cancer ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁List < DiagnosisBean > ▁diagnoses ▁= ▁patientDAO . getDiagnose s ( member . get Mid ()); ▁if ( diagnoses . size () ▁== ▁0) ▁return ▁false ; ▁for ( DiagnosisBean ▁diag ▁: ▁diagnoses ) ▁{ ▁if ( diag . getICDCode (). start sWith (" 1 99 ")) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁particular ▁family ▁member ▁has ▁he art ▁disease ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁to ▁check ▁* ▁@ return ▁true ▁if ▁the ▁family ▁member ▁has ▁he art ▁disease . ▁Fal se ▁if ▁there ▁are ▁no ▁records ▁or ▁the ▁family ▁member ▁does ▁not ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁does FamilyMemberHave HeartDisease ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁List < DiagnosisBean > ▁diagnoses ▁= ▁patientDAO . getDiagnose s ( member . get Mid ()); ▁if ( diagnoses . size () ▁== ▁0) ▁return ▁false ; ▁for ( DiagnosisBean ▁diag ▁: ▁diagnoses ) ▁{ ▁if ( diag . getICDCode (). start sWith (" 402 ")) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁particular ▁family ▁member ▁smok es ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁to ▁check ▁* ▁@ return ▁true ▁if ▁the ▁family ▁member ▁smok es . ▁Fal se ▁if ▁there ▁are ▁no ▁records ▁or ▁the ▁family ▁member ▁does ▁not ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁is FamilyMember Smoker ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁List < HealthRecord > ▁records ▁= ▁hrDAO . getAll HealthRecords ( member . get Mid ()); ▁if ( records . size () ▁== ▁0) ▁return ▁false ; ▁for ( HealthRecord ▁record ▁: ▁records ) ▁{ ▁if ( record . isSmoker ()) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁the ▁family ▁member ▁is ▁de ad ▁and ▁return s ▁the ir ▁cause ▁of ▁death ▁if ▁so ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁to ▁check ▁* ▁@ return ▁the ▁cause ▁of ▁death ▁if ▁there ▁is ▁one ; ▁otherwise ▁null ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁getFamilyMember COD ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁PatientBean ▁patient ▁= ▁patientDAO . getPatient ( member . get Mid ()); ▁if ( patient . get CauseOfDeath () ▁== ▁null ) ▁return ▁""; ▁DiagnosisBean ▁diag ▁= ▁icdDAO . getICDCode ( patient . get CauseOfDeath ()); ▁if ( diag ▁== ▁null ) ▁return ▁""; ▁return ▁diag . get Description (); ▁} ▁/** ▁* ▁Create s ▁a ▁fake ▁e - mail ▁to ▁not ify ▁the ▁user ▁that ▁the ir ▁records ▁have ▁been ▁altered . ▁* ▁* ▁@ return ▁the ▁e - mail ▁to ▁be ▁sent ▁* ▁@ throw s ▁DBException ▁*/ ▁private ▁Email ▁makeEmail () ▁throw s ▁DBException { ▁Email ▁email ▁= ▁new ▁Email (); ▁List < PatientBean > ▁reps ▁= ▁patientDAO . get Representing ( patient . get MID ()); ▁List < String > ▁toAddrs ▁= ▁new ▁ArrayList < String > (); ▁toAddrs . add ( patient . getEmail ()); ▁for ▁( PatientBean ▁r : ▁reps ) ▁{ ▁toAddrs . add ( r . getEmail ()); ▁} ▁email . set From (" no - reply @ itrust . com "); ▁email . s etToList ( toAddrs ); ▁// ▁patient ▁and ▁personal ▁representative ▁email . set Subject ( String . format (" You r ▁medical ▁records ▁have ▁been ▁altered ")); ▁email . s etBody (" Health ▁care ▁professional ▁"+ ▁HCP UAP . getF ullName () ▁+" ▁has ▁altered ▁your ▁medical ▁records . ▁" ▁+ ▁" S h e ▁is ▁not ▁on ▁your ▁list ▁of ▁designated ▁health ▁care ▁professional s . "); ▁return ▁email ; ▁} ▁}