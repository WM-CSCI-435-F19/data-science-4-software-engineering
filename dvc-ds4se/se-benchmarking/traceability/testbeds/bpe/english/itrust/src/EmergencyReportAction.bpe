▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . List ; ▁import ▁java . util . Calendar ; ▁import ▁edu . nc su . cs c . itrust . action . base . P atientBaseAction ; ▁import ▁edu . nc su . cs c . itrust . beans . AllergyBean ; ▁import ▁edu . nc su . cs c . itrust . beans . DiagnosisBean ; ▁import ▁edu . nc su . cs c . itrust . beans . Email ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PrescriptionBean ; ▁import ▁edu . nc su . cs c . itrust . beans . OfficeVisitBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AllergyDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . OfficeVisitDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . Pr escriptionAlerts ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . EmailUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . ProcedureBean ; ▁/** ▁* ▁Create s ▁a ▁new ▁Emergency ▁Report ▁Used ▁by ▁e mergencyReport . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁Emergency ReportAction ▁extends ▁P atientBaseAction ▁{ ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁AllergyDAO ▁allergyDAO ; ▁private ▁OfficeVisitDAO ▁ovDAO ; ▁private ▁PatientBean ▁pb ; ▁private ▁EmailUtil ▁emailutil ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁The ▁super ▁class ▁handle s ▁validat ing ▁the ▁pid ▁Log s ▁viewing ▁of ▁the ▁report ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁in ▁creating ▁the ▁DAOs ▁for ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁user ▁who ▁is ▁look ing ▁at ▁the ▁emergency ▁report . ▁* ▁@ param ▁pidString ▁The ▁ID ▁of ▁the ▁patient ▁who se ▁report ▁is ▁being ▁generated . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁Emergency ReportAction ( DAOFactory ▁factory , ▁long ▁loggedInMID , ▁String ▁pidString ) ▁throw s ▁iTrustException ▁{ ▁super ( factory , ▁pidString ); ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . allergyDAO ▁= ▁factory . get AllergyDAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . ovDAO ▁= ▁factory . get OfficeVisitDAO (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁emailutil ▁= ▁new ▁EmailUtil ( factory ); ▁pb ▁= ▁patientDAO . getPatient ( this . pid ); ▁transDAO . log Transaction ( TransactionType . VI EW _ EM ER G ENC Y _ REPORT , ▁this . loggedInMID , ▁Long . value Of ( pidString ) , ▁" view ed ▁emergency ▁report "); ▁emailutil . sendEmail ( makeEmail ()); ▁} ▁/** ▁* ▁Returns ▁the ▁patient ' s ▁name ▁* ▁* ▁@ return ▁patient ' s ▁full ▁name ▁*/ ▁public ▁String ▁get PatientName () ▁{ ▁return ▁( pb . get FirstName () ▁+ ▁" ▁" ▁+ ▁pb . get LastName ()); ▁} ▁/** ▁* ▁Returns ▁the ▁patient ' s ▁age ▁* ▁* ▁@ return ▁patient ' s ▁age ▁*/ ▁public ▁String ▁getPatient Age () ▁{ ▁return ▁Integer . to String ( pb . getAge ()); ▁} ▁/** ▁* ▁Returns ▁the ▁patient ' s ▁gender ▁* ▁* ▁@ return ▁patient ' s ▁gender ▁*/ ▁public ▁String ▁getPatient Gender () ▁{ ▁return ▁pb . get Gender (). to String (); ▁} ▁/** ▁* ▁Returns ▁the ▁patient ' s ▁emergency ▁contact ▁* ▁* ▁@ return ▁patient ' s ▁emergency ▁contact ▁*/ ▁public ▁String ▁getPatient Emergency Contact () ▁{ ▁return ▁pb . getEmergency Name () ▁+ ▁" ▁" ▁+ ▁pb . get EmergencyPhone (); ▁} ▁/** ▁* ▁Returns ▁the ▁patient ' s ▁blood ▁type ▁* ▁* ▁@ return ▁the ▁patient ' s ▁blood ▁type ▁*/ ▁public ▁String ▁get BloodType () ▁{ ▁return ▁pb . get BloodType () ▁+ ▁""; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁allergies ▁for ▁the ▁given ▁patient ▁* ▁* ▁@ return ▁a ▁list ▁of ▁AllergyBeans ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < AllergyBean > ▁get Allergies () ▁throw s ▁iTrustException ▁{ ▁return ▁allergyDAO . get Allergies ( this . pid ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁prescriptions ▁the ▁patient ▁is ▁currently ▁taking ▁* ▁* ▁@ return ▁a ▁list ▁of ▁ PrescriptionBean s ▁for ▁which ▁the ▁patient ▁is ▁currently ▁taking ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < PrescriptionBean > ▁ getCurrent Prescriptions () ▁throw s ▁iTrustException ▁{ ▁List < PrescriptionBean > ▁ allPrescriptions ▁= ▁patientDAO . getCurrent Prescriptions ( this . pid ); ▁ArrayList < PrescriptionBean > ▁warningList ▁= ▁new ▁ArrayList < PrescriptionBean > (); ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁ allPrescriptions . size (); ▁i ++) ▁{ ▁if ▁( Pr escriptionAlerts . is Alert ( allPrescriptions . get ( i ) . get Medication (). getNDCode ())) ▁warningList . add ( allPrescriptions . get ( i )); ▁} ▁return ▁warningList ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁diagnoses ▁that ▁are ▁in ▁the ▁range ▁indicated ▁by ▁the ▁ Diagnosis R an ge ▁enum ▁* ▁* ▁@ return ▁list ▁of ▁DiagnosisBean s ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < DiagnosisBean > ▁get Warning Diagnoses () ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁boolean ▁ dup ▁= ▁false ; ▁List < DiagnosisBean > ▁all Diagnoses ▁= ▁patientDAO . getDiagnose s ( this . pid ); ▁ArrayList < DiagnosisBean > ▁warningList ▁= ▁new ▁ArrayList < DiagnosisBean > (); ▁for ▁( DiagnosisBean ▁bean : ▁all Diagnoses ) ▁{ ▁OfficeVisitBean ▁ov b ▁= ▁ovDAO . getOfficeVisit ( bean . get VisitID ()); ▁if ( ov b ▁== ▁null ){ ▁continue ; ▁} ▁if ▁ (" yes " . equals ( bean . get Classification ()) ▁|| ▁( ov b . getVisitDate (). getTime () ▁> ▁Calendar . get Instance (). getTime InM illi s () ▁- ▁30 ▁* ▁24 ▁* ▁60 ▁* ▁60 ▁* ▁1000 )) ▁{ ▁for ▁( DiagnosisBean ▁w bean : ▁warningList ) ▁{ ▁if ▁( bean . get Description (). equals ( w bean . get Description ())) ▁{ ▁ dup ▁= ▁true ; ▁} ▁} ▁if ▁(! dup ) ▁{ ▁warningList . add ( bean ); ▁} ▁} ▁} ▁return ▁warningList ; ▁} ▁catch ▁( DBException ▁ dbe ) ▁{ ▁throw ▁new ▁iTrustException ( dbe . getMessage ()); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁prescriptions ▁the ▁patient ▁is ▁currently ▁taking ▁* ▁* ▁@ return ▁a ▁list ▁of ▁ PrescriptionBean s ▁for ▁which ▁the ▁patient ▁is ▁currently ▁taking ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < ProcedureBean > ▁getImmunization s () ▁throw s ▁iTrustException ▁{ ▁List < ProcedureBean > ▁all Immunizations ▁= ▁patientDAO . get Immunization Procedures ( this . pid ); ▁return ▁all Immunizations ; ▁} ▁/** ▁* ▁Create s ▁a ▁fake ▁e - mail ▁to ▁not ify ▁the ▁user ▁that ▁an ▁emergency ▁report ▁has ▁been ▁created ▁and ▁viewed . ▁* ▁* ▁@ return ▁the ▁e - mail ▁to ▁be ▁sent ▁* ▁@ throw s ▁DBException ▁*/ ▁private ▁Email ▁makeEmail () ▁throw s ▁DBException { ▁Email ▁email ▁= ▁new ▁Email (); ▁List < PatientBean > ▁reps ▁= ▁patientDAO . get Representing ( pb . get MID ()); ▁List < String > ▁toAddrs ▁= ▁new ▁ArrayList < String > (); ▁toAddrs . add ( pb . getEmail ()); ▁for ▁( PatientBean ▁r : ▁reps ) ▁{ ▁toAddrs . add ( r . getEmail ()); ▁} ▁email . set From (" no - reply @ itrust . com "); ▁email . s etToList ( toAddrs ); ▁// ▁patient ▁and ▁personal ▁representative ▁email . set Subject ( String . format (" Emergency ▁Report ▁ Viewed ▁ Notification ")); ▁email . s etBody (" Dea r ▁" ▁+ ▁pb . getF ullName () ▁+ ▁" , \ n ▁An ▁emergency ▁report ▁has ▁been ▁generated . ▁" ▁+ ▁" P lease ▁login ▁to ▁iTrust ▁to ▁see ▁who ▁has ▁viewed ▁your ▁records . "); ▁return ▁email ; ▁} ▁}