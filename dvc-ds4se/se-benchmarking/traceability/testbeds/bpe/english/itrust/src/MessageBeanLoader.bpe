▁p ackage ▁edu . nc su . cs c . itrust . beans . loaders ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . beans . MessageBean ; ▁/** ▁* ▁A ▁loader ▁for ▁MessageBeans . ▁* ▁* ▁Load s ▁in ▁information ▁to / from ▁beans ▁using ▁ResultSet s ▁and ▁P reparedStatement s . ▁Use ▁the ▁superclass ▁to ▁enforce ▁consistency . ▁* ▁For ▁details ▁on ▁the ▁para dig m ▁for ▁a ▁loader ▁( and ▁what ▁its ▁methods ▁do ) , ▁see ▁ {@ link ▁BeanLoader } ▁*/ ▁public ▁class ▁MessageBean Loader ▁implement s ▁BeanLoader < MessageBean > ▁{ ▁public ▁List < MessageBean > ▁load List ( ResultSet ▁rs ) ▁throw s ▁SQLException ▁{ ▁List < MessageBean > ▁list ▁= ▁new ▁ArrayList < MessageBean > (); ▁while ▁( rs . next ()) ▁list . add ( loadSingle ( rs )); ▁return ▁list ; ▁} ▁public ▁P reparedStatement ▁load Parameters ( P reparedStatement ▁ps , ▁MessageBean ▁message ) ▁throw s ▁SQLException ▁{ ▁ps . s etLong ( 1, ▁message . get From ()); ▁ps . s etLong (2, ▁message . getTo ()); ▁ps . set String ( 3, ▁message . getBody ()); ▁ps . set String ( 4, ▁message . get Subject ()); ▁ps . set Int (5, ▁message . get Read ()); ▁if ▁( message . getParent MessageI d () ▁ != ▁0 L ) ▁{ ▁ps . s etLong (6, ▁message . getParent MessageI d ()); ▁} ▁return ▁ps ; ▁} ▁public ▁MessageBean ▁loadSingle ( ResultSet ▁rs ) ▁throw s ▁SQLException ▁{ ▁MessageBean ▁message ▁= ▁new ▁MessageBean (); ▁message . set MessageI d ( rs . getLong (" message _ id ")); ▁message . set From ( rs . getLong (" from _ id ")); ▁message . setTo ( rs . getLong (" to _ id ")); ▁message . set Subject ( rs . get String (" subject ")); ▁message . s etBody ( rs . get String (" message ")); ▁message . setSen tDate ( rs . get Timestamp (" sent _ date ")); ▁message . set Read ( rs . getInt (" b ee n _ read ")); ▁message . setParent MessageI d ( rs . getLong (" parent _ msg _ id ")); ▁return ▁message ; ▁} ▁}