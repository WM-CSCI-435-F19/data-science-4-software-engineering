▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . text . ParseException ; ▁import ▁java . text . SimpleDateFormat ; ▁import ▁java . util . Date ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . beans . TransactionBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁/** ▁* ▁Handle s ▁retriev ing ▁the ▁log ▁of ▁record ▁accesses ▁for ▁a ▁given ▁user ▁Used ▁by ▁view AccessLog . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁ViewMy AccessLogAction ▁{ ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁Set ▁up ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁person ▁retriev ing ▁the ▁log s . ▁*/ ▁public ▁ViewMy AccessLogAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁TransactionBean s ▁between ▁the ▁two ▁dates ▁passed ▁as ▁params ▁* ▁* ▁@ param ▁lower Date ▁* ▁the ▁first ▁date ▁* ▁@ param ▁upperDate ▁* ▁the ▁second ▁date ▁* ▁@ return ▁list ▁of ▁TransactionBean s ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁List < TransactionBean > ▁get Accesse s ( String ▁lower Date , ▁String ▁upperDate , ▁boolean ▁get ByRole ) ▁throw s ▁DBException , ▁ FormValidat ionException ▁{ ▁List < TransactionBean > ▁accesses ; ▁if ▁( lower Date ▁== ▁null ▁|| ▁upperDate ▁== ▁null ) ▁return ▁transDAO . getAll Record Accesse s ( loggedInMID , ▁get ByRole ); ▁String ▁message ▁= ▁""; ▁try ▁{ ▁Date ▁lower ▁= ▁new ▁ SimpleDateFormat (" MM / dd / yyyy "). parse ( lower Date ); ▁Date ▁upper ▁= ▁new ▁ SimpleDateFormat (" MM / dd / yyyy "). parse ( upper Date ); ▁if ▁( lower . after ( upper )) ▁throw ▁new ▁ FormValidat ionException (" Start ▁date ▁must ▁be ▁before ▁end ▁date ! "); ▁message ▁= ▁" for ▁dates ▁between ▁" ▁+ ▁lower Date ▁+ ▁" ▁and ▁" ▁+ ▁upperDate ; ▁transDAO . log Transaction ( TransactionType . VI EW _ ACCESS _ LOG , ▁loggedInMID , ▁0 L , ▁message ); ▁accesses ▁= ▁transDAO . get Record Accesse s ( loggedInMID , ▁lower , ▁upper , ▁get ByRole ); ▁} ▁catch ▁( ParseException ▁e ) ▁{ ▁throw ▁new ▁ FormValidat ionException (" Enter ▁dates ▁in ▁ MM / dd / yyyy "); ▁} ▁return ▁accesses ; ▁} ▁/** ▁* ▁Returns ▁the ▁date ▁of ▁the ▁first ▁ Transaction ▁in ▁the ▁list ▁passed ▁as ▁a ▁ param ▁if ▁the ▁list ▁is ▁not ▁empty ▁* ▁otherwise , ▁return s ▁today ' s ▁date ▁* ▁* ▁@ param ▁accesses ▁A ▁java . util . List ▁of ▁TransactionBean s ▁for ▁the ▁accesses . ▁* ▁@ return ▁A ▁String ▁representing ▁the ▁date ▁of ▁the ▁first ▁transaction . ▁*/ ▁public ▁String ▁get Default Start ( List < TransactionBean > ▁accesses ) ▁{ ▁String ▁startDate ▁= ▁""; ▁if ▁( accesses . size () ▁> ▁0) ▁{ ▁startDate ▁= ▁new ▁ SimpleDateFormat (" MM / dd / yyyy "). format ( new ▁Date ( accesses . get ( accesses . size () ▁- ▁1) ▁ . get TimeLogged (). getTime ()) ); ▁} ▁else ▁{ ▁startDate ▁= ▁new ▁ SimpleDateFormat (" MM / dd / yyyy "). format ( new ▁Date ()); ▁} ▁return ▁startDate ; ▁} ▁/** ▁* ▁Returns ▁the ▁date ▁of ▁the ▁last ▁ Transaction ▁in ▁the ▁list ▁passed ▁as ▁a ▁ param ▁if ▁the ▁list ▁is ▁not ▁empty ▁* ▁otherwise , ▁return s ▁today ' s ▁date ▁* ▁* ▁@ param ▁accesses ▁A ▁java . util . List ▁of ▁TransactionBean s ▁stor ing ▁the ▁access . ▁* ▁@ return ▁A ▁String ▁representation ▁of ▁the ▁date ▁of ▁the ▁last ▁transaction . ▁*/ ▁public ▁String ▁get Default End ( List < TransactionBean > ▁accesses ) ▁{ ▁String ▁endDate ▁= ▁""; ▁if ▁( accesses . size () ▁> ▁0) ▁{ ▁endDate ▁= ▁new ▁ SimpleDateFormat (" MM / dd / yyyy "). format ( new ▁Date ( accesses . get (0) . get TimeLogged () ▁ . getTime ()) ); ▁} ▁else ▁{ ▁endDate ▁= ▁new ▁ SimpleDateFormat (" MM / dd / yyyy "). format ( new ▁Date ()); ▁} ▁return ▁endDate ; ▁} ▁}