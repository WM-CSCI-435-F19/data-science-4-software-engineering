▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . beans . AllergyBean ; ▁import ▁edu . nc su . cs c . itrust . beans . DiagnosisBean ; ▁import ▁edu . nc su . cs c . itrust . beans . Email ; ▁import ▁edu . nc su . cs c . itrust . beans . FamilyMemberBean ; ▁import ▁edu . nc su . cs c . itrust . beans . HealthRecord ; ▁import ▁edu . nc su . cs c . itrust . beans . LabProcedureBean ; ▁import ▁edu . nc su . cs c . itrust . beans . OfficeVisitBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PersonnelBean ; ▁import ▁edu . nc su . cs c . itrust . beans . R eportRequestBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AllergyDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . FakeEmailDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . FamilyDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . HealthRecordsDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . LabProcedureDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . OfficeVisitDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . ReportRequestDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . SurveyDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . ICDCodesDAO ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Handle s ▁patients ▁viewing ▁the ir ▁own ▁records ▁Used ▁by ▁v iewMyRecords . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁View MyRecordsAction ▁{ ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁PersonnelDAO ▁personnelDAO ; ▁private ▁AllergyDAO ▁allergyDAO ; ▁private ▁FamilyDAO ▁familyDAO ; ▁private ▁ HealthRecordsDAO ▁hrDAO ; ▁private ▁OfficeVisitDAO ▁ovDAO ; ▁private ▁SurveyDAO ▁surveyDAO ; ▁private ▁LabProcedureDAO ▁lab DAO ; ▁private ▁FakeEmailDAO ▁emailDAO ; ▁private ▁ICDCodesDAO ▁icdDAO ; ▁private ▁ ReportRequestDAO ▁ reportRequestDAO ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁Set ▁up ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁person ▁viewing ▁the ▁records . ▁*/ ▁public ▁View MyRecordsAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . personnelDAO ▁= ▁factory . get PersonnelDAO (); ▁this . allergyDAO ▁= ▁factory . get AllergyDAO (); ▁this . familyDAO ▁= ▁factory . get FamilyDAO (); ▁this . hrDAO ▁= ▁factory . get HealthRecordsDAO (); ▁this . ovDAO ▁= ▁factory . get OfficeVisitDAO (); ▁this . surveyDAO ▁= ▁factory . get SurveyDAO (); ▁this . la b DAO ▁= ▁factory . get LabProcedureDAO (); ▁this . email DAO ▁= ▁factory . get FakeEmailDAO (); ▁this . reportRequestDAO ▁= ▁factory . get ReportRequestDAO (); ▁this . icdDAO ▁= ▁factory . get ICDCodesDAO (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁} ▁/** ▁* ▁T akes ▁the ▁patient ' s ▁representee ▁as ▁a ▁ param ▁and ▁return s ▁it ▁as ▁a ▁long ▁if ▁the ▁patient ▁represents ▁the ▁input ▁* ▁ param ▁* ▁* ▁@ param ▁input ▁* ▁the ▁patient ' s ▁representee ▁mid ▁* ▁@ return ▁representee ' s ▁mid ▁as ▁a ▁long ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁long ▁represent Patient ( String ▁input ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁reppeeMID ▁= ▁Long . value Of ( input ); ▁if ▁( patientDAO . represents ( loggedInMID , ▁reppeeMID )) ▁{ ▁loggedInMID ▁= ▁reppeeMID ; ▁return ▁reppeeMID ; ▁} ▁else ▁throw ▁new ▁iTrustException (" You ▁do ▁not ▁represent ▁patient ▁" ▁+ ▁reppeeMID ); ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁throw ▁new ▁iTrustException (" MID ▁is ▁not ▁a ▁number "); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁PatientBean ▁for ▁the ▁currently ▁logged ▁in ▁patient ▁* ▁* ▁@ return ▁PatientBean ▁for ▁the ▁currently ▁logged ▁in ▁patient ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁PatientBean ▁getPatient () ▁throw s ▁iTrustException ▁{ ▁return ▁patientDAO . getPatient ( loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁a ▁PatientBean ▁for ▁the ▁specified ▁MID ▁* ▁@ param ▁mid ▁id ▁of ▁the ▁requested ▁bean ▁* ▁@ return ▁PatientBean ▁for ▁the ▁specified ▁MID ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁PatientBean ▁getPatient ( long ▁mid ) ▁throw s ▁iTrustException ▁{ ▁return ▁patientDAO . getPatient ( mid ); ▁} ▁/** ▁* ▁Returns ▁a ▁PersonnelBean ▁for ▁the ▁requested ▁MID ▁* ▁@ param ▁mid ▁id ▁of ▁the ▁requested ▁bean ▁* ▁@ return ▁a ▁PersonnelBean ▁for ▁the ▁requested ▁MID ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁PersonnelBean ▁getPersonnel ( long ▁mid ) ▁throw s ▁iTrustException ▁{ ▁return ▁personnelDAO . getPersonnel ( mid ); ▁} ▁/** ▁* ▁Returns ▁a ▁PatientBean ▁for ▁the ▁currently ▁logged ▁in ▁patient ▁* ▁* ▁@ return ▁PatientBean ▁for ▁the ▁currently ▁logged ▁in ▁patient ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < Email > ▁get EmailHistory () ▁throw s ▁iTrustException ▁{ ▁return ▁emailDAO . getEmail sBy Person ( getPatient (). getEmail ()); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁AllergyBeans ▁for ▁the ▁currently ▁logged ▁in ▁patient ▁* ▁* ▁@ return ▁a ▁list ▁of ▁AllergyBeans ▁for ▁the ▁currently ▁logged ▁in ▁patient ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < AllergyBean > ▁get Allergies () ▁throw s ▁iTrustException ▁{ ▁return ▁allergyDAO . get Allergies ( loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁Parents , ▁ Siblings , ▁and ▁ Children ▁of ▁the ▁currently ▁logged ▁in ▁patient ▁* ▁* ▁@ return ▁list ▁of ▁ FamilyMemberBean s ▁*/ ▁public ▁List < FamilyMemberBean > ▁get Family () ▁throw s ▁iTrustException ▁{ ▁List < FamilyMemberBean > ▁fam ▁= ▁new ▁ArrayList < FamilyMemberBean > (); ▁List < FamilyMemberBean > ▁parents ▁= ▁null ; ▁try ▁{ ▁parents ▁= ▁familyDAO . getParent s ( loggedInMID ); ▁fam . addAll ( parents ); ▁fam . addAll ( familyDAO . get Siblings ( loggedInMID )); ▁fam . addAll ( familyDAO . get Children ( loggedInMID )); ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁throw ▁new ▁iTrustException ( e . getMessage ()); ▁} ▁if ( parents ▁ != ▁null ) ▁{ ▁List < FamilyMemberBean > ▁grandparents ▁= ▁new ▁ArrayList < FamilyMemberBean > (); ▁for ( FamilyMemberBean ▁parent ▁: ▁parents ) ▁{ ▁try ▁{ ▁grandparents . addAll ( familyDAO . getParent s ( parent . get Mid ()) ); ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁throw ▁new ▁iTrustException ( e . getMessage ()); ▁} ▁} ▁fam . addAll ( grandparents ); ▁for ( FamilyMemberBean ▁gp ▁: ▁grandparents ) ▁{ ▁gp . set Relation (" G randparent "); ▁} ▁} ▁return ▁fam ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁Parents , ▁ Siblings , ▁and ▁Gra n d ▁Parents ▁of ▁the ▁currently ▁logged ▁in ▁patient ▁* ▁* ▁@ return ▁list ▁of ▁ FamilyMemberBean s ▁*/ ▁public ▁List < FamilyMemberBean > ▁get FamilyHistory () ▁throw s ▁iTrustException ▁{ ▁List < FamilyMemberBean > ▁fam ▁= ▁new ▁ArrayList < FamilyMemberBean > (); ▁List < FamilyMemberBean > ▁parents ▁= ▁null ; ▁try ▁{ ▁parents ▁= ▁familyDAO . getParent s ( loggedInMID ); ▁fam . addAll ( parents ); ▁fam . addAll ( familyDAO . get Siblings ( loggedInMID )); ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁throw ▁new ▁iTrustException ( e . getMessage ()); ▁} ▁if ( parents ▁ != ▁null ) ▁{ ▁List < FamilyMemberBean > ▁grandparents ▁= ▁new ▁ArrayList < FamilyMemberBean > (); ▁for ( FamilyMemberBean ▁parent ▁: ▁parents ) ▁{ ▁try ▁{ ▁grandparents . addAll ( familyDAO . getParent s ( parent . get Mid ()) ); ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁throw ▁new ▁iTrustException ( e . getMessage ()); ▁} ▁} ▁fam . addAll ( grandparents ); ▁for ( FamilyMemberBean ▁gp ▁: ▁grandparents ) ▁{ ▁gp . set Relation (" G randparent "); ▁} ▁} ▁return ▁fam ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁HealthRecords ▁for ▁the ▁currently ▁logged ▁in ▁patient ▁* ▁* ▁@ return ▁a ▁list ▁of ▁HealthRecords ▁for ▁the ▁currently ▁logged ▁in ▁patient ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < HealthRecord > ▁getAll HealthRecords () ▁throw s ▁iTrustException ▁{ ▁return ▁hrDAO . getAll HealthRecords ( loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁HealthRecords ▁for ▁the ▁specified ▁family ▁member ▁* ▁* ▁@ return ▁a ▁list ▁of ▁HealthRecords ▁for ▁the ▁specified ▁family ▁member ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < HealthRecord > ▁get Family HealthRecords ( long ▁mid ) ▁throw s ▁iTrustException ▁{ ▁return ▁hrDAO . getAll HealthRecords ( mid ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁OfficeVisitBean s ▁for ▁all ▁office ▁visits ▁for ▁the ▁currently ▁logged ▁in ▁patient ▁* ▁* ▁@ return ▁a ▁list ▁of ▁OfficeVisitBean s ▁for ▁all ▁office ▁visits ▁for ▁the ▁currently ▁logged ▁in ▁patient ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < OfficeVisitBean > ▁get AllOfficeVisits () ▁throw s ▁iTrustException ▁{ ▁return ▁ovDAO . get AllOfficeVisits ( loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁a ▁complete ▁OfficeVisitBean ▁given ▁a ▁visitID ▁* ▁* ▁@ return ▁a ▁complete ▁OfficeVisitBean ▁given ▁a ▁visitID ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁OfficeVisitBean ▁get Complete OfficeVisit ( long ▁visitID ) ▁throw s ▁iTrustException ▁{ ▁return ▁ovDAO . getOfficeVisit ( visitID ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁PatientBeans ▁of ▁all ▁patients ▁the ▁currently ▁logged ▁in ▁patient ▁represents ▁* ▁* ▁@ return ▁a ▁list ▁of ▁PatientBeans ▁of ▁all ▁patients ▁the ▁currently ▁logged ▁in ▁patient ▁represents ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < PatientBean > ▁get Represented () ▁throw s ▁iTrustException ▁{ ▁return ▁patientDAO . get Represented ( loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁PatientBeans ▁of ▁all ▁patients ▁the ▁currently ▁logged ▁in ▁patient ▁represents ▁* ▁* ▁@ return ▁a ▁list ▁of ▁PatientBeans ▁of ▁all ▁patients ▁the ▁currently ▁logged ▁in ▁patient ▁represents ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < PatientBean > ▁get Representing () ▁throw s ▁iTrustException ▁{ ▁return ▁patientDAO . get Representing ( loggedInMID ); ▁} ▁/** ▁* ▁Has ▁a ▁survey ▁been ▁created ▁for ▁this ▁office ▁visit ▁* ▁* ▁@ param ▁visitID ▁ID ▁of ▁the ▁office ▁visit ▁in ▁question ▁* ▁@ return ▁true ▁if ▁the ▁survey ▁has ▁been ▁completed , ▁otherwise ▁false ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁is Survey Completed ( long ▁visitID ) ▁throw s ▁iTrustException ▁{ ▁return ▁surveyDAO . is Survey Completed ( visitID ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁lab ▁procedures ▁* ▁* ▁@ return ▁a ▁list ▁of ▁lab ▁procedures ▁for ▁the ▁logged ▁in ▁patient ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LabProcedureBean > ▁ getLab s () ▁throw s ▁iTrustException ▁{ ▁return ▁lab DAO . getLabProcedure sForPatient ( loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁all ▁the ▁report ▁requests ▁for ▁the ▁logged ▁in ▁patient ▁* ▁@ return ▁the ▁report ▁requests ▁for ▁the ▁logged ▁in ▁patient ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < R eportRequestBean > ▁get ReportRequests () ▁throw s ▁iTrustException ▁{ ▁return ▁ reportRequestDAO . getAll ReportRequest sForPatient ( loggedInMID ); ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁family ▁members ▁have ▁high ▁blood ▁pressure ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁in ▁question ▁* ▁@ return ▁true ▁if ▁the ▁family ▁member ▁has ▁the ▁risk ▁factor , ▁otherwise ▁false . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁does FamilyMemberHave High BP ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁List < HealthRecord > ▁records ▁= ▁hrDAO . getAll HealthRecords ( member . get Mid ()); ▁if ( records . size () ▁== ▁0) ▁return ▁false ; ▁for ( HealthRecord ▁record ▁: ▁records ) ▁{ ▁if ( record . getBloodPressure Systolic () ▁> ▁240 ▁|| ▁record . getBloodPressure Diastolic () ▁> ▁120 ▁ ) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁family ▁members ▁have ▁high ▁cholesterol ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁in ▁question ▁* ▁@ return ▁true ▁if ▁the ▁family ▁member ▁has ▁the ▁risk ▁factor , ▁otherwise ▁false . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁does FamilyMemberHave High Cholesterol ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁List < HealthRecord > ▁records ▁= ▁hrDAO . getAll HealthRecords ( member . get Mid ()); ▁if ( records . size () ▁== ▁0) ▁return ▁false ; ▁for ( HealthRecord ▁record ▁: ▁records ) ▁{ ▁if ( record . get CholesterolHDL () ▁< ▁35 ▁|| ▁record . get CholesterolLDL () ▁> ▁250 ▁ ) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁family ▁members ▁have ▁diabetes ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁in ▁question ▁* ▁@ return ▁true ▁if ▁the ▁family ▁member ▁has ▁the ▁risk ▁factor , ▁otherwise ▁false . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁does FamilyMemberHave Diabetes ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁List < DiagnosisBean > ▁diagnoses ▁= ▁patientDAO . getDiagnose s ( member . get Mid ()); ▁if ( diagnoses . size () ▁== ▁0) ▁return ▁false ; ▁for ( DiagnosisBean ▁diag ▁: ▁diagnoses ) ▁{ ▁if ( diag . getICDCode (). start sWith (" 250 ")) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁family ▁members ▁have ▁cancer ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁in ▁question ▁* ▁@ return ▁true ▁if ▁the ▁family ▁member ▁has ▁the ▁risk ▁factor , ▁otherwise ▁false . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁does FamilyMemberHave Cancer ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁List < DiagnosisBean > ▁diagnoses ▁= ▁patientDAO . getDiagnose s ( member . get Mid ()); ▁if ( diagnoses . size () ▁== ▁0) ▁return ▁false ; ▁for ( DiagnosisBean ▁diag ▁: ▁diagnoses ) ▁{ ▁if ( diag . getICDCode (). start sWith (" 1 99 ")) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁family ▁members ▁have ▁he art ▁disease ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁in ▁question ▁* ▁@ return ▁true ▁if ▁the ▁family ▁member ▁has ▁the ▁risk ▁factor , ▁otherwise ▁false . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁does FamilyMemberHave HeartDisease ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁List < DiagnosisBean > ▁diagnoses ▁= ▁patientDAO . getDiagnose s ( member . get Mid ()); ▁if ( diagnoses . size () ▁== ▁0) ▁return ▁false ; ▁for ( DiagnosisBean ▁diag ▁: ▁diagnoses ) ▁{ ▁if ( diag . getICDCode (). start sWith (" 402 ")) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁family ▁members ▁smok e ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁in ▁question ▁* ▁@ return ▁true ▁if ▁the ▁family ▁member ▁has ▁the ▁risk ▁factor , ▁otherwise ▁false . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁is FamilyMember Smoker ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁List < HealthRecord > ▁records ▁= ▁hrDAO . getAll HealthRecords ( member . get Mid ()); ▁if ( records . size () ▁== ▁0) ▁return ▁false ; ▁for ( HealthRecord ▁record ▁: ▁records ) ▁{ ▁if ( record . isSmoker ()) ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁family ▁member ▁is ▁de ad , ▁and ▁if ▁so , ▁what ▁the ir ▁cause ▁of ▁death ▁was ▁* ▁* ▁@ param ▁member ▁the ▁family ▁member ▁in ▁question ▁* ▁@ return ▁the ▁cause ▁of ▁death ▁for ▁the ▁family ▁member ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁getFamilyMember COD ( FamilyMemberBean ▁member ) ▁throw s ▁iTrustException ▁{ ▁PatientBean ▁patient ▁= ▁patientDAO . getPatient ( member . get Mid ()); ▁if ( patient . get CauseOfDeath () ▁== ▁null ) ▁return ▁""; ▁DiagnosisBean ▁diag ▁= ▁icdDAO . getICDCode ( patient . get CauseOfDeath ()); ▁if ( diag ▁== ▁null ) ▁return ▁""; ▁return ▁diag . get Description (); ▁} ▁}