▁p ackage ▁edu . nc su . cs c . itrust . validate ; ▁import ▁edu . nc su . cs c . itrust . beans . LOINCbean ; ▁import ▁edu . nc su . cs c . itrust . exception . ErrorList ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁/** ▁* ▁ Validator ▁used ▁to ▁validate ▁LOINCbean ▁*/ ▁public ▁class ▁LOINC BeanValidator ▁extends ▁ BeanValidator < LOINCbean > ▁{ ▁/** ▁* ▁The ▁default ▁constructor . ▁*/ ▁public ▁LOINC BeanValidator () ▁{ ▁} ▁/** ▁* ▁Perform s ▁the ▁act ▁of ▁validat ing ▁the ▁bean ▁in ▁question , ▁which ▁varie s ▁depend ing ▁on ▁the ▁* ▁type ▁of ▁validator . ▁If ▁the ▁validation ▁does ▁not ▁succeed , ▁a ▁ {@ link ▁ FormValidat ionException } ▁is ▁thrown . ▁* ▁* ▁@ param ▁p ▁A ▁bean ▁of ▁the ▁type ▁to ▁be ▁validated . ▁*/ ▁@ O verride ▁public ▁void ▁validate ( LOINCbean ▁m ) ▁throw s ▁ FormValidat ionException ▁{ ▁ErrorList ▁errorList ▁= ▁new ▁ErrorList (); ▁if ( m . get LabProcedureCode ()== null ▁|| ▁m . get Component ()== null ▁|| ▁m . get KindOfProperty ()== null ){ ▁throw ▁new ▁ FormValidat ionException (" You ▁must ▁have ▁a ▁Lab ▁Procedure ▁Code , ▁ Component ▁and ▁ Kind ▁ Of ▁Property "); ▁} ▁errorList . add If Not Null ( check Format (" Laboratory ProcedureCode ", ▁m . get LabProcedureCode (), ▁ ValidationFormat . LOINC , ▁false )); ▁errorList . add If Not Null ( check Format (" Component ", ▁m . get Component (), ▁ ValidationFormat . LOINC _ ITEM , ▁false )); ▁errorList . add If Not Null ( check Format (" KindOfProperty ", ▁m . get KindOfProperty (), ▁ ValidationFormat . LOINC _ ITEM , ▁false )); ▁errorList . add If Not Null ( check Format (" TimeAspect ", ▁m . get TimeAspect (), ▁ ValidationFormat . LOINC _ ITEM , ▁true )); ▁errorList . add If Not Null ( check Format (" System ", ▁m . get System (), ▁ ValidationFormat . LOINC _ ITEM , ▁true )); ▁errorList . add If Not Null ( check Format (" ScaleType ", m . get ScaleType (), ▁ ValidationFormat . LOINC _ ITEM , ▁true )); ▁errorList . add If Not Null ( check Format (" MethodType ", ▁m . get MethodType (), ▁ ValidationFormat . LOINC _ ITEM , ▁true )); ▁if ▁( errorList . has Errors ()) ▁throw ▁new ▁ FormValidat ionException ( errorList ); ▁} ▁}