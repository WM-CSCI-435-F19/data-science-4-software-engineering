▁<%@ ▁page ▁language =" java " ▁content Type =" text / html ; ▁char set = UTF - 8 " ▁page Encoding =" UTF - 8 "%> ▁<%@ page ▁import =" java . io .* "%> ▁<%@ page ▁import =" java . util .* "%> ▁<%@ page ▁import =" java . util . regex . Pattern " ▁%> ▁<%@ page ▁import =" java x . xml . parse rs .* " ▁%> ▁<%@ page ▁import =" org . xml . sa x .* " ▁%> ▁<%@ page ▁import =" org . xml . sa x . helper s .* " ▁%> ▁<%@ page ▁import =" java . text . SimpleDateFormat " ▁%> ▁<%@ page ▁import =" java . text . ParseException " ▁%> ▁< html ▁ xml n s =" http :// w ww . w 3 . org / 1999 / x html "> ▁< head > ▁< style ▁type =" text / css "> ▁ . fancyTable ▁{ ▁ font - family : " Tre b uch et ▁ MS ", ▁Arial , ▁He l ve tic a , ▁ san s - s er if ; ▁width :100%; ▁border - collapse : collapse ; ▁} ▁ . fancyTable ▁ td , ▁ . fancyTable ▁ th ▁{ ▁ font - size : . 8 em ; ▁back g round - color : ▁# FFFFFF ; ▁border : 1 px ▁solid ▁# 4 F 708 D ; ▁padding : 1 px ▁2 px ▁1 px ▁2 px ; ▁} ▁ . fancyTable ▁ th ▁{ ▁ font - size : 1 em ; ▁text - align : center ; ▁padding - top : 0 px ; ▁padding - bottom : 0 px ; ▁back g round - color :# 4 F 708 D ; ▁color :# ff ffff ; ▁} ▁ . fancyTable ▁ tr . alt ▁ td ▁{ ▁color :# 0 0 0000 ; ▁back g round - color :# DD DD FF ; ▁} ▁</ style > ▁</ head > ▁< body ▁ style =" margin - left : 15 0 px ;"> ▁<% ▁final ▁String ▁path ▁= ▁" http :// localhost :808 0 / iTrust / util / blackbox "; ▁class ▁TestParser ▁{ ▁class ▁ BlackBoxTest ▁{ ▁private ▁String ▁id ▁= ▁""; ▁private ▁String ▁dateAdded ▁= ▁""; ▁private ▁String ▁dateModified ▁= ▁""; ▁private ▁String ▁ author ▁= ▁""; ▁private ▁String ▁role ▁= ▁""; ▁private ▁String ▁use Case ▁= ▁""; ▁private ▁String ▁description ▁= ▁""; ▁private ▁ LinkedList < String > ▁precondition ▁= ▁new ▁ LinkedList < String > (); ▁private ▁ LinkedList < String > ▁step ▁= ▁new ▁ LinkedList < String > (); ▁private ▁String ▁expected Results ▁= ▁""; ▁private ▁ LinkedList < String > ▁eResult ▁= ▁new ▁ LinkedList < String > (); ▁private ▁String ▁actual Results ▁= ▁""; ▁private ▁ LinkedList < String > ▁a Result ▁= ▁new ▁ LinkedList < String > (); ▁public ▁void ▁set Id ( String ▁id ) ▁{ ▁this . id ▁= ▁id ; ▁} ▁public ▁String ▁get Id () ▁{ ▁return ▁id ; ▁} ▁public ▁void ▁set Author ( String ▁ author ) ▁{ ▁this . author ▁= ▁ author ; ▁} ▁public ▁String ▁get Author () ▁{ ▁return ▁ author ; ▁} ▁public ▁void ▁set Role ( String ▁role ) ▁{ ▁this . role ▁= ▁role ; ▁} ▁public ▁String ▁getRole () ▁{ ▁return ▁role ; ▁} ▁public ▁void ▁set UseCase ( String ▁u c ) ▁{ ▁this . use Case ▁= ▁u c ; ▁} ▁public ▁String ▁get UseCase () ▁{ ▁return ▁use Case ; ▁} ▁public ▁void ▁set DateAdded ( String ▁da ) ▁{ ▁dateAdded ▁= ▁da ; ▁} ▁public ▁String ▁get DateAdded () ▁{ ▁return ▁dateAdded ; ▁} ▁public ▁void ▁set DateModified ( String ▁d m ) ▁{ ▁dateModified ▁= ▁d m ; ▁} ▁public ▁String ▁get DateModified () ▁{ ▁return ▁dateModified ; ▁} ▁public ▁String ▁get Description () ▁{ ▁if ( p re c ond i tion . size () ▁== ▁0 ▁&& ▁step . size () ▁== ▁0) ▁{ ▁return ▁description ; ▁} ▁String ▁d ▁= ▁"< st rong > Precondition s :</ st rong >< br />" ; ▁for ( String ▁p ▁: ▁precondition ) ▁{ ▁d ▁= ▁d ▁+ ▁" - -> ▁" ▁+ ▁p ▁+ ▁"< br />" ; ▁} ▁d ▁= ▁d ▁+ ▁"< br / >< st rong > ST EP S :</ st rong >< br />" ; ▁for ( int ▁i ▁= ▁1; ▁i ▁< ▁step . size () +1 ; ▁i ++) ▁{ ▁d ▁= ▁d ▁+ ▁"\ t " ▁+ ▁i ▁+ ▁" ) ▁" ▁+ ▁step . get ( i -1 ) ▁+ ▁"< br />" ; ▁} ▁return ▁d ; ▁} ▁public ▁String ▁get Ex p e ct ed Results () ▁{ ▁String ▁e R ▁= ▁""; ▁for ( String ▁e ▁: ▁eResult ) ▁{ ▁e R ▁= ▁e R ▁+ ▁" - -> ▁" ▁+ ▁e ▁+ ▁"< br />" ; ▁} ▁return ▁e R ; ▁} ▁public ▁String ▁ getActual Results () ▁{ ▁String ▁a R ▁= ▁""; ▁for ( String ▁a ▁: ▁a Result ) ▁{ ▁a R ▁= ▁a R ▁+ ▁" - -> ▁" ▁+ ▁a ▁+ ▁"< br />" ; ▁} ▁return ▁a R ; ▁} ▁public ▁void ▁set Precondition ( String ▁p ) ▁{ ▁precondition . add ( p ); ▁} ▁public ▁void ▁set Step ( String ▁ s ) ▁{ ▁step . add ( s ); ▁} ▁public ▁void ▁set E Result ( String ▁e ) ▁{ ▁eResult . add ( e ); ▁} ▁public ▁void ▁setA Result ( String ▁a ) ▁{ ▁a Result . add ( a ); ▁} ▁public ▁void ▁set Description ( String ▁d ) ▁{ ▁this . description ▁= ▁d ; ▁} ▁} ▁class ▁ Sort By Test ID ▁implement s ▁ Comparator < BlackBoxTest > ▁{ ▁public ▁int ▁compare ( BlackBoxTest ▁arg 0 , ▁ BlackBoxTest ▁arg 1) ▁{ ▁String ▁x ▁= ▁arg 0 . get Id (); ▁String ▁ y ▁= ▁arg 1 . get Id (); ▁return ▁x . compareTo ( y ); ▁} ▁} ▁private ▁ LinkedList < BlackBoxTest > ▁bbt ▁= ▁new ▁ LinkedList < BlackBoxTest > (); ▁private ▁ LinkedList < String > ▁role s ▁= ▁new ▁ LinkedList < String > (); ▁private ▁ BlackBoxTest ▁test ; ▁private ▁String ▁ tempVal ▁= ▁""; ▁public ▁ LinkedList < BlackBoxTest > ▁get Test s () ▁{ ▁return ▁bbt ; ▁} ▁private ▁void ▁parse Document () ▁throw s ▁Exception { ▁// get ▁a ▁factory ▁SAX P a rs er Factor y ▁sp f ▁= ▁SAX P a rs er Factor y . new Instance (); ▁// get ▁a ▁new ▁instance ▁of ▁parse r ▁SAX P a rs er ▁sp ▁= ▁sp f . new S A XP a rs er (); ▁ Default Handler ▁handler ▁= ▁new ▁ Default Handler () ▁{ ▁public ▁void ▁start Element ( String ▁uri , ▁String ▁local Name , ▁String ▁ qName , ▁Attributes ▁attributes ) ▁throw s ▁SAX Exception ▁{ ▁// re set ▁ tempVal ▁= ▁""; ▁if ( qName . equals I gnore Case (" Test ")) ▁{ ▁// create ▁a ▁new ▁instance ▁of ▁employee ▁test ▁= ▁new ▁ BlackBoxTest (); ▁test . set Id ( attributes . get Value (" id ")); ▁} ▁} ▁public ▁void ▁characters ( char [ ] ▁ c h , ▁int ▁start , ▁int ▁length ) ▁throw s ▁SAX Exception ▁{ ▁ tempVal ▁= ▁new ▁String ( c h , start , length ); ▁} ▁public ▁void ▁end Element ( String ▁uri , ▁String ▁local Name , ▁String ▁ qName ) ▁throw s ▁SAX Exception ▁{ ▁if ( qName . equals I gnore Case (" Test ")) ▁{ ▁// add ▁it ▁to ▁the ▁list ▁bbt . add ( test ); ▁} else ▁if ▁( qName . equals I gnore Case (" DateAdded ")) ▁{ ▁test . set DateAdded ( tempVal ); ▁} else ▁if ▁( qName . equals I gnore Case (" DateModified ")) ▁{ ▁test . set DateModified ( tempVal ); ▁} else ▁if ▁( qName . equals I gnore Case (" Author ")) ▁{ ▁test . set Author ( tempVal ); ▁} ▁else ▁if ▁( qName . equals I gnore Case (" Description ")) ▁{ ▁test . set Description ( tempVal ); ▁} ▁else ▁if ▁( qName . equals I gnore Case (" Precondition ")) ▁{ ▁test . set Precondition ( tempVal ); ▁} ▁else ▁if ▁( qName . equals I gnore Case (" e Result ")) ▁{ ▁test . set E Result ( tempVal ); ▁} ▁else ▁if ▁( qName . equals I gnore Case (" Step ")) ▁{ ▁test . set Step ( tempVal ); ▁} ▁else ▁if ▁( qName . equals I gnore Case (" a Result ")) ▁{ ▁test . set A Result ( tempVal ); ▁} else ▁if ▁( qName . equals I gnore Case (" Role ")) ▁{ ▁test . set Role ( tempVal ); ▁if (! role s . contains ( tempVal )) ▁{ ▁role s . add ( tempVal ); ▁} ▁} else ▁if ▁( qName . equals I gnore Case (" UseCase ")) ▁{ ▁test . set UseCase ( tempVal ); ▁} ▁} ▁} ; ▁// parse ▁the ▁file ▁and ▁also ▁register ▁this ▁class ▁for ▁call ▁back s ▁sp . parse ( path +" / BlackBoxTest P la n . xml ", ▁handler ); ▁} ▁private ▁ LinkedList < String > ▁getRole s List () ▁{ ▁return ▁role s ; ▁} ▁private ▁ LinkedList < BlackBoxTest > ▁get Test s For Role ( String ▁r ) ▁{ ▁ LinkedList < BlackBoxTest > ▁testList ▁= ▁new ▁ LinkedList < BlackBoxTest > (); ▁for ( BlackBoxTest ▁b ▁: ▁bbt ) ▁{ ▁if ( b . getRole (). equals ( r )) ▁{ ▁testList . add ( b ); ▁} ▁} ▁return ▁testList ; ▁} ▁private ▁ LinkedList < String > ▁get HTML Output ( LinkedList < BlackBoxTest > ▁list ) ▁{ ▁ LinkedList < String > ▁testList ▁= ▁new ▁ LinkedList < String > (); ▁Col lections . sort ( list , ▁new ▁ Sort By Test ID ()); ▁for ( BlackBoxTest ▁b ▁: ▁list ) ▁{ ▁String ▁temp ▁= ▁""; ▁temp += ▁"\ n \ t \ t < td > " ▁+ ▁b . get Id () ▁+ ▁"</ td > "; ▁temp += ▁"\ n \ t \ t < td > " ▁+ ▁b . get Description () ▁ +"</ td > "; ▁temp += ▁"\ n \ t \ t < td > " ▁+ ▁b . get Ex p e ct ed Results () ▁+ ▁"</ td > "; ▁temp += ▁"\ n \ t \ t < td > " ▁+ ▁b . getActual Results () ▁+ ▁"</ td > "; ▁temp += ▁"\ n \ t \ t < td > " ▁+ ▁b . get UseCase () ▁+ ▁"</ td > "; ▁temp += ▁"\ n \ t \ t < td > " ▁+ ▁b . getRole () ▁+ ▁"</ td > "; ▁temp += ▁"\ n \ t \ t < td > " ▁+ ▁b . get DateAdded () ▁+ ▁"</ td > "; ▁temp += ▁"\ n \ t \ t < td > " ▁+ ▁b . get DateModified () ▁+ ▁"</ td > "; ▁testList . add ( temp ); ▁} ▁return ▁testList ; ▁} ▁} ▁TestParser ▁t ▁= ▁new ▁TestParser (); ▁t . parse Document (); ▁ LinkedList < String > ▁rolesList ▁= ▁t . getRole s List (); ▁%> ▁<% ▁for ( String ▁role ▁: ▁rolesList ) ▁{ ▁%> ▁< div ▁align =" left ">< p ▁ style =" font - family : ver dan a ; font - size : 1 em ; ">< a ▁name ="<%= role %>"><%= role ▁%></ p ></ div > ▁< table ▁class =" fancyTable "> ▁< tr ▁class =" fancyTable "> ▁< th ▁ style =" width : 1 0%"> Test ▁ID </ th > ▁< th ▁ style =" width : 3 0%"> Description </ th > ▁< th ▁ style =" width : 3 0%"> Ex p e ct ed ▁Results </ th > ▁< th ▁ style =" width :5%"> A ct ual ▁Results </ th > ▁< th ▁ style =" width :5%"> U se ▁ Case </ th > ▁< th ▁ style =" width :5%"> Role </ th > ▁< th ▁ style =" width :5%"> Date ▁Added </ th > ▁< th ▁ style =" width :5%"> Date ▁Mo d if ied </ th > ▁</ tr > ▁<% ▁int ▁i ▁= ▁0; ▁ LinkedList < String > ▁output List ▁= ▁t . get HTML Output ( t . get Test s For Role ( role )); ▁for ( String ▁test ▁: ▁output List ) ▁{ ▁%> ▁< tr ▁v align =" top " ▁<% if ( i %2 ▁== ▁0){ ▁%> class =" alt " ▁<%} ▁%> > ▁<%= test ▁%> ▁</ tr > ▁<% ▁i ++; ▁} ▁%> ▁</ table > ▁<% ▁} ▁%> ▁< script > ▁if ▁(! document . layers ) ▁document . write (' < div ▁id =" div S tayTopLeft " ▁ style =" position : absolute " >') ▁</ script > ▁< layer ▁id =" div S tayTopLeft "> ▁<!-- EDIT ▁BE LOW ▁ CODE ▁ TO ▁ Y OUR ▁O WN ▁ ME NU - -> ▁< table ▁border ="1" ▁width =" 130 " ▁cell spac ing ="0" ▁cell padding ="0" > ▁< tr > ▁< td ▁width ="100 %" ▁b g color ="# FF FF CC "> ▁< p ▁align =" center ">< b >< font ▁size ="3"> Table ▁of ▁Content s </ font ></ b ></ td > ▁</ tr > ▁< tr > ▁< td ▁width ="100 %" ▁b g color ="# FFFFFF "> ▁< p ▁align =" left "> ▁< a ▁href ="/ iTrust " ▁ style =" font - size : 12 px ; ">< ▁ Back ▁to ▁iTrust </ a >< br / >< br / > ▁<% ▁for ( String ▁role ▁: ▁rolesList ) ▁{ ▁%> ▁< a ▁href ="<%= " # "+ role %>" ▁ style =" font - size : 15 px ;"><%= role ▁%></ a >< br > ▁<% ▁} ▁%> ▁</ td > ▁</ tr > ▁</ table > ▁<!-- END ▁ OF ▁ EDIT - -> ▁</ layer > ▁< script ▁type =" text / javascript "> ▁/* ▁ Float ing ▁ Menu ▁ script - ▁R o y ▁Whit tle ▁( http :// w ww . javascript - f x . com / ) ▁ Script ▁feature d ▁on / a va i l able ▁at ▁http :// w ww . d ynamic drive . com / ▁This ▁notice ▁must ▁st a y ▁int act ▁for ▁use ▁*/ ▁// Enter ▁" from bottom " ▁or ▁" from top " ▁var ▁ vertical pos =" from top " ▁if ▁(! document . layers ) ▁document . write (' </ div >') ▁function ▁JS FX _ Float Top Di v () ▁{ ▁var ▁startX ▁= ▁5 , ▁startY ▁= ▁5 ; ▁var ▁n s ▁= ▁( n a v i g at or . app Name . index Of (" Net scape ") ▁ != ▁-1) ; ▁var ▁d ▁= ▁document ; ▁function ▁ ml ( id ) ▁{ ▁var ▁el = d . getElementById ? d . getElementById ( id ) : d . all ? d . all [ id ] : d . layers [ id ] ; ▁if ( d . layers ) el . style = el ; ▁el . s P = function ( x , y ){ this . style . left = x ; this . style . top = y ; }; ▁el . x ▁= ▁startX ; ▁if ▁( vertical pos = =" from top ") ▁el . y ▁= ▁startY ; ▁else { ▁el . y ▁= ▁n s ▁? ▁page Y Offset ▁+ ▁ innerH eight ▁: ▁document . body . scrollTop ▁+ ▁document . body . client Height ; ▁el . y ▁- = ▁startY ; ▁} ▁return ▁el ; ▁} ▁ window . stayTopLeft = function () ▁{ ▁if ▁( vertical pos = =" from top " ){ ▁var ▁p Y ▁= ▁n s ▁? ▁page Y Offset ▁: ▁document . body . scrollTop ; ▁ftlObj . y ▁+= ▁( pY ▁+ ▁startY ▁- ▁ftlObj . y ) /8 ; ▁} ▁else { ▁var ▁p Y ▁= ▁n s ▁? ▁page Y Offset ▁+ ▁ innerH eight ▁: ▁document . body . scrollTop ▁+ ▁document . body . client Height ; ▁ftlObj . y ▁+= ▁( pY ▁- ▁startY ▁- ▁ftlObj . y ) /8 ; ▁} ▁ftlObj . s P ( f tl Ob j . x , ▁ftlObj . y ); ▁set Timeout (" stayTopLeft () ", ▁10); ▁} ▁ftlObj ▁= ▁ ml (" div S tayTopLeft "); ▁ stayTopLeft (); ▁} ▁JS FX _ Float Top Di v (); ▁</ script > ▁</ body > ▁</ html >