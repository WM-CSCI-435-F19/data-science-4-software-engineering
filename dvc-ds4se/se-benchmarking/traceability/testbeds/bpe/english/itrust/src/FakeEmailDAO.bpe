▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . Email ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . Email BeanLoader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁/** ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁FakeEmailDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁EmailBeanLoader ▁emailBeanLoader ▁= ▁new ▁EmailBeanLoader (); ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁FakeEmailDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Return ▁all ▁emails ▁that ▁have ▁been ▁" sent " ▁( insert ed ▁into ▁the ▁database ) ▁* ▁* ▁@ return ▁A ▁java . util . List ▁of ▁Email ▁object s ▁representing ▁fake ▁e - mail s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < Email > ▁getAll Email s () ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁FakeEmail ▁OR DER ▁ BY ▁ AddedDate ▁DESC "); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁emailBeanLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Return ▁all ▁emails ▁that ▁a ▁person ▁has ▁sent ▁* ▁* ▁@ param ▁email ▁The ▁" From " ▁email ▁address ▁as ▁a ▁string . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁fake ▁emails . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < Email > ▁ getEmail sBy Person ( String ▁email ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁FakeEmail ▁ WH ERE ▁ ToAddr ▁ LIKE ▁? ▁OR DER ▁ BY ▁ AddedDate ▁DESC "); ▁ps . set String ( 1, ▁"%" ▁+ ▁email ▁+ ▁"% "); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁emailBeanLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁" Send " ▁an ▁email , ▁which ▁just ▁insert s ▁it ▁into ▁the ▁database . ▁* ▁* ▁@ param ▁email ▁The ▁Email ▁object ▁to ▁insert . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁ sendEmail Record ( Email ▁email ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁FakeEmail ▁( ToAddr , ▁ FromAddr , ▁Subject , ▁ Body ) ▁" ▁+ ▁" VALUES ▁ (?,?,?,? )"); ▁emailBeanLoader . load Parameters ( ps , ▁email ); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁emails ▁that ▁have ▁the ▁given ▁string ▁as ▁a ▁ substring ▁of ▁the ▁body ▁* ▁@ param ▁string ▁The ▁string ▁to ▁search ▁within ▁the ▁body . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁fake ▁emails . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < Email > ▁ getEmail With Body ( String ▁body S u b string ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁FakeEmail ▁ WH ERE ▁In str ( Body , ? ) > 0 ▁OR DER ▁ BY ▁ AddedDate ▁DESC "); ▁ps . set String ( 1, ▁body S u b string ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁emailBeanLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}