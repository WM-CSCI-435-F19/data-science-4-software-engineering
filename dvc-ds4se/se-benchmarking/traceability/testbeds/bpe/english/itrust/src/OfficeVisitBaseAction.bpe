▁p ackage ▁edu . nc su . cs c . itrust . action . base ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . OfficeVisitDAO ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁An ▁abstract ▁class ▁which ▁contains ▁function al it ies ▁common ▁amo ng ▁all ▁action s ▁relat ing ▁to ▁insert ing ▁and ▁editing ▁* ▁office ▁visits . ▁B ecause ▁all ▁office ▁visits ▁are ▁with ▁a ▁certain ▁patient , ▁OfficeVisit BaseAction ▁extends ▁* ▁P atientBaseAction . ▁* ▁* ▁Use ▁this ▁class ▁when ever ▁you ▁have ▁a ▁page ▁which ▁not ▁only ▁requires ▁a ▁patient ▁MID , ▁but ▁an ▁office ▁visit ▁ID . ▁Pass ▁* ▁ th ose ▁ID s ▁to ▁the ▁constructor , ▁and ▁an ▁exception ▁will ▁be ▁thrown ▁if ▁they ▁are ▁not ▁valid ▁ID s ▁( which ▁should ▁kick ▁* ▁the ▁user ▁out ▁to ▁the ▁ home ▁page ) . ▁* ▁* ▁The ▁con c ret e ▁methods ▁created ▁by ▁this ▁class ▁allow ▁for ▁its ▁as s o c i ation ▁with ▁the ▁unique ▁identifier ▁of ▁a ▁given ▁* ▁office ▁visit . ▁These ▁identifier s ▁can ▁also ▁be ▁verified ▁for ▁the ir ▁correct ness ▁and ▁existence . ▁* ▁* ▁Ver y ▁similar ▁to ▁ {@ link ▁P atientBaseAction } ▁and ▁ {@ link ▁Personnel BaseAction } ▁*/ ▁abstract ▁public ▁class ▁OfficeVisit BaseAction ▁extends ▁P atientBaseAction ▁{ ▁/** ▁* ▁A ▁database ▁access ▁object ▁for ▁deal ing ▁with ▁office ▁visits . ▁*/ ▁private ▁OfficeVisitDAO ▁ovDAO ; ▁/** ▁* ▁The ▁unique ▁identifier ▁of ▁the ▁office ▁visit ▁this ▁action ▁is ▁associate d ▁with . ▁*/ ▁ protected ▁long ▁ovID ; ▁/** ▁* ▁The ▁default ▁constructor . ▁* ▁* ▁@ param ▁factory ▁* ▁A ▁database ▁access ▁object ▁factory ▁for ▁supply ing ▁a ▁runtime ▁context . ▁* ▁@ param ▁pidString ▁* ▁The ▁patient ' s ▁MID ▁as ▁a ▁String , ▁to ▁be ▁passed ▁to ▁the ▁super ▁constructor ▁( for ▁P atientBaseAction ) ▁* ▁@ param ▁ovIDString ▁* ▁The ▁unique ▁identifier ▁of ▁the ▁office ▁visit ▁as ▁a ▁String . ▁* ▁@ throw s ▁iTrustException ▁* ▁If ▁any ▁of ▁the ▁suppl ied ▁parameters ▁is ▁incorrect ▁or ▁there ▁is ▁a ▁DB ▁problem . ▁*/ ▁public ▁OfficeVisit BaseAction ( DAOFactory ▁factory , ▁String ▁pidString , ▁String ▁ovIDString ) ▁throw s ▁iTrustException ▁{ ▁super ( factory , ▁pidString ); ▁this . ovDAO ▁= ▁factory . get OfficeVisitDAO (); ▁this . ovID ▁= ▁check OfficeVisitID ( ovID String ); ▁} ▁/** ▁* ▁A s s erts ▁whether ▁this ▁unique ▁office ▁visit ▁identifier ▁both ▁exists ▁and ▁is ▁associate d ▁with ▁the ▁patient ▁in ▁* ▁the ▁database . ▁* ▁* ▁@ param ▁input ▁* ▁The ▁pre sumed ▁identifier ▁as ▁a ▁String . ▁* ▁@ return ▁The ▁same ▁identifier ▁as ▁a ▁long ▁of ▁the ▁existing ▁office ▁visit . ▁* ▁@ throw s ▁iTrustException ▁* ▁If ▁the ▁visit ▁does ▁not ▁exist ▁or ▁if ▁there ▁is ▁a ▁DB ▁problem . ▁*/ ▁private ▁long ▁check OfficeVisitID ( String ▁input ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁encode ( input ); ▁long ▁ovID ▁= ▁Long . value Of ( input ); ▁if ▁( ovDAO . check OfficeVisit E xists ( ovID , ▁pid )) ▁return ▁ovID ; ▁else ▁throw ▁new ▁iTrustException (" Office ▁Visit ▁" ▁+ ▁ovID ▁+ ▁" ▁with ▁Patient ▁MID ▁" ▁+ ▁pid ▁+ ▁" ▁does ▁not ▁exist "); ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁throw ▁new ▁iTrustException (" Office ▁Visit ▁ID ▁is ▁not ▁a ▁number : ▁" ▁+ ▁e . getMessage ()); ▁} ▁} ▁/** ▁* ▁For ▁obtain ing ▁the ▁unique ▁identifier ▁of ▁the ▁office ▁visit ▁this ▁action ▁is ▁associate d ▁with . ▁* ▁* ▁@ return ▁A ▁long ▁of ▁the ▁identifier . ▁*/ ▁public ▁long ▁ getOv ID () ▁{ ▁return ▁ovID ; ▁} ▁/** ▁* ▁Convert s ▁all ▁characters ▁of ▁the ▁input ▁string ▁to ▁the ir ▁ HTML ▁special ▁characters ▁ equiv a len t ▁representation . ▁* ▁Explicit ly , ▁the ▁ less ▁than ▁symbol ▁become s ▁ lt , ▁the ▁greate r ▁than ▁symbol ▁become s ▁ gt ▁and ▁a ▁newline ▁f e ed ▁* ▁become s ▁ br . ▁* ▁* ▁@ param ▁input ▁* ▁The ▁string ▁to ▁encode . ▁* ▁@ return ▁The ▁encoded ▁string . ▁*/ ▁public ▁String ▁encode ( String ▁input ) ▁{ ▁String ▁str ▁= ▁input . replace All ("< ", ▁"& lt ; "); ▁str ▁= ▁str . replace All (" > ", ▁"& gt ; "); ▁str ▁= ▁str . replace All ("\ n ", ▁"< br ▁/> "); ▁return ▁str ; ▁} ▁}