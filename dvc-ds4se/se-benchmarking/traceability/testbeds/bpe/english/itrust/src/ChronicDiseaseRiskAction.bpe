▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . action . base . P atientBaseAction ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AuthDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . No HealthRecords Exception ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . risk . Chronic DiseaseMediator ; ▁import ▁edu . nc su . cs c . itrust . risk . RiskChecker ; ▁/** ▁* ▁* ▁Used ▁for ▁chronic DiseaseRisks . jsp . ▁Pass es ▁most ▁of ▁the ▁logic ▁of f ▁to ▁ {@ link ▁Chronic DiseaseMediator }, ▁and ▁the ▁* ▁vari ous ▁subclass es ▁of ▁ {@ link ▁RiskChecker } . ▁* ▁* ▁@ author ▁Andy ▁Men e ely ▁* ▁*/ ▁public ▁class ▁ChronicDisease RiskAction ▁extends ▁P atientBaseAction ▁{ ▁private ▁AuthDAO ▁authDAO ; ▁private ▁long ▁loggedInMID ; ▁private ▁Chronic DiseaseMediator ▁diseaseMediator ; ▁private ▁TransactionDAO ▁transDAO ; ▁/** ▁* ▁* ▁@ param ▁factory ▁* ▁@ param ▁loggedInMID ▁* ▁@ param ▁pidString ▁* ▁The ▁patient ▁ID ▁to ▁be ▁validated ▁and ▁used ▁* ▁@ throw s ▁iTrustException ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁No HealthRecords Exception ▁* ▁This ▁is ▁thrown ▁if ▁a ▁patient ▁is ▁added ▁without ▁any ▁health ▁records ▁to ▁be ▁checked . ▁T ry ▁to ▁a void ▁* ▁ having ▁this ▁exception ▁be ▁thrown ▁in ▁a ▁normal ▁flow ▁of ▁events . ▁* ▁@ author ▁Andy ▁Men e ely ▁*/ ▁public ▁ChronicDisease RiskAction ( DAOFactory ▁factory , ▁long ▁loggedInMID , ▁String ▁pidString ) ▁throw s ▁iTrustException , ▁DBException , ▁No HealthRecords Exception ▁{ ▁super ( factory , ▁pidString ); ▁this . authDAO ▁= ▁factory . get AuthDAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . disease Media to r ▁= ▁new ▁Chronic DiseaseMediator ( factory , ▁pid ); ▁} ▁/** ▁* ▁Returns ▁the ▁ID ▁of ▁the ▁patient ▁to ▁be ▁checked . ▁* ▁* ▁@ return ▁patient ▁ID ▁who se ▁risk ▁we ▁are ▁checking ▁* ▁@ author ▁Andy ▁Men e ely ▁*/ ▁public ▁long ▁ getPatientID () ▁{ ▁return ▁pid ; ▁} ▁/** ▁* ▁Give s ▁the ▁full ▁name ▁of ▁the ▁patient ▁* ▁* ▁@ return ▁ Full ▁name ▁of ▁the ▁patient ▁who ▁we ▁are ▁checking ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁* ▁@ author ▁Andy ▁Men e ely ▁*/ ▁public ▁String ▁ getUserName () ▁throw s ▁DBException , ▁iTrustException ▁{ ▁return ▁authDAO . getUserName ( pid ); ▁} ▁/** ▁* ▁Returns ▁the ▁risk s ▁for ▁which ▁this ▁patient ▁is ▁at ▁risk ▁for . ▁All ▁logic ▁has ▁been ▁passed ▁to ▁* ▁ {@ link ▁Chronic DiseaseMediator } ▁and ▁the ▁subclass es ▁of ▁ {@ link ▁RiskChecker } . ▁* ▁* ▁@ return ▁List ▁of ▁risk s ▁* ▁@ throw s ▁iTrustException ▁* ▁@ throw s ▁DBException ▁* ▁@ author ▁Andy ▁Men e ely ▁*/ ▁public ▁List < RiskChecker > ▁getDisease sAtRisk () ▁throw s ▁iTrustException , ▁DBException ▁{ ▁transDAO . log Transaction ( TransactionType . IDENTIF Y _ RIS K _ FACTORS , ▁loggedInMID , ▁pid , ▁" "); ▁return ▁diseaseMediator . getDisease AtRisk (); ▁} ▁}