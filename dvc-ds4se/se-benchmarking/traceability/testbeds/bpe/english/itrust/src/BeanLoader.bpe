▁p ackage ▁edu . nc su . cs c . itrust . beans . loaders ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁/** ▁* ▁This ▁interface ▁help s ▁enforce ▁the ▁para dig m ▁of ▁what ▁should ▁be ▁contain ed ▁in ▁a ▁loader . ▁* ▁* ▁The ▁gener ic ▁type ▁< T > ▁specifie s ▁the ▁type ▁of ▁bean ▁that ▁the ▁loader ▁is ▁responsible ▁for ▁ext acting ▁from ▁* ▁a ▁result ▁set . ▁* ▁* ▁@ param ▁< T > ▁A ▁type ▁for ▁the ▁bean ▁that ▁will ▁be ▁loaded ▁with ▁this ▁class . ▁*/ ▁public ▁interface ▁BeanLoader < T > ▁{ ▁/** ▁* ▁Load s ▁a ▁list ▁of ▁the ▁bean ▁of ▁type ▁T ▁from ▁a ▁result ▁set . ▁T y p ical ly ▁make s ▁iterate d ▁calls ▁* ▁to ▁loadSingle . ▁* ▁@ param ▁rs ▁The ▁java . sql . ResultSet ▁we ▁are ▁extract ing . ▁* ▁@ return ▁A ▁java . util . List < T > ▁where ▁T ▁is ▁the ▁type ▁for ▁this ▁loader . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁List < T > ▁load List ( ResultSet ▁rs ) ▁throw s ▁SQLException ; ▁/** ▁* ▁C ontains ▁the ▁instructions ▁for ▁map p ing ▁the ▁rows ▁in ▁this ▁java . sql . ResultSet ▁into ▁* ▁beans ▁of ▁type ▁< T > . ▁* ▁@ param ▁rs ▁The ▁java . sql . ResultSet ▁to ▁be ▁loaded . ▁* ▁@ return ▁A ▁ Bean ▁of ▁type ▁T ▁containing ▁the ▁loaded ▁information , ▁typically ▁of ▁the ▁first ▁( or ▁next ) ▁item ▁in ▁the ▁result ▁set . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁T ▁loadSingle ( ResultSet ▁rs ) ▁throw s ▁SQLException ; ▁/** ▁* ▁Used ▁for ▁an ▁insert ▁or ▁update , ▁this ▁method ▁contains ▁the ▁instructions ▁for ▁map p ing ▁the ▁fields ▁within ▁* ▁a ▁bean ▁of ▁type ▁T ▁into ▁a ▁ prepare d ▁ statement ▁which ▁modifie s ▁the ▁appropriate ▁table . ▁* ▁@ param ▁ps ▁The ▁ prepare d ▁ statement ▁to ▁be ▁loaded . ▁* ▁@ param ▁bean ▁The ▁bean ▁containing ▁the ▁data ▁to ▁be ▁placed . ▁* ▁@ return ▁A ▁ prepare d ▁ statement ▁with ▁the ▁appropriate ly ▁loaded ▁parameters . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁P reparedStatement ▁load Parameters ( P reparedStatement ▁ps , ▁T ▁bean ) ▁throw s ▁SQLException ; ▁}