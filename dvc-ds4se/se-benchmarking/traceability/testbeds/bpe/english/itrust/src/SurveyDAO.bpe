▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Date ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . SurveyBean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . Survey Loader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁/** ▁* ▁A ▁DAO ▁for ▁handl ing ▁all ▁Survey ▁data . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁*/ ▁public ▁class ▁SurveyDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁SurveyLoader ▁survey Loader ; ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁SurveyDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁this . survey Loader ▁= ▁new ▁SurveyLoader (); ▁} ▁/** ▁* ▁ Insert ▁survey ▁data ▁into ▁database . ▁* ▁@ param ▁surveyBean ▁The ▁ Bean ▁representing ▁the ▁user ' s ▁response s ▁which ▁will ▁be ▁inserted . ▁* ▁@ param ▁date ▁The ▁date ▁the ▁survey ▁was ▁completed . ▁*/ ▁public ▁void ▁add Completed Survey ( SurveyBean ▁surveyBean , ▁Date ▁date ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁OVSurvey ▁( VisitID , ▁ SurveyDate ) ▁VALUES ▁(?,? )"); ▁ps . s etLong ( 1, ▁surveyBean . get VisitID ()); ▁ps . set Timestamp (2, ▁new ▁java . sql . Timestamp ( date . getTime ()) ); ▁ps . execute Update (); ▁if ▁( surveyBean . get Wa itingRoomMinutes () ▁> ▁0) ▁{ ▁ps ▁= ▁conn . prepare Statement (" update ▁OVSurvey ▁set ▁ Wa itingRoomMinutes ▁= ▁? ▁where ▁VisitID ▁= ▁? "); ▁ps . set Float ( 1, ▁surveyBean . get Wa itingRoomMinutes ()); ▁ps . s etLong (2, ▁surveyBean . get VisitID ()); ▁ps . execute Update (); ▁} ▁if ▁( surveyBean . get ExamRoomMinutes () ▁> ▁0) ▁{ ▁ps ▁= ▁conn . prepare Statement (" update ▁OVSurvey ▁set ▁ ExamRoomMinutes ▁= ▁? ▁where ▁VisitID ▁= ▁? "); ▁ps . set Float ( 1, ▁surveyBean . get ExamRoomMinutes ()); ▁ps . s etLong (2, ▁surveyBean . get VisitID ()); ▁ps . execute Update (); ▁} ▁if ▁( surveyBean . getVisit Satisfaction () ▁> ▁0) ▁{ ▁ps ▁= ▁conn . prepare Statement (" update ▁OVSurvey ▁set ▁Visit Satisfaction ▁= ▁? ▁where ▁VisitID ▁= ▁? "); ▁ps . set Float ( 1, ▁surveyBean . getVisit Satisfaction ()); ▁ps . s etLong (2, ▁surveyBean . get VisitID ()); ▁ps . execute Update (); ▁} ▁if ▁( surveyBean . get Treatment Satisfaction () ▁> ▁0) ▁{ ▁ps ▁= ▁conn . prepare Statement (" update ▁OVSurvey ▁set ▁ Treatment Satisfaction ▁= ▁? ▁where ▁VisitID ▁= ▁? "); ▁ps . set Float ( 1, ▁surveyBean . get Treatment Satisfaction ()); ▁ps . s etLong (2, ▁surveyBean . get VisitID ()); ▁ps . execute Update (); ▁} ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Get s ▁survey ▁data ▁from ▁the ▁database ▁by ▁the ▁office ▁visit ▁id . ▁Create s ▁an ▁instance ▁of ▁an ▁* ▁SurveyBean ▁with ▁data ▁and ▁return s ▁it . ▁* ▁* ▁@ param ▁id ▁The ▁unique ▁ID ▁of ▁the ▁survey ▁in ▁question . ▁* ▁@ return ▁A ▁bean ▁containing ▁the ▁SurveyBean . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁SurveyBean ▁ getSurveyDat a ( long ▁id ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁OVSurvey ▁ WH ERE ▁VisitID ▁= ▁? "); ▁ps . s etLong ( 1, ▁id ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁rs . next (); ▁return ▁survey Loader . loadSingle ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Has ▁this ▁survey ▁been ▁completed ? ▁* ▁* ▁@ param ▁visitID ▁The ▁unique ▁ID ▁of ▁the ▁office ▁visit ▁we ▁are ▁w on der ing ▁about . ▁* ▁@ return ▁boolean ▁indicat ing ▁whether ▁this ▁survey ▁is ▁completed . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁boolean ▁is Survey Completed ( long ▁visitID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁count ( *) ▁FROM ▁OVSurvey ▁ WH ERE ▁VisitID ▁= ▁? "); ▁ps . s etLong ( 1, ▁visitID ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁rs . next (); ▁return ▁( rs . getInt ( 1) ▁== ▁0) ▁? ▁false ▁: ▁true ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}