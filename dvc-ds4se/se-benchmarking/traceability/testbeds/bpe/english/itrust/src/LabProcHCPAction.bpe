▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . List ; ▁import ▁java . util . ArrayList ; ▁import ▁edu . nc su . cs c . itrust . beans . LabProcedureBean ; ▁import ▁edu . nc su . cs c . itrust . beans . OfficeVisitBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . LabProcedureDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . OfficeVisitDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . validate . LabProcedure Validator ; ▁/** ▁* ▁ Action ▁class ▁for ▁ LabProcHCP . jsp . ▁* ▁* ▁@ ext end s ▁ LabProcUAPAction ▁*/ ▁public ▁class ▁ LabProcHCPAction ▁extends ▁ LabProcUAPAction ▁{ ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁LabProcedureDAO ▁lpDAO ; ▁private ▁OfficeVisitDAO ▁ovDAO ; ▁long ▁loggedInMID ; ▁private ▁LabProcedure Validator ▁validator ; ▁/** ▁* ▁Set s ▁up ▁defaults ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁MID ▁for ▁the ▁logged ▁in ▁HCP ▁*/ ▁public ▁ LabProcHCPAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁super ( factory , ▁loggedInMID ); ▁transDAO ▁= ▁factory . get TransactionDAO (); ▁lpDAO ▁= ▁factory . get LabProcedureDAO (); ▁ovDAO ▁= ▁factory . get OfficeVisitDAO (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁validator ▁= ▁new ▁LabProcedure Validator (); ▁} ▁/** ▁* ▁This ▁method ▁sort s ▁by ▁LOINC ▁and ▁return s ▁the ▁list ▁* ▁* ▁@ param ▁id ▁the ▁ID ▁to ▁sort ▁the ▁list ▁by ▁* ▁@ return ▁List ▁sort ed ▁by ▁LOINC ▁*/ ▁public ▁List < LabProcedureBean > ▁ sortBy LOINC ( long ▁id ) ▁throw s ▁DBException ▁{ ▁return ▁lpDAO . get AllLabProcedures LOINC ( id ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁the ▁lab ▁procedures ▁for ▁the ▁next ▁month ▁* ▁* ▁@ return ▁all ▁the ▁lab ▁procedures ▁for ▁the ▁next ▁month ▁*/ ▁public ▁List < LabProcedureBean > ▁get LabProc For Next Month () ▁throw s ▁DBException ▁{ ▁List < LabProcedureBean > ▁listLabProc ▁= ▁new ▁ArrayList < LabProcedureBean > (0); ▁List < OfficeVisitBean > ▁list OV ▁= ▁ovDAO . get AllOfficeVisits ForLHCP ( loggedInMID ); ▁for ▁( OfficeVisitBean ▁ov ▁: ▁list OV ) ▁{ ▁if ▁( list LabProc . is Empty () ▁== ▁true ) ▁{ ▁listLabProc ▁= ▁lpDAO . getLabProcedure s ForLHCP For Next Month ( ov . get ID ()); ▁} ▁else ▁{ ▁for ▁( LabProcedureBean ▁ lb ▁: ▁lpDAO . getLabProcedure s ForLHCP For Next Month ( ov . get ID ())) ▁{ ▁listLabProc . add ( lb ); ▁} ▁} ▁} ▁return ▁listLabProc ; ▁} ▁/** ▁* ▁Changes ▁the ▁ privacy ▁setting s ▁* ▁* ▁@ param ▁x ▁the ▁ID ▁of ▁the ▁procedure ▁to ▁change ▁* ▁*/ ▁public ▁void ▁change Privacy ( long ▁x ) ▁throw s ▁DBException , ▁ FormValidat ionException ▁{ ▁ LabProcedureBean ▁pb ▁= ▁lpDAO . getLabProcedure ( x ); ▁if ▁( check Access ( x )) ▁{ ▁if ▁( pb . get Rights (). equals ( LabProcedureBean . Re strict )) ▁{ ▁pb . allow (); ▁} ▁else ▁{ ▁pb . restrict (); ▁} ▁validator . validate ( pb ); ▁lpDAO . update Rights ( pb ); ▁transDAO . log Transaction ( TransactionType . E NTER _ EDIT _ LAB _ PROCEDURE , ▁loggedInMID , ▁pb . get Pid (), ▁" Privacy ▁Change d ▁procedure ▁id : ▁" ▁+ ▁pb . get ProcedureID ()); ▁} ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁the ▁logged ▁in ▁HCP ▁is ▁the ▁one ▁who ▁made ▁the ▁procedure . ▁Used ▁to ▁generate ▁link s ▁for ▁page ▁to ▁edit ▁OfficeVisit ▁* ▁* ▁@ param ▁x ▁the ▁ID ▁of ▁the ▁HCP ▁to ▁check ▁* ▁*/ ▁public ▁boolean ▁check Access ( long ▁x ) ▁throw s ▁DBException , ▁ FormValidat ionException ▁{ ▁ LabProcedureBean ▁pb ▁= ▁lpDAO . getLabProcedure ( x ); ▁OfficeVisitBean ▁ov bean ▁= ▁ovDAO . getOfficeVisit ( pb . getOv ID ()); ▁return ▁( loggedInMID ▁== ▁ov bean . getHcp ID ()); ▁} ▁}