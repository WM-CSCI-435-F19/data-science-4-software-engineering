▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁edu . nc su . cs c . itrust . beans . HospitalBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . HospitalsDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . validate . HospitalBean Validator ; ▁/** ▁* ▁Handle s ▁updating ▁the ▁list ▁of ▁hospitals ▁Used ▁by ▁hospital List ing . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁Update Hospital ListAction ▁{ ▁private ▁long ▁performerID ; ▁private ▁HospitalsDAO ▁ hospDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁/** ▁* ▁Set ▁up ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁performerID ▁The ▁MID ▁of ▁the ▁person ▁updating ▁the ▁hospitals . ▁*/ ▁public ▁Update Hospital ListAction ( DAOFactory ▁factory , ▁long ▁performerID ) ▁{ ▁this . hospDAO ▁= ▁factory . get HospitalsDAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . performerID ▁= ▁performerID ; ▁} ▁/** ▁* ▁Add s ▁a ▁hosp tial ▁using ▁the ▁HospitalBean ▁passed ▁as ▁a ▁ param ▁* ▁* ▁@ param ▁hosp ▁* ▁the ▁new ▁hospital ▁listing ▁* ▁@ return ▁Status ▁message ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁String ▁add Hospital ( HospitalBean ▁hosp ) ▁throw s ▁ FormValidat ionException ▁{ ▁new ▁HospitalBean Validator (). validate ( hosp ); ▁try ▁{ ▁if ▁( hospDAO . add Hospital ( hosp )) ▁{ ▁transDAO . log Transaction ( TransactionType . MA IN TAIN _ HOSPITAL S , ▁performerID , ▁0 L , ▁" add ed ▁hospital ▁" ▁+ ▁hosp . get HospitalName ()); ▁return ▁" Success : ▁" ▁+ ▁hosp . get HospitalID () ▁+ ▁" ▁- ▁" ▁+ ▁hosp . get HospitalName () ▁+ ▁" ▁added "; ▁} ▁else ▁return ▁" The ▁database ▁has ▁become ▁corrupt . ▁P lease ▁contact ▁the ▁system ▁administrator ▁for ▁assi stance . "; ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁return ▁e . getMessage (); ▁} ▁catch ▁( iTrustException ▁e ) ▁{ ▁return ▁e . getMessage (); ▁} ▁} ▁/** ▁* ▁Updates ▁a ▁hospital ▁( based ▁on ▁the ▁hospital ▁id ) ▁using ▁new ▁information ▁from ▁the ▁HospitalBean ▁passed ▁as ▁a ▁* ▁ param ▁* ▁* ▁@ param ▁hosp ▁* ▁the ▁new ▁hospital ▁information ▁with ▁the ▁same ▁hospital ▁id ▁* ▁@ return ▁Status ▁message ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁String ▁update Information ( HospitalBean ▁hosp ) ▁throw s ▁ FormValidat ionException ▁{ ▁new ▁HospitalBean Validator (). validate ( hosp ); ▁try ▁{ ▁int ▁rows ▁= ▁0; ▁return ▁( ( 0 ▁== ▁( row s ▁= ▁update Hospital ( hosp ))) ▁? ▁" Error : ▁Hospital ▁not ▁found . " ▁: ▁" Success : ▁" ▁+ ▁rows ▁+ ▁" ▁row ( s ) ▁updated "); ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁return ▁e . getMessage (); ▁} ▁} ▁/** ▁* ▁Updates ▁hospital ▁* ▁* ▁@ param ▁hosp ▁new ▁information ▁* ▁@ return ▁id ▁for ▁the ▁updated ▁hospital ▁* ▁@ throw s ▁DBException ▁*/ ▁private ▁int ▁update Hospital ( HospitalBean ▁hosp ) ▁throw s ▁DBException ▁{ ▁return ▁ hospDAO . update Hospital ( hosp ); ▁} ▁}