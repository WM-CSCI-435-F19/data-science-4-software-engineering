▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . Arrays ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . EmailUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . Email ; ▁import ▁edu . nc su . cs c . itrust . beans . LabProcedureBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . LabProcedureDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . validate . LabProcedure Validator ; ▁/** ▁* ▁Class ▁for ▁ LabProcUAP . jsp . ▁Handle s ▁lab ▁procedures ▁for ▁UAP s ▁*/ ▁public ▁class ▁ LabProcUAPAction ▁{ ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁LabProcedureDAO ▁lpDAO ; ▁long ▁loggedInMID ; ▁private ▁LabProcedure Validator ▁validator ; ▁private ▁DAOFactory ▁factory ; ▁/** ▁* ▁Setup ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁UAP ▁who ▁is ▁logged ▁in ▁*/ ▁public ▁ LabProcUAPAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁transDAO ▁= ▁factory . get TransactionDAO (); ▁lpDAO ▁= ▁factory . get LabProcedureDAO (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁validator ▁= ▁new ▁LabProcedure Validator (); ▁this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Updates ▁a ▁lab ▁procedure ▁* ▁* ▁@ param ▁b ▁the ▁procedure ▁to ▁update ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁void ▁update Procedure ( LabProcedureBean ▁b ) ▁throw s ▁DBException , ▁ FormValidat ionException { ▁validator . validate ( b ); ▁// n e ed ▁to ▁check ▁if ▁status ▁is ▁what ' s ▁being ▁changed ▁- ▁if ▁new ▁status != old ▁status ▁send ▁email ▁if (! b . get Status (). equals ( l p DAO . getLabProcedure ( b . get ProcedureID ()). get Status ())){ ▁new ▁EmailUtil ( factory ) . sendEmail ( makeEmail ( b )); ▁} ▁lpDAO . update LabProcedure ( b ); ▁transDAO . log Transaction ( TransactionType . E NTER _ EDIT _ LAB _ PROCEDURE , ▁loggedInMID , ▁b . get Pid (), ▁" UAP ▁updated ▁procedure ▁id : ▁" ▁+ ▁b . get ProcedureID ()); ▁} ▁/** ▁* ▁Send s ▁an ▁e - mail ▁in form ing ▁the ▁patient ▁that ▁the ir ▁procedure ▁has ▁been ▁updated ▁* ▁* ▁@ param ▁b ▁the ▁procedure ▁that ▁was ▁updated ▁* ▁@ return ▁an ▁e - mail ▁to ▁the ▁patient ▁with ▁the ▁notice ▁* ▁@ throw s ▁DBException ▁*/ ▁private ▁Email ▁makeEmail ( LabProcedureBean ▁b ) ▁throw s ▁DBException { ▁PatientBean ▁p ▁= ▁new ▁PatientDAO ( factory ) . getPatient ( b . get Pid ()); ▁Email ▁email ▁= ▁new ▁Email (); ▁email . set From (" no - reply @ itrust . com "); ▁email . s etToList ( Arrays . a s List ( p . getEmail ()) ); ▁email . set Subject (" A ▁Lab ▁Procedure ▁ Wa s ▁Updated "); ▁email . s etBody ( String . format (" Dea r ▁% s , ▁\ n ▁You r ▁Lab ▁Procedure ▁(% s ) ▁has ▁a ▁new ▁updated ▁status ▁of ▁% s . ▁Log ▁on ▁to ▁iTrust ▁to ▁view . ", ▁p . getF ullName (), b . getLo inc (), b . get Status ()) ); ▁return ▁email ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁the ▁lab ▁procedures ▁* ▁* ▁@ param ▁id ▁MID ▁of ▁the ▁UAP ▁viewing ▁the ▁procedures ▁* ▁@ return ▁a ▁list ▁of ▁all ▁the ▁lab ▁procedures ▁for ▁that ▁UAP ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LabProcedureBean > ▁view Procedures ( long ▁id ) ▁throw s ▁DBException ▁{ ▁transDAO . log Transaction ( TransactionType . VI EW _ LAB _ PROCEDURE , ▁loggedInMID , ▁id , ▁" UAP ▁viewed ▁procedures "); ▁return ▁lpDAO . get AllLabProcedures Date ( id ); ▁} ▁}