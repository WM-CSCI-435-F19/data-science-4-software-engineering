▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . action . base . P atientBaseAction ; ▁import ▁edu . nc su . cs c . itrust . beans . OfficeVisitBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . OfficeVisitDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Used ▁for ▁ Document ▁Office ▁Visit ▁page ▁( document OfficeVisit . jsp ) . ▁This ▁just ▁add s ▁an ▁empty ▁office ▁visit , ▁and ▁* ▁provide s ▁a ▁list ▁of ▁office ▁visits ▁in ▁case ▁you ▁want ▁to ▁edit ▁an ▁old ▁office ▁visit . ▁* ▁* ▁Ver y ▁similar ▁to ▁ {@ link ▁ AddPatientAction } ▁* ▁* ▁@ author ▁Andy ▁Men e ely ▁* ▁*/ ▁public ▁class ▁Add OfficeVisit Action ▁extends ▁P atientBaseAction ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁OfficeVisitDAO ▁ovDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁/** ▁* ▁Set s ▁up ▁the ▁defaults ▁for ▁the ▁class ▁* ▁@ param ▁factory ▁* ▁@ param ▁pidString ▁* ▁Patient ▁ID ▁to ▁be ▁validated ▁by ▁the ▁superclass , ▁ {@ link ▁P atientBaseAction } ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁Add OfficeVisit Action ( DAOFactory ▁factory , ▁String ▁pidString ) ▁throw s ▁iTrustException ▁{ ▁super ( factory , ▁pidString ); ▁this . factory ▁= ▁factory ; ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁ovDAO ▁= ▁factory . get OfficeVisitDAO (); ▁} ▁/** ▁* ▁Add s ▁an ▁empty ▁office ▁visit ▁* ▁* ▁@ param ▁loggedInMID ▁* ▁For ▁logging ▁purposes ▁* ▁@ return ▁Office ▁visit ▁ID ▁( primar y ▁key ) ▁of ▁the ▁new ▁office ▁visit ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁long ▁ addEmpty OfficeVisit ( long ▁loggedInMID ) ▁throw s ▁DBException ▁{ ▁OfficeVisitBean ▁ov ▁= ▁new ▁OfficeVisitBean (); ▁ov . setHcp ID ( loggedInMID ); ▁ov . set PatientID ( pid ); ▁long ▁visitID ▁= ▁ovDAO . add ( ov ); ▁transDAO . log Transaction ( TransactionType . DOC U MENT _ OFF ICE _ VISIT , ▁loggedInMID , ▁pid , ▁" visit ▁id : ▁" ▁+ ▁visitID ); ▁return ▁visitID ; ▁} ▁/** ▁* ▁List s ▁all ▁office ▁visits ▁for ▁a ▁particular ▁patient , ▁regard less ▁of ▁who ▁original ly ▁document ed ▁the ▁office ▁* ▁visit . ▁* ▁* ▁@ return ▁List ▁of ▁office ▁visits , ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < OfficeVisitBean > ▁get AllOfficeVisits () ▁throw s ▁iTrustException ▁{ ▁return ▁ovDAO . get AllOfficeVisits ( pid ); ▁} ▁/** ▁* ▁Returns ▁the ▁full ▁name ▁of ▁the ▁patient ▁with ▁this ▁MID ▁* ▁* ▁@ return ▁name ▁in ▁the ▁form ▁of ▁a ▁string ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁ getUserName () ▁throw s ▁DBException , ▁iTrustException ▁{ ▁return ▁factory . get AuthDAO (). getUserName ( pid ); ▁} ▁}