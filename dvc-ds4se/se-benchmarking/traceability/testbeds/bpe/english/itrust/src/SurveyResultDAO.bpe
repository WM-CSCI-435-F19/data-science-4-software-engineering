▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . SurveyResultBean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . SurveyResultBean Loader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁/** ▁* ▁A ▁DAO ▁for ▁handl ing ▁all ▁Survey ▁results . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁*/ ▁public ▁class ▁SurveyResultDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁ SurveyResultBean Loader ▁loader ; ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁SurveyResultDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁this . load er ▁= ▁new ▁ SurveyResultBean Loader (); ▁} ▁/** ▁* ▁Returns ▁all ▁the ▁survey ▁results ▁in ▁the ▁database ▁that ▁correspond ▁to ▁a ▁particular ▁zip ▁code . ▁* ▁* ▁@ param ▁zip ▁The ▁zip code ▁we ▁are ▁interest ed ▁in ▁as ▁a ▁String . ▁* ▁@ param ▁specialty ▁The ▁specialty ▁we ▁are ▁interest ed ▁in ▁as ▁a ▁String . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁ SurveyResultBean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < SurveyResultBean > ▁get SurveyResultsFor Zip ( String ▁zip , ▁String ▁specialty ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁StringBuffer ▁sql ▁= ▁new ▁StringBuffer (); ▁sql . append (" select ▁p . mid , ▁p . firstname , ▁p . lastname , ▁p . address 1, ▁p . address 2 , ▁p . city , ▁p . state , ▁p . zip , ▁p . specialty , ▁" ); ▁sql . append (" ' n a ' ▁hospitalID , ▁" ); ▁sql . append (" avg ( s . Wa itingRoomMinutes ) ▁A vgWaitingR oomMinutes , ▁" ); ▁sql . append (" avg ( s . ExamRoomMinutes ) ▁Avg ExamRoomMinutes , ▁" ); ▁sql . append (" avg ( s . V isitSatisfaction ) ▁Avg V isitSatisfaction , ▁" ); ▁sql . append (" avg ( s . Treatment Satisfaction ) ▁Avg TreatmentSatisfa tion , ▁" ); ▁sql . append (" count ( *) ▁/ ▁" ); ▁sql . append (" ▁( select ▁count ( *) ▁from ▁personnel ▁p 1, ▁officevisits ▁v 1 ▁" ); ▁sql . append (" ▁where ▁v 1 . hcpid ▁= ▁p 1 . mid ▁" ); ▁sql . append (" ▁and ▁subs tr ( p 1 . zip , 1, 3 ) ▁= ▁? ▁" ); ▁sql . append (" ▁and ▁p 1 . mid ▁= ▁p . mid ) ▁* ▁100 ▁P ercentSat isfactionResults ▁" ); ▁sql . append (" from ▁ov survey ▁ s , ▁personnel ▁p , ▁officevisits ▁v ▁" ); ▁sql . append (" where ▁ s . visitid ▁= ▁v . id ▁" ); ▁sql . append (" and ▁v . hcpid ▁= ▁p . mid ▁" ); ▁sql . append (" and ▁subs tr ( p . zip , 1, 3 ) ▁= ▁? ▁" ); ▁if ▁(! specialty . equals ( SurveyResultBean . ANY _ SPECIALTY )) ▁sql . append (" and ▁specialty ▁= ▁? "); ▁sql . append (" group ▁by ▁p . mid , ▁p . firstname , ▁p . lastname , ▁p . address 1, ▁p . address 2 , ▁p . city , ▁p . state , ▁p . zip , ▁hospitalID ▁" ); ▁if ▁(! specialty . equals ( SurveyResultBean . ANY _ SPECIALTY )) ▁sql . append (" , ▁p . specialty ▁" ); ▁sql . append (" order ▁by ▁p . mid ▁" ); ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement ( sql . to String ()); ▁ps . set String ( 1, ▁zip . substring (0, ▁3) ); ▁ps . set String (2, ▁zip . substring (0, ▁3) ); ▁if ▁(! specialty . equals ( SurveyResultBean . ANY _ SPECIALTY )) ▁ps . set String ( 3, ▁specialty ); ▁return ▁loader . load List ( ps . execute Query ()); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁all ▁the ▁survey ▁data ▁associate d ▁with ▁a ▁given ▁hospital ▁and ▁a ▁certain ▁specialty . ▁* ▁* ▁@ param ▁hospitalID ▁The ▁unique ▁ID ▁of ▁the ▁iTrust ▁hospital ▁we ▁are ▁query ing ▁about . ▁* ▁@ param ▁specialty ▁A ▁string ▁representing ▁the ▁specialty ▁we ▁are ▁interest ed ▁in . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁ SurveyResultBean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < SurveyResultBean > ▁get SurveyResultsFor Hospital ( String ▁hospitalID , ▁String ▁specialty ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁StringBuffer ▁sql ▁= ▁new ▁StringBuffer (); ▁sql . append (" select ▁p . mid , ▁p . firstname , ▁p . lastname , ▁p . address 1, ▁p . address 2 , ▁p . city , ▁p . state , ▁p . zip , ▁p . specialty , ▁" ); ▁sql . append (" h . hos id ▁hospitalID , ▁" ); ▁sql . append (" avg ( s . Wa itingRoomMinutes ) ▁A vgWaitingR oomMinutes , ▁" ); ▁sql . append (" avg ( s . ExamRoomMinutes ) ▁Avg ExamRoomMinutes , ▁" ); ▁sql . append (" avg ( s . V isitSatisfaction ) ▁Avg V isitSatisfaction , ▁" ); ▁sql . append (" avg ( s . Treatment Satisfaction ) ▁Avg TreatmentSatisfa tion , ▁" ); ▁sql . append (" count ( *) ▁/ ▁" ); ▁sql . append (" ▁( select ▁count ( *) ▁from ▁personnel ▁p 1, ▁officevisits ▁v 1, ▁HCP AssignedHos ▁ h 1 ▁" ); ▁sql . append (" ▁where ▁v 1 . hcpid ▁= ▁p 1 . mid ▁" ); ▁sql . append (" ▁and ▁v 1 . hcpid ▁= ▁ h 1 . hcpid ▁" ); ▁sql . append (" ▁and ▁ h 1 . hos id ▁= ▁? ▁" ); ▁sql . append (" ▁and ▁p 1 . mid ▁= ▁p . mid ) ▁* ▁100 ▁P ercentSat isfactionResults ▁" ); ▁sql . append (" from ▁ov survey ▁ s , ▁personnel ▁p , ▁officevisits ▁v , ▁HCP AssignedHos ▁ h ▁" ); ▁sql . append (" where ▁ s . visitid ▁= ▁v . id ▁" ); ▁sql . append (" and ▁v . hcpid ▁= ▁p . mid ▁" ); ▁sql . append (" and ▁v . hcpid ▁= ▁ h . hcpid ▁" ); ▁sql . append (" and ▁ h . hos id ▁= ▁? ▁" ); ▁if ▁(! specialty . equals ( SurveyResultBean . ANY _ SPECIALTY )) ▁sql . append (" and ▁p . specialty ▁= ▁? "); ▁sql . append (" group ▁by ▁p . mid , ▁p . firstname , ▁p . lastname , ▁p . address 1, ▁p . address 2 , ▁p . city , ▁p . state , ▁p . zip , ▁hospitalID ▁" ); ▁if ▁(! specialty . equals ( SurveyResultBean . ANY _ SPECIALTY )) ▁sql . append (" , ▁p . specialty ▁" ); ▁sql . append (" order ▁by ▁p . mid ▁" ); ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement ( sql . to String ()); ▁ps . set String ( 1, ▁hospitalID ); ▁ps . set String (2, ▁hospitalID ); ▁if ▁(! specialty . equals ( SurveyResultBean . ANY _ SPECIALTY )) ▁{ ▁ps . set String ( 3, ▁specialty ); ▁} ▁return ▁loader . load List ( ps . execute Query ()); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}