▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . Arrays ; ▁import ▁edu . nc su . cs c . itrust . EmailUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . Email ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PersonnelBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AuthDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . Role ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . ErrorList ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . validate . ValidationFormat ; ▁/** ▁* ▁Manage s ▁reset ting ▁the ▁password ▁Used ▁by ▁ resetPassword . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁ResetPassword Action ▁{ ▁public ▁static ▁final ▁int ▁ MAX _ RESE T _ ATTEMPTS ▁= ▁3 ; ▁private ▁AuthDAO ▁authDAO ; ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁DAOFactory ▁factory ; ▁/** ▁* ▁Set ▁up ▁defaults ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁*/ ▁public ▁ResetPassword Action ( DAOFactory ▁factory ) ▁{ ▁this . authDAO ▁= ▁factory . get AuthDAO (); ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁user ▁exists ▁with ▁the ▁given ▁mid ▁* ▁* ▁@ param ▁midString ▁The ▁user ' s ▁MID ▁to ▁check ▁for . ▁* ▁@ return ▁0 ▁if ▁the ▁user ▁does ▁not ▁exist , ▁else ▁the ▁mid ▁of ▁the ▁user ▁as ▁a ▁long ▁*/ ▁public ▁long ▁check MID ( String ▁midString ) ▁{ ▁try ▁{ ▁long ▁mid ▁= ▁Long . value Of ( midString ); ▁if ▁(! authDAO . check User E xists ( mid )) ▁return ▁0; ▁return ▁mid ; ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁return ▁0 L ; ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁return ▁0 L ; ▁} ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁the ▁number ▁of ▁reset ▁password ▁attempts ▁has ▁been ▁exceed ed ▁for ▁the ▁given ▁ipAddress ▁* ▁* ▁@ param ▁ipAddress ▁The ▁IPv 4 ▁or ▁IPv 6 ▁IP ▁address ▁as ▁a ▁String . ▁* ▁@ return ▁true ▁if ▁the ▁the ▁number ▁of ▁reset ▁attempts ▁is ▁greate r ▁than ▁or ▁equal ▁to ▁ MAX _ RESE T _ ATTEMPTS ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁boolean ▁is Max ed Out ( String ▁ipAddress ) ▁throw s ▁DBException ▁{ ▁return ▁authDAO . get ResetPassword Failures ( ip Address ) ▁>= ▁ MAX _ RESE T _ ATTEMPTS ; ▁} ▁/** ▁* ▁Check s ▁if ▁the ▁given ▁mid ▁matches ▁the ▁given ▁role ▁* ▁* ▁@ param ▁mid ▁* ▁the ▁mid ▁to ▁be ▁checked ▁* ▁@ param ▁role ▁* ▁the ▁role ▁to ▁be ▁checked ▁* ▁@ return ▁true ▁if ▁the ▁mid ▁and ▁role ▁match ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁check Role ( long ▁mid , ▁String ▁role ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁if ▁( (" patient " . equals ( role ) ▁&& ▁patientDAO . getRole ( mid , ▁role ) . equals (" patient ")) ▁|| ▁ (" hcp " . equals ( role ) ▁&& ▁patientDAO . getRole ( mid , ▁role ) . equals (" hcp ")) ▁|| ▁ (" uap " . equals ( role ) ▁&& ▁patientDAO . getRole ( mid , ▁role ) . equals (" uap ")) ▁|| ▁ (" pha " . equals ( role ) ▁&& ▁patientDAO . getRole ( mid , ▁role ) . equals (" pha ")) ▁|| ▁ (" er " . equals ( role ) ▁&& ▁patientDAO . getRole ( mid , ▁role ) . equals (" er "))) ▁return ▁role ; ▁else ▁return ▁null ; ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁} ▁catch ▁( iTrustException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁e ; ▁} ▁return ▁null ; ▁} ▁/** ▁* ▁Check s ▁if ▁the ▁answer ▁ param ▁is ▁null ▁* ▁* ▁@ param ▁answer ▁the ▁user ' s ▁security ▁answer ▁* ▁@ return ▁answer ▁if ▁not ▁null , ▁else ▁return ▁null ▁*/ ▁public ▁String ▁check Answer Null ( String ▁answer ) ▁{ ▁if ▁( answer ▁== ▁null ▁|| ▁"" . equals ( answer )) ▁return ▁null ; ▁else ▁return ▁answer ; ▁} ▁/** ▁* ▁Returns ▁the ▁security ▁question ▁for ▁the ▁mid ▁ param ▁* ▁* ▁@ param ▁mid ▁MID ▁of ▁the ▁user ▁* ▁@ return ▁the ▁security ▁question ▁or ▁"" ▁if ▁DBException ▁thrown ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁get SecurityQuestion ( long ▁mid ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁if ▁( null ▁== ▁authDAO . get SecurityQuestion ( mid ) ▁|| ▁authDAO . get SecurityQuestion ( mid ) . equals ("")) ▁throw ▁new ▁iTrustException (" No ▁security ▁question ▁or ▁answer ▁for ▁this ▁user ▁has ▁been ▁set . "); ▁else ▁return ▁authDAO . get SecurityQuestion ( mid ); ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁return ▁""; ▁} ▁} ▁/** ▁* ▁ Reset s ▁the ▁password ▁for ▁the ▁given ▁mid ▁* ▁* ▁@ param ▁mid ▁of ▁the ▁user ▁to ▁have ▁the ir ▁password ▁reset ▁* ▁@ param ▁role ▁what ▁role ▁the ▁user ▁has ▁in ▁iTrust ▁* ▁@ param ▁answer ▁answer s ▁to ▁the ir ▁security ▁question ▁* ▁@ param ▁password ▁the ir ▁password ▁* ▁@ param ▁confirmPassword ▁the ir ▁password ▁again ▁* ▁@ param ▁ipAddr ▁the ▁ ip ▁address ▁the ▁request ▁is ▁coming ▁from ▁* ▁@ return ▁status ▁message ▁* ▁@ throw s ▁ FormValidat ionException ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁ resetPassword ( long ▁mid , ▁String ▁role , ▁String ▁answer , ▁String ▁password , ▁String ▁confirmPassword , ▁String ▁ipAddr ) ▁throw s ▁ FormValidat ionException , ▁DBException , ▁iTrustException ▁{ ▁Role ▁r ▁= ▁authDAO . getUserRole ( mid ); ▁try ▁{ ▁Role . parse ( role ); ▁} ▁catch ▁( Illegal A rgumentException ▁e ) ▁{ ▁return ▁" I nvalid ▁role "; ▁} ▁if ▁( r . equals ( Role . ADMIN )) ▁return ▁" This ▁role ▁cannot ▁be ▁changed ▁here "; ▁if ▁(! r . equals ( Role . parse ( role ))) ▁return ▁" Role ▁mismatch "; ▁if ▁( authDAO . get ResetPassword Failures ( ipAddr ) ▁>= ▁ MAX _ RESE T _ ATTEMPTS ) ▁{ ▁return ▁" Too ▁many ▁re tr ies "; ▁} ▁try ▁{ ▁validate Password ( password , ▁confirmPassword ); ▁if ▁( answer . equals ( authDAO . get S ecurityAnswer ( mid ))) ▁{ ▁authDAO . resetPassword ( mid , ▁password ); ▁new ▁EmailUtil ( factory ) . sendEmail ( makeEmail App ( mid , ▁role )); ▁return ▁" Password ▁changed "; ▁} ▁else ▁{ ▁authDAO . record ResetPassword Failure ( ipAddr ); ▁return ▁" Answer ▁did ▁not ▁match "; ▁} ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁return ▁" Error ▁in ▁validation ▁of ▁security ▁answer "; ▁} ▁} ▁/** ▁* ▁Create s ▁and ▁send s ▁an ▁e - mail ▁about ▁the ▁change ▁* ▁* ▁@ param ▁mid ▁the ▁user ▁who ' s ▁password ▁was ▁changed ▁* ▁@ param ▁role ▁what ▁role ▁they ▁have ▁in ▁iTrust ▁* ▁@ return ▁the ▁e - m ial ▁that ▁is ▁sent ▁* ▁@ throw s ▁DBException ▁*/ ▁private ▁Email ▁makeEmail App ( long ▁mid , ▁String ▁role ) ▁throw s ▁DBException { ▁if ( Role . parse ( role ) ▁== ▁Role . PATIENT ){ ▁PatientBean ▁p ▁= ▁new ▁PatientDAO ( factory ) . getPatient ( mid ); ▁Email ▁email ▁= ▁new ▁Email (); ▁email . set From (" no - reply @ itrust . com "); ▁email . s etToList ( Arrays . a s List ( p . getEmail ()) ); ▁email . set Subject (" You r ▁password ▁has ▁been ▁changed ▁in ▁iTrust "); ▁email . s etBody ( String . format (" Dea r ▁% s , ▁\ n ▁You ▁have ▁cho sen ▁to ▁change ▁your ▁iTrust ▁password ▁for ▁user ▁% s ", ▁p . getF ullName (), ▁mid )); ▁return ▁email ; ▁} ▁else { ▁// UAP ▁or ▁HCP ▁- ▁admin ▁taken ▁out ▁in ▁" resetPassword " ▁PersonnelBean ▁p ▁= ▁new ▁PersonnelDAO ( factory ) . getPersonnel ( mid ); ▁Email ▁email ▁= ▁new ▁Email (); ▁email . set From (" no - reply @ itrust . com "); ▁email . s etToList ( Arrays . a s List ( p . getEmail ()) ); ▁email . set Subject (" You r ▁password ▁has ▁been ▁changed ▁in ▁iTrust "); ▁email . s etBody ( String . format (" Dea r ▁% s , ▁\ n ▁You ▁have ▁cho sen ▁to ▁change ▁your ▁iTrust ▁password ▁for ▁user ▁% s ", ▁p . getF ullName (), ▁mid )); ▁return ▁email ; ▁} ▁} ▁/** ▁* ▁Check s ▁to ▁make ▁sure ▁the ▁password ▁is ▁correctly ▁entered ▁t w ice . ▁* ▁* ▁@ param ▁password ▁the ▁password ▁* ▁@ param ▁confirmPassword ▁the ▁password ▁again ▁for ▁confirm ation ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁private ▁void ▁validate Password ( String ▁password , ▁String ▁confirmPassword ) ▁throw s ▁ FormValidat ionException ▁{ ▁ErrorList ▁errorList ▁= ▁new ▁ErrorList (); ▁if ▁( password ▁== ▁null ▁|| ▁"" . equals ( password )) ▁{ ▁errorList . add If Not Null (" Password ▁cannot ▁be ▁empty "); ▁} ▁else ▁{ ▁if ▁(! password . equals ( confirmPassword )) ▁errorList . add If Not Null (" Password s ▁don ' t ▁match "); ▁if ▁(! ValidationFormat . PASSWORD . getR egex (). match er ( password ) . matches ()) ▁{ ▁errorList . add If Not Null (" Password ▁must ▁be ▁in ▁the ▁following ▁format : ▁" ▁+ ▁ ValidationFormat . PASSWORD . get Description ()); ▁} ▁} ▁if ▁( errorList . has Errors ()) ▁throw ▁new ▁ FormValidat ionException ( errorList ); ▁} ▁}