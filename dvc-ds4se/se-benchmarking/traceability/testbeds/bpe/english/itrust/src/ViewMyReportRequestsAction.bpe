▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . Calendar ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . beans . PersonnelBean ; ▁import ▁edu . nc su . cs c . itrust . beans . R eportRequestBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . ReportRequestDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁ Action ▁class ▁for ▁ViewMyReport s . jsp . ▁Allow s ▁the ▁user ▁to ▁see ▁all ▁the ir ▁reports ▁*/ ▁public ▁class ▁ViewMyReport RequestsAction ▁{ ▁private ▁long ▁loggedInMID ; ▁private ▁ ReportRequestDAO ▁ reportRequestDAO ; ▁private ▁PersonnelDAO ▁personnelDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁// private ▁DAOFactory ▁factory ; ▁/** ▁* ▁Set ▁up ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁person ▁viewing ▁the ir ▁report ▁requests . ▁*/ ▁public ▁ViewMyReport RequestsAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . reportRequestDAO ▁= ▁factory . get ReportRequestDAO (); ▁this . personnelDAO ▁= ▁factory . get PersonnelDAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁// this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Returns ▁all ▁the ▁reports ▁for ▁the ▁currently ▁logged ▁in ▁HCP ▁* ▁* ▁@ return ▁list ▁of ▁all ▁reports ▁for ▁the ▁logged ▁in ▁HCP ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < R eportRequestBean > ▁ getAllRe portRequestsFor Requester () ▁throw s ▁iTrustException ▁{ ▁return ▁ reportRequestDAO . getAllRe portRequestsFor Requester ( loggedInMID ); ▁} ▁// ▁/** ▁// ▁* ▁Returns ▁a ▁list ▁of ▁* all * ▁reports ▁// ▁* ▁// ▁* ▁@ return ▁list ▁of ▁all ▁reports ▁// ▁* ▁@ throw s ▁iTrustException ▁// ▁*/ ▁// ▁public ▁List < R eportRequestBean > ▁getAll ReportRequests () ▁throw s ▁iTrustException ▁{ ▁// ▁return ▁ reportRequestDAO . getAll ReportRequests (); ▁// ▁} ▁/** ▁* ▁Add s ▁a ▁report ▁request ▁to ▁the ▁list ▁* ▁* ▁@ param ▁patientMID ▁ID ▁of ▁the ▁patient ▁that ▁the ▁report ▁request ▁is ▁for ▁* ▁@ return ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁long ▁add ReportRequest ( long ▁patientMID ) ▁throw s ▁iTrustException ▁{ ▁long ▁id ▁= ▁ reportRequestDAO ▁ . add ReportRequest ( loggedInMID , ▁patientMID , ▁Calendar . get Instance (). getTime ()); ▁transDAO . log Transaction ( TransactionType . COMPRE HEN SIVE _ REPORT _ REQUEST , ▁loggedInMID , ▁patientMID , ▁" Added ▁comp reh ensive ▁report ▁request "); ▁return ▁id ; ▁} ▁// ▁/** ▁// ▁* ▁ Approve s ▁a ▁report ▁request ▁from ▁the ▁list . ▁E - mail ▁is ▁sent ▁when ▁the ▁request ▁is ▁approved . ▁// ▁* ▁// ▁* ▁@ param ▁ID ▁id ▁of ▁the ▁request ▁// ▁* ▁@ throw s ▁iTrustException ▁// ▁*/ ▁// ▁public ▁void ▁approve ReportRequest ( long ▁ID ) ▁throw s ▁iTrustException ▁{ ▁// ▁R eportRequestBean ▁rr ▁= ▁ reportRequestDAO . getReportRequest ( ID ); ▁// ▁ reportRequestDAO . approve ReportRequest ( ID , ▁loggedInMID , ▁Calendar . get Instance (). getTime ()); ▁// ▁transDAO . log Transaction ( TransactionType . COMPRE HEN SIVE _ REPORT _ REQUEST , ▁loggedInMID , ▁// ▁rr . get PatientMID (), ▁" Approved ▁comp reh ensive ▁report ▁request "); ▁// ▁new ▁EmailUtil ( factory ) . sendEmail ( makeEmail App ( loggedInMID , ▁rr . get RequesterMID (), ▁rr . get PatientMID ()) ); ▁// ▁// ▁} ▁// ▁/** ▁// ▁* ▁// ▁* ▁Send s ▁e - mail ▁regard ing ▁the ▁approved ▁request . ▁// ▁* ▁// ▁* ▁@ param ▁adminID ▁admin ▁who ▁approved ▁the ▁request ▁// ▁* ▁@ param ▁hcpID ▁HCP ▁the ▁request ▁is ▁for ▁// ▁* ▁@ param ▁pid ▁ID ▁of ▁the ▁patient ▁the ▁report ▁is ▁about ▁// ▁* ▁@ return ▁the ▁sent ▁e - mail ▁// ▁* ▁@ throw s ▁DBException ▁// ▁*/ ▁// ▁private ▁Email ▁makeEmail App ( long ▁adminID , ▁long ▁hcpID , ▁long ▁pid ) ▁throw s ▁DBException ▁{ ▁// ▁// ▁PatientBean ▁p ▁= ▁new ▁PatientDAO ( factory ) . getPatient ( pid ); ▁// ▁// ▁Email ▁email ▁= ▁new ▁Email (); ▁// ▁email . set From (" no - reply @ itrust . com "); ▁// ▁email . s etToList ( Arrays . a s List ( p . getEmail ()) ); ▁// ▁email . set Subject (" A ▁Report ▁has ▁been ▁generated ▁in ▁iTrust "); ▁// ▁email ▁// ▁ . s etBody ( String ▁// ▁ . format ( ▁// ▁" Dea r ▁% s , ▁\ n ▁The ▁iTrust ▁Health ▁Car e ▁Provider ▁(% s ) ▁submitt ed ▁a ▁request ▁to ▁view ▁your ▁full ▁medical ▁records . ▁The ▁iTrust ▁administrator ▁(% s ) ▁approved ▁a ▁one - time ▁viewing ▁of ▁this ▁report . ▁You ▁will ▁be ▁notifie d ▁when ▁the ▁HCP ▁choose s ▁to ▁view ▁it . ", ▁// ▁p . getF ullName (), ▁hcpID , ▁adminID )); ▁// ▁return ▁email ; ▁// ▁} ▁// ▁/** ▁// ▁* ▁ Reject s ▁a ▁request ▁from ▁the ▁list . ▁// ▁* ▁// ▁* ▁@ param ▁ID ▁id ▁of ▁the ▁rejected ▁request ▁// ▁* ▁@ param ▁comment ▁wh y ▁the ▁request ▁was ▁rejected ▁// ▁* ▁@ throw s ▁iTrustException ▁// ▁*/ ▁// ▁public ▁void ▁reject ReportRequest ( long ▁ID , ▁String ▁comment ) ▁throw s ▁iTrustException ▁{ ▁// ▁ reportRequestDAO . reject ReportRequest ( ID , ▁loggedInMID , ▁Calendar . get Instance (). getTime (), ▁comment ); ▁// ▁transDAO . log Transaction ( TransactionType . COMPRE HEN SIVE _ REPORT _ REQUEST , ▁loggedInMID , ▁0 L , ▁// ▁" Rejected ▁comp reh ensive ▁report ▁request "); ▁// ▁} ▁/** ▁* ▁Returns ▁the ▁requested ▁report ▁* ▁* ▁@ param ▁ID ▁id ▁of ▁the ▁requested ▁report ▁* ▁@ return ▁the ▁requested ▁report ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁R eportRequestBean ▁ getReportRequest ( int ▁ID ) ▁throw s ▁iTrustException ▁{ ▁return ▁ reportRequestDAO . getReportRequest ( ID ); ▁} ▁/** ▁* ▁Set s ▁the ▁viewed ▁status ▁of ▁the ▁report . ▁If ▁the ▁report ▁is ▁" view ed " ▁the ▁HCP ▁must ▁request ▁a ▁new ▁one ▁to ▁see ▁it ▁again . ▁* ▁* ▁@ param ▁ID ▁id ▁of ▁the ▁report ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁void ▁ setViewed ( int ▁ID ) ▁throw s ▁iTrustException ▁{ ▁// ▁R eportRequestBean ▁rr ▁= ▁ reportRequestDAO . getReportRequest ( ID ); ▁ reportRequestDAO . setViewed ( ID , ▁Calendar . get Instance (). getTime ()); ▁transDAO . log Transaction ( TransactionType . COMPRE HEN SIVE _ REPORT _ REQUEST , ▁loggedInMID , ▁0 L , ▁" Viewed ▁comp reh ensive ▁report "); ▁// new ▁EmailUtil ( factory ) . sendEmail ( makeEmail View ( r r . get ApproverMID (), ▁rr . get RequesterMID (), ▁rr ▁// ▁ . get PatientMID ()) ); ▁} ▁// ▁/** ▁// ▁* ▁// ▁* ▁Send s ▁e - mail ▁regard ing ▁the ▁request ▁to ▁the ▁patient . ▁// ▁* ▁// ▁* ▁@ param ▁adminID ▁admin ▁who ▁approved ▁the ▁request ▁// ▁* ▁@ param ▁hcpID ▁HCP ▁the ▁request ▁is ▁for ▁// ▁* ▁@ param ▁pid ▁ID ▁of ▁the ▁patient ▁the ▁report ▁is ▁about ▁// ▁* ▁@ return ▁the ▁sent ▁e - mail ▁// ▁* ▁@ throw s ▁DBException ▁// ▁*/ ▁// ▁private ▁Email ▁makeEmail View ( long ▁adminID , ▁long ▁hcpID , ▁long ▁pid ) ▁throw s ▁DBException ▁{ ▁// ▁// ▁PatientBean ▁p ▁= ▁new ▁PatientDAO ( factory ) . getPatient ( pid ); ▁// ▁// ▁Email ▁email ▁= ▁new ▁Email (); ▁// ▁email . set From (" no - reply @ itrust . com "); ▁// ▁email . s etToList ( Arrays . a s List ( p . getEmail ()) ); ▁// ▁email . set Subject (" A ▁Report ▁has ▁been ▁generated ▁in ▁iTrust "); ▁// ▁email ▁// ▁ . s etBody ( String ▁// ▁ . format ( ▁// ▁" Dea r ▁% s , ▁\ n ▁The ▁iTrust ▁Health ▁Car e ▁Provider ▁(% s ) ▁has ▁cho sen ▁to ▁view ▁your ▁full ▁medical ▁report , ▁which ▁was ▁approved ▁by ▁an ▁iTrust ▁administrator ▁(% s ) . ▁This ▁report ▁was ▁only ▁view able ▁one ▁time ▁and ▁is ▁no ▁long er ▁available . ", ▁// ▁p . getF ullName (), ▁hcpID , ▁adminID )); ▁// ▁return ▁email ; ▁// ▁} ▁/** ▁* ▁Get s ▁the ▁status ▁of ▁the ▁request ▁* ▁* ▁@ param ▁id ▁id ▁of ▁the ▁request ▁* ▁@ return ▁the ▁request ' s ▁status ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁ getLong Status ( long ▁id ) ▁throw s ▁iTrustException ▁{ ▁String Bu i l der ▁ s ▁= ▁new ▁String Bu i l der (); ▁R eportRequestBean ▁r ▁= ▁ reportRequestDAO . getReportRequest ( id ); ▁if ▁( r . get Status (). equals ( R eportRequestBean . Requested )) ▁{ ▁PersonnelBean ▁p ▁= ▁personnelDAO . getPersonnel ( r . get RequesterMID ()); ▁ s . append ( String . format (" Request ▁was ▁requested ▁on ▁% s ▁by ▁% s ", ▁r . getRequestedDate String (), ▁p ▁ . getF ullName ()) ); ▁} ▁// ▁if ▁( r . get Status (). equals ( R eportRequestBean . Approved )) ▁{ ▁// ▁PersonnelBean ▁p ▁= ▁personnelDAO . getPersonnel ( r . get RequesterMID ()); ▁// ▁PersonnelBean ▁p 2 ▁= ▁personnelDAO . getPersonnel ( r . get ApproverMID ()); ▁// ▁ s . append ( String . format (" Request ▁was ▁requested ▁on ▁% s ▁by ▁% s ▁" , ▁r . getRequestedDate String (), ▁p ▁// ▁ . getF ullName ()) ); ▁// ▁ s . append ( String . format (" and ▁approved ▁on ▁% s ▁by ▁% s ", ▁r . getApprovedDate String (), ▁p 2 . getF ullName ()) ); ▁// ▁} ▁// ▁if ▁( r . get Status (). equals ( R eportRequestBean . Rejected )) ▁{ ▁// ▁PersonnelBean ▁p ▁= ▁personnelDAO . getPersonnel ( r . get RequesterMID ()); ▁// ▁PersonnelBean ▁p 2 ▁= ▁personnelDAO . getPersonnel ( r . get ApproverMID ()); ▁// ▁ s . append ( String . format (" Request ▁was ▁requested ▁on ▁% s ▁by ▁% s ▁" , ▁r . getRequestedDate String (), ▁p ▁// ▁ . getF ullName ()) ); ▁// ▁ s . append ( String . format (" and ▁rejected ▁on ▁% s ▁by ▁% s ", ▁r . getApprovedDate String (), ▁p 2 . getF ullName ()) ); ▁// ▁} ▁if ▁( r . get Status (). equals ( R eportRequestBean . Viewed )) ▁{ ▁PersonnelBean ▁p ▁= ▁personnelDAO . getPersonnel ( r . get RequesterMID ()); ▁// ▁PersonnelBean ▁p 2 ▁= ▁personnelDAO . getPersonnel ( r . get ApproverMID ()); ▁String ▁fullName ▁= ▁" Un known "; ▁if ( p ▁ != ▁null ){ ▁fullName ▁= ▁p . getF ullName (); ▁ s . append ( String . format (" Request ▁was ▁requested ▁on ▁% s ▁by ▁% s , ▁" , ▁r . getRequestedDate String (), ▁p ▁ . getF ullName ()) ); ▁} ▁// ▁ s . append ( String . format (" approve d ▁on ▁% s ▁by ▁% s , ▁" , ▁r . getApprovedDate String (), ▁fullName )); ▁ s . append (" "); / / ▁removed ▁"< br ▁/> " ▁because ▁it ▁cause d ▁ unit ▁test ▁to ▁fail ▁and ▁see m s ▁to ▁have ▁no ▁// ▁purpose ▁ s . append ( String . format (" and ▁viewed ▁on ▁% s ▁by ▁% s ", ▁r . getViewedDate String (), ▁fullName )); ▁} ▁return ▁ s . to String (); ▁} ▁}