▁p ackage ▁edu . nc su . cs c . itrust . beans . loaders ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . beans . RemoteMonitoring DataBean ; ▁/** ▁* ▁A ▁loader ▁for ▁ RemoteMonitoring DataBean s . ▁* ▁* ▁Load s ▁in ▁information ▁to / from ▁beans ▁using ▁ResultSet s ▁and ▁P reparedStatement s . ▁Use ▁the ▁superclass ▁to ▁enforce ▁consistency . ▁* ▁For ▁details ▁on ▁the ▁para dig m ▁for ▁a ▁loader ▁( and ▁what ▁its ▁methods ▁do ) , ▁see ▁ {@ link ▁BeanLoader } ▁*/ ▁public ▁class ▁ RemoteMonitoring DataBeanLoader ▁implement s ▁BeanLoader < RemoteMonitoring DataBean > ▁{ ▁public ▁List < RemoteMonitoring DataBean > ▁load List ( ResultSet ▁rs ) ▁throw s ▁SQLException ▁{ ▁List < RemoteMonitoring DataBean > ▁list ▁= ▁new ▁ArrayList < RemoteMonitoring DataBean > (); ▁while ▁( rs . next ()) ▁{ ▁list . add ( loadSingle ( rs )); ▁} ▁return ▁list ; ▁} ▁public ▁P reparedStatement ▁load Parameters ( P reparedStatement ▁ps , ▁ RemoteMonitoring DataBean ▁bean ) ▁throw s ▁SQLException ▁{ ▁throw ▁new ▁Illegal StateException (" un implemented ! "); ▁} ▁public ▁ RemoteMonitoring DataBean ▁loadSingle ( ResultSet ▁rs ) ▁throw s ▁SQLException ▁{ ▁ RemoteMonitoring DataBean ▁d ▁= ▁new ▁ RemoteMonitoring DataBean (); ▁d . set LoggedInMID ( rs . getLong (" PatientID ")); ▁d . set Systolic BloodPressure ( rs . getInt (" systolic BloodPressure ")); ▁d . set Diastolic BloodPressure ( rs . getInt (" diastolic BloodPressure ")); ▁d . set G lucoseLevel ( rs . getInt (" glucoseLevel ")); ▁d . setTime ( rs . get Timestamp (" timeLogged ")); ▁d . set ReporterRole ( rs . get String (" ReporterRole ")); ▁d . set Reporter MID ( rs . getLong (" ReporterID ")); ▁return ▁d ; ▁} ▁}