▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . action . Edit ApptTypeAction ; ▁import ▁edu . nc su . cs c . itrust . action . V iewMyApptsAction ; ▁import ▁edu . nc su . cs c . itrust . action . View MyRecordsAction ; ▁import ▁edu . nc su . cs c . itrust . beans . ApptBean ; ▁import ▁edu . nc su . cs c . itrust . beans . OfficeVisitBean ; ▁import ▁edu . nc su . cs c . itrust . beans . LabProcedureBean ; ▁import ▁java . util . List ; ▁import ▁java . sql . SQLException ; ▁import ▁java . sql . Timestamp ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . Hashtable ; ▁import ▁java . util . Calendar ; ▁/** ▁* ▁ Action ▁class ▁for ▁calendar . jsp ▁* ▁@ author ▁S of t ware ▁E ng ine er ing ▁T e am ▁13 , ▁2010 ▁" Pro j e ct ▁ Z e p h y r " ▁* ▁*/ ▁public ▁class ▁Generate CalendarAction ▁{ ▁private ▁View MyApptsAction ▁a _ action ; ▁private ▁Edit ApptTypeAction ▁types ; ▁private ▁View MyRecordsAction ▁r _ action ; ▁private ▁List < ApptBean > ▁send ; ▁/** ▁* ▁Set ▁up ▁defaults ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁user ▁who ▁is ▁viewing ▁the ▁calendar ▁*/ ▁public ▁Generate CalendarAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁a _ action ▁= ▁new ▁View MyApptsAction ( factory , ▁loggedInMID ); ▁types ▁= ▁new ▁Edit ApptTypeAction ( factory , ▁loggedInMID ); ▁r _ action ▁= ▁new ▁View MyRecordsAction ( factory , ▁loggedInMID ); ▁send ▁= ▁new ▁ArrayList < ApptBean > (); ▁} ▁/** ▁* ▁Return ▁the ▁send ▁request ▁for ▁an ▁AppointmentBean ▁* ▁@ return ▁the ▁send ▁request ▁for ▁an ▁AppointmentBean ▁*/ ▁public ▁List < ApptBean > ▁get Send () ▁{ ▁return ▁send ; ▁} ▁/** ▁* ▁Check ▁appointments ▁appear ing ▁on ▁the ▁calendar ▁for ▁conflicts ▁* ▁with ▁other ▁appointments ▁on ▁the ▁calendar . ▁* ▁* ▁The ▁array ▁from ▁this ▁method ▁is ▁used ▁to ▁determine ▁what ▁appointments ▁* ▁will ▁appear ▁in ▁bold ▁on ▁the ▁calendar . ▁* ▁* ▁@ return ▁An ▁array ▁of ▁item s ▁that ▁are ▁in ▁conflict ▁with ▁other ▁item s . ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁boolean [ ] ▁get C onflicts () ▁throw s ▁SQLException ▁{ ▁boolean ▁conflicts [ ] ▁= ▁new ▁boolean [ send . size () ] ; ▁for ( int ▁i =0; ▁i < send . size (); ▁i ++) ▁{ ▁ApptBean ▁a b ▁= ▁send . get ( i ); ▁long ▁t ▁= ▁a b . getDate (). getTime (); ▁long ▁m ▁= ▁types . getDuration By Type ( a b . getApptType ()) ▁* ▁60 L ▁* ▁1000 L ; ▁Timestamp ▁time ▁= ▁new ▁Timestamp ( t + m ); ▁for ( int ▁j = i +1 ; ▁j < send . size (); ▁j ++) ▁{ ▁if ( send . get ( j ) . getDate (). before ( time )) ▁{ ▁conflicts [ i ] ▁= ▁true ; ▁conflicts [ j ] ▁= ▁true ; ▁} ▁} ▁} ▁return ▁conflicts ; ▁} ▁/** ▁* ▁Create s ▁a ▁hash ▁table ▁with ▁all ▁of ▁the ▁Appointments ▁to ▁be ▁* ▁displayed ▁on ▁the ▁calendar ▁for ▁the ▁month ▁and ▁year ▁being ▁viewed . ▁* ▁* ▁@ param ▁thisMonth ▁The ▁month ▁of ▁the ▁calendar ▁to ▁be ▁rendered ▁* ▁@ param ▁thisYear ▁The ▁year ▁of ▁the ▁calendar ▁to ▁be ▁rendered ▁* ▁@ return ▁A ▁Hashtable ▁containing ▁the ▁AppointmentBean s ▁to ▁be ▁rendered ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁Hashtable < Integer , ▁ArrayList < ApptBean > > ▁ getAppts Table ( int ▁thisMonth , ▁int ▁thisYear ) ▁throw s ▁SQLException ▁{ ▁List < ApptBean > ▁appts ▁= ▁a _ action . getMy Appointments (); ▁Hashtable < Integer , ▁ArrayList < ApptBean > > ▁a table ▁= ▁new ▁Hashtable < Integer , ▁ArrayList < ApptBean > > (); ▁Calendar ▁a ▁= ▁Calendar . get Instance (); ▁for ( ApptBean ▁b ▁: ▁appts ) ▁{ ▁a . setTime InM illi s ( b . getDate (). getTime ()); ▁if ( a . get ( Calendar . MONTH ) ▁== ▁thisMonth ▁&& ▁a . get ( Calendar . YEAR ) ▁== ▁thisYear ) ▁{ ▁if (! a table . contains Key ( a . get ( Calendar . DAY _ OF _ MONTH ))) ▁a table . put ( a . get ( Calendar . DAY _ OF _ MONTH ) , ▁new ▁ArrayList < ApptBean > ()); ▁ArrayList < ApptBean > ▁l ▁= ▁a table . get ( a . get ( Calendar . DAY _ OF _ MONTH )); ▁l . add ( b ); ▁send . add ( b ); ▁a table . put ( a . get ( Calendar . DAY _ OF _ MONTH ) , ▁l ); ▁} ▁} ▁return ▁a table ; ▁} ▁/** ▁* ▁Create s ▁a ▁hash ▁table ▁with ▁all ▁of ▁the ▁Office ▁Visits ▁to ▁be ▁* ▁displayed ▁on ▁the ▁calendar ▁for ▁the ▁month ▁and ▁year ▁being ▁viewed . ▁* ▁* ▁@ param ▁thisMonth ▁The ▁month ▁of ▁the ▁calendar ▁to ▁be ▁rendered ▁* ▁@ param ▁thisYear ▁The ▁year ▁of ▁the ▁calendar ▁to ▁be ▁rendered ▁* ▁@ return ▁A ▁Hashtable ▁containing ▁the ▁OfficeVisitBean s ▁to ▁be ▁rendered ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁Hashtable < Integer , ▁ArrayList < OfficeVisitBean > > ▁getOfficeVisit s Table ( int ▁thisMonth , ▁int ▁thisYear ) ▁throw s ▁iTrustException ▁{ ▁List < OfficeVisitBean > ▁officeVisits ▁= ▁r _ action . get AllOfficeVisits (); ▁Hashtable < Integer , ▁ArrayList < OfficeVisitBean > > ▁rtable ▁= ▁new ▁Hashtable < Integer , ▁ArrayList < OfficeVisitBean > > (); ▁Calendar ▁a ▁= ▁Calendar . get Instance (); ▁for ( OfficeVisitBean ▁b ▁: ▁officeVisits ) ▁{ ▁a . setTime InM illi s ( b . getVisitDate (). getTime ()); ▁if ( a . get ( Calendar . MONTH ) ▁== ▁thisMonth ▁&& ▁a . get ( Calendar . YEAR ) ▁== ▁thisYear ) ▁{ ▁if (! r table . contains Key ( a . get ( Calendar . DAY _ OF _ MONTH ))) ▁rtable . put ( a . get ( Calendar . DAY _ OF _ MONTH ) , ▁new ▁ArrayList < OfficeVisitBean > ()); ▁ArrayList < OfficeVisitBean > ▁l ▁= ▁rtable . get ( a . get ( Calendar . DAY _ OF _ MONTH )); ▁l . add ( b ); ▁rtable . put ( a . get ( Calendar . DAY _ OF _ MONTH ) , ▁l ); ▁} ▁} ▁return ▁rtable ; ▁} ▁/** ▁* ▁Create s ▁a ▁hash ▁table ▁with ▁all ▁of ▁the ▁lab ▁procedures ▁to ▁be ▁* ▁displayed ▁on ▁the ▁calendar ▁for ▁the ▁month ▁and ▁year ▁being ▁viewed . ▁* ▁* ▁@ param ▁thisMonth ▁The ▁month ▁of ▁the ▁calendar ▁to ▁be ▁rendered ▁* ▁@ param ▁thisYear ▁The ▁year ▁of ▁the ▁calendar ▁to ▁be ▁rendered ▁* ▁@ return ▁A ▁Hashtable ▁containing ▁the ▁ LabProcedureBean s ▁to ▁be ▁rendered ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁Hashtable < Integer , ▁ArrayList < LabProcedureBean > > ▁ getLabProcedure s Table ( int ▁thisMonth , ▁int ▁thisYear ) ▁throw s ▁iTrustException ▁{ ▁List < LabProcedureBean > ▁procs ▁= ▁r _ action . getLab s (); ▁Hashtable < Integer , ▁ArrayList < LabProcedureBean > > ▁ptable ▁= ▁new ▁Hashtable < Integer , ▁ArrayList < LabProcedureBean > > (); ▁Calendar ▁a ▁= ▁Calendar . get Instance (); ▁for ( LabProcedureBean ▁b ▁: ▁procs ) ▁{ ▁a . setTime InM illi s ( b . get Timestamp (). getTime ()); ▁if ( a . get ( Calendar . MONTH ) ▁== ▁thisMonth ▁&& ▁a . get ( Calendar . YEAR ) ▁== ▁thisYear ) ▁{ ▁if (! p table . contains Key ( a . get ( Calendar . DAY _ OF _ MONTH ))) ▁ptable . put ( a . get ( Calendar . DAY _ OF _ MONTH ) , ▁new ▁ArrayList < LabProcedureBean > ()); ▁ArrayList < LabProcedureBean > ▁l ▁= ▁ptable . get ( a . get ( Calendar . DAY _ OF _ MONTH )); ▁l . add ( b ); ▁ptable . put ( a . get ( Calendar . DAY _ OF _ MONTH ) , ▁l ); ▁} ▁} ▁return ▁ptable ; ▁} ▁}