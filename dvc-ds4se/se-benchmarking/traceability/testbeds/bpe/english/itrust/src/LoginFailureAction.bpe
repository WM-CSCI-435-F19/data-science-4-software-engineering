▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AuthDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁/** ▁* ▁P lease ▁note ▁that ▁this ▁is ▁not ▁the ▁be st ▁m it i g ation ▁for ▁D en ial ▁of ▁Service ▁attack s . ▁The ▁be tter ▁way ▁woul d ▁be ▁to ▁* ▁keep ▁ tr ack ▁of ▁password ▁failure ▁attempts ▁per ▁user ▁account , ▁NOT ▁with ▁easily ▁sp o of able ▁ ip ▁address es . ▁The ▁* ▁reason ▁this ▁feature ▁is ▁implemented ▁with ▁ ip ▁address es ▁is ▁a ▁limitation ▁in ▁Tomcat ▁authentication ▁( actually , ▁* ▁it ' s ▁techni c ally ▁JSP ' s ▁f a ul t ▁for ▁not ▁specify ing ▁a ▁form ▁of ▁account ▁ lock out ) . ▁< br ▁/> ▁* ▁< br ▁/> ▁* ▁All ▁authentication ▁in ▁this ▁application ▁is ▁done ▁by ▁the ▁contain er ▁( To m cat ) , ▁which ▁does n ' t ▁support ▁account ▁* ▁ lock out . ▁S o ▁our ▁options ▁woul d ▁be ▁( a ) ▁to ▁implement ▁our ▁own ▁authentication ▁( yu c k ! ) , ▁or ▁(2) ▁to ▁extend ▁the ▁* ▁JDBC Realm ▁class ▁in ▁the ▁Tomcat ▁source ▁code ▁and ▁add ▁the ▁logic . ▁I ' ve ▁look ed ▁into ▁this ▁and ▁it ' s ▁ actually ▁pre t ty ▁* ▁ easy . ▁The ▁ONLY ▁reason ▁it ' s ▁not ▁implemented ▁here ▁is ▁that ▁the ▁code ▁woul d ▁be ▁b uri ed ▁in ▁a ▁j ar ▁in ▁your ▁Tomcat ▁* ▁installation ▁- ▁not ▁ very ▁edu c ational ▁for ▁ th ose ▁who ▁want ▁to ▁le ar n ▁about ▁authentication ▁in ▁web apps . ▁F eel ▁free ▁* ▁to ▁change ▁this ; ▁extend ing ▁this ▁woul d ▁be ▁per f e ct ly ▁acceptable . ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁LoginFailure Action ▁{ ▁public ▁static ▁final ▁int ▁ MAX _ LOG IN _ ATTEMPTS ▁= ▁3 ; ▁private ▁AuthDAO ▁authDAO ; ▁private ▁String ▁ipAddr ; ▁private ▁TransactionDAO ▁transactionDAO ; ▁/** ▁* ▁Set ▁up ▁defaults ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁ipAddr ▁The ▁IP ▁address ▁of ▁the ▁user ▁making ▁the ▁login ▁attempt . ▁*/ ▁public ▁LoginFailure Action ( DAOFactory ▁factory , ▁String ▁ipAddr ) ▁{ ▁this . authDAO ▁= ▁factory . get AuthDAO (); ▁this . ipAddr ▁= ▁ipAddr ; ▁this . transactionDAO ▁= ▁factory . get TransactionDAO (); ▁} ▁/** ▁* ▁Call s ▁authDAO ▁to ▁record ▁the ▁login ▁failure ▁in ▁the ▁database ▁* ▁* ▁@ return ▁How ▁many ▁login ▁failure ▁attempts ▁or ▁a ▁DBException ▁message ▁*/ ▁public ▁String ▁record LoginFailure () ▁{ ▁try ▁{ ▁authDAO . record LoginFailure ( ipAddr ); ▁int ▁login Failures ▁= ▁authDAO . get LoginFailure s ( ipAddr ); ▁transactionDAO . log Transaction ( TransactionType . LOG IN _ FAIL U RE , ▁0 L , ▁0 L , ▁" IP : ▁" ▁+ ▁ipAddr ); ▁return ▁" Login ▁failed , ▁attempt ▁" ▁+ ▁login Failures ; ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁return ▁e . getMessage (); ▁} ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁the ▁current ▁user ▁can ▁login ▁( # fail ur es < 3 ) ▁* ▁* ▁@ return ▁true ▁if ▁the ▁user ▁is ▁valid ▁to ▁login ▁*/ ▁public ▁boolean ▁ isValid For Login () ▁{ ▁try ▁{ ▁return ▁authDAO . get LoginFailure s ( ipAddr ) ▁< ▁3 ; ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁System . err . print ln (" De ny ing ▁access ▁du e ▁to ▁DBException "); ▁return ▁false ; ▁} ▁} ▁}