▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . LabProcedureBean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . LabProcedureBean Loader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁/** ▁* ▁A ▁DAO ▁for ▁ managing ▁lab ▁procedure ▁codes . ▁Database ▁Access ▁Object . ▁All ▁info ▁coming ▁into ▁a ▁DAO ▁is ▁already ▁validated . ▁* ▁J ust ▁wor ry ▁about ▁DB ▁st uff ▁here . ▁Note ▁that ▁all ▁DAOs ▁need ▁to ▁have ▁a ▁DAOFactory ▁with ▁which ▁to ▁access ▁other ▁* ▁DAOs ▁and ▁to ▁get ▁connections . ▁Also , ▁every ▁DAO ▁must ▁have ▁a ▁constructor ▁with ▁a ▁DAOFactory ▁as ▁a ▁parameter . ▁*/ ▁public ▁class ▁LabProcedureDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁LabProcedure BeanLoader ▁labProcedure Loader ; ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁LabProcedureDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁labProcedure Loader ▁= ▁new ▁LabProcedure BeanLoader (); ▁} ▁/** ▁* ▁Get ▁a ▁list ▁of ▁the ▁lab ▁procedures ▁associate d ▁with ▁a ▁given ▁patient . ▁* ▁@ param ▁id ▁The ▁MID ▁of ▁the ▁patient ▁as ▁a ▁long . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁ LabProcedureBean s ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LabProcedureBean > ▁ getLabProcedure sForPatient ( long ▁id ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( id ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" PatientMID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁LabProcedure ▁ WH ERE ▁PatientMID ▁= ▁? ▁AND ▁Rights ▁= ▁? ▁OR DER ▁ BY ▁ UpdatedDate ▁DESC "); ▁ps . s etLong ( 1, ▁id ); ▁ps . set String (2, ▁ LabProcedureBean . Allow ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁labProcedure Loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Get s ▁all ▁the ▁lab ▁procedures ▁for ▁a ▁given ▁patient ▁that ▁occur ▁within ▁the ▁next ▁month . ▁* ▁@ param ▁id ▁The ▁MID ▁of ▁the ▁patient ▁as ▁a ▁long . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁ LabProcedureBean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LabProcedureBean > ▁ getLabProcedure sForPatient For Next Month ( long ▁id ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( id ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" PatientMID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁LabProcedure ▁ WH ERE ▁PatientMID ▁= ▁? ▁AND ▁Rights ▁= ▁? ▁AND ▁Status ▁= ▁? ▁AND ▁( Date Diff ( SY S DATE (), UpdatedDate ) ▁< = ▁30 ) ▁OR DER ▁ BY ▁ UpdatedDate ▁DESC "); ▁ps . s etLong ( 1, ▁id ); ▁ps . set String (2, ▁ LabProcedureBean . Allow ); ▁ps . set String ( 3, ▁ LabProcedureBean . Completed ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁labProcedure Loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Get s ▁an ▁individual ▁lab ▁procedure . ▁* ▁@ param ▁id ▁The ▁ID ▁of ▁the ▁lab ▁procedure . ▁* ▁@ return ▁A ▁ LabProcedureBean ▁representing ▁the ▁procedure . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁ LabProcedureBean ▁ getLabProcedure ( long ▁id ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁LabProcedure ▁ WH ERE ▁Laboratory ProcedureID ▁= ▁? "); ▁ps . s etLong ( 1, ▁id ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁rs . next (); ▁return ▁labProcedure Loader . loadSingle ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Get s ▁all ▁procedures ▁for ▁Patient ▁* ▁@ param ▁mid ▁patient ▁id ▁* ▁@ return ▁A ▁java . util . List ▁of ▁ LabProcedureBean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LabProcedureBean > ▁get AllLabProcedures Date ( long ▁mid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( mid ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" PatientMID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁LabProcedure ▁ WH ERE ▁PatientMID ▁= ▁? ▁OR DER ▁ BY ▁ UpdatedDate ▁DESC "); ▁ps . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁labProcedure Loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁This ▁gets ▁all ▁the ▁procedures ▁for ▁a ▁particular ▁patient ▁on ▁a ▁particular ▁office ▁visit ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁patient . ▁* ▁@ param ▁ovid ▁The ▁Office ▁Visit ▁ID . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁ LabProcedureBean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LabProcedureBean > ▁getAll LabProceduresFor Doc OV ( long ▁mid , ▁long ▁ovid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( mid ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" PatientMID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁LabProcedure ▁ WH ERE ▁PatientMID ▁= ▁? ▁AND ▁ OfficeVisitID ▁= ▁? ▁OR DER ▁ BY ▁ UpdatedDate ▁DESC "); ▁ps . s etLong ( 1, ▁mid ); ▁ps . s etLong (2, ▁ovid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁labProcedure Loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁This ▁gets ▁all ▁the ▁procedures ▁for ▁a ▁particular ▁patient ▁on ▁a ▁particular ▁office ▁visit ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁patient . ▁* ▁@ param ▁ovid ▁The ▁Office ▁Visit ▁ID . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁ LabProcedureBean s ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LabProcedureBean > ▁getAll LabProceduresFor Doc OV ( long ▁ovid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁LabProcedure ▁ WH ERE ▁ OfficeVisitID ▁= ▁? ▁" ); ▁ps . s etLong ( 1, ▁ovid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁labProcedure Loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Get s ▁all ▁lab ▁procedures , ▁period . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁ LabProcedureBean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LabProcedureBean > ▁get AllLabProcedures () ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁LabProcedure ▁OR DER ▁ BY ▁ UpdatedDate ▁ASC "); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁labProcedure Loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Get s ▁the ▁lab ▁procedures ▁for ▁a ▁given ▁LHCP ▁that ▁occur ▁within ▁the ▁next ▁month . ▁* ▁@ param ▁ovid ▁The ▁Office ▁Visit ▁ID ▁con d u ct ed ▁by ▁the ▁LHCP ▁in ▁question . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁ LabProcedureBean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LabProcedureBean > ▁ getLabProcedure s ForLHCP For Next Month ( long ▁ovid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( ov id ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" OfficeVisitID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁LabProcedure ▁ WH ERE ▁ OfficeVisitID ▁= ▁? ▁AND ▁Status ▁= ▁? ▁AND ▁( Date Diff ( SY S DATE (), UpdatedDate ) ▁< = ▁30 ) ▁OR DER ▁ BY ▁ UpdatedDate ▁DESC "); ▁ps . s etLong ( 1, ▁ovid ); ▁ps . set String (2, ▁ LabProcedureBean . Completed ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁labProcedure Loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁ Insert s ▁a ▁lab ▁procedure ▁into ▁the ▁database . ▁* ▁@ param ▁b ▁The ▁ LabProcedureBean ▁to ▁be ▁inserted . ▁* ▁@ return ▁A ▁long ▁containing ▁the ▁ID ▁of ▁the ▁new ly ▁inserted ▁lab ▁procedure ▁bean . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁long ▁add LabProcedure ( LabProcedureBean ▁b ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( b . get Pid () ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" PatientMID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁LabProcedure ▁( PatientMID , ▁Laboratory ProcedureCode , ▁Status , ▁ Commentary , ▁Results , ▁ OfficeVisitID , ▁Rights ) ▁VALUES ▁ (?,?,?,?,?,?,? )"); ▁ps . s etLong ( 1, ▁b . get Pid ()); ▁ps . set String (2, ▁b . getLo inc ()); ▁ps . set String ( 3, ▁b . get Status ()); ▁ps . set String ( 4, ▁b . get Commentary ()); ▁ps . set String (5, ▁b . get Results ()); ▁ps . s etLong (6, ▁b . getOv ID ()); ▁ps . set String ( 7, ▁b . get Rights ()); ▁ps . execute Update (); ▁return ▁DBUtil . getLast Insert ( conn ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Updates ▁an ▁existing ▁lab ▁procedure . ▁* ▁@ param ▁b ▁The ▁ LabProcedureBean ▁representing ▁the ▁procedure ▁to ▁be ▁updated . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁update LabProcedure ( LabProcedureBean ▁b ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( b . get Pid () ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" PatientMID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁LabProcedure ▁SET ▁Status ▁= ▁? , ▁ Commentary ▁= ▁? , ▁Results ▁= ▁? , ▁ UpdatedDate ▁= ▁? ▁ WH ERE ▁Laboratory ProcedureID =?" ); ▁ps . set String ( 1, ▁b . get Status ()); ▁ps . set String (2, ▁b . get Commentary ()); ▁ps . set String ( 3, ▁b . get Results ()); ▁ps . set Timestamp ( 4, ▁new ▁java . sql . Timestamp ( System . current Time M illi s ()) ); ▁ps . s etLong (5, ▁b . get ProcedureID ()); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Get s ▁all ▁the ▁lab ▁procedures ▁that ▁correspond ▁to ▁a ▁particular ▁LOINC . ▁* ▁@ param ▁id ▁The ▁LOINC ▁in ▁question . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁ LabProcedureBean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LabProcedureBean > ▁get AllLabProcedures LOINC ( long ▁id ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( id ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" PatientMID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁LabProcedure ▁ WH ERE ▁PatientMID ▁= ▁? ▁OR DER ▁ BY ▁Laboratory ProcedureCode ▁ASC "); ▁ps . s etLong ( 1, ▁id ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁labProcedure Loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Updates ▁the ▁rights ▁of ▁a ▁user ▁on ▁a ▁given ▁lab ▁procedure . ▁* ▁@ param ▁b ▁The ▁ LabProcedureBean ▁in ▁question . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁update Rights ( LabProcedureBean ▁b ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( b . get Pid () ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" PatientMID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁LabProcedure ▁SET ▁Rights ▁= ▁? , ▁ UpdatedDate ▁= ▁? ▁ WH ERE ▁Laboratory ProcedureID =?" ); ▁ps . set String ( 1, ▁b . get Rights ()); ▁ps . set Timestamp (2, ▁new ▁java . sql . Timestamp ( System . current Time M illi s ()) ); ▁ps . s etLong ( 3, ▁b . get ProcedureID ()); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}