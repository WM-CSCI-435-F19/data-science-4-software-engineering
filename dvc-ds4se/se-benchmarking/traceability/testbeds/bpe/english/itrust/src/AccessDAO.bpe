▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁/** ▁* ▁AccessDAO ▁is ▁for ▁all ▁queries ▁relat ed ▁to ▁authorization . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁AccessDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁AccessDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Returns ▁the ▁number ▁of ▁minutes ▁it ▁woul d ▁take ▁for ▁a ▁session ▁to ▁time ▁out . ▁This ▁is ▁done ▁by ▁effect ive ly ▁* ▁using ▁the ▁database ▁table ▁as ▁a ▁hash ▁table . ▁If ▁a ▁row ▁in ▁GlobalVariables ▁does ▁not ▁exist , ▁one ▁is ▁inserted ▁* ▁with ▁the ▁default ▁value ▁' 20 ' . ▁* ▁* ▁@ return ▁An ▁int ▁for ▁the ▁number ▁of ▁minutes . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁int ▁get SessionTimeout Min s () ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁ Value ▁FROM ▁GlobalVariables ▁ WH ERE ▁Name =' Timeout ' "); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁if ▁( rs . next ()) ▁return ▁rs . getInt (" Value "); ▁else ▁{ ▁insert Default Timeout ( conn , ▁20 ); ▁return ▁20 ; ▁} ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Set s ▁the ▁number ▁of ▁minutes ▁it ▁woul d ▁take ▁for ▁a ▁session ▁to ▁timeout . ▁* ▁* ▁@ param ▁mins ▁An ▁int ▁specify ing ▁the ▁number ▁of ▁minutes ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁set SessionTimeout Min s ( int ▁mins ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁GlobalVariables ▁SET ▁ Value =? ▁ WH ERE ▁Name =' Timeout ' "); ▁ps . set Int ( 1, ▁mins ); ▁int ▁num Updated ▁= ▁ps . execute Update (); ▁if ▁( num Updated ▁== ▁0) ▁// ▁no ▁value ▁in ▁the ▁table ▁insert Default Timeout ( conn , ▁mins ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁private ▁void ▁insert Default Timeout ( Connection ▁conn , ▁int ▁mins ) ▁throw s ▁SQLException ▁{ ▁P reparedStatement ▁ps ▁= ▁null ; ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁GlobalVariables ( Name , Value ) ▁VALUES ▁( ' Timeout ' , ▁? )"); ▁ps . set Int ( 1, ▁mins ); ▁ps . execute Update (); ▁} ▁}