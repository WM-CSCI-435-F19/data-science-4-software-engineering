▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . HashMap ; ▁import ▁java . util . List ; ▁import ▁java . util . Calendar ; ▁import ▁edu . nc su . cs c . itrust . beans . forms . VisitReminder ReturnForm ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . VisitReminders DAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . beans . ProcedureBean ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . beans . VisitFlag ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . enums . Gender ; ▁/** ▁* ▁Get s ▁the ▁VisitReminders ▁for ▁a ▁given ▁patient ▁Used ▁by ▁visit Reminders . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁Get VisitReminders Action ▁{ ▁/** ▁* ▁Reminder ▁Type ▁enumeration . ▁*/ ▁public ▁static ▁enum ▁ReminderType ▁{ ▁ DIAGNOSED _ CA RE _ NEEDERS (" Di a g no s ed ▁Car e ▁ Needers "), ▁F LU _ S H OT _ NEEDERS (" Flu ▁ Shot ▁ Needers "), ▁ IMMUNIZATION _ NEEDERS (" Immunization ▁ Needers "); ▁private ▁String ▁type Name ; ▁private ▁ReminderType ( String ▁type Name ) ▁{ ▁this . type Name ▁= ▁type Name ; ▁} ▁private ▁static ▁final ▁HashMap < String , ▁ReminderType > ▁map ▁= ▁new ▁HashMap < String , ▁ReminderType > (); ▁static ▁{ ▁for ▁( ReminderType ▁ rt ▁: ▁ReminderType . values ()) ▁{ ▁map . put ( rt . getType Name (), ▁ rt ); ▁} ▁} ▁/** ▁* ▁Get s ▁the ▁ReminderType ▁for ▁the ▁name ▁passed ▁as ▁a ▁ param ▁* ▁* ▁@ param ▁name ▁* ▁@ return ▁the ▁ReminderType ▁associate d ▁with ▁the ▁name ▁*/ ▁public ▁static ▁ReminderType ▁get ReminderType ( String ▁name ) ▁{ ▁return ▁map . get ( name ); ▁} ▁/** ▁* ▁Returns ▁the ▁type ▁name ▁as ▁a ▁string ▁* ▁* ▁@ return ▁*/ ▁public ▁String ▁ getType Name () ▁{ ▁return ▁type Name ; ▁} ▁} ▁/** ▁* ▁* ▁Begin ▁Get VisitReminders Action ▁code ▁* ▁*/ ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁VisitReminders DAO ▁ visitReminderDAO ; ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁Set ▁up ▁defaults ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁MID ▁of ▁the ▁person ▁who ▁is ▁logged ▁in ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁Get VisitReminders Action ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁throw s ▁iTrustException ▁{ ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁ visitReminderDAO ▁= ▁factory . get VisitReminders DAO (); ▁patientDAO ▁= ▁factory . get PatientDAO (); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁VisitReminder ReturnForm s ▁for ▁the ▁type ▁passed ▁in ▁as ▁a ▁ param ▁* ▁* ▁@ param ▁type ▁* ▁the ▁ReminderType ▁* ▁@ return ▁the ▁list ▁of ▁VisitReminder ReturnForm s ▁* ▁@ throw s ▁iTrustException ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁List < VisitReminder ReturnForm > ▁get VisitReminders ( ReminderType ▁type ) ▁throw s ▁iTrustException , ▁ FormValidat ionException ▁{ ▁if ▁( null ▁== ▁type ) ▁throw ▁new ▁iTrustException (" Reminder ▁Type ▁D N E "); ▁transDAO . log Transaction ( TransactionType . PATIENT _ REMINDERS , ▁loggedInMID , ▁0 l , ▁type . getType Name ()); ▁switch ▁( type ) ▁{ ▁case ▁ DIAGNOSED _ CA RE _ NEEDERS : ▁return ▁str ip D up es ( visitReminderDAO . getDiagnose d Visit Needers ( loggedInMID )); ▁case ▁F LU _ S H OT _ NEEDERS : ▁return ▁ visitReminderDAO . get Flu Shot Del in que nt s ( loggedInMID ); ▁case ▁ IMMUNIZATION _ NEEDERS : ▁return ▁getImmunization Needers ( loggedInMID ); ▁default : ▁throw ▁new ▁iTrustException (" Reminder ▁Type ▁D N E "); ▁} ▁} ▁/** ▁* ▁Get s ▁a ▁list ▁of ▁anyone ▁who ▁need ▁immunizations ▁* ▁* ▁@ param ▁mid ▁the ▁HCP ▁who se ▁patients ▁are ▁being ▁checked ▁* ▁@ return ▁a ▁list ▁of ▁all ▁the ▁pe ople ▁who ▁need ▁immunizations -- d one ▁in ▁a ▁visit ▁reminder ▁* ▁@ throw s ▁iTrustException ▁*/ ▁private ▁List < VisitReminder ReturnForm > ▁getImmunization Needers ( long ▁mid ) ▁throw s ▁iTrustException ▁{ ▁List < VisitReminder ReturnForm > ▁form List ; ▁List < VisitReminder ReturnForm > ▁need List ▁= ▁new ▁ArrayList < VisitReminder ReturnForm > (); ▁String ▁reason ▁= ▁""; ▁// ▁Get ▁list ▁of ▁patients ▁that ▁designat e ▁this ▁HCP ▁form List ▁= ▁ visitReminderDAO . getPatient s ( mid ); ▁for ▁( VisitReminder ReturnForm ▁r ▁: ▁form List ) ▁{ ▁reason ▁= ▁check Immunizations ( r . getPatientID ()); ▁if ▁(0 ▁< ▁reason . length ()) ▁{ ▁need List . add ( r ); ▁r . add VisitFlag ( new ▁VisitFlag ( VisitFlag . IMMUNIZATION , ▁reason )); ▁} ▁} ▁return ▁need List ; ▁} ▁/** ▁* ▁Check s ▁a ▁patient ▁to ▁see ▁what ▁immunizations ▁they ▁need ▁* ▁* ▁@ param ▁pid ▁patient ▁to ▁be ▁checked ▁* ▁@ return ▁patient ▁list ▁of ▁ th ose ▁lack ing ▁immunizations ▁according ▁to ▁the ▁schedule ▁*/ ▁private ▁String ▁check Immunizations ( long ▁pid ) ▁throw s ▁iTrustException ▁{ ▁String ▁reason ▁= ▁""; ▁List < ProcedureBean > ▁procs ▁= ▁patientDAO . get Procedures ( pid ); ▁PatientBean ▁patient ▁= ▁patientDAO . getPatient ( pid ); ▁long ▁patientAge ▁= ▁patient . getAge In Week s (); ▁Gender ▁gen ▁= ▁patient . get Gender (); ▁int ▁ hepB ▁= ▁0; ▁long ▁hepBTime ▁= ▁0; ▁int ▁rota ▁= ▁0; ▁long ▁rotaTime ▁= ▁0; ▁int ▁ diptet ▁= ▁0; ▁long ▁deptetTime ▁= ▁0; ▁int ▁haemoflu ▁= ▁0; ▁long ▁haemofluTime ▁= ▁0; ▁long ▁haemofluTime First ▁= ▁0; ▁int ▁pneumo ▁= ▁0; ▁long ▁pneumoTime ▁= ▁0; ▁long ▁pneumo fluTimeFirst ▁= ▁0; ▁int ▁p ol io ▁= ▁0; ▁long ▁polioTime ▁= ▁0; ▁int ▁ measles ▁= ▁0; ▁long ▁measlesTime ▁= ▁0; ▁int ▁ varicella ▁= ▁0; ▁long ▁varicellaTime ▁= ▁0; ▁int ▁he p A ▁= ▁0; ▁long ▁hepATime ▁= ▁0; ▁int ▁hpv ▁= ▁0; ▁long ▁hpvTime ▁= ▁0; ▁for ▁( ProcedureBean ▁proc : ▁procs ) ▁{ ▁String ▁cpt ▁= ▁proc . getCPTCode (); ▁// ▁He p ▁B ▁( 903 7 1) ▁if ▁( cpt . equals ( "90371 ")) ▁{ ▁ hepB ++; ▁hepBTime ▁= ▁proc . getDate (). getTime (); ▁} ▁// ▁ Rota v irus ▁( 90 68 1) ▁else ▁if ▁( cpt . equals ( "90681 ")) ▁{ ▁rota ++; ▁rotaTime ▁= ▁proc . getDate (). getTime (); ▁} ▁// ▁Dip th eria , ▁Tet anu s , ▁Per tus sis ▁( 90 69 6 ) ▁else ▁if ▁( cpt . equals ( "90696 ")) ▁{ ▁ diptet ++; ▁deptetTime ▁= ▁proc . getDate (). getTime (); ▁} ▁// ▁ Haemo phi lus ▁influenza ▁( 90 64 5 ) ▁else ▁if ▁( cpt . equals ( "90645 ")) ▁{ ▁if ▁(0 ▁== ▁haemoflu ) ▁haemofluTime First ▁= ▁proc . getDate (). getTime (); ▁haemoflu ++; ▁haemofluTime ▁= ▁proc . getDate (). getTime (); ▁} ▁// ▁ Pneumo co c cal ▁( 90 66 9 ) ▁else ▁if ▁( cpt . equals ( "90669 ")) ▁{ ▁if ▁(0 ▁== ▁pneumo ) ▁pneumo fluTimeFirst ▁= ▁proc . getDate (). getTime (); ▁pneumo ++; ▁pneumoTime ▁= ▁proc . getDate (). getTime (); ▁} ▁// ▁Polio v irus ▁( 90 7 12 ) ▁else ▁if ▁( cpt . equals ( "90712 ")) ▁{ ▁p ol io ++; ▁polioTime ▁= ▁proc . getDate (). getTime (); ▁} ▁// ▁ Measles , ▁M umps , ▁Rube ll a ▁( 90 7 07 ) ▁else ▁if ▁( cpt . equals (" 90 7 07 ")) ▁{ ▁ measles ++; ▁measlesTime ▁= ▁proc . getDate (). getTime (); ▁} ▁// ▁ Varicella ▁( 903 96 ) ▁else ▁if ▁( cpt . equals ( "90396 ")) ▁{ ▁ varicella ++; ▁varicellaTime ▁= ▁proc . getDate (). getTime (); ▁} ▁// ▁He p ▁A ▁( 90 6 3 3 ) ▁else ▁if ▁( cpt . equals ( "90633 ")) ▁{ ▁he p A ++; ▁hepATime ▁= ▁proc . getDate (). getTime (); ▁} ▁// ▁H uman ▁Papilloma a v irus ▁( 90 64 9 ) ▁else ▁if ▁( cpt . equals ( "90649 ")) ▁{ ▁hpv ++; ▁hpvTime ▁= ▁proc . getDate (). getTime (); ▁} ▁} ▁if ▁( 3 ▁> ▁ hepB ) ▁{ ▁reason ▁+= ▁testHep B ( hepB , ▁patientAge , ▁hepBTime ); ▁} ▁if ▁( 3 ▁> ▁rota ) ▁{ ▁reason ▁+= ▁test Rota V irus ( r ota , ▁patientAge , ▁rotaTime ); ▁} ▁if ▁(6 ▁> ▁ diptet ) ▁{ ▁reason ▁+= ▁test Dip T et ( diptet , ▁patientAge , ▁deptetTime ); ▁} ▁if ▁( 3 ▁> ▁haemoflu ) ▁{ ▁reason ▁+= ▁test Haemo Flu ( ha e mo flu , ▁patientAge , ▁haemofluTime , ▁haemofluTime First ); ▁} ▁if ▁(4 ▁> ▁pneumo ) ▁{ ▁reason ▁+= ▁test Pneumo ( p n e u mo , ▁patientAge , ▁pneumoTime , ▁pneumo fluTimeFirst ); ▁} ▁if ▁( 3 ▁> ▁p ol io ) ▁{ ▁reason ▁+= ▁test P ol io ( p ol io , ▁patientAge , ▁polioTime ); ▁} ▁if ▁( 2 ▁> ▁ measles ) ▁{ ▁reason ▁+= ▁test Measles ( measles , ▁patientAge , ▁measlesTime ); ▁} ▁if ▁( 2 ▁> ▁ varicella ) ▁{ ▁reason ▁+= ▁test Varicella ( varicella , ▁patientAge , ▁varicellaTime ); ▁} ▁if ▁( 2 ▁> ▁he p A ) ▁{ ▁reason ▁+= ▁testHep A ( h e p A , ▁patientAge , ▁hepATime ); ▁} ▁if ▁( 3 ▁> ▁hpv ▁&& ▁gen . getName (). equals (" Female ")) ▁{ ▁reason ▁+= ▁test HPV ( h pv , ▁patientAge , ▁hpvTime ); ▁} ▁return ▁reason ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁patient ▁needs ▁the ▁ HPV ▁immunization ▁* ▁* ▁@ param ▁count ▁which ▁immunization ▁they ▁are ▁on ▁* ▁@ param ▁patientAge ▁how ▁old ▁the ▁patient ▁is ▁* ▁@ param ▁time ▁what ▁the ▁date ▁is ▁* ▁@ return ▁when ▁the ▁immunization ▁should ▁be ▁given ▁*/ ▁public ▁static ▁String ▁test HPV ( int ▁count , ▁long ▁patientAge , ▁long ▁time ) ▁{ ▁String ▁reason ▁= ▁""; ▁long ▁weeks ▁= ▁( Calendar . get Instance (). getTime InM illi s () ▁- ▁time ) ▁/ ▁(1000 ▁* ▁60 ▁* ▁60 ▁* ▁24 ▁* ▁ 7 ); ▁if ▁(0 ▁== ▁count ) ▁{ ▁if ▁(4 68 ▁< = ▁patientAge ) ▁reason ▁+= ▁ "90649 ▁H uman ▁Papilloma v irus ▁( 9 ▁years ) ▁" ; ▁} ▁else ▁if ▁(1 ▁== ▁count ) ▁{ ▁if ▁(4 7 6 ▁< = ▁patientAge ▁&& ▁8 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90649 ▁H uman ▁Papilloma v irus ▁( 9 ▁years , ▁2 ▁months ) ▁" ; ▁} ▁else ▁if ▁( 2 ▁== ▁count ) ▁{ ▁if ▁(4 94 ▁< = ▁patientAge ▁&& ▁16 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90649 ▁H uman ▁Papilloma v irus ▁( 9 ▁years , ▁6 ▁months ) ▁" ; ▁} ▁return ▁reason ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁patient ▁needs ▁the ▁Hepatit s ▁A ▁immunization ▁* ▁* ▁@ param ▁count ▁which ▁immunization ▁they ▁are ▁on ▁* ▁@ param ▁patientAge ▁how ▁old ▁the ▁patient ▁is ▁* ▁@ param ▁time ▁what ▁the ▁current ▁date ▁is ▁* ▁@ return ▁when ▁the ▁immunization ▁should ▁be ▁given ▁*/ ▁public ▁static ▁String ▁testHep A ( int ▁count , ▁long ▁patientAge , ▁long ▁time ) ▁{ ▁String ▁reason ▁= ▁""; ▁long ▁weeks ▁= ▁( Calendar . get Instance (). getTime InM illi s () ▁- ▁time ) ▁/ ▁(1000 ▁* ▁60 ▁* ▁60 ▁* ▁24 ▁* ▁ 7 ); ▁if ▁(0 ▁== ▁count ) ▁{ ▁if ▁ (52 ▁< = ▁patientAge ) ▁reason ▁+= ▁ "90633 ▁Hepatit s ▁A ▁(12 ▁months ) ▁" ; ▁} ▁else ▁if ▁(1 ▁== ▁count ) ▁{ ▁if ▁( 7 8 ▁< = ▁patientAge ▁&& ▁ 26 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90633 ▁Hepatit s ▁A ▁( 18 ▁months ) ▁" ; ▁} ▁return ▁reason ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁patient ▁needs ▁the ▁ Varicella ▁immunization ▁* ▁* ▁@ param ▁count ▁which ▁immunization ▁they ▁are ▁on ▁* ▁@ param ▁patientAge ▁how ▁old ▁the ▁patient ▁is ▁* ▁@ param ▁time ▁what ▁the ▁current ▁date ▁is ▁* ▁@ return ▁when ▁the ▁immunization ▁should ▁be ▁given ▁*/ ▁public ▁static ▁String ▁test Varicella ( int ▁count , ▁long ▁patientAge , ▁long ▁time ) ▁{ ▁String ▁reason ▁= ▁""; ▁long ▁weeks ▁= ▁( Calendar . get Instance (). getTime InM illi s () ▁- ▁time ) ▁/ ▁(1000 ▁* ▁60 ▁* ▁60 ▁* ▁24 ▁* ▁ 7 ); ▁if ▁(0 ▁== ▁count ) ▁{ ▁if ▁ (52 ▁< = ▁patientAge ) ▁reason ▁+= ▁ "90396 ▁ Varicella ▁(12 ▁months ) ▁" ; ▁} ▁else ▁if ▁(1 ▁== ▁count ) ▁{ ▁if ▁( 20 8 ▁< = ▁patientAge ▁&& ▁12 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90396 ▁ Varicella ▁(4 ▁years ) ▁" ; ▁} ▁return ▁reason ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁patient ▁needs ▁the ▁ Measles , ▁M umps , ▁and ▁Rube kk a ▁immunization ▁* ▁* ▁@ param ▁count ▁which ▁immunization ▁they ▁are ▁on ▁* ▁@ param ▁patientAge ▁how ▁old ▁the ▁patient ▁is ▁* ▁@ param ▁time ▁what ▁the ▁current ▁date ▁is ▁* ▁@ return ▁when ▁the ▁immunization ▁should ▁be ▁given ▁*/ ▁public ▁static ▁String ▁test Measles ( int ▁count , ▁long ▁patientAge , ▁long ▁time ) ▁{ ▁String ▁reason ▁= ▁""; ▁long ▁weeks ▁= ▁( Calendar . get Instance (). getTime InM illi s () ▁- ▁time ) ▁/ ▁(1000 ▁* ▁60 ▁* ▁60 ▁* ▁24 ▁* ▁ 7 ); ▁if ▁(0 ▁== ▁count ) ▁{ ▁if ▁ (52 ▁< = ▁patientAge ) ▁reason ▁+= ▁" 90 7 07 ▁ Measles , ▁M umps , ▁Rube kk a ▁(12 ▁months ) ▁" ; ▁} ▁else ▁if ▁(1 ▁== ▁count ) ▁{ ▁if ▁( 20 8 ▁< = ▁patientAge ▁&& ▁12 ▁< = ▁weeks ) ▁reason ▁+= ▁" 90 7 07 ▁ Measles , ▁M umps , ▁Rube kk a ▁(4 ▁years ) ▁" ; ▁} ▁return ▁reason ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁patient ▁needs ▁the ▁Polio ▁immunization ▁* ▁* ▁@ param ▁count ▁which ▁immunization ▁they ▁are ▁on ▁* ▁@ param ▁patientAge ▁how ▁old ▁the ▁patient ▁is ▁* ▁@ param ▁time ▁what ▁the ▁current ▁date ▁is ▁* ▁@ return ▁when ▁the ▁immunization ▁should ▁be ▁given ▁*/ ▁public ▁static ▁String ▁test P ol io ( int ▁count , ▁long ▁patientAge , ▁long ▁time ) ▁{ ▁String ▁reason ▁= ▁""; ▁long ▁weeks ▁= ▁( Calendar . get Instance (). getTime InM illi s () ▁- ▁time ) ▁/ ▁(1000 ▁* ▁60 ▁* ▁60 ▁* ▁24 ▁* ▁ 7 ); ▁if ▁(0 ▁== ▁count ) ▁{ ▁if ▁(6 ▁< = ▁patientAge ) ▁reason ▁+= ▁ "90712 ▁Polio v irus ▁(6 ▁weeks ) ▁" ; ▁} ▁else ▁if ▁(1 ▁== ▁count ) ▁{ ▁if ▁( 16 ▁< = ▁patientAge ▁&& ▁4 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90712 ▁Polio v irus ▁(4 ▁months ) ▁" ; ▁} ▁else ▁if ▁( 2 ▁== ▁count ) ▁{ ▁if ▁( 26 ▁< = ▁patientAge ) ▁reason ▁+= ▁ "90712 ▁Polio v irus ▁(6 ▁months ) ▁" ; ▁} ▁return ▁reason ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁patient ▁needs ▁the ▁ Pneumo co c cal ▁immunization ▁* ▁* ▁@ param ▁count ▁which ▁immunization ▁they ▁are ▁on ▁* ▁@ param ▁patientAge ▁how ▁old ▁the ▁patient ▁is ▁* ▁@ param ▁time ▁what ▁the ▁current ▁date ▁is ▁* ▁@ return ▁when ▁the ▁immunization ▁should ▁be ▁given ▁*/ ▁public ▁static ▁String ▁test Pneumo ( int ▁count , ▁long ▁patientAge , ▁long ▁time , ▁long ▁ firstDoseTime ) ▁{ ▁String ▁reason ▁= ▁""; ▁long ▁weeks ▁= ▁( Calendar . get Instance (). getTime InM illi s () ▁- ▁time ) ▁/ ▁(1000 ▁* ▁60 ▁* ▁60 ▁* ▁24 ▁* ▁ 7 ); ▁long ▁ageFirst ▁= ▁patientAge ▁- ▁( firstDoseTime ▁/ ▁(1000 ▁* ▁60 ▁* ▁60 ▁* ▁24 ▁* ▁7) ); ▁if ▁(0 ▁== ▁count ) ▁{ ▁if ▁(6 ▁< = ▁patientAge ) ▁reason ▁+= ▁ "90669 ▁ Pneumo co c cal ▁(6 ▁weeks ) ▁" ; ▁} ▁else ▁if ▁(1 ▁== ▁count ) ▁{ ▁if ▁( 16 ▁< = ▁patientAge ▁&& ▁52 ▁> ▁ageFirst ▁&& ▁4 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90669 ▁ Pneumo co c cal ▁(4 ▁months ) ▁" ; ▁else ▁if ▁( 16 ▁< = ▁patientAge ▁&& ▁52 ▁< = ▁ageFirst ▁&& ▁60 ▁>= ▁ageFirst ▁&& ▁8 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90669 ▁ Pneumo co c cal ▁(4 ▁months ) ▁" ; ▁} ▁else ▁if ▁( 2 ▁== ▁count ) ▁{ ▁if ▁( 26 ▁< = ▁patientAge ▁&& ▁4 ▁< = ▁weeks ▁&& ▁52 ▁>= ▁ageFirst ) ▁reason ▁+= ▁ "90669 ▁ Pneumo co c cal ▁(6 ▁months ) ▁" ; ▁} ▁else ▁if ▁( 3 ▁== ▁count ) ▁{ ▁if ▁ (52 ▁< = ▁patientAge ▁&& ▁8 ▁< = ▁weeks ▁&& ▁52 ▁>= ▁ageFirst ) ▁reason ▁+= ▁ "90669 ▁ Pneumo co c cal ▁(12 ▁months ) ▁" ; ▁} ▁return ▁reason ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁patient ▁needs ▁the ▁ Haemo phi lus ▁Inf u len z a e ▁immunization ▁* ▁* ▁@ param ▁count ▁which ▁immunization ▁they ▁are ▁on ▁* ▁@ param ▁patientAge ▁how ▁old ▁the ▁patient ▁is ▁* ▁@ param ▁time ▁what ▁the ▁current ▁date ▁is ▁* ▁@ return ▁when ▁the ▁immunization ▁should ▁be ▁given ▁*/ ▁public ▁static ▁String ▁test Haemo Flu ( int ▁count , ▁long ▁patientAge , ▁long ▁time , ▁long ▁ firstDoseTime ) ▁{ ▁String ▁reason ▁= ▁""; ▁long ▁weeks ▁= ▁( Calendar . get Instance (). getTime InM illi s () ▁- ▁time ) ▁/ ▁(1000 ▁* ▁60 ▁* ▁60 ▁* ▁24 ▁* ▁ 7 ); ▁long ▁ageFirst ▁= ▁patientAge ▁- ▁( firstDoseTime ▁/ ▁(1000 ▁* ▁60 ▁* ▁60 ▁* ▁24 ▁* ▁7) ); ▁if ▁(0 ▁== ▁count ) ▁{ ▁if ▁(6 ▁< = ▁patientAge ) ▁reason ▁+= ▁ "90645 ▁ Haemo phi lus ▁influenza e ▁(6 ▁weeks ) ▁" ; ▁} ▁else ▁if ▁(1 ▁== ▁count ) ▁{ ▁if ▁( 16 ▁< = ▁patientAge ▁&& ▁52 ▁> ▁ageFirst ▁&& ▁4 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90645 ▁ Haemo phi lus ▁influenza e ▁(4 ▁months ) ▁" ; ▁else ▁if ▁( 16 ▁< = ▁patientAge ▁&& ▁52 ▁< = ▁ageFirst ▁&& ▁60 ▁>= ▁ageFirst ▁&& ▁8 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90645 ▁ Haemo phi lus ▁influenza e ▁(4 ▁months ) ▁" ; ▁} ▁else ▁if ▁( 2 ▁== ▁count ) ▁{ ▁if ▁( 26 ▁< = ▁patientAge ▁&& ▁4 ▁< = ▁weeks ▁&& ▁52 ▁> ▁ageFirst ) ▁reason ▁+= ▁ "90645 ▁ Haemo phi lus ▁influenza e ▁(6 ▁months ) ▁" ; ▁} ▁return ▁reason ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁patient ▁needs ▁the ▁Dip h th eria , ▁Tet anu s , ▁Per tus sis ▁immunization ▁* ▁* ▁@ param ▁count ▁which ▁immunization ▁they ▁are ▁on ▁* ▁@ param ▁patientAge ▁how ▁old ▁the ▁patient ▁is ▁* ▁@ param ▁time ▁what ▁the ▁current ▁date ▁is ▁* ▁@ return ▁when ▁the ▁immunization ▁should ▁be ▁given ▁*/ ▁public ▁static ▁String ▁test Dip T et ( int ▁count , ▁long ▁patientAge , ▁long ▁time ) ▁{ ▁String ▁reason ▁= ▁""; ▁long ▁weeks ▁= ▁( Calendar . get Instance (). getTime InM illi s () ▁- ▁time ) ▁/ ▁(1000 ▁* ▁60 ▁* ▁60 ▁* ▁24 ▁* ▁ 7 ); ▁if ▁(0 ▁== ▁count ) ▁{ ▁if ▁(6 ▁< = ▁patientAge ) ▁reason ▁+= ▁ "90696 ▁Dip h th eria , ▁Tet anu s , ▁Per tus sis ▁(6 ▁weeks ) ▁" ; ▁} ▁else ▁if ▁(1 ▁== ▁count ) ▁{ ▁if ▁( 16 ▁< = ▁patientAge ▁&& ▁4 ▁< = ▁weeks ▁ ) ▁reason ▁+= ▁ "90696 ▁Dip h th eria , ▁Tet anu s , ▁Per tus sis ▁(4 ▁months ) ▁" ; ▁} ▁else ▁if ▁( 2 ▁== ▁count ) ▁{ ▁if ▁( 26 ▁< = ▁patientAge ▁&& ▁4 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90696 ▁Dip h th eria , ▁Tet anu s , ▁Per tus sis ▁(6 ▁months ) ▁" ; ▁} ▁else ▁if ▁( 3 ▁== ▁count ) ▁{ ▁if ▁( 15 ▁< = ▁patientAge ▁&& ▁ 26 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90696 ▁Dip h th eria , ▁Tet anu s , ▁Per tus sis ▁( 15 ▁weeks ) ▁" ; ▁} ▁else ▁if ▁(4 ▁== ▁count ) ▁{ ▁if ▁( 20 8 ▁< = ▁patientAge ▁&& ▁ 26 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90696 ▁Dip h th eria , ▁Tet anu s , ▁Per tus sis ▁(4 ▁years ) ▁" ; ▁} ▁else ▁if ▁( 5 ▁== ▁count ) ▁{ ▁if ▁( 5 72 ▁< = ▁patientAge ▁&& ▁ 26 0 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90696 ▁Dip h th eria , ▁Tet anu s , ▁Per tus sis ▁( 11 ▁years ) ▁" ; ▁} ▁return ▁reason ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁patient ▁needs ▁the ▁ Rota v irus ▁immunization ▁* ▁* ▁@ param ▁count ▁which ▁immunization ▁they ▁are ▁on ▁* ▁@ param ▁patientAge ▁how ▁old ▁the ▁patient ▁is ▁* ▁@ param ▁time ▁what ▁the ▁current ▁date ▁is ▁* ▁@ return ▁when ▁the ▁immunization ▁should ▁be ▁given ▁*/ ▁public ▁static ▁String ▁test Rota V irus ( int ▁count , ▁long ▁patientAge , ▁long ▁time ) ▁{ ▁String ▁reason ▁= ▁""; ▁long ▁weeks ▁= ▁( Calendar . get Instance (). getTime InM illi s () ▁- ▁time ) ▁/ ▁(1000 ▁* ▁60 ▁* ▁60 ▁* ▁24 ▁* ▁ 7 ); ▁if ▁(0 ▁== ▁count ) ▁{ ▁if ▁(6 ▁< = ▁patientAge ) ▁reason ▁+= ▁ "90681 ▁ Rota v irus ▁(6 ▁weeks ) ▁" ; ▁} ▁else ▁if ▁(1 ▁== ▁count ) ▁{ ▁if ▁( 16 ▁< = ▁patientAge ▁&& ▁4 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90681 ▁ Rota v irus ▁(4 ▁months ) ▁" ; ▁} ▁else ▁if ▁( 2 ▁== ▁count ) ▁{ ▁if ▁( 26 ▁< = ▁patientAge ▁&& ▁4 ▁< = ▁weeks ▁ ) ▁reason ▁+= ▁ "90681 ▁ Rota v irus ▁(6 ▁months ) ▁" ; ▁} ▁return ▁reason ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁patient ▁needs ▁the ▁Hepatit is ▁B ▁immunization ▁* ▁* ▁@ param ▁count ▁which ▁immunization ▁they ▁are ▁on ▁* ▁@ param ▁patientAge ▁how ▁old ▁the ▁patient ▁is ▁* ▁@ param ▁time ▁what ▁the ▁current ▁date ▁is ▁* ▁@ return ▁when ▁the ▁immunization ▁should ▁be ▁given ▁*/ ▁public ▁static ▁String ▁testHep B ( int ▁count , ▁long ▁patientAge , ▁long ▁time ) ▁{ ▁String ▁reason ▁= ▁""; ▁long ▁weeks ▁= ▁( Calendar . get Instance (). getTime InM illi s () ▁- ▁time ) ▁/ ▁(1000 ▁* ▁60 ▁* ▁60 ▁* ▁24 ▁* ▁ 7 ); ▁if ▁(0 ▁== ▁count ) ▁{ ▁if ▁(0 ▁< ▁patientAge ) ▁reason ▁+= ▁ "90371 ▁Hepatit is ▁B ▁( birth ) ▁" ; ▁} ▁else ▁if ▁(1 ▁== ▁count ) ▁{ ▁if ▁(4 ▁< = ▁patientAge ▁&& ▁4 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90371 ▁Hepatit is ▁B ▁(1 ▁month ) ▁" ; ▁} ▁else ▁if ▁( 2 ▁== ▁count ) ▁{ ▁if ▁( 26 ▁< = ▁patientAge ▁&& ▁8 ▁< = ▁weeks ) ▁reason ▁+= ▁ "90371 ▁Hepatit is ▁B ▁(6 ▁months ) ▁" ; ▁} ▁return ▁reason ; ▁} ▁/** ▁* ▁Remove s ▁duplicate s ▁from ▁a ▁list ▁of ▁VisitReminder ReturnForm s ▁* ▁* ▁@ param ▁patients ▁list ▁of ▁visit ▁reminders to ▁be ▁ clean ed ▁up ▁* ▁@ return ▁ clean ed ▁up ▁list ▁of ▁visit ▁reminders ▁*/ ▁private ▁List < VisitReminder ReturnForm > ▁str ip D up es ( List < VisitReminder ReturnForm > ▁patients ) ▁{ ▁if ▁( null ▁== ▁patients ) ▁return ▁null ; ▁if ▁(0 ▁== ▁patients . size ()) ▁return ▁patients ; ▁List < VisitReminder ReturnForm > ▁retPatients ▁= ▁new ▁ArrayList < VisitReminder ReturnForm > (); ▁VisitReminder ReturnForm ▁temp ▁= ▁patients . get (0); ▁retPatients . add ( temp ); ▁for ▁( VisitReminder ReturnForm ▁vr ▁: ▁patients ) ▁{ ▁if ▁( vr . getPatientID () ▁ != ▁temp . getPatientID ()) ▁retPatients . add ( vr ); ▁temp ▁= ▁vr ; ▁} ▁return ▁retPatients ; ▁} ▁}