▁p ackage ▁edu . nc su . cs c . itrust . risk ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . enums . Ethnicity ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . No HealthRecords Exception ; ▁import ▁edu . nc su . cs c . itrust . risk . factors . Child h o o d InfectionFactor ; ▁import ▁edu . nc su . cs c . itrust . risk . factors . EthnicityFactor ; ▁import ▁edu . nc su . cs c . itrust . risk . factors . FamilyHistory Factor ; ▁import ▁edu . nc su . cs c . itrust . risk . factors . P atientRiskFactor ; ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁the ▁given ▁patient ▁is ▁at ▁risk ▁for ▁Type ▁1 ▁Diabetes . ▁* ▁For ▁details ▁on ▁what ▁ each ▁method ▁does , ▁see ▁ {@ link ▁RiskChecker } ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁Type 1 DiabetesRisks ▁extends ▁RiskChecker ▁{ ▁public ▁Type 1 DiabetesRisks ( DAOFactory ▁factory , ▁long ▁patientID ) ▁throw s ▁DBException , ▁No HealthRecords Exception ▁{ ▁super ( factory , ▁patientID ); ▁} ▁@ O verride ▁public ▁boolean ▁qualifies For Disease () ▁{ ▁return ▁patient . getAge () ▁< ▁12; ▁} ▁@ O verride ▁ protected ▁List < P atientRiskFactor > ▁getDisease RiskFactors () ▁{ ▁List < P atientRiskFactor > ▁factors ▁= ▁new ▁ArrayList < P atientRiskFactor > (); ▁factors . add ( new ▁EthnicityFactor ( patient , ▁Ethnicity . Caucasian )); ▁factors . add ( new ▁Family HistoryFactor ( factory , ▁patient . get MID (), ▁250.0 , ▁251.0 )); ▁factors . add ( new ▁Childhood InfectionFactor ( factory , ▁patient . get MID (), ▁ 79 . 30 )); ▁return ▁factors ; ▁} ▁@ O verride ▁public ▁String ▁getName () ▁{ ▁return ▁" Type ▁1 ▁Diabetes "; ▁} ▁}