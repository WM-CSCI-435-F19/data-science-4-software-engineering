▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Date ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . R eportRequestBean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . ReportRequest BeanLoader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁/** ▁* ▁Used ▁for ▁handl ing ▁data ▁relat ed ▁to ▁report ▁requests . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁*/ ▁public ▁class ▁ ReportRequestDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁ ReportRequest BeanLoader ▁loader ; ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁ ReportRequestDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁loader ▁= ▁new ▁ ReportRequest BeanLoader (); ▁} ▁/** ▁* ▁Returns ▁a ▁full ▁bean ▁describ ing ▁a ▁given ▁report ▁request . ▁* ▁* ▁@ param ▁id ▁The ▁unique ▁ID ▁of ▁the ▁bean ▁in ▁the ▁database . ▁* ▁@ return ▁The ▁bean ▁describ ing ▁this ▁report ▁request . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁R eportRequestBean ▁ getReportRequest ( long ▁id ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( id ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" ID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁ReportRequests ▁ WH ERE ▁ID ▁= ▁? "); ▁ps . s etLong ( 1, ▁id ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁rs . next (); ▁return ▁loader . loadSingle ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁all ▁report ▁requests ▁associate d ▁with ▁a ▁given ▁request er . ▁* ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁personnel ▁in ▁question . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁report ▁requests . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < R eportRequestBean > ▁ getAllRe portRequestsFor Requester ( long ▁mid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( mid ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" RequesterMID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁ReportRequests ▁ WH ERE ▁ RequesterMID ▁= ▁? "); ▁ps . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁all ▁of ▁the ▁report ▁requests ▁associate d ▁with ▁a ▁specific ▁patient . ▁* ▁* ▁@ param ▁pid ▁The ▁MID ▁of ▁the ▁patient ▁in ▁question . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁report ▁requests . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < R eportRequestBean > ▁getAll ReportRequest sForPatient ( long ▁pid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( pid ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" PatientMID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁ReportRequests ▁ WH ERE ▁PatientMID ▁= ▁? "); ▁ps . s etLong ( 1, ▁pid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁// ▁/** ▁// ▁* ▁Returns ▁every ▁report ▁request ▁in ▁the ▁database . ▁// ▁* ▁@ return ▁A ▁java . util . List ▁of ▁report ▁requests . ▁// ▁* ▁@ throw s ▁DBException ▁// ▁*/ ▁// ▁public ▁List < R eportRequestBean > ▁getAll ReportRequests () ▁throw s ▁DBException ▁{ ▁// ▁ Connection ▁conn ▁= ▁null ; ▁// ▁P reparedStatement ▁ps ▁= ▁null ; ▁// ▁// ▁try ▁{ ▁// ▁conn ▁= ▁factory . get Connection (); ▁// ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁ReportRequests "); ▁// ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁// ▁return ▁loader . load List ( rs ); ▁// ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁// ▁e . print Stack T race (); ▁// ▁throw ▁new ▁DBException ( e ); ▁// ▁} ▁finally ▁{ ▁// ▁DBUtil . close Connection ( conn , ▁ps ); ▁// ▁} ▁// ▁} ▁/** ▁* ▁Add s ▁a ▁request ▁for ▁a ▁report . ▁* ▁* ▁@ param ▁requesterMID ▁The ▁MID ▁of ▁the ▁request er . ▁* ▁@ param ▁patientMID ▁The ▁MID ▁of ▁the ▁patient ▁in ▁question . ▁* ▁@ param ▁date ▁The ▁date ▁the ▁request ▁was ▁made . ▁* ▁@ return ▁A ▁long ▁of ▁the ▁unique ▁ID ▁of ▁the ▁report ▁request . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁long ▁add ReportRequest ( long ▁requesterMID , ▁long ▁patientMID , ▁Date ▁date ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( request er MID ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" RequesterMID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁ReportRequests ▁( ID , ▁ RequesterMID , ▁PatientMID , ▁ Requested Date , ▁Status ) ▁VALUES ▁( null , ? , ? , ? , ' Requested ' )"); ▁ps . s etLong ( 1, ▁requesterMID ); ▁ps . s etLong (2, ▁patientMID ); ▁ps . set Timestamp ( 3, ▁new ▁java . sql . Timestamp ( date . getTime ()) ); ▁ps . execute Update (); ▁return ▁DBUtil . getLast Insert ( conn ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁// ▁/** ▁// ▁* ▁Set s ▁the ▁status ▁of ▁a ▁request ▁to ▁' Approved ' ▁// ▁* ▁// ▁* ▁@ param ▁ID ▁The ▁unique ▁ID ▁of ▁the ▁report . ▁// ▁* ▁@ param ▁approverMID ▁The ▁MID ▁of ▁the ▁person ▁app r ov ing ▁the ▁request . ▁// ▁* ▁@ param ▁date ▁The ▁date ▁the ▁approval ▁was ▁made . ▁// ▁* ▁@ throw s ▁DBException ▁// ▁*/ ▁// ▁public ▁void ▁approve ReportRequest ( long ▁ID , ▁long ▁approverMID , ▁Date ▁date ) ▁throw s ▁DBException ▁{ ▁// ▁ Connection ▁conn ▁= ▁null ; ▁// ▁P reparedStatement ▁ps ▁= ▁null ; ▁// ▁try ▁{ ▁// ▁if ▁( ID ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" ID ▁cannot ▁be ▁null "); ▁// ▁conn ▁= ▁factory . get Connection (); ▁// ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁ReportRequests ▁set ▁ ApproverMID ▁= ▁? , ▁ Approved Date ▁= ▁? , ▁Status ▁= ▁' Approved ' ▁where ▁ID ▁= ▁? "); ▁// ▁ps . s etLong ( 1, ▁approverMID ); ▁// ▁ps . set Timestamp (2, ▁new ▁java . sql . Timestamp ( date . getTime ()) ); ▁// ▁ps . s etLong ( 3, ▁ID ); ▁// ▁ps . execute Update (); ▁// ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁// ▁e . print Stack T race (); ▁// ▁throw ▁new ▁DBException ( e ); ▁// ▁} ▁finally ▁{ ▁// ▁DBUtil . close Connection ( conn , ▁ps ); ▁// ▁} ▁// ▁} ▁// ▁// ▁/** ▁// ▁* ▁Set s ▁the ▁status ▁of ▁a ▁report ▁request ▁to ▁' Rejected ' ▁// ▁* ▁// ▁* ▁@ param ▁ID ▁The ▁unique ▁ID ▁of ▁the ▁request ▁in ▁question . ▁// ▁* ▁@ param ▁approverMID ▁The ▁MID ▁of ▁the ▁reject er ▁in ▁question . ▁// ▁* ▁@ param ▁date ▁The ▁date ▁the ▁reject ion ▁was ▁made . ▁// ▁* ▁@ param ▁comment ▁A ▁comment ▁describ ing ▁wh y ▁the ▁request ▁was ▁rejected . ▁// ▁* ▁@ throw s ▁DBException ▁// ▁*/ ▁// ▁public ▁void ▁reject ReportRequest ( long ▁ID , ▁long ▁approverMID , ▁Date ▁date , ▁String ▁comment ) ▁throw s ▁DBException ▁{ ▁// ▁ Connection ▁conn ▁= ▁null ; ▁// ▁P reparedStatement ▁ps ▁= ▁null ; ▁// ▁try ▁{ ▁// ▁if ▁( ID ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" ID ▁cannot ▁be ▁null "); ▁// ▁conn ▁= ▁factory . get Connection (); ▁// ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁ReportRequests ▁set ▁ ApproverMID ▁= ▁? , ▁ Approved Date ▁= ▁? , ▁Status ▁= ▁' Rejected ' , ▁comment ▁= ▁? ▁where ▁ID ▁= ▁? "); ▁// ▁ps . s etLong ( 1, ▁approverMID ); ▁// ▁ps . set Timestamp (2, ▁new ▁java . sql . Timestamp ( date . getTime ()) ); ▁// ▁ps . set String ( 3, ▁comment ); ▁// ▁ps . s etLong ( 4, ▁ID ); ▁// ▁ps . execute Update (); ▁// ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁// ▁e . print Stack T race (); ▁// ▁throw ▁new ▁DBException ( e ); ▁// ▁} ▁finally ▁{ ▁// ▁DBUtil . close Connection ( conn , ▁ps ); ▁// ▁} ▁// ▁} ▁/** ▁* ▁Set s ▁the ▁status ▁of ▁a ▁report ▁request ▁to ▁' Viewed ' ▁* ▁* ▁@ param ▁ID ▁The ▁unique ▁ID ▁of ▁the ▁request ▁in ▁question . ▁* ▁@ param ▁date ▁The ▁date ▁the ▁request ▁was ▁viewed . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁ setViewed ( long ▁ID , ▁Date ▁date ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( ID ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" ID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁ReportRequests ▁set ▁ ViewedDate ▁= ▁? , ▁Status ▁= ▁' Viewed ' ▁where ▁ID ▁= ▁? "); ▁ps . set Timestamp ( 1, ▁new ▁java . sql . Timestamp ( date . getTime ()) ); ▁ps . s etLong (2, ▁ID ); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}