▁p ackage ▁edu . nc su . cs c . itrust . validate ; ▁import ▁edu . nc su . cs c . itrust . action . E ditPatientAction ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . exception . ErrorList ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁org . ap ache . common s . validator . Credit Card Validator ; ▁import ▁java . util . Date ; ▁/** ▁* ▁Validate s ▁a ▁patient ▁bean , ▁from ▁ {@ link ▁E ditPatientAction } ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁ PatientValidator ▁extends ▁ BeanValidator < PatientBean > ▁{ ▁/** ▁* ▁The ▁default ▁constructor . ▁*/ ▁public ▁ PatientValidator () ▁{ ▁} ▁/** ▁* ▁Perform s ▁the ▁act ▁of ▁validat ing ▁the ▁bean ▁in ▁question , ▁which ▁varie s ▁depend ing ▁on ▁the ▁* ▁type ▁of ▁validator . ▁If ▁the ▁validation ▁does ▁not ▁succeed , ▁a ▁ {@ link ▁ FormValidat ionException } ▁is ▁thrown . ▁* ▁* ▁@ param ▁p ▁A ▁bean ▁of ▁the ▁type ▁to ▁be ▁validated . ▁*/ ▁@ O verride ▁public ▁void ▁validate ( PatientBean ▁p ) ▁throw s ▁ FormValidat ionException ▁{ ▁ErrorList ▁errorList ▁= ▁new ▁ErrorList (); ▁errorList . add If Not Null ( check Format (" First ▁name ", ▁p . get FirstName (), ▁ ValidationFormat . NAME , ▁false )); ▁errorList . add If Not Null ( check Format (" Last ▁name ", ▁p . get LastName (), ▁ ValidationFormat . NAME , ▁false )); ▁errorList . add If Not Null ( check Format (" Date ▁of ▁ Birth ", ▁p . getDateOfBirth Str (), ▁ ValidationFormat . DATE , ▁false )); ▁errorList . add If Not Null ( check Format (" Date ▁of ▁Death ", ▁p . getDateOfDeath Str (), ▁ ValidationFormat . DATE , ▁true )); ▁try ▁{ ▁if ▁( p . getDateOfDeath () ▁== ▁null ▁&& ▁"" . equals ( p . getDateOfDeath Str ())){ ▁if ( ▁p . getDateOfBirth (). after ( new ▁Date ())){ ▁errorList . add If Not Null (" Birth ▁date ▁cannot ▁be ▁in ▁the ▁future ! "); ▁} ▁} ▁if ▁( p . getDateOfDeath (). before ( p . getDateOfBirth ())) ▁errorList . add If Not Null (" Dea th ▁date ▁cannot ▁be ▁before ▁ birth ▁date ! "); ▁if ( ▁p . getDateOfDeath (). after ( new ▁Date ())){ ▁errorList . add If Not Null (" Dea th ▁date ▁cannot ▁be ▁in ▁the ▁future ! "); ▁} ▁if ( ▁p . getDateOfBirth (). after ( new ▁Date ())){ ▁errorList . add If Not Null (" Birth ▁date ▁cannot ▁be ▁in ▁the ▁future ! "); ▁} ▁} ▁catch ▁( Null Pointer Exception ▁e ) ▁{ ▁// ▁ignore ▁this ▁} ▁boolean ▁death Cause Null ▁= ▁( null ▁== ▁p . getDateOfDeath Str () ▁|| ▁p . getDateOfDeath Str (). equals (" ")); ▁errorList . add If Not Null ( check Format (" Cause ▁of ▁Death ", ▁p . get CauseOfDeath (), ▁ ValidationFormat . ICD 9 CM , ▁death Cause Null )); ▁errorList . add If Not Null ( check Format (" Email ", ▁p . getEmail (), ▁ ValidationFormat . EMAIL , ▁false )); ▁errorList . add If Not Null ( check Format (" Street ▁Address ▁ 1", ▁p . getStreetAddress 1() , ▁ ValidationFormat . ADDRESS , ▁false )); ▁errorList . add If Not Null ( check Format (" Street ▁Address ▁2 ", ▁p . getStreetAddress 2() , ▁ ValidationFormat . ADDRESS , ▁true )); ▁errorList . add If Not Null ( check Format (" City ", ▁p . get City (), ▁ ValidationFormat . CITY , ▁false )); ▁errorList . add If Not Null ( check Format (" State ", ▁p . get State (), ▁ ValidationFormat . STATE , ▁false )); ▁errorList . add If Not Null ( check Format (" Zip ▁Code ", ▁p . getZip (), ▁ ValidationFormat . ZIPCODE , ▁false )); ▁errorList ▁ . add If Not Null ( check Format (" Phone ▁Number ", ▁p . getPhone (), ▁ ValidationFormat . PH ONE _ NUMBER , ▁false )); ▁errorList . add If Not Null ( check Format (" Emergency ▁Contact ▁Name ", ▁p . getEmergency Name (), ▁ ValidationFormat . NAME , ▁false )); ▁errorList . add If Not Null ( check Format (" Emergency ▁Contact ▁ Phone ", ▁p . get EmergencyPhone (), ▁ ValidationFormat . PH ONE _ NUMBER , ▁false )); ▁errorList . add If Not Null ( check Format (" I nsurance ▁C ompany ▁Name ", ▁p . getIc Name (), ▁ ValidationFormat . NAME , ▁false )); ▁errorList . add If Not Null ( check Format (" I nsurance ▁C ompany ▁Address ▁ 1", ▁p . getIcAddress 1() , ▁ ValidationFormat . ADDRESS , ▁false )); ▁errorList . add If Not Null ( check Format (" I nsurance ▁C ompany ▁Address ▁2 ", ▁p . getIcAddress 2() , ▁ ValidationFormat . ADDRESS , ▁true )); ▁errorList . add If Not Null ( check Format (" I nsurance ▁C ompany ▁ City ", ▁p . getIc City (), ▁ ValidationFormat . CITY , ▁false )); ▁errorList . add If Not Null ( check Format (" I nsurance ▁C ompany ▁State ", ▁p . getIc State (), ▁ ValidationFormat . STATE , ▁false )); ▁errorList . add If Not Null ( check Format (" I nsurance ▁C ompany ▁Zip ", ▁p . getIcZip (), ▁ ValidationFormat . ZIPCODE , ▁false )); ▁errorList . add If Not Null ( check Format (" I nsurance ▁C ompany ▁ Phone ", ▁p . getIcPhone (), ▁ ValidationFormat . PH ONE _ NUMBER , ▁false )); ▁errorList . add If Not Null ( check Format (" I nsurance ▁C ompany ▁ID ", ▁p . getIc ID (), ▁ ValidationFormat . IN SUR ANCE _ ID , ▁false )); ▁errorList . add If Not Null ( check Format (" Mother ▁MID ", ▁p . get MotherMID (), ▁ ValidationFormat . MID , ▁true )); ▁errorList . add If Not Null ( check Format (" Father ▁MID ", ▁p . get FatherMID (), ▁ ValidationFormat . MID , ▁true )); ▁errorList ▁ . add If Not Null ( check Format (" Topical ▁ Notes ", ▁p . get TopicalNotes (), ▁ ValidationFormat . NOTES , ▁true )); ▁/* ▁This ▁block ▁was ▁added ▁for ▁The me ▁5 ▁by ▁T y l er ▁A reh art ▁*/ ▁if ▁(! ( p . get CreditCardNumber (). equals ("") ▁&& ▁p . get CreditCardType (). equals ("")) ) ▁{ ▁String ▁ s ▁= ▁null ; ▁CreditCard Validator ▁ c ; ▁int ▁type ▁= ▁-1; ▁if ▁( p . get CreditCardType (). equals (" VISA ")) ▁type ▁= ▁CreditCard Validator . VISA ; ▁if ▁( p . get CreditCardType (). equals (" MASTERCARD ")) ▁type ▁= ▁CreditCard Validator . MASTERCARD ; ▁if ▁( p . get CreditCardType (). equals (" DISCOVER ")) ▁type ▁= ▁CreditCard Validator . DISCOVER ; ▁if ▁( p . get CreditCardType (). equals (" AMEX ")) ▁type ▁= ▁CreditCard Validator . AMEX ; ▁if ▁( type ▁ != ▁-1) ▁{ ▁ c ▁= ▁new ▁CreditCard Validator ( type ); ▁if ▁(! c . isValid ( p . get CreditCardNumber ())) ▁{ ▁ s ▁= ▁" Credit ▁ Card ▁Number "; ▁} ▁} ▁else ▁{ ▁ s ▁= ▁" Credit ▁ Card ▁Type "; ▁} ▁errorList . add If Not Null ( s ); ▁} ▁if ▁( errorList . has Errors ()) ▁throw ▁new ▁ FormValidat ionException ( errorList ); ▁} ▁}