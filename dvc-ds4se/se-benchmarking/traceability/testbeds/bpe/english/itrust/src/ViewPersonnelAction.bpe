▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . beans . Email ; ▁import ▁edu . nc su . cs c . itrust . beans . PersonnelBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . FakeEmailDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . Messages ; ▁/** ▁* ▁Handle s ▁retriev ing ▁personnel ▁beans ▁for ▁a ▁given ▁personnel ▁Used ▁by ▁view Personnel . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁View PersonnelAction ▁{ ▁private ▁PersonnelDAO ▁personnelDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁FakeEmailDAO ▁emailDAO ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁Set ▁up ▁defaults ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁person ▁retriev ing ▁personnel ▁beans . ▁*/ ▁public ▁View PersonnelAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁this . email DAO ▁= ▁factory . get FakeEmailDAO (); ▁this . personnelDAO ▁= ▁factory . get PersonnelDAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁} ▁/** ▁* ▁Retrieve s ▁a ▁PersonnelBean ▁for ▁the ▁mid ▁passed ▁as ▁a ▁ param ▁* ▁* ▁@ param ▁input ▁* ▁the ▁mid ▁for ▁which ▁the ▁PersonnelBean ▁will ▁be ▁returned ▁* ▁@ return ▁PersonnelBean ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁PersonnelBean ▁getPersonnel ( String ▁input ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁mid ▁= ▁Long . value Of ( input ); ▁PersonnelBean ▁personnel ▁= ▁personnelDAO . getPersonnel ( mid ); ▁if ▁( personnel ▁ != ▁null ) ▁{ ▁transDAO . log Transaction ( TransactionType . E NTER _ EDIT _ DEMOGRAPHICS , ▁loggedInMID , ▁mid , ▁Messages . get String (" View PersonnelAction . 0 ") ▁+ ▁mid ); ▁// $ NON - NL S -1 $ ▁return ▁personnel ; ▁} ▁else ▁throw ▁new ▁iTrustException ( Messages . get String (" View PersonnelAction . 1")); ▁// $ NON - NL S -1 $ ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁iTrustException ( Messages . get String (" View PersonnelAction . 2")); ▁// $ NON - NL S -1 $ ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁PatientBean ▁for ▁the ▁currently ▁logged ▁in ▁personnel ▁* ▁* ▁@ return ▁The ▁PatientBean ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < Email > ▁get EmailHistory () ▁throw s ▁iTrustException ▁{ ▁return ▁emailDAO . getEmail sBy Person ( personnelDAO . getPersonnel ( loggedInMID ) . getEmail ()); ▁} ▁}