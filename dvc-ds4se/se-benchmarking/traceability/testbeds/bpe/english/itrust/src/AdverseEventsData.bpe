▁p ackage ▁edu . nc su . cs c . itrust . charts ; ▁import ▁java . io . Serializable ; ▁import ▁java . text . ParseException ; ▁import ▁java . text . SimpleDateFormat ; ▁import ▁java . util . Calendar ; ▁import ▁java . util . Date ; ▁import ▁java . util . LinkedList ; ▁import ▁java . util . List ; ▁import ▁java . util . Map ; ▁import ▁org . j free . data . category . CategoryDataset ; ▁import ▁org . j free . data . category . Default CategoryDataset ; ▁import ▁de . laure s . cewolf . DatasetProduce Exception ; ▁import ▁de . laure s . cewolf . DatasetProduce r ; ▁import ▁de . laure s . cewolf . link s . Category I temLinkGenerator ; ▁import ▁de . laure s . cewolf . too ltip s . Category ToolTipGenerator ; ▁import ▁edu . nc su . cs c . itrust . beans . AdverseEventBean ; ▁/** ▁* ▁This ▁class ▁handle s ▁the ▁data ▁for ▁char ting ▁in ▁C eW ol f / J Free Chart . ▁This ▁class ▁implement s ▁DatasetProducer , ▁* ▁Category ToolTipGenerator , ▁Category I temLinkGenerator , ▁and ▁Serializable . ▁* ▁* ▁@ author ▁ Ja s on ▁* ▁*/ ▁public ▁class ▁AdverseEvents Data ▁implement s ▁DatasetProducer , ▁Category ToolTipGenerator , ▁Category I temLinkGenerator , ▁Serializable ▁{ ▁/** ▁* ▁The ▁generated ▁serial iz able ▁ID . ▁*/ ▁private ▁static ▁final ▁long ▁serial Version UID ▁= ▁6 14 56 896 2 15 062 7 16 56 L ; ▁// ▁H ar d code d ▁months ▁array ▁to ▁make ▁implementation ▁simple r ▁for ▁Adverse ▁Event ▁chart s ▁private ▁final ▁String [ ] ▁months ▁= ▁{ " Ja n "," F e b "," M ar "," A pr "," May "," June "," July "," Au g "," Sept "," O ct "," N ov "," De c " }; ▁// ▁Initialize ▁the ▁values ▁for ▁ each ▁month ▁to ▁0 ▁private ▁int [ ] ▁values ▁= ▁{ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }; ▁// ▁This ▁will ▁be ▁the ▁list ▁of ▁adverse ▁events ▁private ▁List < AdverseEventBean > ▁adverseEvent s ▁= ▁new ▁ LinkedList < AdverseEventBean > (); ▁// ▁This ▁will ▁be ▁the ▁name ▁of ▁the ▁prescription ▁or ▁immunization ▁under ▁analy sis ▁private ▁String ▁code Name ; ▁/** ▁* ▁Call ed ▁from ▁the ▁JSP ▁page ▁to ▁initialize ▁the ▁list ▁of ▁Adverse ▁Events ▁needed ▁to ▁* ▁produce ▁the ▁desired ▁chart . ▁* ▁* ▁@ param ▁adEvents ▁* ▁@ param ▁name ▁*/ ▁public ▁void ▁set AdverseEvents List ( List < AdverseEventBean > ▁adEvents , ▁String ▁name ) ▁{ ▁adverseEvent s ▁= ▁adEvents ; ▁this . code Name ▁= ▁name ; ▁} ▁/** ▁* ▁This ▁method ▁parse s ▁the ▁list ▁of ▁Adverse ▁Event ▁ Bean s ▁to ▁initialize ▁the ▁chart ▁dataset . ▁*/ ▁@ S uppress Warning s (" un checked ") ▁public ▁Object ▁produce Data set ( Map ▁params ) ▁throw s ▁ DatasetProduce Exception ▁{ ▁// ▁The ▁ Default CategoryDataset ▁is ▁used ▁for ▁bar ▁chart s . ▁// ▁This ▁dataset ▁class ▁ma y ▁change ▁based ▁on ▁the ▁type ▁of ▁chart ▁you ▁wish ▁to ▁produce . ▁ Default CategoryDataset ▁dataset ▁= ▁new ▁ Default CategoryDataset ( ){ ▁/** ▁* ▁The ▁generated ▁serial iz able ▁ID . ▁*/ ▁private ▁static ▁final ▁long ▁serial Version UID ▁= ▁- 82 384 899 1 45 90 5 5 3 74 7 L ; ▁/** ▁* ▁@ see ▁java . lang . Object # final ize () ▁*/ ▁ protected ▁void ▁final ize () ▁throw s ▁Throw able ▁{ ▁super . final ize (); ▁} ▁} ; ▁ SimpleDateFormat ▁ s df ▁= ▁new ▁ SimpleDateFormat (" yyyy - MM - dd ▁ hh : mm : s s "); ▁// ▁For ▁ each ▁Adverse ▁Event ▁in ▁the ▁list , ▁// ▁parse ▁the ▁string ▁ rep re ent ation ▁of ▁the ▁report ▁date ▁// ▁to ▁a ▁Java ▁Date ▁object . ▁The n , ▁get ▁the ▁month ▁of ▁the ▁// ▁Date ▁object ▁and ▁i ncrement ▁the ▁value ▁count ▁for ▁that ▁month . ▁for ( AdverseEventBean ▁event ▁: ▁adverseEvent s ) ▁{ ▁Calendar ▁cal ▁= ▁Calendar . get Instance (); ▁try ▁{ ▁cal . setTime ( s df . parse ( event . getDate ()) ); ▁} ▁catch ▁( ParseException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁ DatasetProduce Exception ( e . getMessage ()); ▁} ▁int ▁month Of Report ▁= ▁cal . get ( Calendar . MONTH ); ▁values [ month Of Report ] ++; ▁} ▁// ▁For ▁ each ▁month , ▁add ▁the ▁month ly ▁values ▁to ▁the ▁dataset ▁for ▁// ▁pro d u c ing ▁the ▁chart . ▁for ( int ▁i ▁= ▁0; ▁i ▁< ▁12; ▁i ++) ▁{ ▁// ▁values [ i ] ▁represents ▁the ▁number ▁of ▁adverse ▁events ▁for ▁month ▁i ▁// ▁code Name ▁represents ▁the ▁given ▁prescription / immunization ▁being ▁analy z ed ▁// ▁month [ i ] ▁is ▁the ▁static ▁array ▁of ▁month ▁names , ▁to ▁be ▁used ▁as ▁label s ▁on ▁the ▁chart ▁dataset . add Value ( values [ i ] , code Name , months [ i ] ); ▁} ▁return ▁dataset ; ▁} ▁/** ▁* ▁This ▁ producer ' s ▁data ▁is ▁in validate d ▁after ▁5 ▁seconds . ▁ By ▁this ▁method ▁the ▁* ▁ producer ▁can ▁in flu enc e ▁C ew ol f ' s ▁ c ach ing ▁behavio ur ▁the ▁way ▁it ▁wants ▁to . ▁*/ ▁@ S uppress Warning s (" un checked ") ▁public ▁boolean ▁has Expired ( Map ▁params , ▁Date ▁since ) ▁{ ▁return ▁( System . current Time M illi s () ▁- ▁since . getTime ()) ▁> ▁500 0 ; ▁} ▁/** ▁* ▁Returns ▁a ▁unique ▁ID ▁for ▁this ▁DatasetProducer ▁*/ ▁public ▁String ▁get Pro d u c er Id () ▁{ ▁return ▁" AdverseEvents Data ▁DatasetProducer "; ▁} ▁/** ▁* ▁Returns ▁a ▁link ▁ target ▁for ▁a ▁special ▁data ▁item . ▁*/ ▁public ▁String ▁generate Link ( Object ▁data , ▁int ▁ series , ▁Object ▁ category ) ▁{ ▁return ▁months [ series ] ; ▁} ▁/** ▁* ▁@ see ▁java . lang . Object # final ize () ▁*/ ▁ protected ▁void ▁final ize () ▁throw s ▁Throw able ▁{ ▁super . final ize (); ▁} ▁/** ▁* ▁@ see ▁org . j free . chart . too ltip s . Category ToolTipGenerator # generate To ol T ip ( CategoryDataset , ▁int , ▁int ) ▁*/ ▁public ▁String ▁generate To ol T ip ( CategoryDataset ▁arg 0 , ▁int ▁ series , ▁int ▁arg 2) ▁{ ▁return ▁months [ series ] ; ▁} ▁}