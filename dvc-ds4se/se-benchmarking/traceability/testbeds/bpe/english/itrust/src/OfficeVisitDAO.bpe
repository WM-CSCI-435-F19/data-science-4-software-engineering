▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . text . SimpleDateFormat ; ▁import ▁java . util . Date ; ▁import ▁java . util . List ; ▁import ▁java . util . ArrayList ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . DiagnosisBean ; ▁import ▁edu . nc su . cs c . itrust . beans . LabProcedureBean ; ▁import ▁edu . nc su . cs c . itrust . beans . OfficeVisitBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PrescriptionBean ; ▁import ▁edu . nc su . cs c . itrust . beans . Prescription ReportBean ; ▁import ▁edu . nc su . cs c . itrust . beans . ProcedureBean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . DiagnosisBean Loader ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . OfficeVisit Loader ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . PrescriptionBean Loader ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . Prescription ReportBeanLoader ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . ProcedureBean Loader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁/** ▁* ▁Used ▁for ▁do ing ▁tasks ▁relat ed ▁to ▁office ▁visits . ▁Use ▁this ▁for ▁link ing ▁diagnoses ▁to ▁office ▁visits , ▁and ▁similar ▁* ▁tasks . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁OfficeVisitDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁OfficeVisit Loader ▁of ficeVisitLoader ▁= ▁new ▁OfficeVisit Loader (); ▁private ▁DiagnosisBean Loader ▁diagnosisLoader ▁= ▁new ▁DiagnosisBean Loader ( true ); ▁private ▁Prescription BeanLoader ▁prescription Loader ▁= ▁new ▁Prescription BeanLoader (); ▁private ▁Prescription ReportBeanLoader ▁prescription ReportBeanLoader ▁= ▁new ▁Prescription ReportBeanLoader (); ▁private ▁ProcedureBean Loader ▁procedure BeanLoader ▁= ▁new ▁ProcedureBean Loader ( true ); ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁OfficeVisitDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Add s ▁an ▁visit ▁and ▁return ▁its ▁ID ▁* ▁* ▁@ param ▁ov ▁The ▁OfficeVisitBean ▁to ▁be ▁added . ▁* ▁@ return ▁A ▁long ▁indicat ing ▁the ▁unique ▁ID ▁for ▁the ▁office ▁visit . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁long ▁add ( OfficeVisitBean ▁ov ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn ▁ . prepare Statement (" INSERT ▁INT O ▁OfficeVisits ▁( VisitDate , ▁ Notes , ▁HCPID , ▁PatientID , ▁ HospitalID ) ▁VALUES ▁ (?,?,?,?,? )"); ▁setValue s ( ps , ▁ov ); ▁ps . execute Update (); ▁return ▁DBUtil . getLast Insert ( conn ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁private ▁void ▁setValue s ( P reparedStatement ▁ps , ▁OfficeVisitBean ▁ov ) ▁throw s ▁SQLException ▁{ ▁ps . setDate ( 1, ▁new ▁java . sql . Date ( ov . getVisitDate (). getTime ()) ); ▁ps . set String (2, ▁ov . get Notes ()); ▁ps . s etLong ( 3, ▁ov . getHcp ID ()); ▁ps . s etLong ( 4, ▁ov . getPatientID ()); ▁ps . set String (5, ▁ov . get HospitalID ()); ▁} ▁/** ▁* ▁Updates ▁the ▁information ▁in ▁a ▁particular ▁office ▁visit . ▁* ▁* ▁@ param ▁ov ▁The ▁Office ▁Visit ▁bean ▁representing ▁the ▁changes . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁update ( OfficeVisitBean ▁ov ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁OfficeVisits ▁SET ▁VisitDate =?, ▁ Notes =?, ▁HCPID =?, ▁" ▁+ ▁" PatientID =?, ▁ HospitalID =? ▁ WH ERE ▁ID =?" ); ▁setValue s ( ps , ▁ov ); ▁ps . s etLong (6, ▁ov . get ID ()); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁particular ▁office ▁visit ▁given ▁an ▁ID ▁* ▁* ▁@ param ▁visitID ▁The ▁unique ▁ID ▁of ▁the ▁office ▁visit . ▁* ▁@ return ▁An ▁OfficeVisitBean ▁with ▁the ▁specific s ▁for ▁that ▁office ▁visit . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁OfficeVisitBean ▁getOfficeVisit ( long ▁visitID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" Select ▁* ▁From ▁OfficeVisits ▁W here ▁ID ▁= ▁? "); ▁ps . s etLong ( 1, ▁visitID ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁if ▁( rs . next ()) ▁return ▁load Full OfficeVist ( rs , ▁visitID ); ▁else ▁return ▁null ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁private ▁OfficeVisitBean ▁load Full OfficeVist ( ResultSet ▁rs , ▁long ▁visitID ) ▁throw s ▁SQLException , ▁DBException ▁{ ▁OfficeVisitBean ▁ov ▁= ▁new ▁OfficeVisitBean ( visitID ); ▁ov . setVisitDate Str ( new ▁ SimpleDateFormat (" MM / dd / yyyy "). format ( new ▁Date ( rs . getDate (" VisitDate ") ▁ . getTime ())) ); ▁ov . setHcp ID ( rs . getLong (" HCPID ")); ▁ov . set Notes ( rs . get String (" notes ")); ▁ov . set PatientID ( rs . getLong (" PatientID ")); ▁ov . set HospitalID ( rs . get String (" HospitalID ")); ▁ov . set Diagnoses ( getDiagnose s ( visitID )); ▁ov . set Prescriptions ( getPrescriptions ( visitID )); ▁ov . set Procedures ( get Procedures ( visitID )); ▁return ▁ov ; ▁} ▁/** ▁* ▁Returns ▁all ▁of ▁the ▁procedures ▁associate d ▁with ▁the ▁given ▁office ▁visit ▁* ▁* ▁@ param ▁visitID ▁The ▁unique ▁ID ▁of ▁the ▁office ▁visit . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁procedures . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < ProcedureBean > ▁getProcedure s ( long ▁visitID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁List < ProcedureBean > ▁procs ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" select ▁* ▁from ▁ov procedure ▁ovp , ▁officevisits ▁ov , ▁ cptcode s ▁cpt ▁where ▁ov . id =? ▁and ▁ovp . visitid =? ▁and ▁cpt . code = ov p . cptcode "); ▁ps . s etLong ( 1, ▁visitID ); ▁ps . s etLong (2, ▁visitID ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁procs ▁= ▁procedure BeanLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁return ▁procs ; ▁} ▁/** ▁* ▁Returns ▁all ▁of ▁the ▁prescriptions ▁associate d ▁with ▁the ▁given ▁office ▁visit ▁* ▁* ▁@ param ▁visitID ▁The ▁ID ▁of ▁the ▁office ▁visit . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁prescriptions . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < PrescriptionBean > ▁ getPrescriptions ( long ▁visitID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" Select ▁* ▁From ▁OVMedication , NDCodes ▁W here ▁OVMedication . VisitID ▁= ▁? ▁" ▁+ ▁" AND ▁NDCodes . Code = OVMedication . NDCode "); ▁ps . s etLong ( 1, ▁visitID ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁prescription Loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁all ▁of ▁the ▁diagnoses ▁associate d ▁with ▁the ▁given ▁office ▁visit ▁* ▁* ▁@ param ▁visitID ▁The ▁unique ▁ID ▁of ▁the ▁office ▁visit . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁diagnoses . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < DiagnosisBean > ▁getDiagnose s ( long ▁visitID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" Select ▁* ▁From ▁OVDiagnosis , ICDCodes ▁W here ▁OVDiagnosis . VisitID ▁= ▁? ▁" ▁+ ▁" AND ▁ICDCodes . Code = OV Diagnosis . ICDCode "); ▁ps . s etLong ( 1, ▁visitID ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁diagnosisLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Add s ▁the ▁given ▁CPT ▁codes ▁to ▁the ▁given ▁office ▁visit ▁* ▁* ▁@ param ▁cptCode ▁* ▁@ param ▁visitID ▁* ▁@ return ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁long ▁add Procedure ToOfficeVisit ▁( String ▁cptCode , ▁long ▁visitID , ▁String ▁hcpid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁ OVProcedure ▁( CPTCode , VisitID , HCPID ) ▁VALUES ▁(?,?,? )"); ▁ps . set String ( 1, ▁cptCode ); ▁ps . s etLong (2, ▁visitID ); ▁ps . set String ( 3, ▁hcpid ); ▁ps . execute Update (); ▁return ▁DBUtil . getLast Insert ( conn ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Remove s ▁the ▁given ▁procedure ▁from ▁its ▁office ▁visit ▁* ▁* ▁@ param ▁ovProcedureID ▁The ▁unique ▁ID ▁of ▁the ▁office ▁visit ▁procedure . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁remove Procedure From OfficeVisit ( long ▁ovProcedureID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" DE LETE ▁FROM ▁ OVProcedure ▁ WH ERE ▁ID =? ▁" ); ▁ps . s etLong ( 1, ▁ovProcedureID ); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Add s ▁a ▁prescription ▁bean ▁to ▁the ▁database . ▁* ▁@ param ▁pres ▁The ▁prescription ▁bean ▁to ▁be ▁added . ▁* ▁@ return ▁The ▁unique ▁ID ▁of ▁the ▁new ly ▁added ▁bean . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁long ▁add Prescription ( PrescriptionBean ▁pres ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn ▁ . prepare Statement (" INSERT ▁INT O ▁OVMedication ▁( VisitID , NDCode , StartDate , EndDate , Dosage , Instructions ) ▁VALUES ▁ (?,?,?,?,?,? )"); ▁prescription Loader . load Parameters ( ps , ▁pres ); ▁ps . execute Update (); ▁return ▁DBUtil . getLast Insert ( conn ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Edit s ▁an ▁existing ▁prescription ▁bean . ▁* ▁* ▁@ param ▁pres ▁The ▁new ly ▁updated ▁prescription ▁bean . ▁* ▁@ return ▁A ▁long ▁indicat ing ▁the ▁ID ▁of ▁the ▁new ly ▁updated ▁prescription ▁bean . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁long ▁ editPrescription ( PrescriptionBean ▁pres ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁// ps ▁= ▁conn . prepare Statement (" UPDATE ▁OVMedication ▁( VisitID , NDCode , StartDate , EndDate , Dosage , Instructions ) ▁VALUES ▁ (?,?,?,?,?,? )"); ▁String ▁ statement ▁= ▁" UPDATE ▁OVMedication ▁" ▁+ ▁" SET ▁VisitID =?, ▁NDCode =?, ▁ StartDate =?, ▁ EndDate =?, ▁ Dosage =?, ▁ Instructions =? ▁" ▁+ ▁" WH ERE ▁ID =?" ; ▁ps ▁= ▁conn . prepare Statement ( statement ); ▁prescription Loader . load Parameters ( ps , ▁pres ); ▁ps . s etLong ( 7, ▁pres . get Id ()); ▁ps . execute Update (); ▁return ▁DBUtil . getLast Insert ( conn ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Remove s ▁the ▁given ▁medication ▁from ▁its ▁office ▁visit ▁* ▁* ▁@ param ▁ovMedicationID ▁The ▁unique ▁ID ▁of ▁the ▁medication ▁to ▁be ▁removed . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁remove Prescription ( long ▁ovMedicationID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" DE LETE ▁FROM ▁OVMedication ▁ WH ERE ▁ID =? ▁" ); ▁ps . s etLong ( 1, ▁ovMedicationID ); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Add s ▁the ▁given ▁CPT ▁codes ▁to ▁the ▁given ▁office ▁visit ▁* ▁@ param ▁icd ▁A ▁double ▁representing ▁the ▁ICD ▁code ▁to ▁be ▁added . ▁* ▁@ param ▁visitID ▁The ▁ID ▁of ▁the ▁office ▁visit ▁we ▁are ▁adding ▁the ▁code ▁to . ▁* ▁@ return ▁A ▁long ▁for ▁the ▁new ▁ICD ▁code ' s ▁ID . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁long ▁add Diagnosis ToOfficeVisit ( double ▁icd , ▁long ▁visitID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁OVDiagnosis ▁( ICDCode , VisitID ) ▁VALUES ▁(?,? )"); ▁ps . set Double ( 1, ▁icd ); ▁ps . s etLong (2, ▁visitID ); ▁ps . execute Update (); ▁return ▁DBUtil . getLast Insert ( conn ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Remove s ▁a ▁particular ▁diagnosis ▁from ▁its ▁office ▁visit ▁* ▁* ▁@ param ▁ovDiagnosisID ▁The ▁ID ▁for ▁the ▁office ▁visit ▁diagnosis ▁to ▁be ▁removed . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁remove Diagnosis From OfficeVisit ( long ▁ovDiagnosisID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" DE LETE ▁FROM ▁OVDiagnosis ▁ WH ERE ▁ID =? ▁" ); ▁ps . s etLong ( 1, ▁ovDiagnosisID ); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Add s ▁a ▁LOINCCode ▁to ▁an ▁office ▁visit . ▁* ▁* ▁@ param ▁LOINCCode ▁A ▁string ▁of ▁the ▁code ▁being ▁added . ▁* ▁@ param ▁visitID ▁The ▁ID ▁of ▁the ▁office ▁visit ▁the ▁code ▁is ▁being ▁added ▁to . ▁* ▁@ param ▁pid ▁The ▁patient ' s ▁MID ▁associate d ▁with ▁this ▁transaction . ▁* ▁@ return ▁The ▁unique ▁ID ▁of ▁the ▁code ▁that ▁was ▁added . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁long ▁add LabProcedure ToOfficeVisit ( String ▁LOINCCode , ▁long ▁visitID , ▁long ▁pid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁LabProcedure ▁( Laboratory ProcedureCode , OfficeVisitID , " ▁+ ▁" Commentary , ▁Results , ▁PatientMID , ▁Status , ▁Rights ) ▁VALUES ▁ (?,?,?,?,?,?,? )"); ▁ps . set String ( 1, ▁LOINCCode ); ▁ps . s etLong (2, ▁visitID ); ▁ps . set String ( 3, ▁" "); ▁ps . set String ( 4, ▁" "); ▁ps . s etLong (5, ▁pid ); ▁ps . set String (6, ▁ LabProcedureBean . Not _ Received ); ▁ps . set String ( 7, ▁" ALLOWED "); ▁ps . execute Update (); ▁return ▁DBUtil . getLast Insert ( conn ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Remove s ▁a ▁given ▁lab ▁procedure . ▁* ▁* ▁@ param ▁labProcedureID ▁The ▁unique ▁ID ▁of ▁the ▁lab ▁procedure . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁remove LabProcedure From OfficeVisit ( long ▁labProcedureID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" DE LETE ▁FROM ▁LabProcedure ▁ WH ERE ▁Laboratory ProcedureID =?" ); ▁ps . s etLong ( 1, ▁labProcedureID ); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁whether ▁or ▁not ▁an ▁office ▁visit ▁ actually ▁exists ▁* ▁* ▁@ param ▁ovID ▁The ▁ID ▁of ▁the ▁office ▁visit ▁to ▁be ▁checked . ▁* ▁@ param ▁pid ▁The ▁MID ▁of ▁the ▁patient ▁associate d ▁with ▁this ▁transaction . ▁* ▁@ return ▁A ▁boolean ▁indicat ing ▁its ▁existence . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁boolean ▁check OfficeVisit E xists ( long ▁ovID , ▁long ▁pid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁OfficeVisits ▁ WH ERE ▁ID =? ▁AND ▁PatientID =?" ); ▁ps . s etLong ( 1, ▁ovID ); ▁ps . s etLong (2, ▁pid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁rs . next (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁office ▁visits ▁for ▁a ▁given ▁patient ▁* ▁* ▁@ param ▁pid ▁The ▁MID ▁of ▁the ▁patient ▁in ▁question . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁OfficeVisitBean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < OfficeVisitBean > ▁get AllOfficeVisits ( long ▁pid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn ▁ . prepare Statement (" SEL ECT ▁* ▁FROM ▁OfficeVisits ▁ WH ERE ▁PatientID =? ▁OR DER ▁ BY ▁VisitDate ▁DESC "); ▁ps . s etLong ( 1, ▁pid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁of ficeVisitLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁office ▁visits ▁for ▁a ▁given ▁patient ▁* ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁LHCP ▁you ▁are ▁look ing ▁up . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁Office ▁Visits . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < OfficeVisitBean > ▁get AllOfficeVisits ForLHCP ( long ▁mid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁if ▁( mid ▁== ▁0 L ) ▁throw ▁new ▁SQLException (" HCPID ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn ▁ . prepare Statement (" SEL ECT ▁* ▁FROM ▁OfficeVisits ▁ WH ERE ▁HCPID =? ▁OR DER ▁ BY ▁VisitDate ▁DESC "); ▁ps . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁of ficeVisitLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁office ▁visits ▁for ▁a ▁given ▁patient ▁* ▁* ▁@ param ▁pid ▁The ▁MID ▁of ▁the ▁patient . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁Office ▁Visits . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < OfficeVisitBean > ▁getOfficeVisit sWith No Survey ( long ▁pid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn ▁ . prepare Statement (" SEL ECT ▁* ▁FROM ▁OfficeVisits ▁where ▁id ▁not ▁in ▁( select ▁ visitid ▁from ▁OVSurvey ) ▁and ▁PatientID ▁= ▁? ▁OR DER ▁ BY ▁VisitDate ▁DESC "); ▁ps . s etLong ( 1, ▁pid ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁of ficeVisitLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁information ▁relat ed ▁to ▁prescription ▁reports ▁given ▁all ▁of ▁the ▁office ▁visits ▁and ▁the ▁* ▁patient ▁ID . ▁The ▁patient ▁ID ▁is ▁necessary ▁in ▁case ▁the ▁office ▁visit ▁ID s ▁are ▁for ▁different ▁patients ▁( the ▁* ▁dis am b igu ation ▁is ▁for ▁security ▁reasons ) . ▁* ▁* ▁@ param ▁ovIDs ▁A ▁java . util . List ▁of ▁Long s ▁for ▁the ▁office ▁visits . ▁* ▁@ param ▁patientID ▁A ▁long ▁representing ▁the ▁MID ▁of ▁the ▁patient ▁in ▁question . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁prescription ▁reports . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < Prescription ReportBean > ▁getPrescription Report sBy Date ( long ▁patientID , ▁String ▁startDate , ▁String ▁endDate ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁NDCodes , ▁OVMedication , ▁OfficeVisits ▁" ▁+ ▁" WH ERE ▁NDCodes . Code = OVMedication . NDCode ▁AND ▁OVMedication . VisitID = OfficeVisits . ID ▁" ▁+ ▁" AND ▁PatientID =? ▁AND ▁( ( DATE (?) ▁< ▁OVMedication . EndDate ▁AND ▁DATE (?) ▁> ▁OVMedication . StartDate ) " ▁+ ▁" OR ▁( DATE (?) ▁> ▁OVMedication . StartDate ▁AND ▁DATE (?) ▁< ▁OVMedication . EndDate ▁ ) ▁OR ▁" ▁+ ▁" ( DATE (?) ▁< = ▁OVMedication . StartDate ▁AND ▁DATE (?) ▁>= ▁OVMedication . StartDate )) ▁" ▁+ ▁" OR DER ▁ BY ▁VisitDate ▁DESC "); ▁ps . s etLong ( 1, ▁patientID ); ▁ps . set String (2, ▁startDate ); ▁ps . set String ( 3, ▁startDate ); ▁ps . set String ( 4, ▁endDate ); ▁ps . set String (5, ▁endDate ); ▁ps . set String (6, ▁startDate ); ▁ps . set String ( 7, ▁endDate ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁prescription ReportBeanLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁information ▁relat ed ▁to ▁prescription ▁reports ▁given ▁all ▁of ▁the ▁office ▁visits ▁and ▁the ▁* ▁patient ▁ID . ▁The ▁patient ▁ID ▁is ▁necessary ▁in ▁case ▁the ▁office ▁visit ▁ID s ▁are ▁for ▁different ▁patients ▁( the ▁* ▁dis am b igu ation ▁is ▁for ▁security ▁reasons ) . ▁* ▁* ▁@ param ▁ovIDs ▁A ▁java . util . List ▁of ▁Long s ▁for ▁the ▁office ▁visits . ▁* ▁@ param ▁patientID ▁A ▁long ▁representing ▁the ▁MID ▁of ▁the ▁patient ▁in ▁question . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁prescription ▁reports . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < Prescription ReportBean > ▁getPrescription Report s ( List < Long > ▁ovIDs , ▁long ▁patientID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁String ▁prep s ▁= ▁build P rep s ( ovID s . size ()); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁NDCodes , ▁OVMedication , ▁OfficeVisits ▁" ▁+ ▁" WH ERE ▁NDCodes . Code = OVMedication . NDCode ▁AND ▁OVMedication . VisitID = OfficeVisits . ID ▁" ▁+ ▁" AND ▁PatientID =? ▁AND ▁VisitID ▁IN (" ▁+ ▁prep s ▁+ ▁" ) ▁OR DER ▁ BY ▁VisitDate ▁DESC "); ▁ps . s etLong ( 1, ▁patientID ); ▁ prepare OV ID s ( ps , ▁ovIDs ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁prescription ReportBeanLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁private ▁void ▁ prepare OV ID s ( P reparedStatement ▁ps , ▁List < Long > ▁ovIDs ) ▁throw s ▁SQLException ▁{ ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁ovIDs . size (); ▁i ++) ▁{ ▁ps . s etLong ( i ▁+ ▁2 , ▁ovIDs . get ( i )); ▁} ▁} ▁private ▁String ▁build P rep s ( int ▁size ) ▁{ ▁String ▁prep ▁= ▁""; ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁size ; ▁i ++) ▁{ ▁prep ▁+= ▁" ? , "; ▁} ▁if ▁( p rep . length () ▁> ▁0) ▁return ▁prep . substring (0, ▁prep . length () ▁- ▁1); ▁else ▁return ▁prep ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁office ▁visits ▁at ▁a ▁given ▁hospital ▁* ▁@ param ▁hospitalID ▁the ▁id ▁of ▁the ▁hospital ▁* ▁@ return ▁a ▁list ▁of ▁the ▁OfficeVisitBean s ▁that ▁hold ▁the ▁office ▁visits ▁* ▁@ throw s ▁DBException ▁in ▁the ▁event ▁of ▁a ▁database ▁error ▁*/ ▁public ▁List < OfficeVisitBean > ▁getOfficeVisit s From Hospital ( String ▁hospitalID ) ▁throw s ▁DBException { ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁officevisits ▁ WH ERE ▁hospitalID ▁= ▁? ▁OR DER ▁ BY ▁ID ▁DESC "); ▁ps . set String ( 1, ▁hospitalID ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁of ficeVisitLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ){ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Get s ▁all ▁office ▁visits ▁correspond ing ▁to ▁a ▁particular ▁ICD ▁diagnosis . ▁* ▁* ▁@ param ▁icdcode ▁A ▁string ▁re pres n ting ▁the ▁ICD ▁diagnosis ▁to ▁look ▁up . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁Office ▁visits . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < OfficeVisitBean > ▁getAll OfficeVisitsFor Diagnosis ( String ▁icdcode ) ▁throw s ▁DBException ▁{ ▁List < DiagnosisBean > ▁diag s ▁= ▁null ; ▁List < OfficeVisitBean > ▁ov s ▁= ▁new ▁ArrayList < OfficeVisitBean > (); ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁ResultSet ▁rs = ▁null ; ▁try ▁{ ▁if ▁( icdcode ▁== ▁null ) ▁throw ▁new ▁SQLException (" icdcode ▁cannot ▁be ▁null "); ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁ovdiagnosis ▁ovd , ▁icdcode s ▁icd ▁ WH ERE ▁ovd . ICDCode =? ▁and ▁icd . Code =?" ); ▁ps . set String ( 1, ▁icdcode ); ▁ps . set String (2, ▁icdcode ); ▁rs ▁= ▁ps . execute Query (); ▁diag s ▁= ▁diagnosisLoader . load List ( rs ); ▁rs . close (); ▁ps . close (); ▁ps ▁= ▁null ; ▁rs ▁= ▁null ; ▁for ▁( DiagnosisBean ▁bean : ▁diag s ) ▁{ ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁officevisits ▁ov ▁ WH ERE ▁ov . ID =?" ); ▁ps . set Int ( 1, ▁( int ) bean . get VisitID ()); ▁rs ▁= ▁ps . execute Query (); ▁if ▁( rs . next ()) ▁{ ▁ov s . add ( load Full OfficeVist ( rs , ▁bean . get VisitID ()) ); ▁} ▁rs . close (); ▁ps . close (); ▁} ▁return ▁ov s ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}