▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . HealthRecord ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . HealthRecords BeanLoader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁/** ▁* ▁Used ▁for ▁all ▁health ▁records ▁where ▁a ▁who le ▁histor y ▁is ▁k e pt . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁ HealthRecordsDAO ▁{ ▁private ▁HealthRecords BeanLoader ▁loader ▁= ▁new ▁HealthRecords BeanLoader (); ▁private ▁DAOFactory ▁factory ; ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁ HealthRecordsDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁health ▁records ▁for ▁a ▁particular ▁patient ▁* ▁* ▁@ param ▁mid ▁The ▁MID ▁of ▁the ▁patient ▁to ▁look ▁up . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁HealthRecords . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < HealthRecord > ▁getAll HealthRecords ( long ▁mid ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁Personal Health Information ▁" ▁+ ▁" WH ERE ▁PatientID =? ▁OR DER ▁ BY ▁AS OF DATE ▁DESC "); ▁ps . s etLong ( 1, ▁mid ); ▁ResultSet ▁rs ; ▁rs ▁= ▁ps . execute Query (); ▁return ▁loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Add s ▁a ▁health ▁record ▁for ▁a ▁particular ▁patient ▁* ▁* ▁@ param ▁record ▁The ▁HealthRecord ▁object ▁to ▁insert . ▁* ▁@ return ▁A ▁boolean ▁indicat ing ▁whether ▁the ▁insert ▁was ▁successful . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁boolean ▁add ( HealthRecord ▁record ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁Personal Health Information ( PatientID , Height , Weight , " ▁+ ▁" Smoker , BloodPressureN , BloodPressureD , CholesterolHDL , CholesterolLDL , CholesterolTri , " ▁+ ▁" HCPID ) ▁VALUES (?,?,?,?,?,?,? , ? , ? , ? )"); ▁loader . load Parameters ( ps , ▁record ); ▁int ▁num Insert ed ▁= ▁ps . execute Update (); ▁return ▁( num Insert ed ▁== ▁1); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}