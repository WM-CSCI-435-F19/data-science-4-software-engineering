▁p ackage ▁edu . nc su . cs c . itrust . validate ; ▁import ▁edu . nc su . cs c . itrust . action . Set SecurityQuestion Action ; ▁import ▁edu . nc su . cs c . itrust . beans . SecurityQA ; ▁import ▁edu . nc su . cs c . itrust . exception . ErrorList ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁/** ▁* ▁Validate s ▁the ▁security ▁question ▁and ▁answer . ▁This ▁does n ' t ▁follow ▁the ▁same ▁format ▁as ▁the ▁other s ▁because ▁this ▁* ▁validator ▁is ▁used ▁for ▁the ▁vari ous ▁states ▁of ▁reset ▁password , ▁ {@ link ▁Set SecurityQuestion Action } ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁SecurityQA Validator ▁extends ▁ BeanValidator < SecurityQA > ▁{ ▁/** ▁* ▁Perform s ▁the ▁act ▁of ▁validat ing ▁the ▁bean ▁in ▁question , ▁which ▁varie s ▁depend ing ▁on ▁the ▁* ▁type ▁of ▁validator . ▁If ▁the ▁validation ▁does ▁not ▁succeed , ▁a ▁ {@ link ▁ FormValidat ionException } ▁is ▁thrown . ▁* ▁* ▁@ param ▁p ▁A ▁bean ▁of ▁the ▁type ▁to ▁be ▁validated . ▁*/ ▁@ O verride ▁public ▁void ▁validate ( SecurityQA ▁bean ) ▁throw s ▁ FormValidat ionException ▁{ ▁ErrorList ▁errorList ▁= ▁new ▁ErrorList (); ▁if ▁( null ▁== ▁bean ) ▁throw ▁new ▁ FormValidat ionException (" Null ▁form "); ▁if ▁( null ▁== ▁bean . getC onfirmAnswer ()) ▁throw ▁new ▁ FormValidat ionException (" Confirm ▁answer ▁cannot ▁be ▁empty "); ▁if ▁(! bean . get Answer (). equals ( bean . getC onfirmAnswer ())) ▁throw ▁new ▁ FormValidat ionException (" Security ▁answer s ▁do ▁not ▁match "); ▁errorList . add If Not Null ( check Format (" Security ▁ Question ", ▁bean . get Question (), ▁ ValidationFormat . QU EST ION , ▁false )); ▁errorList . add If Not Null ( check Format (" Security ▁ Answer ", ▁bean . get Answer (), ▁ ValidationFormat . A NS W ER , ▁false )); ▁if ▁( errorList . has Errors ()) ▁throw ▁new ▁ FormValidat ionException ( errorList ); ▁} ▁}