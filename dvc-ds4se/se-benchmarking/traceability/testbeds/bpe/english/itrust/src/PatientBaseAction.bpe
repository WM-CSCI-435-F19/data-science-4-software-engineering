▁p ackage ▁edu . nc su . cs c . itrust . action . base ; ▁import ▁edu . nc su . cs c . itrust . HtmlEncoder ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁An ▁abstract ▁class ▁for ▁deal ing ▁with ▁action s ▁that ▁require ▁an ▁associate d ▁patient . ▁The ▁con c ret e ▁functionality ▁* ▁provided ▁by ▁this ▁class ▁allow s ▁for ▁assert ing ▁the ▁correct ness ▁and ▁existence ▁of ▁patients ' ▁MIDs . ▁* ▁* ▁Use ▁this ▁class ▁when ever ▁your ▁JSP ▁requires ▁a ▁patient ▁ID ▁when ▁it ▁load s ▁( e . g . ▁ editPatient . jsp ) . ▁The ▁patient ▁* ▁string ▁is ▁passed ▁to ▁the ▁constructor ▁of ▁this ▁class ▁and ▁is ▁checked ▁for ▁both ▁format ▁and ▁existence . ▁If ▁the ▁* ▁patient ▁ID ▁is ▁w rong ▁in ▁any ▁way , ▁an ▁exception ▁is ▁thrown , ▁result ing ▁in ▁the ▁user ▁ getting ▁kick ed ▁out ▁to ▁the ▁* ▁ home ▁page . ▁* ▁* ▁Ver y ▁similar ▁to ▁ {@ link ▁Personnel BaseAction } ▁and ▁ {@ link ▁OfficeVisit BaseAction } ▁* ▁* ▁Sub class es ▁need ▁not ▁re write ▁this ▁functionality , ▁and ▁they ▁are ▁not ▁hel d ▁to ▁any ▁ strict ▁con tr act ▁to ▁extend ▁this ▁* ▁class . ▁*/ ▁public ▁class ▁P atientBaseAction ▁{ ▁/** ▁* ▁The ▁database ▁access ▁object ▁factory ▁to ▁associate ▁this ▁with ▁a ▁runtime ▁context . ▁*/ ▁private ▁DAOFactory ▁factory ; ▁/** ▁* ▁Store s ▁the ▁MID ▁of ▁the ▁patient ▁associate d ▁with ▁this ▁action . ▁*/ ▁ protected ▁long ▁pid ; ▁/** ▁* ▁The ▁default ▁constructor . ▁* ▁* ▁@ param ▁factory ▁* ▁A ▁factory ▁to ▁create ▁a ▁database ▁access ▁object . ▁* ▁@ param ▁pidString ▁* ▁The ▁patient ' s ▁ID ▁to ▁associate ▁with ▁this ▁action . ▁* ▁@ throw s ▁iTrustException ▁* ▁If ▁the ▁patient ' s ▁ID ▁is ▁incorrect ▁or ▁there ▁is ▁a ▁DB ▁problem . ▁*/ ▁public ▁P atientBaseAction ( DAOFactory ▁factory , ▁String ▁pidString ) ▁throw s ▁iTrustException ▁{ ▁this . factory ▁= ▁factory ; ▁this . pid ▁= ▁check PatientID ( pidString ); ▁} ▁/** ▁* ▁A s s erts ▁whether ▁the ▁input ▁is ▁a ▁valid , ▁existing ▁patient ' s ▁MID . ▁* ▁* ▁@ param ▁input ▁* ▁The ▁pre sumed ▁MID ▁* ▁@ return ▁The ▁existing ▁patient ' s ▁ID ▁as ▁a ▁long . ▁* ▁@ throw s ▁iTrustException ▁* ▁If ▁the ▁patient ▁does ▁not ▁exist ▁or ▁there ▁is ▁a ▁DB ▁ Problem . ▁*/ ▁private ▁long ▁check PatientID ( String ▁input ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁pid ▁= ▁Long . value Of ( input ); ▁if ▁( factory . get PatientDAO (). check Patient E xists ( pid )) ▁return ▁pid ; ▁else ▁throw ▁new ▁iTrustException (" Patient ▁does ▁not ▁exist "); ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁throw ▁new ▁iTrustException (" Patient ▁ID ▁is ▁not ▁a ▁number : ▁" ▁+ ▁ HtmlEncoder . encode ( input )); ▁} ▁} ▁/** ▁* ▁Retrieve s ▁the ▁identifier ▁of ▁the ▁patient ▁as ▁a ▁long . ▁* ▁* ▁@ return ▁The ▁patient ' s ▁MID . ▁*/ ▁public ▁long ▁get Pid () ▁{ ▁return ▁pid ; ▁} ▁}