▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . EmailUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . Email ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PersonnelBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PrescriptionBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Handle s ▁retriev ing ▁beans ▁for ▁ viewPrescription Records . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁View Expired Prescriptions Action ▁{ ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁PersonnelDAO ▁personnelDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁EmailUtil ▁emailer ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁Set ▁up ▁defaults ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁person ▁viewing ▁the ▁expired ▁prescriptions . ▁*/ ▁public ▁View Expired Prescriptions Action ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁this . emailer ▁= ▁new ▁EmailUtil ( factory ); ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . personnelDAO ▁= ▁factory . get PersonnelDAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁} ▁/** ▁* ▁Get s ▁a ▁PatientBean ▁from ▁an ▁MID ▁* ▁* ▁@ param ▁patientID ▁MID ▁of ▁the ▁patient ▁* ▁@ return ▁PatientBean ▁for ▁the ▁MID ▁given ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁PatientBean ▁getPatient ( long ▁patientID ) ▁throw s ▁iTrustException ▁{ ▁return ▁patientDAO . getPatient ( patientID ); ▁} ▁/** ▁* ▁Get s ▁the ▁logged ▁in ▁person ' s ▁representees ▁* ▁* ▁@ return ▁list ▁of ▁PatientBeans ▁hold ing ▁the ▁representees ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < PatientBean > ▁get Representees () ▁throw s ▁iTrustException ▁{ ▁return ▁patientDAO . get Represented ( loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁the ▁p rescribing ▁HCP ▁for ▁a ▁prescription ▁* ▁* ▁@ param ▁prescription ▁item ▁in ▁question ▁* ▁@ return ▁HCP ▁who ▁prescribed ▁the ▁prescription ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁PersonnelBean ▁get Prescribing Doctor ( PrescriptionBean ▁prescription ) ▁throw s ▁iTrustException ▁{ ▁return ▁personnelDAO . get Prescribing Doctor ( prescription ); ▁} ▁/** ▁* ▁Returns ▁all ▁the ▁prescriptions ▁for ▁a ▁given ▁patient ▁* ▁* ▁@ param ▁patientID ▁patient ▁in ▁question ▁* ▁@ return ▁list ▁of ▁all ▁the ▁prescriptions ▁for ▁that ▁patient ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < PrescriptionBean > ▁getPrescription sForPatient ( long ▁patientID ) ▁throw s ▁iTrustException ▁{ ▁PatientBean ▁patient ▁= ▁patientDAO . getPatient ( patientID ); ▁if ▁( loggedInMID ▁== ▁patientID ) ▁{ ▁transDAO . log Transaction ( TransactionType . VI EW _ PRESCRIPTION _ REPORT , ▁loggedInMID ); ▁return ▁patientDAO . get Expired Prescriptions ( patientID ); ▁} ▁List < String > ▁toList ▁= ▁new ▁ArrayList < String > (); ▁toList . add ( patient . getEmail ()); ▁List < PatientBean > ▁representatives ▁= ▁patientDAO . get Representing ( patientID ); ▁for ( PatientBean ▁representative ▁: ▁representatives ) ▁{ ▁if ▁( loggedInMID ▁== ▁representative . get MID ()) ▁{ ▁transDAO . log Transaction ( TransactionType . VI EW _ PRESCRIPTION _ REPORT , ▁loggedInMID ); ▁return ▁patientDAO . get Expired Prescriptions ( patientID ); ▁} ▁toList . add ( representative . getEmail ()); ▁} ▁List < PersonnelBean > ▁dlhcps ▁= ▁patientDAO . getDeclaredHCP s ( patientID ); ▁for ( PersonnelBean ▁dlhcp ▁: ▁dlhcps ) ▁{ ▁if ▁( loggedInMID ▁== ▁dlhcp . get MID ()) ▁{ ▁transDAO . log Transaction ( TransactionType . VI EW _ PRESCRIPTION _ REPORT , ▁loggedInMID ); ▁return ▁patientDAO . get Expired Prescriptions ( patientID ); ▁} ▁List < PersonnelBean > ▁uaps ▁= ▁personnelDAO . get UAP s For HCP ( dlhcp . get MID ()); ▁for ( PersonnelBean ▁ uap ▁: ▁uaps ) ▁{ ▁if ▁( loggedInMID ▁== ▁ uap . get MID ()) ▁{ ▁transDAO . log Transaction ( TransactionType . VI EW _ PRESCRIPTION _ REPORT , ▁loggedInMID ); ▁return ▁patientDAO . getPrescriptions ( patientID ); ▁} ▁} ▁} ▁Email ▁email ▁= ▁new ▁Email (); ▁email . s etToList ( toList ); ▁email . set From (" no reply @ itrust . com "); ▁email . set Subject (" Un designated ▁Personnel ▁ Ha ve ▁Access ed ▁You r ▁Prescription ▁Records "); ▁email . s etBody (" An ▁un designated ▁HCP ▁or ▁UAP ▁has ▁accessed ▁your ▁prescription ▁records . ▁For ▁more ▁information , ▁p lease ▁log ▁in ▁to ▁iTrust . "); ▁emailer . sendEmail ( email ); ▁transDAO . log Transaction ( TransactionType . VI EW _ PRESCRIPTION _ REPORT , ▁loggedInMID ); ▁return ▁patientDAO . getPrescriptions ( patientID ); ▁} ▁}