▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . sql . SQLException ; ▁import ▁java . sql . Timestamp ; ▁import ▁edu . nc su . cs c . itrust . beans . ApptBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . ApptDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . validate . ApptBean Validator ; ▁public ▁class ▁AddApptAction ▁{ ▁private ▁long ▁loggedInMID ; ▁private ▁ApptDAO ▁apptDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁PersonnelDAO ▁personnelDAO ; ▁private ▁ApptBean Validator ▁validator ▁= ▁new ▁ApptBean Validator (); ▁public ▁AddApptAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . appt DAO ▁= ▁factory . get ApptDAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . personnelDAO ▁= ▁factory . get PersonnelDAO (); ▁} ▁public ▁String ▁add Appt ( ApptBean ▁appt ) ▁throw s ▁ FormValidat ionException , ▁SQLException ▁{ ▁validator . validate ( appt ); ▁if ( appt . getDate (). before ( new ▁Timestamp ( System . current Time M illi s ())) ) ▁{ ▁return ▁" The ▁schedule d ▁date ▁of ▁this ▁Appointment ▁( "+ appt . getDate ()+" ) ▁has ▁already ▁passed . "; ▁} ▁try ▁{ ▁apptDAO . scheduleAppt ( appt ); ▁transDAO . log Transaction ( TransactionType . ADD _ APPT , ▁loggedInMID , ▁0 L , ▁" Added ▁Appointment ▁" ▁+ ▁appt . getApptType ()); ▁return ▁" Success : ▁" ▁+ ▁appt . getApptType () ▁+ ▁" ▁for ▁" ▁+ ▁appt . getDate () ▁+ ▁" ▁added "; ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁return ▁e . getMessage (); ▁} ▁} ▁/** ▁* ▁Get s ▁a ▁user s ' s ▁name ▁from ▁the ir ▁MID ▁* ▁* ▁@ param ▁mid ▁the ▁MID ▁of ▁the ▁user ▁* ▁@ return ▁the ▁user ' s ▁name ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁getName ( long ▁mid ) ▁throw s ▁iTrustException ▁{ ▁if ( mid ▁< ▁ 700000000 0 L ) ▁return ▁patientDAO . getName ( mid ); ▁else ▁return ▁personnelDAO . getName ( mid ); ▁} ▁}