▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . LOINCbean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . LOINC BeanLoader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁* ▁Log ical ▁O bservation ▁Identifier s ▁Name s ▁and ▁Codes ▁( LOINC ) ▁is ▁a ▁database ▁and ▁universal ▁* ▁ standard ▁for ▁identify ing ▁medical ▁l aboratory ▁ o bservation s . ▁* ▁* ▁@ see ▁http :// loinc . org / ▁* ▁@ author ▁Be n ▁S m i th ▁*/ ▁public ▁class ▁LOINCDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁LOINCBeanLoader ▁LOINCLoader ; ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁LOINCDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁LOINCLoader ▁= ▁new ▁LOINCBeanLoader (); ▁} ▁/** ▁* ▁Add s ▁a ▁LOINC ▁* ▁* ▁@ param ▁hosp ▁The ▁LOINCbean ▁representing ▁the ▁new ▁code ▁to ▁be ▁added . ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁void ▁add LOINC ( LOINCbean ▁hosp ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁LOINC ▁( Laboratory ProcedureCode , ▁ Component , ▁ KindOfProperty , ▁ TimeAspect , ▁System , ▁ ScaleType , ▁ MethodType ) ▁" ▁+ ▁" VALUES ▁ (?,?,?,?,?,?,? )"); ▁ps . set String ( 1, ▁hosp . get LabProcedureCode ()); ▁ps . set String (2, ▁hosp . get Component ()); ▁ps . set String ( 3, ▁hosp . get KindOfProperty ()); ▁ps . set String ( 4, ▁hosp . get TimeAspect ()); ▁ps . set String (5, ▁hosp . get System ()); ▁ps . set String (6, ▁hosp . get ScaleType ()); ▁ps . set String ( 7, ▁hosp . get MethodType ()); ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁if ▁(1 062 ▁== ▁e . get ErrorCode ()) ▁throw ▁new ▁iTrustException (" Error : ▁LOINC ▁already ▁exists . "); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁all ▁LOINC s ▁associate d ▁with ▁Laboratory ProcedureCode ▁* ▁* ▁@ param ▁visitID ▁The ▁code ▁of ▁the ▁Laboratory ▁Procedure ▁Code ▁as ▁a ▁String . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁LOINC Bean s ▁match ing ▁the ▁Laboratory ▁Procedure ▁Code . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LOINCbean > ▁getProcedure s ( String ▁visitID ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" Select ▁* ▁From ▁LOINC ▁W here ▁Laboratory ProcedureCode ▁= ▁? ▁" ); ▁ps . set String ( 1, ▁visitID ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁LOINCLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Updates ▁the ▁information ▁in ▁LOINC . ▁* ▁* ▁@ param ▁ov ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁int ▁update ( LOINCbean ▁ov ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁LOINC ▁SET ▁ Component =?, ▁ KindOfProperty =?, ▁ TimeAspect =?, ▁System =?, ▁ ScaleType =?, ▁ MethodType =? ▁ WH ERE ▁Laboratory ProcedureCode =?" ); ▁ps . set String ( 1, ▁ov . get Component ()); ▁ps . set String (2, ▁ov . get KindOfProperty ()); ▁ps . set String ( 3, ▁ov . get TimeAspect ()); ▁ps . set String ( 4, ▁ov . get System ()); ▁ps . set String (5, ▁ov . get ScaleType ()); ▁ps . set String (6, ▁ov . get MethodType ()); ▁ps . set String ( 7, ▁ov . get LabProcedureCode ()); ▁return ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁all ▁LOINC s ▁as ▁a ▁list . ▁* ▁* ▁@ return ▁A ▁java . util . List ▁of ▁LOINCbean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < LOINCbean > ▁getAll LOINC () ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁LOINC "); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁LOINCLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}