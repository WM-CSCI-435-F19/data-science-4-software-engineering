▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . DrugInteraction Bean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . DrugInteraction BeanLoader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Used ▁for ▁ managing ▁drug ▁interactions . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁* ▁@ see ▁http :// w ww . fd a . g ov / Drugs / Information On Drugs / u cm 1 424 38 . htm ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁DrugInteraction DAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁DrugInteraction BeanLoader ▁interaction Loader ; ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁DrugInteraction DAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁interaction Loader ▁= ▁new ▁DrugInteraction BeanLoader (); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁drug ▁interactions ▁for ▁the ▁input ▁drug ▁name ▁* ▁* ▁@ return ▁A ▁java . util . List ▁of ▁DrugInteraction Bean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < DrugInteraction Bean > ▁get Interactions ( String ▁drugCode ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁drug interactions ▁ WH ERE ▁ FirstDrug ▁= ▁? ▁OR ▁ SecondDrug ▁= ▁? "); ▁ps . set String ( 1, ▁drugCode ); ▁ps . set String (2, ▁drugCode ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁interaction Loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Add s ▁a ▁new ▁drug ▁interaction , ▁return s ▁whether ▁or ▁not ▁the ▁addition ▁was ▁successful . ▁If ▁the ▁code ▁already ▁exists , ▁an ▁* ▁iTrustException ▁is ▁thrown . ▁* ▁* ▁@ param ▁firstDrug ▁The ▁name ▁of ▁the ▁first ▁drug ▁in ▁an ▁interaction . ▁* ▁@ param ▁secondDrug ▁The ▁name ▁of ▁the ▁second ▁drug ▁in ▁an ▁interaction . ▁* ▁@ param ▁description ▁Ex p la n ation ▁of ▁the ▁drug ▁interaction . ▁* ▁@ return ▁A ▁boolean ▁indicat ing ▁success ▁or ▁failure . ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁report Interaction ( String ▁firstDrug , ▁String ▁secondDrug , ▁String ▁description ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁if ( firstDrug . equals ( secondDrug )) ▁throw ▁new ▁iTrustException (" Drug ▁cannot ▁inter act ▁with ▁itself . "); ▁List < DrugInteraction Bean > ▁current Int s Drug 2 ▁= ▁get Interactions ( secondDrug ); ▁for ( DrugInteraction Bean ▁d i b ▁: ▁current Int s Drug 2 ){ ▁if ( d i b . get SecondDrug (). equals ( firstDrug )){ ▁throw ▁new ▁iTrustException (" Error : ▁Interaction ▁between ▁these ▁drugs ▁already ▁exists . "); ▁} ▁} ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁drug interactions ▁( FirstDrug , ▁ SecondDrug , ▁Description ) ▁" ▁+ ▁" VALUES ▁(?,?,? )"); ▁ps . set String ( 1, ▁firstDrug ); ▁ps . set String (2, ▁secondDrug ); ▁ps . set String ( 3, ▁description ); ▁return ▁(1 ▁== ▁ps . execute Update ()); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁if ▁(1 062 ▁== ▁e . get ErrorCode ()) ▁throw ▁new ▁iTrustException (" Error : ▁Interaction ▁between ▁these ▁drugs ▁already ▁exists . "); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Remove ▁an ▁interaction ▁from ▁the ▁database ▁* ▁* ▁@ param ▁firstDrug ▁The ▁name ▁of ▁the ▁first ▁patient ▁* ▁@ param ▁secondDrug ▁The ▁name ▁of ▁the ▁second ▁patient ▁* ▁@ return ▁true ▁if ▁removed ▁successfully , ▁false ▁if ▁not ▁in ▁list ▁*/ ▁public ▁boolean ▁delete Interaction ( String ▁firstDrug , String ▁secondDrug ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" DE LETE ▁FROM ▁drug interactions ▁ WH ERE ▁( FirstDrug ▁= ▁? ▁OR ▁ SecondDrug ▁= ▁? ) ▁AND ▁( FirstDrug ▁= ▁? ▁OR ▁ SecondDrug ▁= ▁? )"); ▁ps . set String ( 1, ▁firstDrug ); ▁ps . set String (2, ▁firstDrug ); ▁ps . set String ( 3, ▁secondDrug ); ▁ps . set String ( 4, ▁secondDrug ); ▁if ( ps . execute Update () ▁== ▁0) ▁return ▁false ; ▁return ▁true ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}