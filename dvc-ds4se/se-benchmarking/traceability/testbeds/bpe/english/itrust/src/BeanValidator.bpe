▁p ackage ▁edu . nc su . cs c . itrust . validate ; ▁import ▁edu . nc su . cs c . itrust . enums . Gender ; ▁import ▁edu . nc su . cs c . itrust . exception . ErrorList ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁/** ▁* ▁A bstract ▁class ▁used ▁by ▁all ▁validator s ▁that ▁provide s ▁utility ▁methods ▁for ▁checking ▁formatt ing ▁of ▁a ▁particular ▁* ▁field . ▁Specify ▁the ▁ Bean ▁to ▁be ▁validated ▁* ▁* ▁@ author ▁Andy ▁* ▁* ▁@ param ▁< T > ▁* ▁The ▁bean ▁type ▁to ▁be ▁validated ▁*/ ▁abstract ▁public ▁class ▁ BeanValidator < T > ▁{ ▁abstract ▁public ▁void ▁validate ( T ▁bean ) ▁throw s ▁ FormValidat ionException ; ▁/** ▁* ▁Check ▁the ▁format ▁against ▁the ▁given ▁enum . ▁isNullable ▁will ▁check ▁if ▁the ▁string ▁is ▁empty ▁or ▁a ▁Java ▁null . ▁* ▁Otherwise , ▁an ▁error ▁message ▁will ▁be ▁returned . ▁Use ▁this ▁in ▁con j unction ▁with ▁ {@ link ▁ErrorList } . ▁* ▁* ▁@ param ▁name ▁* ▁@ param ▁value ▁* ▁@ param ▁format ▁* ▁@ param ▁isNullable ▁* ▁@ return ▁*/ ▁ protected ▁String ▁check Format ( String ▁name , ▁String ▁value , ▁ ValidationFormat ▁format , ▁boolean ▁isNullable ) ▁{ ▁String ▁errorMessage ▁= ▁name ▁+ ▁" : ▁" ▁+ ▁format . get Description (); ▁if ▁( value ▁== ▁null ▁|| ▁"" . equals ( value )) ▁return ▁isNullable ▁? ▁"" ▁: ▁errorMessage ; ▁else ▁if ▁( format . getR egex (). match er ( value ) . matches ()) ▁return ▁""; ▁else ▁return ▁errorMessage ; ▁} ▁/** ▁* ▁Check ▁a ▁long ▁value ▁against ▁a ▁particular ▁format . ▁isNullable ▁will ▁check ▁if ▁it ▁is ▁empty ▁or ▁a ▁Java ▁null . ▁* ▁Otherwise , ▁an ▁error ▁message ▁will ▁be ▁returned . ▁Use ▁this ▁in ▁con j unction ▁with ▁ {@ link ▁ErrorList } . ▁* ▁* ▁@ param ▁name ▁* ▁@ param ▁ longValue ▁* ▁@ param ▁format ▁* ▁@ param ▁isNullable ▁* ▁@ return ▁*/ ▁ protected ▁String ▁check Format ( String ▁name , ▁Long ▁ longValue , ▁ ValidationFormat ▁format , ▁boolean ▁isNullable ) ▁{ ▁String ▁str ▁= ▁""; ▁if ▁( longValue ▁ != ▁null ) ▁str ▁= ▁String . value Of ( longValue ); ▁return ▁check Format ( name , ▁str , ▁format , ▁isNullable ); ▁} ▁/** ▁* ▁Check ▁the ▁format ▁against ▁the ▁given ▁enum . ▁isNullable ▁will ▁check ▁if ▁it ▁is ▁a ▁Java ▁null . ▁Otherwise , ▁an ▁* ▁error ▁message ▁will ▁be ▁returned . ▁Use ▁this ▁in ▁con j unction ▁with ▁ {@ link ▁ErrorList } . ▁* ▁* ▁@ param ▁name ▁* ▁@ param ▁doubleValue ▁* ▁@ param ▁format ▁* ▁@ param ▁isNullable ▁* ▁@ return ▁*/ ▁ protected ▁String ▁check Format ( String ▁name , ▁ Double ▁doubleValue , ▁ ValidationFormat ▁format , ▁boolean ▁isNullable ) ▁{ ▁String ▁str ▁= ▁""; ▁if ▁( double Value ▁ != ▁null ) ▁str ▁= ▁String . value Of ( double Value ); ▁return ▁check Format ( name , ▁str , ▁format , ▁isNullable ); ▁} ▁/** ▁* ▁Check ▁against ▁the ▁proper ▁gender ▁* ▁* ▁@ param ▁name ▁* ▁@ param ▁gen ▁* ▁@ param ▁format ▁* ▁@ param ▁isNullable ▁* ▁@ return ▁*/ ▁ protected ▁String ▁check Gender ( String ▁name , ▁Gender ▁gen , ▁ ValidationFormat ▁format , ▁boolean ▁isNullable ) ▁{ ▁String ▁str ▁= ▁""; ▁if ▁( gen ▁ != ▁null ) ▁str ▁= ▁gen . to String (); ▁return ▁check Format ( name , ▁str , ▁format , ▁isNullable ); ▁} ▁/** ▁* ▁The ▁that ▁an ▁integer ▁is ▁the ▁proper ▁format , ▁and ▁is ▁in ▁the ▁correct ▁range ▁* ▁* ▁@ param ▁name ▁* ▁@ param ▁value ▁* ▁@ param ▁lower ▁* ▁@ param ▁upper ▁* ▁@ param ▁isNullable ▁* ▁@ return ▁*/ ▁ protected ▁String ▁check Int ( String ▁name , ▁String ▁value , ▁int ▁lower , ▁int ▁upper , ▁boolean ▁isNullable ) ▁{ ▁if ▁( is Null able ▁&& ▁( value ▁== ▁null ▁|| ▁"" . equals ( value ))) ▁return ▁""; ▁try ▁{ ▁int ▁int Value ▁= ▁Integer . value Of ( value ); ▁if ▁( lower ▁< = ▁int Value ▁&& ▁int Value ▁< = ▁upper ) ▁return ▁""; ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁// ▁just ▁fall ▁through ▁to ▁return ing ▁the ▁error ▁message ▁} ▁return ▁name ▁+ ▁" ▁must ▁be ▁an ▁integer ▁in ▁[ " ▁+ ▁lower ▁+ ▁"," ▁+ ▁upper ▁+ ▁" ] "; ▁} ▁/** ▁* ▁Check ▁that ▁a ▁double ▁is ▁in ▁the ▁proper ▁format ▁and ▁is ▁in ▁the ▁correct ▁range ▁* ▁* ▁@ param ▁name ▁* ▁@ param ▁value ▁* ▁@ param ▁lower ▁* ▁@ param ▁upper ▁* ▁@ return ▁*/ ▁ protected ▁String ▁check Double ( String ▁name , ▁String ▁value , ▁double ▁lower , ▁double ▁upper ) ▁{ ▁try ▁{ ▁double ▁doubleValue ▁= ▁ Double . value Of ( value ); ▁if ▁( lower ▁< = ▁doubleValue ▁&& ▁doubleValue ▁< ▁upper ) ▁return ▁""; ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁// ▁just ▁fall ▁through ▁to ▁return ing ▁the ▁error ▁message ▁} ▁return ▁name ▁+ ▁" ▁must ▁be ▁a ▁d ecimal ▁in ▁[ " ▁+ ▁lower ▁+ ▁"," ▁+ ▁upper ▁+ ▁" ) "; ▁} ▁/** ▁* ▁Check ▁that ▁the ▁value ▁fit s ▁the ▁" true " ▁or ▁" false " ▁* ▁* ▁@ param ▁name ▁* ▁@ param ▁value ▁* ▁@ return ▁*/ ▁ protected ▁String ▁check Boolean ( String ▁name , ▁String ▁value ) ▁{ ▁if ▁ (" true " . equals ( value ) ▁|| ▁" false " . equals ( value )) ▁return ▁""; ▁else ▁return ▁name ▁+ ▁" ▁must ▁be ▁e i ther ▁' true ' ▁or ▁' false ' "; ▁} ▁}