▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . ProcedureBean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . ProcedureBean Loader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Used ▁for ▁ managing ▁CPT ▁codes . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁* ▁The ▁CPT ▁code ▁set ▁a c cur ately ▁describe s ▁medical , ▁surg ical , ▁and ▁diagnos tic ▁services ▁* ▁and ▁is ▁designed ▁to ▁communicate ▁un i form ▁information ▁about ▁medical ▁services ▁and ▁procedures ▁* ▁amo ng ▁physician s , ▁code rs , ▁patients , ▁a c credit ation ▁org an iz ation s , ▁and ▁p ayers ▁for ▁administrative , ▁* ▁fina nc ial , ▁and ▁analy tical ▁purposes . ▁* ▁* ▁@ see ▁http :// w ww . ama - ass n . org / ama / pub / p hysician - resources / solution s - managing - your - pr act ice / co d ing - b ill ing - i nsurance / cpt / a b out - cpt . s html ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁CPTCodesDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁ProcedureBean Loader ▁procedure BeanLoader ▁= ▁new ▁ProcedureBean Loader (); ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁CPTCodesDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁CPT ▁codes . ▁* ▁* ▁@ return ▁A ▁java . util . List ▁of ▁ProcedureBean s ▁for ▁the ▁CPT ▁codes . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < ProcedureBean > ▁getAll CPTCodes () ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁CPTCodes ▁OR DER ▁ BY ▁ CODE "); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁procedure BeanLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁CPT ▁codes . ▁* ▁* ▁@ return ▁A ▁java . util . List ▁of ▁all ▁ Immunization - re lated ▁CPT ▁codes . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < ProcedureBean > ▁getImmunization CPTCodes () ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" select ▁* ▁from ▁ cptcode s ▁where ▁attribute =' immunization ' ▁order ▁by ▁code "); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁procedure BeanLoader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁particular ▁procedure ▁description ▁for ▁a ▁code . ▁* ▁* ▁@ param ▁code ▁The ▁string ▁representation ▁of ▁the ▁code . ▁* ▁@ return ▁The ▁text ual ▁description ▁of ▁the ▁code . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁ProcedureBean ▁ getCPTCode ( String ▁code ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁CPTCodes ▁ WH ERE ▁Code ▁= ▁? "); ▁ps . set String ( 1, ▁code ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁if ▁( rs . next ()) ▁return ▁procedure BeanLoader . loadSingle ( rs ); ▁return ▁null ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Add s ▁a ▁new ▁CPT ▁code , ▁return s ▁that ▁it ▁was ▁added ▁successfully ▁* ▁* ▁@ param ▁proc ▁A ▁ProcedureBean ▁representing ▁the ▁new ▁code ▁information . ▁* ▁@ return ▁A ▁boolean ▁for ▁whether ▁the ▁operation ▁was ▁successful . ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁add CPTCode ( ProcedureBean ▁proc ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁CPTCodes ▁( Code , ▁Description , ▁Attribute ) ▁" ▁+ ▁" VALUES ▁(?,?,? )"); ▁ps . set String ( 1, ▁proc . getCPTCode ()); ▁ps . set String (2, ▁proc . get Description ()); ▁ps . set String ( 3, ▁proc . get Attribute ()); ▁return ▁(1 ▁== ▁ps . execute Update ()); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁if ▁(1 062 ▁== ▁e . get ErrorCode ()) ▁throw ▁new ▁iTrustException (" Error : ▁Code ▁already ▁exists . "); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Change ▁the ▁procedure ▁description ▁for ▁a ▁particular ▁CPT ▁code ▁* ▁* ▁@ param ▁proc ▁A ▁ProcedureBean ▁representing ▁the ▁new ▁code ▁information . ▁* ▁@ return ▁A ▁boolean ▁for ▁whether ▁the ▁operation ▁was ▁successful . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁int ▁update Code ( ProcedureBean ▁proc ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁CPTCodes ▁SET ▁Description ▁= ▁? , ▁Attribute ▁= ▁? ▁ WH ERE ▁Code ▁= ▁? "); ▁ps . set String ( 1, ▁proc . get Description ()); ▁ps . set String (2, ▁proc . get Attribute ()); ▁ps . set String ( 3, ▁proc . getCPTCode ()); ▁return ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}