▁p ackage ▁edu . nc su . cs c . itrust . dao . mysql ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . P reparedStatement ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . DBUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . MedicationBean ; ▁import ▁edu . nc su . cs c . itrust . beans . loaders . MedicationBean Loader ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Used ▁for ▁ managing ▁the ▁ND ▁Codes . ▁* ▁* ▁DAO ▁stand s ▁for ▁Database ▁Access ▁Object . ▁All ▁DAOs ▁are ▁intended ▁to ▁be ▁ref lections ▁of ▁the ▁database , ▁that ▁is , ▁* ▁one ▁DAO ▁per ▁table ▁in ▁the ▁database ▁( most ▁of ▁the ▁time ) . ▁For ▁more ▁comple x ▁sets ▁of ▁queries , ▁extra ▁DAOs ▁are ▁* ▁added . ▁DAOs ▁can ▁assume ▁that ▁all ▁data ▁has ▁been ▁validated ▁and ▁is ▁correct . ▁* ▁* ▁DAOs ▁should ▁n ever ▁have ▁setter s ▁or ▁any ▁other ▁parameter ▁to ▁the ▁constructor ▁than ▁a ▁factory . ▁All ▁DAOs ▁should ▁be ▁* ▁accessed ▁by ▁DAOFactory ▁( @ see ▁ {@ link ▁DAOFactory }) ▁and ▁every ▁DAO ▁should ▁have ▁a ▁factory ▁- ▁for ▁obtain ing ▁JDBC ▁* ▁connections ▁and / or ▁access ing ▁other ▁DAOs . ▁* ▁* ▁The ▁N ational ▁Drug ▁Code ▁( NDC ) ▁is ▁a ▁universal ▁product ▁identifier ▁used ▁in ▁the ▁* ▁Unit ed ▁State s ▁for ▁drugs ▁intended ▁for ▁human ▁use . ▁* ▁* ▁@ see ▁http :// w ww . fd a . g ov / Drugs / Information On Drugs / u cm 1 424 38 . htm ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁NDCodesDAO ▁{ ▁private ▁DAOFactory ▁factory ; ▁private ▁MedicationBean Loader ▁medication Loader ▁= ▁new ▁MedicationBean Loader (); ▁/** ▁* ▁The ▁typical ▁constructor . ▁* ▁@ param ▁factory ▁The ▁ {@ link ▁DAOFactory } ▁associate d ▁with ▁this ▁DAO , ▁which ▁is ▁used ▁for ▁obtain ing ▁SQL ▁connections , ▁etc . ▁*/ ▁public ▁NDCodesDAO ( DAOFactory ▁factory ) ▁{ ▁this . factory ▁= ▁factory ; ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁ND ▁codes ▁* ▁* ▁@ return ▁A ▁java . util . List ▁of ▁MedicationBean s . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < MedicationBean > ▁getAll NDCodes () ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁NDCodes ▁OR DER ▁ BY ▁ CODE "); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁return ▁medication Loader . load List ( rs ); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁particular ▁description ▁for ▁a ▁given ▁code . ▁* ▁* ▁@ param ▁code ▁The ▁ND ▁code ▁to ▁be ▁look ed ▁up . ▁* ▁@ return ▁A ▁bean ▁representing ▁the ▁Medication ▁that ▁was ▁look ed ▁up . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁MedicationBean ▁ getNDCode ( String ▁code ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" SEL ECT ▁* ▁FROM ▁NDCodes ▁ WH ERE ▁Code ▁= ▁? "); ▁ps . set String ( 1, ▁code ); ▁ResultSet ▁rs ▁= ▁ps . execute Query (); ▁if ▁( rs . next ()) ▁return ▁medication Loader . loadSingle ( rs ); ▁return ▁null ; ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Add s ▁a ▁new ▁ND ▁code , ▁return s ▁whether ▁or ▁not ▁the ▁change ▁was ▁made . ▁If ▁the ▁code ▁already ▁exists , ▁an ▁* ▁iTrustException ▁is ▁thrown . ▁* ▁* ▁@ param ▁med ▁The ▁medication ▁bean ▁to ▁be ▁added . ▁* ▁@ return ▁A ▁boolean ▁indicat ing ▁success ▁or ▁failure . ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁boolean ▁add NDCode ( MedicationBean ▁med ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" INSERT ▁INT O ▁NDCodes ▁( Code , ▁Description ) ▁" ▁+ ▁" VALUES ▁(?,? )"); ▁ps . set String ( 1, ▁med . getNDCode ()); ▁ps . set String (2, ▁med . get Description ()); ▁return ▁(1 ▁== ▁ps . execute Update ()); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁if ▁(1 062 ▁== ▁e . get ErrorCode ()) ▁throw ▁new ▁iTrustException (" Error : ▁Code ▁already ▁exists . "); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁/** ▁* ▁Updates ▁a ▁particular ▁code ' s ▁description ▁* ▁* ▁@ param ▁med ▁A ▁bean ▁representing ▁the ▁particular ▁medication ▁to ▁be ▁updated . ▁* ▁@ return ▁An ▁int ▁representing ▁the ▁number ▁of ▁updated ▁rows . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁int ▁update Code ( MedicationBean ▁med ) ▁throw s ▁DBException ▁{ ▁ Connection ▁conn ▁= ▁null ; ▁P reparedStatement ▁ps ▁= ▁null ; ▁try ▁{ ▁conn ▁= ▁factory . get Connection (); ▁ps ▁= ▁conn . prepare Statement (" UPDATE ▁NDCodes ▁SET ▁Description ▁= ▁? ▁" ▁+ ▁" WH ERE ▁Code ▁= ▁? "); ▁ps . set String ( 1, ▁med . get Description ()); ▁ps . set String (2, ▁med . getNDCode ()); ▁return ▁ps . execute Update (); ▁} ▁catch ▁( SQLException ▁e ) ▁{ ▁e . print Stack T race (); ▁throw ▁new ▁DBException ( e ); ▁} ▁finally ▁{ ▁DBUtil . close Connection ( conn , ▁ps ); ▁} ▁} ▁}