▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . text . ParseException ; ▁import ▁java . text . SimpleDateFormat ; ▁import ▁java . util . Date ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . beans . RemoteMonitoring DataBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AuthDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . RemoteMonitoring DAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Handle s ▁retriev ing ▁the ▁patient ▁data ▁for ▁a ▁certain ▁HCP ▁as ▁used ▁by ▁view Telemedicine Data . jsp ▁* ▁*/ ▁public ▁class ▁ViewMy RemoteMonitoring ListAction ▁{ ▁private ▁ RemoteMonitoring DAO ▁rmDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁AuthDAO ▁authDAO ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁Constructor ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁HCP ▁retriev ing ▁the ▁patient ▁data . ▁*/ ▁public ▁ViewMy RemoteMonitoring ListAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . rmDAO ▁= ▁factory . get RemoteMonitoring DAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . authDAO ▁= ▁factory . get AuthDAO (); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁ RemoteMonitoring DataBean s ▁for ▁the ▁logged ▁in ▁HCP ▁* ▁* ▁@ return ▁list ▁of ▁TransactionBean s ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁List < RemoteMonitoring DataBean > ▁getPatient sData () ▁throw s ▁DBException ▁{ ▁transDAO . log Transaction ( TransactionType . T ELE MEDIC INE _ MONITORING , ▁loggedInMID ); ▁return ▁rmDAO . getPatient sData ( loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁ RemoteMonitoring DataBean s ▁for ▁the ▁logged ▁in ▁HCP ▁* ▁* ▁@ return ▁list ▁of ▁TransactionBean s ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁ FormValidat ionException ▁*/ ▁public ▁List < RemoteMonitoring DataBean > ▁get PatientData By Date ( long ▁patientMID , ▁String ▁startDate , ▁String ▁endDate ) ▁throw s ▁DBException , FormValidat ionException ▁{ ▁Date ▁lower ; ▁Date ▁upper ; ▁try ▁{ ▁lower ▁= ▁new ▁ SimpleDateFormat (" MM / dd / yyyy "). parse ( startDate ); ▁upper ▁= ▁new ▁ SimpleDateFormat (" MM / dd / yyyy "). parse ( endDate ); ▁if ▁( lower . after ( upper )) ▁throw ▁new ▁ FormValidat ionException (" Start ▁date ▁must ▁be ▁before ▁end ▁date ! "); ▁} ▁catch ▁( ParseException ▁e ) ▁{ ▁throw ▁new ▁ FormValidat ionException (" Enter ▁dates ▁in ▁ MM / dd / yyyy "); ▁} ▁transDAO . log Transaction ( TransactionType . T ELE MEDIC INE _ MONITORING , ▁loggedInMID ); ▁return ▁rmDAO . get PatientData By Date ( patientMID , ▁lower , ▁upper ); ▁} ▁public ▁List < RemoteMonitoring DataBean > ▁get PatientData With out Log g ing () ▁throw s ▁DBException ▁{ ▁return ▁rmDAO . getPatient sData ( loggedInMID ); ▁} ▁/** ▁* ▁return s ▁the ▁patient ▁name ▁* ▁* ▁@ return ▁patient ▁name ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁get PatientName ( long ▁pid ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁return ▁authDAO . getUserName ( pid ); ▁} ▁}