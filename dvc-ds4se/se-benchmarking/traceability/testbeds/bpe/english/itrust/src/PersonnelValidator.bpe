▁p ackage ▁edu . nc su . cs c . itrust . validate ; ▁import ▁edu . nc su . cs c . itrust . action . Edit PersonnelAction ; ▁import ▁edu . nc su . cs c . itrust . beans . PersonnelBean ; ▁import ▁edu . nc su . cs c . itrust . exception . ErrorList ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁/** ▁* ▁Validate s ▁a ▁personnel ▁bean , ▁from ▁ {@ link ▁Edit PersonnelAction } ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁Personnel Validator ▁extends ▁ BeanValidator < PersonnelBean > ▁{ ▁/** ▁* ▁The ▁default ▁constructor . ▁*/ ▁public ▁Personnel Validator () ▁{ ▁} ▁/** ▁* ▁Perform s ▁the ▁act ▁of ▁validat ing ▁the ▁bean ▁in ▁question , ▁which ▁varie s ▁depend ing ▁on ▁the ▁* ▁type ▁of ▁validator . ▁If ▁the ▁validation ▁does ▁not ▁succeed , ▁a ▁ {@ link ▁ FormValidat ionException } ▁is ▁thrown . ▁* ▁* ▁@ param ▁p ▁A ▁bean ▁of ▁the ▁type ▁to ▁be ▁validated . ▁*/ ▁@ O verride ▁public ▁void ▁validate ( PersonnelBean ▁p ) ▁throw s ▁ FormValidat ionException ▁{ ▁ErrorList ▁errorList ▁= ▁new ▁ErrorList (); ▁errorList . add If Not Null ( check Format (" First ▁name ", ▁p . get FirstName (), ▁ ValidationFormat . NAME , ▁false )); ▁errorList . add If Not Null ( check Format (" Last ▁name ", ▁p . get LastName (), ▁ ValidationFormat . NAME , ▁false )); ▁errorList . add If Not Null ( check Format (" Street ▁Address ▁ 1", ▁p . getStreetAddress 1() , ▁ ValidationFormat . ADDRESS , ▁false )); ▁errorList . add If Not Null ( check Format (" Street ▁Address ▁2 ", ▁p . getStreetAddress 2() , ▁ ValidationFormat . ADDRESS , ▁true )); ▁errorList . add If Not Null ( check Format (" City ", ▁p . get City (), ▁ ValidationFormat . CITY , ▁false )); ▁errorList . add If Not Null ( check Format (" State ", ▁p . get State (), ▁ ValidationFormat . STATE , ▁false )); ▁errorList . add If Not Null ( check Format (" Zip ▁Code ", ▁p . getZip (), ▁ ValidationFormat . ZIPCODE , ▁false )); ▁errorList ▁ . add If Not Null ( check Format (" Phone ▁Number ", ▁p . getPhone (), ▁ ValidationFormat . PH ONE _ NUMBER , ▁false )); ▁errorList ▁ . add If Not Null ( check Format (" Email ", ▁p . getEmail (), ▁ ValidationFormat . EMAIL , ▁true )); ▁if ▁( errorList . has Errors ()) ▁throw ▁new ▁ FormValidat ionException ( errorList ); ▁} ▁}