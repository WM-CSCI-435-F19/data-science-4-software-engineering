▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . HashMap ; ▁import ▁java . util . List ; ▁import ▁java . util . Map ; ▁import ▁edu . nc su . cs c . itrust . ParameterUtil ; ▁import ▁edu . nc su . cs c . itrust . action . base . P atientBaseAction ; ▁import ▁edu . nc su . cs c . itrust . beans . OfficeVisitBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . beans . Prescription ReportBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . OfficeVisitDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . No HealthRecords Exception ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Handle s ▁Prescription ▁Reports ▁for ▁the ▁given ▁pid ▁Used ▁by ▁hcp - uap / getPrescription Report . jsp , ▁* ▁hcp - uap / viewPrescription Record . jsp , ▁patient / getMy Prescription Report . jsp , ▁& ▁* ▁patient / view My Prescription Record . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁Prescription ReportAction ▁extends ▁P atientBaseAction ▁{ ▁private ▁boolean ▁ isRepresenting ▁= ▁false ; ▁private ▁OfficeVisitDAO ▁ovDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁S uper ▁class ▁validate s ▁pidString ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁user ▁who ▁is ▁making ▁a ▁prescription ▁report . ▁* ▁@ param ▁pidString ▁The ▁MID ▁of ▁the ▁patient ▁in ▁question . ▁* ▁@ throw s ▁iTrustException ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁No HealthRecords Exception ▁*/ ▁public ▁Prescription ReportAction ( DAOFactory ▁factory , ▁long ▁loggedInMID , ▁String ▁pidString ) ▁throw s ▁iTrustException , ▁DBException , ▁No HealthRecords Exception ▁{ ▁super ( factory , ▁pidString ); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . ovDAO ▁= ▁factory . get OfficeVisitDAO (); ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . loggedInMID ▁= ▁loggedInMID ; ▁} ▁/** ▁* ▁T akes ▁the ▁patient ' s ▁representee ▁as ▁a ▁ param ▁and ▁return s ▁it ▁as ▁a ▁long ▁if ▁the ▁patient ▁represents ▁the ▁input ▁* ▁ param ▁* ▁* ▁@ param ▁input ▁* ▁the ▁patient ' s ▁representee ▁mid ▁* ▁@ return ▁representee ' s ▁mid ▁as ▁a ▁long ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁long ▁represent Patient ( String ▁input ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁reppeeMID ▁= ▁Long . value Of ( input ); ▁if ▁( patientDAO . represents ( loggedInMID , ▁reppeeMID )) ▁{ ▁loggedInMID ▁= ▁reppeeMID ; ▁pid ▁= ▁reppeeMID ; ▁ isRepresenting ▁= ▁true ; ▁return ▁reppeeMID ; ▁} ▁else ▁throw ▁new ▁iTrustException (" You ▁do ▁not ▁represent ▁patient ▁" ▁+ ▁reppeeMID ); ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁throw ▁new ▁iTrustException (" MID ▁is ▁not ▁a ▁number "); ▁} ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁office ▁visits ▁for ▁the ▁pid ▁* ▁* ▁@ return ▁list ▁of ▁OfficeVisitBean s ▁for ▁the ▁pid ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < OfficeVisitBean > ▁get AllOfficeVisits () ▁throw s ▁DBException ▁{ ▁return ▁ovDAO . get AllOfficeVisits ( pid ); ▁} ▁/** ▁* ▁Used ▁by ▁the ▁JSP , ▁passes ▁a ▁ Map ▁from ▁the ▁ html ▁form ▁and ▁a ▁list ▁of ▁OfficeVisitBean s ▁Returns ▁a ▁list ▁of ▁* ▁Prescription ReportBean s ▁* ▁* ▁@ param ▁params ▁A ▁java . util . HashMap ▁containing ▁the ▁parameter ▁map . ▁* ▁@ param ▁officeVisits ▁A ▁java . util . List ▁of ▁OfficeVisitBean s ▁for ▁the ▁visits . ▁* ▁@ return ▁list ▁of ▁Prescription ReportBean s ▁* ▁@ throw s ▁DBException ▁*/ ▁// ▁suppress ing ▁warning s ▁because ▁JSP ▁does n ' t ▁have ▁a ▁gener ic ▁for ▁request . getParameterMap () ▁@ S uppress Warning s (" un checked ") ▁public ▁List < Prescription ReportBean > ▁getPrescription Report s ( Map ▁params , ▁List < OfficeVisitBean > ▁officeVisits ) ▁throw s ▁DBException ▁{ ▁HashMap < String , ▁String > ▁myParams ▁= ▁ ParameterUtil . convert Map ( param s ); ▁List < Long > ▁ovIDs ▁= ▁new ▁ArrayList < Long > (); ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁officeVisits . size (); ▁i ++) ▁{ ▁try ▁{ ▁if ▁( param s . get (" ovOff " ▁+ ▁i ) ▁ != ▁null ) ▁{ ▁int ▁offset ▁= ▁Integer . value Of ( myParams . get (" ovOff " ▁+ ▁i )); ▁ovIDs . add ( officeVisit s . get ( offset ) . get VisitID ()); ▁} ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁// ▁just ▁skip ▁it ▁} ▁} ▁transDAO . log Transaction ( TransactionType . VI EW _ PRESCRIPTION _ REPORT , ▁loggedInMID , ▁pid , ▁" Get ting ▁reports ▁for ▁office ▁visits ▁" ▁+ ▁ovIDs . to String ()); ▁if ▁( ovID s . size () ▁== ▁0) ▁return ▁new ▁ArrayList < Prescription ReportBean > (); ▁return ▁ovDAO . getPrescription Report s ( ovID s , ▁pid ); ▁} ▁/** ▁* ▁Returns ▁a ▁PatientBean ▁for ▁the ▁pid ▁* ▁* ▁@ return ▁PatientBean ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁PatientBean ▁getPatient () ▁throw s ▁DBException ▁{ ▁return ▁patientDAO . getPatient ( pid ); ▁} ▁/** ▁* ▁Used ▁by ▁the ▁JSP , ▁which ▁passes ▁the ▁ param ▁map ▁from ▁the ▁ html ▁form ▁and ▁a ▁list ▁of ▁OfficeVisitBean s ▁Returns ▁a ▁* ▁string ▁that ▁will ▁be ▁used ▁to ▁create ▁a ▁new ▁url . ▁The ▁JSP ▁will ▁pull ▁params ▁from ▁this ▁url ▁to ▁create ▁the ▁* ▁prescription ▁report . ▁* ▁* ▁@ param ▁ param Map ▁A ▁java . util . HashMap ▁of ▁the ▁parameters . ▁* ▁@ param ▁officeVisits ▁A ▁java . util . List ▁of ▁OfficeVisitBean s . ▁* ▁@ return ▁the ▁string ▁that ▁will ▁be ▁used ▁in ▁the ▁new ▁url ▁* ▁@ throw s ▁ FormValidat ionException ▁* ▁@ throw s ▁DBException ▁*/ ▁// ▁suppress ing ▁warning s ▁because ▁JSP ▁does n ' t ▁have ▁a ▁gener ic ▁for ▁request . getParameterMap () ▁@ S uppress Warning s (" un checked ") ▁public ▁String ▁get Query String ( Map ▁ param Map , ▁List < OfficeVisitBean > ▁officeVisits ) ▁throw s ▁ FormValidat ionException , ▁DBException ▁{ ▁HashMap < String , ▁String > ▁myParams ▁= ▁ ParameterUtil . convert Map ( param Map ); ▁List < Integer > ▁ovOffsets ▁= ▁check OfficeVisits ( myParams , ▁officeVisits ); ▁String ▁query String ▁= ▁build Query String ( ovOff set s ); ▁if ▁( isRepresenting ) ▁query String ▁+= ▁"& rep =" ▁+ ▁pid ; ▁return ▁query String ; ▁} ▁/** ▁* ▁Check s ▁office ▁visits ▁* ▁* ▁@ param ▁myParams ▁list ▁of ▁parameters ▁* ▁@ param ▁officeVisits ▁list ▁of ▁office ▁visits ▁* ▁@ return ▁Returns ▁a ▁java . util . ArrayList ▁of ▁Integer s ▁for ▁the ▁given ▁office ▁visits . ▁*/ ▁private ▁ArrayList < Integer > ▁check OfficeVisits ( HashMap < String , ▁String > ▁myParams , ▁List < OfficeVisitBean > ▁officeVisits ) ▁{ ▁ArrayList < Integer > ▁list ▁= ▁new ▁ArrayList < Integer > (); ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁officeVisits . size (); ▁i ++) ▁{ ▁if ▁ (" on " . equals ( myParams . get (" ov " ▁+ ▁i ))) ▁list . add ( i ); ▁} ▁return ▁list ; ▁} ▁/** ▁* ▁Build s ▁a ▁query ▁string ▁for ▁office ▁visits ▁* ▁* ▁@ param ▁ovOffsets ▁offset s ▁for ▁the ▁office ▁visits ▁* ▁@ return ▁A ▁SQL ▁query ▁in ▁a ▁Java ▁String . ▁*/ ▁private ▁String ▁build Query String ( List < Integer > ▁ovOffsets ) ▁{ ▁int ▁n ▁= ▁ovOffsets . size (); ▁if ▁( n ▁== ▁0) ▁return ▁""; ▁String ▁str ▁= ▁"& n =" ▁+ ▁n ; ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁ovOffsets . size (); ▁i ++) ▁{ ▁str ▁+= ▁"& ovOff " ▁+ ▁i ▁+ ▁" =" ▁+ ▁ovOffsets . get ( i ); ▁} ▁return ▁str ; ▁} ▁}