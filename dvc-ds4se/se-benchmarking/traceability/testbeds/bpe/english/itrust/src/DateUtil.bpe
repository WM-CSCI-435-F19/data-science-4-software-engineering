▁p ackage ▁edu . nc su . cs c . itrust ; ▁import ▁java . text . SimpleDateFormat ; ▁import ▁java . util . Calendar ; ▁import ▁java . util . Date ; ▁import ▁java . util . G regorianCalendar ; ▁/** ▁* ▁Provide s ▁a ▁f ew ▁extra ▁date ▁ util it ies ▁* ▁* ▁@ author ▁Andy ▁* ▁*/ ▁public ▁class ▁DateUtil ▁{ ▁public ▁static ▁final ▁long ▁YEAR _ IN _ MS ▁= ▁1000 L ▁* ▁60 L ▁* ▁60 L ▁* ▁24 L ▁* ▁365 L ; ▁/** ▁* ▁Returns ▁a ▁ MM / dd / yyyy ▁format ▁of ▁the ▁date ▁for ▁the ▁given ▁years ▁a go ▁* ▁* ▁@ param ▁years ▁* ▁@ return ▁*/ ▁public ▁static ▁String ▁yearsAgo ( long ▁years ) ▁{ ▁long ▁time ▁= ▁System . current Time M illi s (); ▁return ▁new ▁ SimpleDateFormat (" MM / dd / yyyy "). format ( new ▁Date ( time ▁- ▁years ▁* ▁YEAR _ IN _ MS )); ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁if ▁a ▁given ▁date ▁is ▁within ▁a ▁range ▁of ▁months ▁< st rong > IN C LU SIVE L Y </ st rong > , ▁a g no s tic ▁of ▁* ▁the ▁year . ▁< br ▁/> ▁* ▁< br ▁/> ▁* ▁* ▁The ▁range ▁" w rap s " ▁so ▁that ▁if ▁the ▁first ▁month ▁is ▁after ▁the ▁second ▁month , ▁then ▁the ▁definition ▁of ▁" is ▁in ▁* ▁month ▁range " ▁is :< br ▁/> ▁* ▁the ▁date ▁fall s ▁out side ▁of ▁secondMonth , ▁firstMonth , ▁but ▁includ ing ▁secondMonth ▁and ▁firstMonth . ▁* ▁* ▁Mo d ul ar ▁a ri th met ic ▁is ▁used ▁to ▁a d just ▁month ▁values ▁into ▁the ▁valid ▁range . ▁* ▁* ▁@ param ▁date ▁* ▁@ param ▁firstMonth ▁* ▁@ param ▁secondMonth ▁* ▁@ return ▁*/ ▁public ▁static ▁boolean ▁isInMonthRange ( java . util . Date ▁date , ▁int ▁firstMonth , ▁int ▁secondMonth ) ▁{ ▁Calendar ▁cal ▁= ▁new ▁G regorianCalendar (); ▁cal . setTime ( date ); ▁firstMonth ▁% = ▁12; ▁secondMonth ▁% = ▁12; ▁if ▁( second Month ▁>= ▁firstMonth ) ▁{ ▁return ▁( ( cal . get ( Calendar . MONTH ) ▁>= ▁firstMonth ) ▁&& ▁( cal . get ( Calendar . MONTH ) ▁< = ▁secondMonth )); ▁} ▁return ▁( ( cal . get ( Calendar . MONTH ) ▁>= ▁firstMonth ) ▁|| ▁( cal . get ( Calendar . MONTH ) ▁< = ▁secondMonth )); ▁} ▁/** ▁* ▁S ame ▁as ▁isInMonthRange ▁but ▁uses ▁the ▁current ▁date ▁as ▁the ▁date ▁value . ▁* ▁* ▁@ see ▁DateUtil # is InMonthRange ( Date , ▁int , ▁int ) ▁* ▁@ param ▁firstMonth ▁* ▁@ param ▁secondMonth ▁* ▁@ return ▁*/ ▁public ▁static ▁boolean ▁currently InMonthRange ( int ▁firstMonth , ▁int ▁secondMonth ) ▁{ ▁return ▁isInMonthRange ( new ▁Date (), ▁firstMonth , ▁secondMonth ); ▁} ▁/** ▁* ▁Returns ▁the ▁date ▁a ▁certain ▁number ▁of ▁years ▁a go ▁* ▁@ param ▁years ▁how ▁many ▁years ▁a go ▁* ▁@ return ▁the ▁date ▁it ▁was ▁how ever ▁many ▁years ▁a go ▁*/ ▁public ▁static ▁Date ▁ getDate X yearsAgo From Now ( int ▁years ) ▁{ ▁Calendar ▁cal ▁= ▁new ▁G regorianCalendar (); ▁cal . add ( Calendar . YEAR , ▁- year s ); ▁return ▁cal . getTime (); ▁} ▁/** ▁* ▁Returns ▁the ▁date ▁a ▁certain ▁number ▁of ▁years ▁a go ▁* ▁@ param ▁years ▁how ▁many ▁years ▁a go ▁* ▁@ return ▁the ▁date ▁it ▁was ▁how ever ▁many ▁years ▁a go ▁*/ ▁public ▁static ▁java . sql . Date ▁ getSQLdateX yearsAgo From Now ( int ▁years ) ▁{ ▁return ▁new ▁java . sql . Date ( getDate X yearsAgo From Now ( year s ) . getTime ()); ▁} ▁/** ▁* ▁Returns ▁the ▁date ▁a ▁certain ▁number ▁of ▁days ▁a go ▁* ▁@ param ▁days ▁how ▁many ▁days ▁a go ▁* ▁@ return ▁the ▁date ▁it ▁was ▁how ever ▁many ▁days ▁a go ▁*/ ▁public ▁static ▁Date ▁ getDate X Day sAgo From Now ( int ▁days ) ▁{ ▁Calendar ▁cal ▁= ▁new ▁G regorianCalendar (); ▁cal . add ( Calendar . DAY _ OF _ YEAR , ▁- days ); ▁return ▁cal . getTime (); ▁} ▁/** ▁* ▁Returns ▁the ▁date ▁a ▁certain ▁number ▁of ▁days ▁a go ▁* ▁@ param ▁days ▁how ▁many ▁days ▁a go ▁* ▁@ return ▁the ▁date ▁it ▁was ▁how ever ▁many ▁days ▁a go ▁*/ ▁public ▁static ▁java . sql . Date ▁ getSQLdateX Day sAgo From Now ( int ▁days ) ▁{ ▁return ▁new ▁java . sql . Date ( getDate X Day sAgo From Now ( days ) . getTime ()); ▁} ▁/** ▁* ▁<!-- P ass ▁in ▁IN STA NT IA TED ▁sql ▁date ▁object s ▁and ▁they ▁will ▁be ▁set ▁to ▁the ▁specified ▁range , ▁ ie , ▁FROM ▁* ▁< current ▁year > ▁- ▁yearsAgo 1 / monthValue 1 / 0 1 ▁ TO ▁< current ▁year > ▁- ▁yearsAgo 2 / monthValue 2 / < last ▁day ▁of ▁* ▁month 2> - -> ▁Pass ▁in ▁IN STA NT IA TED ▁sql ▁date ▁object s ▁and ▁they ▁will ▁be ▁set ▁to ▁the ▁specified ▁range , ▁ ie , ▁FROM ▁* ▁& lt ; current ▁year & gt ; ▁- ▁yearsAgo 1 / monthValue 1 / 0 1 ▁ TO ▁& lt ; current ▁year & gt ; ▁- ▁* ▁yearsAgo 2 / monthValue 2 / & lt ; last ▁day ▁of ▁month 2 & gt ; ▁* ▁* ▁@ param ▁month 1 ▁* ▁First ▁sql . Date ▁object ▁to ▁be ▁set ▁* ▁@ param ▁monthValue 1 ▁* ▁@ param ▁yearsAgo 1 ▁* ▁@ param ▁month 2 ▁* ▁Se c ond ▁sql . Date ▁object ▁to ▁be ▁set ▁* ▁@ param ▁monthValue 2 ▁* ▁@ param ▁yearsAgo 2 ▁*/ ▁public ▁static ▁void ▁set SQL Month R an ge ( java . sql . Date ▁month 1, ▁int ▁monthValue 1, ▁int ▁yearsAgo 1, ▁java . sql . Date ▁month 2 , ▁int ▁monthValue 2 , ▁int ▁yearsAgo 2) ▁{ ▁G regorianCalendar ▁cal ▁= ▁new ▁G regorianCalendar (); ▁cal . add ( Calendar . YEAR , ▁- yearsAgo 1); ▁cal . set ( Calendar . MONTH , ▁monthValue 1); ▁cal . set ( Calendar . DAY _ OF _ MONTH , ▁1); ▁month 1 . setTime ( cal . getTime InM illi s ()); ▁cal . add ( Calendar . YEAR , ▁yearsAgo 1); ▁cal . add ( Calendar . YEAR , ▁- yearsAgo 2 ); ▁cal . set ( Calendar . MONTH , ▁monthValue 2 ); ▁cal . set ( Calendar . DAY _ OF _ MONTH , ▁cal . getActual Maximum ( Calendar . DAY _ OF _ MONTH )); ▁month 2 . setTime ( cal . getTime InM illi s ()); ▁} ▁}