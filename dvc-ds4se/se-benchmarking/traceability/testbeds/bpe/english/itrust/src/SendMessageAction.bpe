▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . EmailUtil ; ▁import ▁edu . nc su . cs c . itrust . beans . Email ; ▁import ▁edu . nc su . cs c . itrust . beans . MessageBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PatientBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PersonnelBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . MessageDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . validate . EM ai l Validator ; ▁import ▁edu . nc su . cs c . itrust . validate . MessageValidator ; ▁/** ▁* ▁Class ▁for ▁Send Message . jsp . ▁* ▁*/ ▁public ▁class ▁S endMessageAction ▁{ ▁private ▁long ▁loggedInMID ; ▁private ▁EmailUtil ▁emailer ; ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁PersonnelDAO ▁personnelDAO ; ▁private ▁MessageDAO ▁messageDAO ; ▁private ▁TransactionDAO ▁transactionDAO ; ▁private ▁EMailValidator ▁ emailVal ; ▁private ▁ MessageValidator ▁ messVal ; ▁/** ▁* ▁Set s ▁up ▁defaults ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁user ▁send ing ▁the ▁message . ▁*/ ▁public ▁S endMessageAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . personnelDAO ▁= ▁factory . get PersonnelDAO (); ▁this . emailer ▁= ▁new ▁EmailUtil ( factory ); ▁this . message DAO ▁= ▁factory . get MessageDAO (); ▁this . transactionDAO ▁= ▁factory . get TransactionDAO (); ▁this . emailVal ▁= ▁new ▁EMailValidator (); ▁this . messVal ▁= ▁new ▁ MessageValidator (); ▁} ▁/** ▁* ▁Send s ▁a ▁message ▁* ▁* ▁@ param ▁mBean ▁message ▁to ▁be ▁sent ▁* ▁@ throw s ▁iTrustException ▁* ▁@ throw s ▁SQLException ▁*/ ▁public ▁void ▁ sendMessage ( MessageBean ▁mBean ) ▁throw s ▁iTrustException , ▁SQLException , ▁ FormValidat ionException ▁{ ▁ messVal . validate ( mBean ); ▁ emailVal . validate ( mBean ); ▁messageDAO . add Message ( mBean ); ▁Email ▁email ▁= ▁new ▁Email (); ▁String ▁senderName ; ▁String ▁fromEmail ; ▁email . set From (" no reply @ itrust . com "); ▁List < String > ▁toList ▁= ▁new ▁ArrayList < String > (); ▁if ▁( 8 999999999 L ▁< ▁mBean . get From () ▁&& ▁8 999999999 L ▁< ▁mBean . getTo ()){ ▁PersonnelBean ▁sender ▁= ▁personnelDAO . getPersonnel ( loggedInMID ); ▁PersonnelBean ▁receiver ▁= ▁personnelDAO . getPersonnel ( mBean . getTo ()); ▁toList . add ( receiver . getEmail ()); ▁senderName ▁= ▁sender . getF ullName (); ▁fromEmail ▁= ▁sender . getEmail (); ▁} else { ▁if ▁(6 999999999 L ▁< ▁mBean . get From ()) ▁{ ▁PersonnelBean ▁sender ▁= ▁personnelDAO . getPersonnel ( loggedInMID ); ▁if ▁(6 999999999 L ▁< ▁mBean . getTo ()) ▁{ ▁PersonnelBean ▁receiver ▁= ▁personnelDAO . getPersonnel ( mBean . getTo ()); ▁toList . add ( receiver . getEmail ()); ▁} ▁else ▁{ ▁PatientBean ▁receiver ▁= ▁patientDAO . getPatient ( mBean . getTo ()); ▁toList . add ( receiver . getEmail ()); ▁} ▁senderName ▁= ▁sender . getF ullName (); ▁fromEmail ▁= ▁sender . getEmail (); ▁} ▁else ▁{ ▁PatientBean ▁sender ▁= ▁patientDAO . getPatient ( loggedInMID ); ▁if ▁(6 999999999 L ▁< ▁mBean . getTo ()) ▁{ ▁PersonnelBean ▁receiver ▁= ▁personnelDAO . getPersonnel ( mBean . getTo ()); ▁toList . add ( receiver . getEmail ()); ▁} ▁else ▁{ ▁PatientBean ▁receiver ▁= ▁patientDAO . getPatient ( mBean . getTo ()); ▁toList . add ( receiver . getEmail ()); ▁} ▁senderName ▁= ▁sender . getF ullName (); ▁fromEmail ▁= ▁sender . getEmail (); ▁} ▁} ▁email . s etToList ( toList ); ▁email . set From ( fromEmail ); ▁email . set Subject ( String . format (" A ▁new ▁message ▁from ▁% s ", ▁senderName )); ▁email . s etBody ( String . format (" You ▁have ▁received ▁a ▁new ▁message ▁from ▁% s ▁in ▁iTrust . ▁To ▁view ▁it , ▁log ▁in ▁to ▁iTrust ▁and ▁go ▁to ▁\ " View ▁My ▁Messages \"" , ▁senderName )); ▁emailer . sendEmail ( email ); ▁transactionDAO . log Transaction ( TransactionType . SEND _ MESSAGE , ▁loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁the ▁patient ' s ▁name ▁* ▁* ▁@ param ▁mid ▁MI d ▁of ▁the ▁patient ▁* ▁@ return ▁the ▁name ▁of ▁the ▁patient ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁get PatientName ( long ▁mid ) ▁throw s ▁iTrustException ▁{ ▁return ▁patientDAO . getName ( mid ); ▁} ▁/** ▁* ▁Returns ▁the ▁personnel ' s ▁name ▁* ▁* ▁@ param ▁mid ▁MI d ▁of ▁the ▁personnel ▁* ▁@ return ▁the ▁name ▁of ▁the ▁personnel ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁getPersonnel Name ( long ▁mid ) ▁throw s ▁iTrustException ▁{ ▁return ▁personnelDAO . getName ( mid ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁the ▁patients ▁that ▁the ▁logged ▁in ▁HCP ▁represents ▁* ▁* ▁@ return ▁list ▁of ▁the ▁patients ▁that ▁the ▁logged ▁in ▁HCP ▁represents ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < PatientBean > ▁ getMy Representees () ▁throw s ▁iTrustException ▁{ ▁List < PatientBean > ▁representees ▁= ▁new ▁ArrayList < PatientBean > (); ▁try ▁{ ▁representees ▁= ▁patientDAO . get Represented ( loggedInMID ); ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁} ▁return ▁representees ; ▁} ▁/** ▁* ▁Returns ▁the ▁designated ▁HCPs ▁for ▁the ▁logged ▁in ▁patient . ▁* ▁* ▁@ return ▁designated ▁HCPs ▁for ▁the ▁logged ▁in ▁patient . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < PersonnelBean > ▁ getMy DLHCPs () ▁throw s ▁iTrustException ▁{ ▁return ▁get DLHCPs For ( loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁the ▁designated ▁HCPs ▁for ▁the ▁given ▁patient . ▁* ▁* ▁@ return ▁designated ▁HCPs ▁for ▁the ▁given ▁patient . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁List < PersonnelBean > ▁get DLHCPs For ( long ▁pid ) ▁throw s ▁iTrustException ▁{ ▁List < PersonnelBean > ▁dlhcps ▁= ▁new ▁ArrayList < PersonnelBean > (); ▁try ▁{ ▁dlhcps ▁= ▁patientDAO . getDeclaredHCP s ( pid ); ▁} ▁catch ▁( DBException ▁e ) ▁{ ▁e . print Stack T race (); ▁} ▁return ▁dlhcps ; ▁} ▁}