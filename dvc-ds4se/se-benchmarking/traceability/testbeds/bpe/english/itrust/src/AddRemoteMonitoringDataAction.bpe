▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁edu . nc su . cs c . itrust . beans . RemoteMonitoring DataBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AuthDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . RemoteMonitoring DAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . FormValidat ionException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁import ▁edu . nc su . cs c . itrust . validate . RemoteMonitoring DataBean Validator ; ▁/** ▁* ▁Handle s ▁adding ▁remote ▁monitoring ▁patient ▁data ▁to ▁the ▁database ▁* ▁*/ ▁public ▁class ▁Add RemoteMonitoring DataAction ▁{ ▁private ▁ RemoteMonitoring DataBean Validator ▁validator ▁= ▁new ▁ RemoteMonitoring DataBean Validator (); ▁private ▁ RemoteMonitoring DAO ▁rmDAO ; ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁AuthDAO ▁authDAO ; ▁private ▁long ▁loggedInMID ; ▁private ▁long ▁patientMID ; ▁/** ▁* ▁Constructor ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁person ▁record ing ▁the ▁patient ' s ▁data . ▁* ▁@ param ▁patientMID ▁The ▁MID ▁of ▁the ▁patient ▁*/ ▁public ▁Add RemoteMonitoring DataAction ( DAOFactory ▁factory , ▁long ▁loggedInMID , ▁long ▁patientMID ) ▁{ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . rmDAO ▁= ▁factory . get RemoteMonitoring DAO (); ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . authDAO ▁= ▁factory . get AuthDAO (); ▁this . patientMID ▁= ▁patientMID ; ▁} ▁/** ▁* ▁Add s ▁a ▁patients ▁remote ▁monitoring ▁data ▁to ▁the ▁database . ▁* ▁* ▁@ param ▁glucoseLevel ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁add RemoteMonitoring Data ( int ▁glucoseLevel ) ▁throw s ▁DBException , ▁ FormValidat ionException , iTrustException ▁{ ▁// Validation ▁- ▁Only ▁need ▁to ▁validate ▁the ▁thre e ▁integer ▁parameters ▁ RemoteMonitoring DataBean ▁m ▁= ▁new ▁ RemoteMonitoring DataBean (); ▁m . set G lucoseLevel ( glucoseLevel ); ▁m . set Diastolic BloodPressure ( 6 0 ); ▁m . set Systolic BloodPressure ( 6 0 ); ▁validator . validate ( m ); ▁m . set Diastolic BloodPressure ( -1 ); ▁m . set Systolic BloodPressure ( -1 ); ▁// Log ▁transaction ▁transDAO . log Transaction ( TransactionType . T ELE MEDIC INE _ MONITORING , ▁loggedInMID ); ▁String ▁role ; ▁if ▁( loggedInMID ▁== ▁patientMID ){ ▁role ▁= ▁" self - reported "; ▁} ▁else ▁if ▁( authDAO . getUserRole ( loggedInMID ) . getUserRole s String (). equals (" uap ")){ ▁role ▁= ▁" case - manager "; ▁} ▁else ▁{ ▁role ▁= ▁" patient ▁representative "; ▁} ▁// Store ▁in ▁DB ▁rmDAO . store PatientData ( patientMID , ▁glucoseLevel , ▁role , ▁loggedInMID ); ▁} ▁/** ▁* ▁Add s ▁a ▁patients ▁remote ▁monitoring ▁data ▁to ▁the ▁database . ▁* ▁* ▁@ param ▁systolic BloodPressure ▁* ▁@ param ▁diastolic BloodPressure ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁add RemoteMonitoring Data ( int ▁systolic BloodPressure , ▁int ▁diastolic BloodPressure ) ▁throw s ▁DBException , ▁ FormValidat ionException , iTrustException ▁{ ▁// Validation ▁- ▁Only ▁need ▁to ▁validate ▁the ▁thre e ▁integer ▁parameters ▁ RemoteMonitoring DataBean ▁m ▁= ▁new ▁ RemoteMonitoring DataBean (); ▁m . set Systolic BloodPressure ( systolic BloodPressure ); ▁m . set Diastolic BloodPressure ( diastolic BloodPressure ); ▁validator . validate ( m ); ▁// Log ▁transaction ▁transDAO . log Transaction ( TransactionType . T ELE MEDIC INE _ MONITORING , ▁loggedInMID ); ▁String ▁role ; ▁if ▁( loggedInMID ▁== ▁patientMID ){ ▁role ▁= ▁" self - reported "; ▁} ▁else ▁if ▁( authDAO . getUserRole ( loggedInMID ) . getUserRole s String (). equals (" uap ")){ ▁role ▁= ▁" case - manager "; ▁} ▁else ▁{ ▁role ▁= ▁" patient ▁representative "; ▁} ▁// Store ▁in ▁DB ▁rmDAO . store PatientData ( patientMID , ▁systolic BloodPressure , ▁diastolic BloodPressure , ▁role , ▁loggedInMID ); ▁} ▁/** ▁* ▁Add s ▁a ▁patients ▁remote ▁monitoring ▁data ▁to ▁the ▁database . ▁* ▁* ▁@ param ▁systolic BloodPressure ▁* ▁@ param ▁diastolic BloodPressure ▁* ▁@ param ▁glucoseLevel ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁void ▁add RemoteMonitoring Data ( int ▁systolic BloodPressure , ▁int ▁diastolic BloodPressure , ▁int ▁glucoseLevel ) ▁throw s ▁DBException , ▁ FormValidat ionException , iTrustException ▁{ ▁// Validation ▁- ▁Only ▁need ▁to ▁validate ▁the ▁thre e ▁integer ▁parameters ▁ RemoteMonitoring DataBean ▁m ▁= ▁new ▁ RemoteMonitoring DataBean (); ▁m . set Systolic BloodPressure ( systolic BloodPressure ); ▁m . set Diastolic BloodPressure ( diastolic BloodPressure ); ▁m . set G lucoseLevel ( glucoseLevel ); ▁validator . validate ( m ); ▁// Log ▁transaction ▁transDAO . log Transaction ( TransactionType . T ELE MEDIC INE _ MONITORING , ▁loggedInMID ); ▁String ▁role ; ▁if ▁( loggedInMID ▁== ▁patientMID ){ ▁role ▁= ▁" self - reported "; ▁} ▁else ▁if ▁( authDAO . getUserRole ( loggedInMID ) . getUserRole s String (). equals (" uap ")){ ▁role ▁= ▁" case - manager "; ▁} ▁else ▁{ ▁role ▁= ▁" patient ▁representative "; ▁} ▁// Store ▁in ▁DB ▁rmDAO . store PatientData ( patientMID , ▁systolic BloodPressure , ▁diastolic BloodPressure , ▁glucoseLevel , ▁role , ▁loggedInMID ); ▁} ▁/** ▁* ▁return s ▁the ▁patient ▁name ▁* ▁* ▁@ return ▁patient ▁name ▁* ▁@ throw s ▁DBException ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁String ▁get PatientName ( long ▁pid ) ▁throw s ▁DBException , ▁iTrustException ▁{ ▁return ▁authDAO . getUserName ( pid ); ▁} ▁}