▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . util . List ; ▁import ▁edu . nc su . cs c . itrust . beans . PersonnelBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . AuthDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . Role ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Used ▁by ▁the ▁patient ▁to ▁declare ▁HCPs ▁as ▁" designated ", ▁in ▁edit HCP s . jsp . ▁* ▁* ▁@ author ▁Andy ▁Men e ely ▁* ▁*/ ▁public ▁class ▁ DeclareHCPAction ▁{ ▁private ▁TransactionDAO ▁transDAO ; ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁AuthDAO ▁authDAO ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁Set s ▁up ▁defaults ▁* ▁* ▁@ param ▁factory ▁The ▁DAO ▁factory ▁to ▁be ▁used ▁for ▁generat ing ▁the ▁DAOs ▁for ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁* ▁This ▁patient ▁* ▁@ author ▁Andy ▁Men e ely ▁*/ ▁public ▁ DeclareHCPAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁{ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . transDAO ▁= ▁factory . get TransactionDAO (); ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . authDAO ▁= ▁factory . get AuthDAO (); ▁} ▁/** ▁* ▁List s ▁the ▁declared ▁HCPs ▁for ▁this ▁current ▁patient ▁* ▁* ▁@ return ▁Returns ▁a ▁list ▁of ▁the ▁declared ▁HCPs ▁* ▁@ throw s ▁iTrustException ▁* ▁@ author ▁Andy ▁Men e ely ▁*/ ▁public ▁List < PersonnelBean > ▁ getDeclaredHCP S () ▁throw s ▁iTrustException ▁{ ▁return ▁patientDAO . getDeclaredHCP s ( loggedInMID ); ▁} ▁/** ▁* ▁Validate ▁an ▁HCP ' s ▁MID ▁and ▁declare ▁them , ▁if ▁possible ▁* ▁* ▁@ param ▁hcp Str ▁* ▁The ▁MID ▁of ▁an ▁HCP ▁to ▁declare ▁* ▁@ return ▁A ▁status ▁message , ▁* ▁@ throw s ▁iTrustException ▁* ▁@ author ▁Andy ▁Men e ely ▁*/ ▁public ▁String ▁declare HCP ( String ▁hcp Str ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁hcpID ▁= ▁Long . value Of ( hcp Str ); ▁if ▁( authDAO . getUserRole ( hcpID ) ▁ != ▁Role . HCP ) ▁throw ▁new ▁iTrustException (" This ▁user ▁is ▁not ▁a ▁l ice n s ed ▁health ca re ▁professional ! "); ▁boolean ▁confirm ▁= ▁patientDAO . d eclareHCP ( loggedInMID , ▁hcpID ); ▁if ▁( confirm ) ▁{ ▁transDAO . log Transaction ( TransactionType . DE CLA RE _ HCP , ▁loggedInMID , ▁hcpID , ▁" patient ▁declared ▁hcp "); ▁return ▁" HCP ▁successfully ▁declared "; ▁} ▁else ▁return ▁" HCP ▁not ▁declared "; ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁throw ▁new ▁iTrustException (" HCP ' s ▁MID ▁not ▁a ▁number "); ▁} ▁} ▁/** ▁* ▁Validate ▁an ▁HCP ' s ▁MID ▁and ▁undeclare ▁them , ▁if ▁possible ▁* ▁* ▁@ param ▁input ▁* ▁The ▁MID ▁of ▁an ▁HCP ▁to ▁undeclare ▁* ▁@ return ▁* ▁@ throw s ▁iTrustException ▁* ▁@ author ▁Andy ▁Men e ely ▁*/ ▁public ▁String ▁undeclare HCP ( String ▁input ) ▁throw s ▁iTrustException ▁{ ▁try ▁{ ▁long ▁hcpID ▁= ▁Long . value Of ( input ); ▁boolean ▁confirm ▁= ▁patientDAO . undeclare HCP ( loggedInMID , ▁hcpID ); ▁if ▁( confirm ) ▁{ ▁transDAO . log Transaction ( TransactionType . DE CLA RE _ HCP , ▁loggedInMID , ▁hcpID , ▁" patient ▁undeclared ▁hcp "); ▁return ▁" HCP ▁successfully ▁undeclared "; ▁} ▁else ▁return ▁" HCP ▁not ▁undeclared "; ▁} ▁catch ▁( NumberFormat Exception ▁e ) ▁{ ▁throw ▁new ▁iTrustException (" HCP ' s ▁MID ▁not ▁a ▁number "); ▁} ▁} ▁}