▁p ackage ▁edu . nc su . cs c . itrust . action ; ▁import ▁java . io . Serializable ; ▁import ▁java . util .* ; ▁import ▁edu . nc su . cs c . itrust . beans . DiagnosisBean ; ▁import ▁edu . nc su . cs c . itrust . beans . HCPDiagnosisBean ; ▁import ▁edu . nc su . cs c . itrust . beans . OfficeVisitBean ; ▁import ▁edu . nc su . cs c . itrust . beans . PrescriptionBean ; ▁import ▁edu . nc su . cs c . itrust . beans . MedicationBean ; ▁import ▁edu . nc su . cs c . itrust . beans . SurveyBean ; ▁import ▁edu . nc su . cs c . itrust . beans . LabProcedureBean ; ▁import ▁edu . nc su . cs c . itrust . dao . DAOFactory ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PatientDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . TransactionDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . OfficeVisitDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . SurveyDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . PersonnelDAO ; ▁import ▁edu . nc su . cs c . itrust . dao . mysql . LabProcedureDAO ; ▁import ▁edu . nc su . cs c . itrust . enums . TransactionType ; ▁import ▁edu . nc su . cs c . itrust . exception . DBException ; ▁import ▁edu . nc su . cs c . itrust . exception . iTrustException ; ▁/** ▁* ▁Edit s ▁the ▁ privacy ▁levels ▁of ▁diagnoses , ▁used ▁by ▁my Diagnoses . jsp ▁* ▁* ▁@ author ▁ laure nha y ward ▁* ▁*/ ▁public ▁class ▁M yDiagnosisAction ▁{ ▁private ▁OfficeVisitDAO ▁officeVisitDAO ; ▁private ▁PatientDAO ▁patientDAO ; ▁private ▁PersonnelDAO ▁personnelDAO ; ▁private ▁SurveyDAO ▁surveyDAO ; ▁private ▁TransactionDAO ▁transactionDAO ; ▁private ▁LabProcedureDAO ▁ labprocDAO ; ▁private ▁long ▁loggedInMID ; ▁/** ▁* ▁Set ▁up ▁for ▁defaults ▁* ▁* ▁@ param ▁factory ▁The ▁DAOFactory ▁used ▁to ▁create ▁the ▁DAOs ▁used ▁in ▁this ▁action . ▁* ▁@ param ▁loggedInMID ▁The ▁MID ▁of ▁the ▁user ▁who ▁is ▁look ing ▁at ▁the ir ▁diagnoses . ▁* ▁@ throw s ▁iTrustException ▁*/ ▁public ▁M yDiagnosisAction ( DAOFactory ▁factory , ▁long ▁loggedInMID ) ▁throw s ▁iTrustException ▁{ ▁this . loggedInMID ▁= ▁loggedInMID ; ▁this . patientDAO ▁= ▁factory . get PatientDAO (); ▁this . officeVisit DAO ▁= ▁factory . get OfficeVisitDAO (); ▁this . personnelDAO ▁= ▁factory . get PersonnelDAO (); ▁this . surveyDAO ▁= ▁factory . get SurveyDAO (); ▁this . transactionDAO ▁= ▁factory . get TransactionDAO (); ▁this . labprocDAO ▁= ▁factory . get LabProcedureDAO (); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁DiagnosisBean s ▁for ▁the ▁patient ▁* ▁* ▁@ return ▁the ▁list ▁of ▁DiagnosisBean s ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < DiagnosisBean > ▁getDiagnose s () ▁throw s ▁DBException ▁{ ▁return ▁patientDAO . getDiagnose s ( loggedInMID ); ▁} ▁/** ▁* ▁Returns ▁a ▁list ▁of ▁all ▁the ▁HCPs ▁who ▁have ▁a ▁particular ▁diagnosis ▁* ▁* ▁@ param ▁icdcode ▁the ▁diagnosis ▁of ▁interest ▁* ▁@ return ▁the ▁list ▁of ▁HCPs ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < HCPDiagnosisBean > ▁getHCP By Diagnosis ( String ▁icdcode ) ▁throw s ▁DBException ▁{ ▁int ▁ medMatch ▁= ▁0; ▁HashMap < Long , ▁ HCPDiagnosisBean > ▁ hcpHash ▁= ▁new ▁HashMap < Long , ▁ HCPDiagnosisBean > (); ▁HashMap < Long , ▁Long > ▁ patientHash ▁= ▁new ▁HashMap < Long , ▁Long > (); ▁transactionDAO . log Transaction ( TransactionType . FI ND _ HCP S _ WITH _ E XP , ▁loggedInMID ); ▁ HCPDiagnosisBean ▁diag ▁= ▁null ; ▁List < OfficeVisitBean > ▁beans ▁= ▁officeVisitDAO . getAll OfficeVisitsFor Diagnosis ( icdcode ); ▁for ▁( OfficeVisitBean ▁bean : ▁beans ) ▁{ ▁// ▁check ▁for ▁HCP - Patient ▁local ity ▁based ▁on ▁first ▁3 ▁digits ▁in ▁ Z IP ▁if ▁(! patientDAO . getPatient ( loggedInMID ) . getZip 1() . substring (0, ▁2) . ▁equals ( personnelDAO . getPersonnel ( bean . getHcp ID ()). getZip 1() . substring (0, ▁2))) ▁continue ; ▁// ▁Check ▁to ▁see ▁if ▁we ▁already ▁have ▁a ▁bean ▁for ▁the ▁HCP ▁associate d ▁with ▁this ▁visit ▁if ▁( hcpHash . contains Key ( bean . getHcp ID ())) ▁{ ▁diag ▁= ▁( HCPDiagnosisBean ) hcpHash . get ( bean . getHcp ID ()); ▁for ▁( PrescriptionBean ▁p : ▁bean . getPrescriptions ()) ▁{ ▁List < MedicationBean > ▁mlist ▁= ▁diag . get Med List (); ▁for ▁( MedicationBean ▁b : ▁mlist ) ▁{ ▁if ▁( p . get Medication (). get Description (). equals ( b . get Description ())) ▁ medMatch ++; ▁} ▁if ▁( medMatch ▁== ▁0) ▁{ ▁mlist . add ( p . get Medication ()); ▁diag . set Med List ( m list ); ▁} ▁else ▁{ ▁ medMatch ▁= ▁0; ▁} ▁} ▁// ▁Get ▁Lab ▁Procedures ▁List < LabProcedureBean > ▁ labproc s ▁= ▁diag . getLab List (); ▁List < LabProcedureBean > ▁l p beans ▁= ▁ labprocDAO . getAll LabProceduresFor Doc OV ( bean . get VisitID ()); ▁for ▁( LabProcedureBean ▁p : ▁l p beans ) ▁{ ▁ labproc s . add ( p ); ▁} ▁diag . set Lab List ( labproc s ); ▁if ▁( surveyDAO . is Survey Completed ( bean . get VisitID ())) ▁{ ▁SurveyBean ▁survey ▁= ▁surveyDAO . getSurveyDat a ( bean . get VisitID ()); ▁diag . setVisitSat ( survey . getVisit Satisfaction ()); ▁diag . setTreatmentSat ( survey . get Treatment Satisfaction ()); ▁} ▁// ▁Check ▁if ▁this ▁patient ▁has ▁been ▁see n ▁multiple ▁time s ▁for ▁this ▁diagnosis ▁if ▁(! patientHash . contains Key ( bean . getPatientID ())) ▁{ ▁ patientHash . put ( bean . getPatientID (), ▁bean . getHcp ID ()); ▁diag . inc NumPatient s (); ▁} ▁} ▁else ▁{ ▁diag ▁= ▁new ▁ HCPDiagnosisBean (); ▁List < MedicationBean > ▁mlist ▁= ▁new ▁ArrayList < MedicationBean > (); ▁diag . setHCP ( bean . getHcp ID ()); ▁try ▁{ ▁diag . set HCPName ( personnelDAO . getName ( bean . getHcp ID ()) ); ▁} ▁catch ▁( iTrustException ▁e ) ▁{ ▁diag . set HCPName (" null "); ▁} ▁diag . inc NumPatient s (); ▁for ▁( PrescriptionBean ▁p : ▁bean . getPrescriptions ()) ▁{ ▁mlist . add ( p . get Medication ()); ▁} ▁diag . set Med List ( m list ); ▁diag . set Lab List ( labprocDAO . getAll LabProceduresFor Doc OV ( bean . get VisitID ()) ); ▁if ▁( surveyDAO . is Survey Completed ( bean . get VisitID ())) ▁{ ▁SurveyBean ▁survey ▁= ▁surveyDAO . getSurveyDat a ( bean . get VisitID ()); ▁diag . setVisitSat ( survey . getVisit Satisfaction ()); ▁diag . setTreatmentSat ( survey . get Treatment Satisfaction ()); ▁} ▁ patientHash . put ( bean . getPatientID (), ▁bean . getHcp ID ()); ▁ hcpHash . put ( bean . getHcp ID (), ▁diag ); ▁} ▁} ▁List < HCPDiagnosisBean > ▁list ▁= ▁new ▁ArrayList < HCPDiagnosisBean > ( hcpHash . values ()); ▁Col lections . sort ( list , ▁new ▁ HCPDiagnosisBean Comparator () ▁ ); ▁return ▁list ; ▁} ▁/** ▁* ▁Look s ▁up ▁all ▁the ▁prescriptions ▁given ▁by ▁a ▁certain ▁HCP ▁with ▁the ▁same ▁ICD ▁code . ▁* ▁@ param ▁hcpid ▁The ▁MID ▁of ▁the ▁HCP ▁* ▁@ param ▁icdcode ▁The ▁ICD ▁code ▁of ▁the ▁prescription ▁we ▁are ▁look ing ▁up . ▁* ▁@ return ▁A ▁java . util . List ▁of ▁ PrescriptionBean s ▁made ▁by ▁this ▁HCP ▁of ▁this ▁ICD ▁code . ▁* ▁@ throw s ▁DBException ▁*/ ▁public ▁List < PrescriptionBean > ▁getPrescription sBy HCP And ICD ( long ▁hcpid , ▁String ▁icdcode ) ▁throw s ▁DBException ▁{ ▁List < PrescriptionBean > ▁list ▁= ▁new ▁ArrayList < PrescriptionBean > (); ▁List < OfficeVisitBean > ▁ov s ▁= ▁officeVisitDAO . getAll OfficeVisitsFor Diagnosis ( icdcode ); ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁ov s . size (); ▁i ++) ▁{ ▁if ▁( ov s . get ( i ) . getHcp ID () ▁== ▁hcpid ) ▁{ ▁list . addAll ( ov s . get ( i ) . getPrescriptions ()); ▁} ▁} ▁return ▁list ; ▁} ▁/** ▁* ▁Check s ▁to ▁see ▁what ▁HCP ▁has ▁had ▁the ▁most ▁expe r ience ▁with ▁a ▁diagnosis ▁* ▁*/ ▁static ▁class ▁ HCPDiagnosisBean Comparator ▁implement s ▁ Comparator < HCPDiagnosisBean > , ▁Serializable ▁{ ▁private ▁static ▁final ▁long ▁serial Version UID ▁= ▁- 6 32 83 903 86 68 402 29 34 L ; ▁/** ▁* ▁ Comp a re s ▁one ▁HCP ▁with ▁another ▁* ▁* ▁@ param ▁a ▁the ▁first ▁HCP ▁* ▁@ param ▁b ▁the ▁second ▁HCP ▁* ▁@ return ▁-1 ▁if ▁a ▁has ▁had ▁more ▁patients , ▁1 ▁if ▁b ▁has ▁had ▁more ▁patients ; ▁otherwise ▁0 ▁*/ ▁public ▁int ▁compare ( HCPDiagnosisBean ▁a , ▁ HCPDiagnosisBean ▁b ) ▁{ ▁int ▁ret ▁= ▁0; ▁if ▁( a . getNumPatient s () ▁> ▁b . getNumPatient s ()) ▁ret ▁= ▁-1; ▁else ▁if ▁( a . getNumPatient s () ▁< ▁b . getNumPatient s ()) ▁ret ▁= ▁1; ▁return ▁ret ; ▁} ▁} ▁}