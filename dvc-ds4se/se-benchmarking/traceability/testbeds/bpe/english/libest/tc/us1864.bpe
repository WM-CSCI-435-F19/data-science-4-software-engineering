▁/* -- ---------------- ---------------- ---------------- ---------------- ▁* ▁us 1864 . c ▁- ▁ Unit ▁Test s ▁for ▁User ▁Stor y ▁ 1864 ▁- ▁E nable ▁Token ▁Auth ▁mode ▁in ▁server ▁* ▁* ▁March , ▁2015 ▁* ▁* ▁Copy right ▁( c ) ▁2015 , ▁2016 ▁by ▁ cisco ▁S ystems , ▁Inc . ▁* ▁All ▁ right s ▁ reserved . ▁* -- ---------------- ---------------- ---------------- ---------------- ▁*/ ▁# include ▁ < std io . h > ▁# if n def ▁W IN 32 ▁# include ▁ < uni std . h > ▁# endif ▁# include ▁ < est . h > ▁# include ▁ < curl / curl . h > ▁# include ▁" curl _ util s . h " ▁# include ▁" test _ util s . h " ▁# include ▁" st _ server . h " ▁# include ▁ < openssl / ssl . h > ▁# if def ▁HA VE _ C UNIT ▁# include ▁" CUnit / Basic . h " ▁# include ▁" CUnit / A utomat ed . h " ▁# endif ▁# include ▁ < errno . h > ▁static ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁static ▁int ▁cacerts _ len ▁= ▁0; ▁# define ▁US 1864_ TCP _ PORT ▁ 29001 ▁/* ▁* ▁The ▁following ▁CSR ▁was ▁ generated ▁using ▁the ▁following ▁openssl ▁command ▁and ▁the ng ▁* ▁using ▁cat ▁on ▁the ▁rsa . req ▁file : ▁* ▁* ▁openssl ▁req ▁- new key ▁rsa : 2048 ▁- key out ▁rsa key . pem ▁- key form ▁PEM ▁- out ▁rsa . req ▁- out form ▁PEM ▁*/ ▁# define ▁US 1864_ PKCS 10_ RSA 2048 ▁" MIIC v TCCAa U CAQAw e DEL MAkG A 1 UEB h MCV VM x CzA J BgNVBA g MAk 5 DM Qw wC gYDVQQ H \ nDANSVFAxE j AQ BgNVBAoMC VJ TQW Nl cn Rj bz EM MA oGA 1 UEC wwD cnN h MR AwDgYDV QQD \ nDA d yc 2 EgZG 9 lMR o wGA YJKoZIhvcNAQkBFg ty c 2 FA ZG 9 l Lm Nvb T CCASIwDQYJKoZI \ n hvcNAQEBBQADgg EPADCCAQoCggEBA N 6 pC TB rK 7 T 0 29 Bg a nq 0 QH XH y NL 8 op v xc 7 JY \ n Xa Qz 39 R 3 J 9 BoB E 72 XZ 0 QX sB tU EY GNh HO La IS ASN zs 2 ZK Wp vM HJ W mP YN t 39 OC i 48 Y \ n FO gL Db An 83 mA OK Sf c ML bi bC c sh 4 HO l haa F rWs kRT As ew 16 MU Oz Fu 6 vB kw / A hI 82 J \ nK PY ws 0 dY Ox uW FI gE 1 HL + m / gpl bz q 7 Fr BI d rq k NL + dd gy Xo Dd 5 Nu LM JG DAK 7 vB 1 Ww \ n 9/ Ba w /6 Ai 9 V 5 ps ye 1 v 8 f WD r 6 HW 2 gg 9 X n VtM wB 4 pC g 1 rl 1 l SY stum T GY bM 6 cx Jy we \ nL uM nD jj 1 Zw D sZ 1 wI Xa BA XZa x EIS / rX OX 0 H nZ MT ef xY / gp Fk 1 Kv 0 CAwEAAa AAMA 0 G \ n CS qGS Ib 3 DQEBBQUA A 4 IBAQB 6 r Iw Nj E 8 l 8 jF KR 1 hQ / qe Sv ee / bAQ a 58 Ru fZ 4 US Ku K \ nl si h 7 UC f 8 b kQ vg lj nh s c Qu cz Ibn Jz eq EP qS dn om FW 6 Cv Mc / ah + Qf X 87 FG Y xJ gp wF \ n ut nU if j Di Zh rW gf / jN N bt H rke cw / Z ex 4 sZ / HC 127 j tE 3 cy E kD srA 1 oB xYR Cq 93 tC \ nW 2 q 9 PL Vm Ll yjc Z cS 1 KH VD 2 n ya 79 kfS 0 Y GM ocs w 1 Ge l VL 2 iz / oca yA S 5 GB 9 Y 2 s E Bw \ nR kC aY Zw 6 v hj 5 qj p CU zJ 3 E 8 Cl 3 VD 4 Kp i 3 j 3 bZGD JA 9 md md 8 j 5 Zy PY 56 e Au xa rW ssD \ n ci UM / h 6 E 99 w 3 tm rU Zb Ll jk jJ 7 pBX Rn ont gm 5 WZ mQ FH 4 X " ▁# define ▁US 1864_ PKCS 10_ 4096 _ REQ ▁" MIIE Z jCCA k 4 CAQAw IT EP MA 0 GA 1 UEAww GS kp U ZXN 0 MQ 4 wDAYDVQQ F EwU wMD AwMT CC \ n Ai IwDQYJKoZI hvcNAQEBBQADgg I PADCCA g oCgg IBA Lf LlH x qz Ob i K WD fX 8 sa Z 4 l 3 \ n 1 Jy rCP 4 xm yQ it Y 2 pI IGl Lv HT 7 t 1 WZ 0 LO 9 uo 0 uB 7 b /8 iG bX ki 8 Fg qS m 1 j RO e 5 lw CN \ nD Ih TJ dG 4 b 70 5 c 6 X mD 3 Mh 43 6 De 9 d 4 gz pj edA 2 q ur SI 9+ GV NV gU 0 Z OWJ Fu 9 g + y 3 i RH \ ndf s jO 9 u 0 E 2 Mf ZW WR 8 M 72 gB qz vb DD PN 4 BDw La 9 T kQ 2 Rsx f 3 h 2 d 7 bN 2 DNS h NS YX / d E \ n IX 89 d 9 uC 6 F eg s HQ xH IN UO dZ ze An 3 yu QM BU + F wo h El 9 Ub 8 Qu 9 gu b 2 MJ Ur YN RQ ni i 7\ ndu vq 5 / Uj khj NW zI h 7 LA b d aM +0 w Sm Ce 0 ju + wK ba yU ZZ kr qo VK 6 b WZ zF s 4 dY t n 95/ S \ n VV Ov 95 MD 5 D 1 E ok Xw 3 Ii h 7 GR Jy g tW n 5 e 4 / YO 68 LON BF 7 UE 24 vg Bw Eie F 6 J 0 b FA l xw \ n 15 s 7 pI alk GF 7 CU bit Rhb B 3 kT jG fU DR 8 Y pS sKd qx HN mW B XY 7 Z Vk 4 T 8 K 7 168 c NW SOL \ net Zp Tk 4 B to U JBn WP 8 Uq 38 YO i 63 89 U 24 gm ZtG pS pJ EE t Dy 1 MJ 8 Ha 4 PZ E / Vk Ft mU Wq \ n bE TOx 2 ku bGw c 9 v X vW fi 5 Bx E 2 Vv et GNs y 2 E QE ZP Vw s c Ya Cy 0 / yO 3 fu 06 coE tr 7 Ek r \ ng ap DDE zV ti P 9 N Pe 5 q 18 A zu + T 9 ngo Ox 3 Pq rCP G 1 BD N 6 z 1 Ue 2 tS Dd Ox KN FM NM wq YI n \ n ZP 9 MX h + tz 8 RaK vs cl v 9 J AgMBAAGg AD ANBgkq hk iG 9 w 0 BAQUFAAOCA gEA JM wZ 4 I UB \ n US H 5 wQ Bf s YT 4 Sx tKs Zt v un 6 QX 0 +7 j NM tz zQ U Oq O 79 Kx / D Kp zs Kx L Nv HK mF qc xA 7 g \ ng bE w Xk AP 5+ Va MD 92 Dg hcN jX Oq GK cl Zd m Gj 2 o RE qZ wz vT DR o 4 zP 1 yen 5 vg L / Yz 7 SA \ n x ze 8 wP g 2 W hlV 9+ qv kV Cp HN 3 E UI fO + rBg i 2 re o / vF 7 xq 5 CA U 4 U tQ 1 h 4 g Hax 67 Y ww 8\ n Jm y py GG a 0 ad 0 Z 8 ru ic lI / Qt lu AD Ux y 1 YM 0 Up 2 FC 0 s 7 j 72 xz r Rp El 1 f Pl Oi / b Fa Zp \ n sr 4 z ll O pw nR d xv ff XO 7 gXt XV I r 4 I HV HN Wj 6 km Dz yk 0 ov at 2 M s 5 aGU c MD N 6 Jm 8 K IB \ n NB VH 5 Fg k BV QOP S n gkw nE Oj 0 R sa K SxT 5 E fmO xm 9 pC r AE 3 r N d VO gO 4 t 8 wZ 6 DQ Uq ye / \ n BU dm gXt W oG s KI g 8 oR 5 HA W BER 8 yw / qd i Rl BG gN / PK Zd p mYI 2 TE fZ vp / nX wG 7 Q Lj Gx \ n s j 5 T We R KN gg hUC u 3 uF +1 s 0 R + gq gY 1 S 9 Gg iD S if L 7+ h + b XJ 4 nc yRG q + XP n rf Mi Rk B \ n eS yv 3 ky Ix t Zf AB 6 T jk Ub tV fo 2 Kr fq N xu 4 lb JY E 2 b 6 h s 1 L 6 t 7 YP h ju bz 9 a ES 7 w ES 7\ nk + ZZ PZ n / k / Gs qU ps WH n EFE vi 5 C 5 WP rn pv VN 6 rK h 0 fB + Au kGr S +9 EK 4 KN ZW fV / yf 8\ nX N 5 qW yO t gd 4 oL UU s gF DJ s qN h 6 A 1 ml mx 6 C nY =\ n " ▁# define ▁US 1864_ ENROLL _ URL _ BA ▁" http s ://127.0.0.1:290 01/ . well - known / est / simpleenroll " ▁# define ▁US 1864_ PKCS 10_ CT ▁" Content - Type : ▁application / pkcs 10" ▁# define ▁US 1864_ UIDPWD _ GOOD ▁" estuser : estpwd " ▁# if n def ▁W IN 32 ▁# define ▁US 1864_ CACERTS ▁" CA / estCA / cacert . crt " ▁# define ▁US 1864_ CACERT ▁" CA / estCA / cacert . crt " ▁# define ▁US 1864_ TRUSTED _ CERT ▁" CA / trustedcerts . crt " ▁# define ▁US 1864_ SERVER _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 1864_ SERVER _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 1864_ CLIENT _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 1864_ CLIENT _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁# else ▁# define ▁US 1864_ CACERTS ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 1864_ CACERT ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 1864_ TRUSTED _ CERT ▁" CA \\ trustedcerts . crt " ▁# define ▁US 1864_ SERVER _ CERT ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# define ▁US 1864_ SERVER _ KEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# define ▁US 1864_ CLIENT _ CERT ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# define ▁US 1864_ CLIENT _ KEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# endif ▁/* ▁* ▁curl _ data _ cb ▁is ▁passed ▁to ▁Curl ▁and ▁will ▁be ▁called ▁from ▁Curl ▁when ever ▁data ▁* ▁has ▁been ▁received , ▁or ▁if ▁this ▁function ▁has ▁been ▁specified ▁to ▁retrieve ▁the ▁* ▁http ▁headers . ▁In ▁this ▁test ▁it ' s ▁used ▁to ▁retrieve ▁the ▁http ▁headers ▁and ▁* ▁look ▁for ▁the ▁" bearer " ▁token ▁Authorization ▁challenge . ▁*/ ▁static ▁int ▁bearer _ found ▁= ▁0; ▁static ▁size _ t ▁curl _ data _ cb ▁( void ▁* ptr , ▁size _ t ▁size , ▁size _ t ▁nmemb , ▁void ▁* user data ) ▁{ ▁void ▁* ▁rc ; ▁if ▁( bearer _ found ▁ == ▁0) ▁{ ▁/* ▁* ▁WARNING : ▁strstr ▁can ▁be ▁da nger ous ▁because ▁it ▁assume s ▁null ▁terminated ▁* ▁strings . ▁In ▁this ▁case ▁the ▁http ▁headers ▁ca me ▁from ▁EST ▁server ▁and ▁we ▁* ▁know ▁they ▁are ▁null ▁terminated ▁*/ ▁rc ▁= ▁strstr ( ptr , ▁" W WW - Authenticate : ▁Bearer "); ▁if ▁( rc ) ▁{ ▁bearer _ found ▁= ▁1; ▁} ▁} ▁return ▁size ▁* ▁nmemb ; ▁} ▁static ▁void ▁us 1864_ clean ▁( void ) ▁{ ▁} ▁static ▁int ▁us 1864_ start _ server ▁( int ▁manual _ enroll , ▁int ▁nid ) ▁{ ▁int ▁rv ; ▁rv ▁= ▁st _ start ( US 1864_ TCP _ PORT , ▁US 1864_ SERVER _ CERT , ▁US 1864_ SERVER _ KEY , ▁" US 1864 ▁test ▁realm ", ▁US 1864_ CACERTS , ▁US 1864_ TRUSTED _ CERT , ▁" CA / est Example CA . cnf ", ▁manual _ enroll , ▁0, ▁nid ); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁initialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁allocate ▁data ▁or ▁open ▁any ▁* ▁resource s ▁required ▁for ▁all ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 1864_ init _ suite ▁( void ) ▁{ ▁int ▁rv ; ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 1864_ CACERTS , ▁& cacerts ); ▁if ▁( cacerts _ len ▁ < = ▁0) ▁{ ▁return ▁1; ▁} ▁us 1864_ clean (); ▁/* ▁* ▁Start ▁an ▁instance ▁of ▁the ▁EST ▁server ▁with ▁* ▁automatic ▁enrollment ▁enabled . ▁*/ ▁rv ▁= ▁us 1864_ start _ server ( 0 , ▁0); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁uninitialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁de allocate ▁data ▁or ▁close ▁any ▁* ▁resource s ▁that ▁we re ▁used ▁for ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 1864_ destroy _ suite ▁( void ) ▁{ ▁st _ stop (); ▁free ( cacerts ); ▁return ▁0; ▁} ▁/* ▁* ▁est _ server _ set _ auth _ mode () ▁- ▁ unit ▁test ▁* ▁* ▁First , ▁Test ▁the ▁parameters ▁of ▁est _ server _ set _ auth _ mode () ▁*/ ▁static ▁void ▁us 1864_ test 1 ▁( void ) ▁{ ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁BIO ▁* certin , ▁* keyin ; ▁X 509 ▁* x ; ▁E VP _ PKEY ▁* ▁priv _ key ; ▁int ▁rv ; ▁EST _ CTX ▁* ctx ; ▁EST _ ERROR ▁est _ rv ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 1864_ CACERT , ▁& cacerts ); ▁CU _ ASSERT ( cacerts _ len ▁> ▁0); ▁/* ▁* ▁Rea d ▁the ▁server ▁cert ▁*/ ▁ certin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( certin , ▁US 1864_ SERVER _ CERT ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁x ▁= ▁PEM _ read _ bio _ X 509( certin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( x ▁ != ▁NULL ); ▁BIO _ free ( certin ); ▁/* ▁* ▁Rea d ▁the ▁server ▁key ▁*/ ▁keyin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( keyin , ▁US 1864_ SERVER _ KEY ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁priv _ key ▁= ▁PEM _ read _ bio _ PrivateKey ( keyin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( priv _ key ▁ != ▁NULL ); ▁BIO _ free ( keyin ); ▁/* ▁* ▁init ▁EST ▁in ▁server ▁mode ▁*/ ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁ctx ▁= ▁est _ server _ init ( cacerts , ▁cacerts _ len , ▁cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁" test realm ", ▁x , ▁priv _ key ); ▁CU _ ASSERT ( ctx ▁ != ▁NULL ); ▁est _ rv ▁= ▁est _ server _ set _ auth _ mode ( ctx , ▁AUTH _ NONE ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ BAD _ MODE ); ▁est _ rv ▁= ▁est _ server _ set _ auth _ mode ( ctx , ▁AUTH _ BASIC ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ NONE ); ▁est _ rv ▁= ▁est _ server _ set _ auth _ mode ( ctx , ▁AUTH _ DIGEST ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ NONE ); ▁est _ rv ▁= ▁est _ server _ set _ auth _ mode ( ctx , ▁AUTH _ TOKEN ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ NONE ); ▁est _ rv ▁= ▁est _ server _ set _ auth _ mode ( ctx , ▁0 xf fffffff ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ BAD _ MODE ); ▁/* ▁* ▁M ake ▁sure ▁we ▁don ' t ▁allow ▁ DIGEST ▁mode ▁when ▁in ▁FIPS ▁mode ▁*/ ▁FIPS _ mode _ set (1); ▁est _ rv ▁= ▁est _ server _ set _ auth _ mode ( ctx , ▁AUTH _ DIGEST ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ BAD _ MODE ); ▁FIPS _ mode _ set ( 0 ); ▁X 509_ free ( x ); ▁E VP _ PKEY _ free ( priv _ key ); ▁est _ destroy ( ctx ); ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁Token ▁Auth ▁Mode ▁* ▁* ▁The ▁go al ▁of ▁this ▁test ▁is ▁to ▁verify ▁that ▁the ▁EST ▁server ▁responds ▁with ▁the ▁* ▁correct ▁auth ▁challenge ▁when ▁it ' s ▁configured ▁for ▁Token ▁Auth ▁mode . ▁It ▁will ▁* ▁first ▁perform ▁a ▁ sanity ▁check ▁by ▁perform ing ▁an ▁HTTP ▁Basic ▁request ▁while ▁the ▁* ▁server ▁is ▁st ill ▁in ▁its ▁default ▁mode ▁of ▁HTTP ▁Basic ▁auth . ▁The ▁test ▁will ▁then ▁* ▁configure ▁the ▁server ▁for ▁Token ▁Auth ▁mode ▁and ▁issue ▁a ▁request ▁that ▁does ▁not ▁* ▁contain ▁any ▁auth ▁header . ▁This ▁should ▁force ▁the ▁server ▁to ▁respond ▁with ▁a ▁* ▁token ▁auth ▁challenge ▁header . ▁*/ ▁static ▁void ▁us 1864_ test 2 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁rv ▁= ▁curl _ http _ post ( US 1864_ ENROLL _ URL _ BA , ▁US 1864_ PKCS 10_ CT , ▁US 1864_ PKCS 10_ RSA 2048, ▁US 1864_ UIDPWD _ GOOD , ▁US 1864_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁specif y ▁BASIC ▁and ▁the ▁server ▁is ▁st ill ▁in ▁BASIC ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁/* ▁* ▁S witch ▁the ▁server ▁over ▁to ▁Token ▁mode . ▁* ▁* ▁NOTE : ▁I ▁see ▁this ▁being ▁done ▁in ▁numer ous ▁places , ▁and ▁it ' s ▁ probab ly ▁safe ▁* ▁in ▁a ▁test ▁setting , ▁but ▁it ▁is ▁da nger ous ▁to ▁change ▁this ▁on ▁the ▁fly ▁in ▁an ▁* ▁operation al ▁setting . ▁A lso ▁note , ▁no ▁return ▁code ▁for ▁any ▁of ▁these ▁* ▁set / enable ▁functions . ▁*/ ▁st _ enable _ http _ token _ auth (); ▁bearer _ found ▁= ▁0; ▁rv ▁= ▁curl _ http _ post _ cert _ write ( US 1864_ ENROLL _ URL _ BA , ▁US 1864_ PKCS 10_ CT , ▁US 1864_ PKCS 10_ RSA 2048, ▁US 1864_ CLIENT _ CERT , ▁US 1864_ CLIENT _ KEY , ▁US 1864_ CACERTS , ▁curl _ data _ cb , ▁curl _ data _ cb ); ▁/* ▁* ▁S ince ▁we ▁changed ▁auth ▁modes ▁on ▁the ▁server ▁we ▁expect ▁this ▁to ▁now ▁* ▁fail . ▁We ' re ▁not ▁c aptur ing ▁the ▁actual ▁auth ▁challenge ▁we ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁401 ); ▁CU _ ASSERT ( bearer _ found ▁ == ▁1); ▁} ▁/* ▁The ▁main () ▁function ▁for ▁setting ▁up ▁and ▁running ▁the ▁tests . ▁* ▁Returns ▁a ▁CU E _ SUCCESS ▁on ▁successful ▁running , ▁another ▁* ▁ CUnit ▁error ▁code ▁on ▁failure . ▁*/ ▁int ▁us 1864_ add _ suite ▁( void ) ▁{ ▁# if def ▁HA VE _ C UNIT ▁CU _ pSuite ▁pSuite ▁= ▁NULL ; ▁/* ▁add ▁a ▁suite ▁to ▁the ▁ registry ▁*/ ▁pSuite ▁= ▁CU _ add _ suite (" us 1864_ cfg _ tok _ auth ", ▁us 1864_ init _ suite , ▁us 1864_ destroy _ suite ); ▁if ▁( NULL ▁ == ▁pSuite ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁/* ▁add ▁the ▁tests ▁to ▁the ▁suite ▁*/ ▁if ▁( ( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Check ▁parms ", ▁us 1864_ test 1)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Attempt ▁enroll ▁- ▁BASIC ▁pass ", ▁us 1864_ test 2)) ▁ ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁return ▁CU E _ SUCCESS ; ▁# endif ▁}