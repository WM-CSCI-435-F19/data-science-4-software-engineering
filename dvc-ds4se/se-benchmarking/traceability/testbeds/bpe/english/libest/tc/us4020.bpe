▁/* -- ---------------- ---------------- ---------------- ---------------- ▁* ▁us 4020 . c ▁- ▁ Unit ▁Test ▁for ▁User ▁Stor y ▁4020 ▁- ▁ Unit ▁test ▁client ▁* ▁proxy ▁mode . ▁Test ▁the ▁new ▁API ▁function ▁and ▁* ▁verify ▁correct ▁operation ▁of ▁Client ▁proxy ▁modes . ▁* ▁* ▁October , ▁2016 ▁* ▁* ▁Copy right ▁( c ) ▁2016 ▁by ▁ cisco ▁S ystems , ▁Inc . ▁* ▁All ▁ right s ▁ reserved . ▁* -- ---------------- ---------------- ---------------- ---------------- ▁*/ ▁# include ▁ < std io . h > ▁# if n def ▁W IN 32 ▁# include ▁ < uni std . h > ▁# endif ▁# include ▁" est . h " ▁# include ▁ < curl / curl . h > ▁# include ▁" curl _ util s . h " ▁# include ▁" test _ util s . h " ▁# include ▁" st _ server . h " ▁# include ▁ < openssl / ssl . h > ▁# if def ▁HA VE _ C UNIT ▁# include ▁" CUnit / Basic . h " ▁# include ▁" CUnit / A utomat ed . h " ▁# endif ▁# include ▁ < errno . h > ▁# include ▁ < fcntl . h > ▁# define ▁ MAX _ 4020_ CMDS ▁1024 ▁static ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁static ▁int ▁cacerts _ len ▁= ▁0; ▁# define ▁US 4020_ SERVER _ DOM AIN _ NAME ▁" local host . cisco . com " ▁# define ▁US 4020_ SERVER _ IP ▁"127.0.0.1" ▁# define ▁US 4020_ SERVER _ TCP _ PORT ▁4020 0 ▁# define ▁US 4020_ PROXY _ IP ▁"127.0.0.1" ▁# define ▁US 4020_ PROXY _ TCP _ PORT ▁4020 8 ▁# define ▁US 4020_ UID ▁" estuser " ▁# define ▁US 4020_ PWD ▁" estpwd " ▁# if n def ▁W IN 32 ▁# define ▁US 4020_ CACERTS ▁" CA / estCA / cacert . crt " ▁/* ▁# define ▁US 4020_ CACERT ▁" CA / estCA / cacert . crt " ▁*/ ▁/* ▁# define ▁US 4020_ SERVER _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁*/ ▁/* ▁# define ▁US 4020_ SERVER _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁*/ ▁/* ▁# define ▁US 4020_ CLIENT _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁*/ ▁/* ▁# define ▁US 4020_ CLIENT _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁*/ ▁# else ▁# define ▁US 4020_ CACERTS ▁" CA \\ estCA \\ cacert . crt " ▁/* ▁# define ▁US 4020_ CACERT ▁" CA \\ estCA \\ cacert . crt " ▁*/ ▁/* ▁# define ▁US 4020_ SERVER _ CERT ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁*/ ▁/* ▁# define ▁US 4020_ SERVER _ KEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁*/ ▁/* ▁# define ▁US 4020_ CLIENT _ CERT ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁*/ ▁/* ▁# define ▁US 4020_ CLIENT _ KEY ▁" CA \\ estCA \\ private / estserver cert and key . pem " ▁*/ ▁static ▁CR ITI CAL _ SE CTION ▁logger _ critical _ section ; ▁static ▁void ▁us 4020_ logger _ stderr ▁( char ▁* format , ▁va _ list ▁l ) ▁{ ▁E nter CriticalSection (& logger _ critical _ section ); ▁ vf printf ( stderr , ▁format , ▁l ); ▁f flu sh ( stderr ); ▁ Leav eCriticalSection (& logger _ critical _ section ); ▁} ▁# endif ▁static ▁E VP _ PKEY ▁* generate _ private _ key ▁( void ) ▁{ ▁RSA ▁* rsa ▁= ▁RSA _ new (); ▁B IG NUM ▁* bn ▁= ▁ BN _ new (); ▁E VP _ PKEY ▁* pkey ; ▁/* ▁* ▁create ▁an ▁RSA ▁ keypair ▁and ▁assign ▁them ▁to ▁a ▁ PKEY ▁and ▁return ▁it . ▁*/ ▁ BN _ set _ word ( bn , ▁0 x 1000 1); ▁RSA _ generate _ key _ ex ( rsa , ▁1024 , ▁bn , ▁NULL ); ▁pkey ▁= ▁E VP _ PKEY _ new (); ▁if ▁( pkey == NULL ) ▁{ ▁ printf (" \ n Error ▁allocat ing ▁ PKEY ▁structure ▁for ▁new ▁key ▁pair \ n "); ▁return ▁NULL ; ▁} ▁if ▁(! E VP _ PKEY _ set 1 _ RSA ( pkey , ▁rsa )) ▁{ ▁ printf (" \ n Error ▁assign ing ▁RSA ▁key ▁pair ▁to ▁ PKEY ▁structure \ n "); ▁return ▁NULL ; ▁} ▁RSA _ free ( rsa ); ▁ BN _ free ( bn ); ▁return ▁( pkey ); ▁} ▁static ▁void ▁us 4020_ clean ▁( void ) ▁{ ▁} ▁int ▁us 4020_ start _ server ▁( int ▁manual _ enroll , ▁int ▁nid ) ▁{ ▁int ▁rv ; ▁rv ▁= ▁st _ start ( US 4020_ SERVER _ TCP _ PORT , ▁" CA / estCA / private / estserver cert and key . pem ", ▁" CA / estCA / private / estserver cert and key . pem ", ▁" estrealm ", ▁" CA / estCA / cacert . crt ", ▁" CA / trustedcerts . crt ", ▁" CA / est Example CA . cnf ", ▁manual _ enroll , ▁0, ▁nid ); ▁return ▁rv ; ▁} ▁# define ▁ MAX _ CMD _ BUF ▁256 ▁# define ▁ MAX _ PID _ BUF ▁128 ▁static ▁void ▁shutdown _ antinat ▁( void ) ▁{ ▁int ▁fh ; ▁char ▁read _ pid [ MAX _ PID _ BUF ]; ▁char ▁cmd [ MAX _ CMD _ BUF ]; ▁int ▁rv ▁= ▁0; ▁fh ▁= ▁open ▁("./ antinat - pid ", ▁O _ RD WR , ▁06 66 ); ▁( void ) read ( fh , ▁read _ pid , ▁ MAX _ PID _ BUF ); ▁ printf (" pid ▁read ▁back ▁in ▁= ▁% s \ n ", ▁read _ pid ); ▁ snprintf ( cmd , ▁ MAX _ CMD _ BUF , ▁" k ill ▁% s \ n ", ▁read _ pid ); ▁rv ▁= ▁system ( cmd ); ▁if ▁( rv ) ▁{ ▁ printf (" Failed ▁to ▁terminate ▁ antinat . \ n "); ▁} ▁} ▁static ▁void ▁shutdown _ haproxy ▁( void ) ▁{ ▁int ▁fh ; ▁/* ▁int ▁read byte _ count ▁= ▁0; ▁*/ ▁char ▁read _ pid [ MAX _ PID _ BUF ]; ▁char ▁cmd [ MAX _ CMD _ BUF ]; ▁int ▁rv ▁= ▁0; ▁fh ▁= ▁open ▁("./ haproxy . pid ", ▁O _ RD WR , ▁06 66 ); ▁/* ▁read byte _ count ▁= ▁read ( fh , ▁read _ pid , ▁ MAX _ PID _ BUF ); ▁*/ ▁( void ) read ( fh , ▁read _ pid , ▁ MAX _ PID _ BUF ); ▁ printf (" pid ▁read ▁back ▁in ▁= ▁% s \ n ", ▁read _ pid ); ▁ snprintf ( cmd , ▁ MAX _ CMD _ BUF , ▁" k ill ▁% s \ n ", ▁read _ pid ); ▁rv ▁= ▁system ( cmd ); ▁if ▁( rv ) ▁{ ▁ printf (" Failed ▁to ▁terminate ▁ haproxy . \ n "); ▁} ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁initialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁allocate ▁data ▁or ▁open ▁any ▁* ▁resource s ▁required ▁for ▁all ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 4020_ init _ suite ▁( void ) ▁{ ▁int ▁rv ; ▁# if def ▁W IN 32 ▁Initialize CriticalSection ▁(& logger _ critical _ section ); ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁& us 4020_ logger _ stderr ); ▁# else ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁# endif ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 4020_ CACERTS , ▁& cacerts ); ▁if ▁( cacerts _ len ▁ < = ▁0) ▁{ ▁return ▁1; ▁} ▁us 4020_ clean (); ▁/* ▁* ▁Start ▁an ▁instance ▁of ▁the ▁EST ▁server ▁with ▁* ▁automatic ▁enrollment ▁enabled . ▁*/ ▁rv ▁= ▁us 4020_ start _ server ( 0 , ▁0); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁uninitialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁de allocate ▁data ▁or ▁close ▁any ▁* ▁resource s ▁that ▁we re ▁used ▁for ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 4020_ destroy _ suite ▁( void ) ▁{ ▁st _ stop (); ▁free ( cacerts ); ▁return ▁0; ▁} ▁/* ▁* ▁C allback ▁function ▁passed ▁to ▁est _ client _ init () ▁*/ ▁static ▁int ▁client _ manual _ cert _ verify ▁( X 509 ▁* cur _ cert , ▁int ▁openssl _ cert _ error ) ▁{ ▁BIO ▁* bio _ err ; ▁bio _ err = BIO _ new _ fp ( stderr , BIO _ NO CLOSE ); ▁int ▁approve ▁= ▁0; ▁/* ▁* ▁Pr int ▁out ▁the ▁specific s ▁of ▁this ▁cert ▁*/ ▁ printf ("% s : ▁OpenSSL / EST ▁server ▁cert ▁verification ▁failed ▁with ▁the ▁following ▁error : ▁openssl _ cert _ error ▁= ▁% d ▁(% s ) \ n ", ▁ _ _ FUNCTION _ _ , ▁openssl _ cert _ error , ▁X 509_ verify _ cert _ error _ string ( openssl _ cert _ error ) ); ▁ printf (" Fail ing ▁Cert : \ n "); ▁X 509_ print _ fp ( stdout , cur _ cert ); ▁/* ▁* ▁ Next ▁call ▁print s ▁out ▁the ▁signature ▁which ▁can ▁be ▁used ▁as ▁the ▁fingerprint ▁* ▁This ▁fingerprint ▁can ▁be ▁checked ▁against ▁the ▁anti cip ated ▁value ▁to ▁determine ▁* ▁whether ▁or ▁not ▁the ▁server ' s ▁cert ▁should ▁be ▁approved . ▁*/ ▁X 509_ signature _ print ( bio _ err , ▁cur _ cert -> sig _ alg , ▁cur _ cert -> signature ); ▁if ▁( openssl _ cert _ error ▁ == ▁X 509_ V _ ERR _ U NABLE _ TO _ GET _ CRL ) ▁{ ▁approve ▁= ▁1; ▁} ▁BIO _ free ( bio _ err ); ▁return ▁approve ; ▁} ▁/* ▁* ▁Error ▁check ▁the ▁parameters ▁to ▁the ▁API ▁*/ ▁static ▁void ▁us 4020_ test 1 ▁( void ) ▁{ ▁EST _ ERROR ▁e _ rc ; ▁EST _ CTX ▁* ectx ▁= ▁NULL ; ▁ LOG _ FUNC _ NM ; ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁Attempt ▁to ▁call ▁the ▁API ▁without ▁a ▁context ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( NULL , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NO _ CTX ); ▁/* ▁* ▁valid ▁call ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁don ' t ▁set ▁the ▁server ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁NULL , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ INVALID _ SERVER _ NAME ); ▁/* ▁* ▁server ▁to ▁empty ▁string ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁"", ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ INVALID _ SERVER _ NAME ); ▁/* ▁* ▁max ▁server ▁name ▁*/ ▁char ▁* ▁max _ server _ name ▁= ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 "; ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁max _ server _ name , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁server ▁name ▁too ▁long ▁*/ ▁char ▁* ▁long _ server _ name ▁= ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁" 1234567890123456 "; ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁long _ server _ name , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ INVALID _ SERVER _ NAME ); ▁/* ▁* ▁don ' t ▁set ▁the ▁port ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁US 4020_ PROXY _ IP , ▁0, ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ INVALID _ PORT _ NUM ); ▁/* ▁proxy ▁protocol ▁invalid ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁25 , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ INVALID _ CLIENT _ PROXY _ PROTOCOL ); ▁/* ▁proxy ▁protocol ▁invalid ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁- 2 , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ INVALID _ CLIENT _ PROXY _ PROTOCOL ); ▁/* ▁proxy ▁auth ▁invalid ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁25 , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ INVALID _ CLIENT _ PROXY _ AUTH ); ▁/* ▁* ▁max ▁userid ▁*/ ▁char ▁* ▁max _ userid ▁= ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 "; ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁max _ userid , ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁userid ▁too ▁long ▁*/ ▁char ▁* ▁long _ userid ▁= ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁" 1234567890123456 "; ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁long _ userid , ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ INVALID _ PARAMETERS ); ▁/* ▁* ▁userid ▁is ▁an ▁empty ▁string ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁"", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ INVALID _ PARAMETERS ); ▁/* ▁* ▁max ▁pwd ▁*/ ▁char ▁* ▁max _ pwd ▁= ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 "; ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁max _ pwd ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁pwd ▁too ▁long ▁*/ ▁char ▁* ▁long _ pwd ▁= ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁ "123456789012345 678901234567890 123456789012345 678901234567890" ▁" 1234567890123456 "; ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁long _ pwd ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ INVALID _ PARAMETERS ); ▁/* ▁* ▁password ▁is ▁an ▁empty ▁string ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ INVALID _ PARAMETERS ); ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁Test ▁for ▁ SOCKS ▁4 ▁mode , ▁no ▁credentials , ▁should ▁pass ▁* ▁*/ ▁static ▁void ▁us 4020_ test 2 ▁( void ) ▁{ ▁int ▁sys _ rc ▁= ▁0; ▁EST _ ERROR ▁e _ rc ; ▁EST _ CTX ▁* ectx ▁= ▁NULL ; ▁char ▁cmd [ MAX _ 4020_ CMDS ]; ▁E VP _ PKEY ▁* key ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁ LOG _ FUNC _ NM ; ▁/* ▁* ▁Set ▁up ▁a ▁ SOCKS ▁4 ▁proxy ▁server ▁locally ▁*/ ▁ snprintf ( cmd , ▁ MAX _ 4020_ CMDS , ▁" antinat ▁- xc US 4020/ antinat - cfg . x ml "); ▁sys _ rc ▁= ▁system ( cmd ); ▁CU _ ASSERT ( sys _ rc ▁ == ▁0); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁sock s 4 ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ SOCKS 4 , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁e _ rc ▁= ▁est _ client _ set _ auth ( ectx , ▁US 4020_ UID , ▁US 4020_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 4020_ SERVER _ IP , ▁US 4020_ SERVER _ TCP _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁private ▁key ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁Use ▁the ▁simplifie d ▁API ▁to ▁enroll ▁a ▁CSR ▁*/ ▁e _ rc ▁= ▁est _ client _ enroll ( ectx , ▁" TC 4020- 2 ", ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁shutdown _ antinat (); ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁Test ▁for ▁ SOCKS ▁4 ▁mode , ▁with ▁credentials , ▁should ▁pass ▁* ▁*/ ▁static ▁void ▁us 4020_ test 3 ▁( void ) ▁{ ▁int ▁sys _ rc ▁= ▁0; ▁EST _ ERROR ▁e _ rc ; ▁EST _ CTX ▁* ectx ▁= ▁NULL ; ▁char ▁cmd [ MAX _ 4020_ CMDS ]; ▁E VP _ PKEY ▁* key ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁ LOG _ FUNC _ NM ; ▁/* ▁* ▁Set ▁up ▁a ▁ SOCKS ▁4 ▁proxy ▁server ▁locally ▁*/ ▁ snprintf ( cmd , ▁ MAX _ 4020_ CMDS , ▁" antinat ▁- xc US 4020/ antinat - cfg . x ml "); ▁sys _ rc ▁= ▁system ( cmd ); ▁CU _ ASSERT ( sys _ rc ▁ == ▁0); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁sock s 4 ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ SOCKS 4 , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁e _ rc ▁= ▁est _ client _ set _ auth ( ectx , ▁US 4020_ UID , ▁US 4020_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 4020_ SERVER _ IP , ▁US 4020_ SERVER _ TCP _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁private ▁key ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁Use ▁the ▁simplifie d ▁API ▁to ▁enroll ▁a ▁CSR ▁*/ ▁e _ rc ▁= ▁est _ client _ enroll ( ectx , ▁" TC 4020- 3 ", ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁shutdown _ antinat (); ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁Test ▁for ▁ SOCKS ▁ 5 ▁mode ▁* ▁*/ ▁static ▁void ▁us 4020_ test 4 ▁( void ) ▁{ ▁int ▁sys _ rc ▁= ▁0; ▁EST _ ERROR ▁e _ rc ; ▁EST _ CTX ▁* ectx ▁= ▁NULL ; ▁char ▁cmd [ MAX _ 4020_ CMDS ]; ▁E VP _ PKEY ▁* key ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁ LOG _ FUNC _ NM ; ▁/* ▁* ▁Set ▁up ▁a ▁ SOCKS ▁4 ▁proxy ▁server ▁locally ▁*/ ▁ snprintf ( cmd , ▁ MAX _ 4020_ CMDS , ▁" antinat ▁- xc US 4020/ antinat - cfg . x ml "); ▁sys _ rc ▁= ▁system ( cmd ); ▁CU _ ASSERT ( sys _ rc ▁ == ▁0); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁sock s 4 ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ SOCKS 5 , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁NULL , ▁NULL ); ▁/* ▁" estuser ", ▁" estpwd "); ▁*/ ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁e _ rc ▁= ▁est _ client _ set _ auth ( ectx , ▁US 4020_ UID , ▁US 4020_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 4020_ SERVER _ IP , ▁US 4020_ SERVER _ TCP _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁private ▁key ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁Use ▁the ▁simplifie d ▁API ▁to ▁enroll ▁a ▁CSR ▁*/ ▁e _ rc ▁= ▁est _ client _ enroll ( ectx , ▁" TC 4020- 4", ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁shutdown _ antinat (); ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁Test ▁for ▁ SOCKS ▁4 A ▁mode ▁* ▁*/ ▁static ▁void ▁us 4020_ test 5 ▁( void ) ▁{ ▁int ▁sys _ rc ▁= ▁0; ▁EST _ ERROR ▁e _ rc ; ▁EST _ CTX ▁* ectx ▁= ▁NULL ; ▁char ▁cmd [ MAX _ 4020_ CMDS ]; ▁E VP _ PKEY ▁* key ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁ LOG _ FUNC _ NM ; ▁/* ▁* ▁Set ▁up ▁a ▁ SOCKS ▁4 ▁proxy ▁server ▁locally ▁*/ ▁ snprintf ( cmd , ▁ MAX _ 4020_ CMDS , ▁" antinat ▁- xc US 4020/ antinat - cfg . x ml "); ▁sys _ rc ▁= ▁system ( cmd ); ▁CU _ ASSERT ( sys _ rc ▁ == ▁0); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁sock s 4 ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ SOCKS 4 A , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁NULL , ▁NULL ); ▁/* ▁" estuser ", ▁" estpwd "); ▁*/ ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁e _ rc ▁= ▁est _ client _ set _ auth ( ectx , ▁US 4020_ UID , ▁US 4020_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 4020_ SERVER _ IP , ▁US 4020_ SERVER _ TCP _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁private ▁key ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁Use ▁the ▁simplifie d ▁API ▁to ▁enroll ▁a ▁CSR ▁*/ ▁e _ rc ▁= ▁est _ client _ enroll ( ectx , ▁" TC 4020- 5 ", ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁shutdown _ antinat (); ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁Test ▁for ▁ SOCKS ▁ 5 ▁mode , ▁with ▁no ▁credentials ▁* ▁*/ ▁static ▁void ▁us 4020_ test 6 ▁( void ) ▁{ ▁int ▁sys _ rc ▁= ▁0; ▁EST _ ERROR ▁e _ rc ; ▁EST _ CTX ▁* ectx ▁= ▁NULL ; ▁char ▁cmd [ MAX _ 4020_ CMDS ]; ▁E VP _ PKEY ▁* key ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁ LOG _ FUNC _ NM ; ▁/* ▁* ▁Set ▁up ▁a ▁ SOCKS ▁4 ▁proxy ▁server ▁locally ▁*/ ▁ snprintf ( cmd , ▁ MAX _ 4020_ CMDS , ▁" antinat ▁- xc US 4020/ antinat - cfg . x ml "); ▁sys _ rc ▁= ▁system ( cmd ); ▁CU _ ASSERT ( sys _ rc ▁ == ▁0); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁sock s 4 ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ SOCKS 5 , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁e _ rc ▁= ▁est _ client _ set _ auth ( ectx , ▁US 4020_ UID , ▁US 4020_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 4020_ SERVER _ IP , ▁US 4020_ SERVER _ TCP _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁private ▁key ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁Use ▁the ▁simplifie d ▁API ▁to ▁enroll ▁a ▁CSR ▁*/ ▁e _ rc ▁= ▁est _ client _ enroll ( ectx , ▁" TC 4020- 6 ", ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁shutdown _ antinat (); ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁Test ▁for ▁ SOCKS ▁ 5 ▁mode , ▁with ▁good ▁credentials ▁* ▁*/ ▁static ▁void ▁us 4020_ test 7 ▁( void ) ▁{ ▁int ▁sys _ rc ▁= ▁0; ▁EST _ ERROR ▁e _ rc ; ▁EST _ CTX ▁* ectx ▁= ▁NULL ; ▁char ▁cmd [ MAX _ 4020_ CMDS ]; ▁E VP _ PKEY ▁* key ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁ LOG _ FUNC _ NM ; ▁/* ▁* ▁Set ▁up ▁a ▁ SOCKS ▁4 ▁proxy ▁server ▁locally ▁*/ ▁ snprintf ( cmd , ▁ MAX _ 4020_ CMDS , ▁" antinat ▁- xc US 4020/ antinat - cfg - good cred . x ml "); ▁sys _ rc ▁= ▁system ( cmd ); ▁CU _ ASSERT ( sys _ rc ▁ == ▁0); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁sock s 4 ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ SOCKS 5 , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁e _ rc ▁= ▁est _ client _ set _ auth ( ectx , ▁US 4020_ UID , ▁US 4020_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 4020_ SERVER _ IP , ▁US 4020_ SERVER _ TCP _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁private ▁key ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁Use ▁the ▁simplifie d ▁API ▁to ▁enroll ▁a ▁CSR ▁*/ ▁e _ rc ▁= ▁est _ client _ enroll ( ectx , ▁" TC 4020- 6 ", ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁shutdown _ antinat (); ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁Test ▁for ▁ SOCKS ▁ 5 ▁mode , ▁with ▁good ▁credentials , ▁but ▁forgotten ▁* ▁*/ ▁static ▁void ▁us 4020_ test 8 ▁( void ) ▁{ ▁int ▁sys _ rc ▁= ▁0; ▁EST _ ERROR ▁e _ rc ; ▁EST _ CTX ▁* ectx ▁= ▁NULL ; ▁char ▁cmd [ MAX _ 4020_ CMDS ]; ▁E VP _ PKEY ▁* key ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁ LOG _ FUNC _ NM ; ▁/* ▁* ▁Set ▁up ▁a ▁ SOCKS ▁4 ▁proxy ▁server ▁locally ▁*/ ▁ snprintf ( cmd , ▁ MAX _ 4020_ CMDS , ▁" antinat ▁- xc US 4020/ antinat - cfg - good cred . x ml "); ▁sys _ rc ▁= ▁system ( cmd ); ▁CU _ ASSERT ( sys _ rc ▁ == ▁0); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁sock s 4 ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ SOCKS 5 , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁e _ rc ▁= ▁est _ client _ set _ auth ( ectx , ▁US 4020_ UID , ▁US 4020_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 4020_ SERVER _ IP , ▁US 4020_ SERVER _ TCP _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁private ▁key ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁Use ▁the ▁simplifie d ▁API ▁to ▁enroll ▁a ▁CSR ▁*/ ▁e _ rc ▁= ▁est _ client _ enroll ( ectx , ▁" TC 4020- 6 ", ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ IP _ CONNECT ); ▁shutdown _ antinat (); ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁Test ▁for ▁ SOCKS ▁ 5 ▁mode , ▁with ▁bad ▁credentials ▁* ▁*/ ▁static ▁void ▁us 4020_ test 9 ▁( void ) ▁{ ▁int ▁sys _ rc ▁= ▁0; ▁EST _ ERROR ▁e _ rc ; ▁EST _ CTX ▁* ectx ▁= ▁NULL ; ▁char ▁cmd [ MAX _ 4020_ CMDS ]; ▁E VP _ PKEY ▁* key ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁ LOG _ FUNC _ NM ; ▁/* ▁* ▁Set ▁up ▁a ▁ SOCKS ▁4 ▁proxy ▁server ▁locally ▁*/ ▁ snprintf ( cmd , ▁ MAX _ 4020_ CMDS , ▁" antinat ▁- xc US 4020/ antinat - cfg - bad cred . x ml "); ▁sys _ rc ▁= ▁system ( cmd ); ▁CU _ ASSERT ( sys _ rc ▁ == ▁0); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁sock s 4 ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ SOCKS 5 , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁e _ rc ▁= ▁est _ client _ set _ auth ( ectx , ▁US 4020_ UID , ▁US 4020_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 4020_ SERVER _ IP , ▁US 4020_ SERVER _ TCP _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁private ▁key ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁Use ▁the ▁simplifie d ▁API ▁to ▁enroll ▁a ▁CSR ▁*/ ▁e _ rc ▁= ▁est _ client _ enroll ( ectx , ▁" TC 4020- 6 ", ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ IP _ CONNECT ); ▁shutdown _ antinat (); ▁est _ destroy ( ectx ); ▁} ▁# if ▁0 ▁/* ▁* ▁c ould ▁be ▁tested , ▁but ▁needs ▁certif cates ▁updated ▁*/ ▁/* ▁* ▁Test ▁for ▁ SOCKS ▁4 A ▁mode , ▁with ▁do main ▁name ▁* ▁*/ ▁static ▁void ▁us 4020_ test 8 ▁( void ) ▁{ ▁int ▁sys _ rc ▁= ▁0; ▁EST _ ERROR ▁e _ rc ; ▁EST _ CTX ▁* ectx ▁= ▁NULL ; ▁char ▁cmd [ MAX _ 4020_ CMDS ]; ▁E VP _ PKEY ▁* key ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁ LOG _ FUNC _ NM ; ▁/* ▁* ▁Set ▁up ▁a ▁ SOCKS ▁4 ▁proxy ▁server ▁locally ▁*/ ▁ snprintf ( cmd , ▁ MAX _ 4020_ CMDS , ▁" antinat ▁- xc US 4020/ antinat - cfg . x ml "); ▁sys _ rc ▁= ▁system ( cmd ); ▁CU _ ASSERT ( sys _ rc ▁ == ▁0); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁sock s 4 ▁*/ ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ SOCKS 4 A , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁e _ rc ▁= ▁est _ client _ set _ auth ( ectx , ▁US 4020_ UID , ▁US 4020_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 4020_ SERVER _ DOM AIN _ NAME , ▁US 4020_ SERVER _ TCP _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁private ▁key ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁Use ▁the ▁simplifie d ▁API ▁to ▁enroll ▁a ▁CSR ▁*/ ▁e _ rc ▁= ▁est _ client _ enroll ( ectx , ▁" TC 4020- 7", ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁shutdown _ antinat (); ▁est _ destroy ( ectx ); ▁} ▁# endif ▁/* ▁* ▁Test ▁HTTP ▁proxy ▁mode ▁* ▁* ▁NOTE : ▁only ▁non - tunnel ▁mode ▁is ▁tested . ▁tunnel ▁mode ▁does ▁not ▁* ▁work ▁with ▁Cisco EST ▁server . ▁*/ ▁static ▁void ▁us 4020_ test 10 ▁( void ) ▁{ ▁int ▁sys _ rc ▁= ▁0; ▁EST _ ERROR ▁e _ rc ; ▁EST _ CTX ▁* ectx ▁= ▁NULL ; ▁char ▁cmd [ MAX _ 4020_ CMDS ]; ▁E VP _ PKEY ▁* key ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁ LOG _ FUNC _ NM ; ▁/* ▁* ▁Set ▁up ▁a ▁HTTP ▁proxy ▁server ▁locally ▁*/ ▁ snprintf ( cmd , ▁ MAX _ 4020_ CMDS , ▁" haproxy ▁- D ▁- f ▁US 4020/ haproxy . cfg ▁- p ▁./ haproxy . pid "); ▁sys _ rc ▁= ▁system ( cmd ); ▁CU _ ASSERT ( sys _ rc ▁ == ▁0); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁e _ rc = ▁est _ client _ set _ proxy ( ectx , ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL , ▁US 4020_ PROXY _ IP , ▁US 4020_ PROXY _ TCP _ PORT , ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁e _ rc ▁= ▁est _ client _ set _ auth ( ectx , ▁US 4020_ UID , ▁US 4020_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 4020_ SERVER _ IP , ▁US 4020_ SERVER _ TCP _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁private ▁key ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁Use ▁the ▁simplifie d ▁API ▁to ▁enroll ▁a ▁CSR ▁*/ ▁e _ rc ▁= ▁est _ client _ enroll ( ectx , ▁" TC 4020- 8 ", ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁shutdown _ haproxy (); ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁Indicate ▁whether ▁client ▁proxy ▁support ▁has ▁been ▁ built ▁into ▁* ▁the ▁library ▁or ▁not ▁*/ ▁static ▁int ▁client _ proxy _ enabled ▁( void ) ▁{ ▁EST _ ERROR ▁e _ rc ; ▁e _ rc ▁= ▁est _ client _ set _ proxy ( NULL , ▁0, ▁NULL , ▁0, ▁0, ▁NULL , ▁NULL ); ▁if ▁( e _ rc ▁ == ▁EST _ ERR _ CLIENT _ PROXY _ MODE _ NOT _ SUPPORTED ) ▁{ ▁return ▁0; ▁} ▁else ▁{ ▁return ▁1; ▁} ▁} ▁/* ▁The ▁main () ▁function ▁for ▁setting ▁up ▁and ▁running ▁the ▁tests . ▁* ▁Returns ▁a ▁CU E _ SUCCESS ▁on ▁successful ▁running , ▁another ▁* ▁ CUnit ▁error ▁code ▁on ▁failure . ▁*/ ▁int ▁us 4020_ add _ suite ▁( void ) ▁{ ▁# if def ▁HA VE _ C UNIT ▁CU _ pSuite ▁pSuite ▁= ▁NULL ; ▁/* ▁add ▁a ▁suite ▁to ▁the ▁ registry ▁*/ ▁pSuite ▁= ▁CU _ add _ suite (" us 4020_ tok _ auth _ client ", ▁us 4020_ init _ suite , ▁us 4020_ destroy _ suite ); ▁if ▁( NULL ▁ == ▁pSuite ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁# if n def ▁W IN 32 ▁/* ▁* ▁client ▁proxy ▁mode ▁is ▁only ▁supported ▁when ▁libcurl ▁has ▁been ▁specified . ▁*/ ▁if ▁( client _ proxy _ enabled ()) { ▁/* ▁add ▁the ▁tests ▁to ▁the ▁suite ▁*/ ▁if ▁( ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" parameter ▁check ▁API ", ▁us 4020_ test 1)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SOCKS ▁4 ▁mode ", ▁us 4020_ test 2)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SOCKS ▁4 ▁mode ▁w / ▁credentials ", ▁us 4020_ test 3)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SOCKS ▁ 5 ▁mode ", ▁us 4020_ test 4)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SOCKS ▁4 A ▁mode ", ▁us 4020_ test 5)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SOCKS ▁ 5 ▁mode , ▁no ▁credentials ", ▁us 4020_ test 6)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SOCKS ▁ 5 ▁mode , ▁good ▁credentials ", ▁us 4020_ test 7)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SOCKS ▁ 5 ▁mode , ▁forgotten ▁credentials ", ▁us 4020_ test 8)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SOCKS ▁ 5 ▁mode , ▁bad ▁credentials ", ▁us 4020_ test 9 )) ▁|| ▁/* ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SOCKS ▁4 A ▁mode ▁with ▁do main ▁name ▁instead ▁of ▁IP ▁address ", ▁us 4020_ test 7)) ▁|| ▁*/ ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" HTTP ▁proxy ", ▁us 4020_ test 10)) ▁ ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁} ▁# endif ▁return ▁CU E _ SUCCESS ; ▁# endif ▁}