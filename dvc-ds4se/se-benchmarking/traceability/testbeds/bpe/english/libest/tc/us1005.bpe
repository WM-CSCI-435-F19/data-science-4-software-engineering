▁/* -- ---------------- ---------------- ---------------- ---------------- ▁* ▁us 1005 . c ▁- ▁ Unit ▁Test s ▁for ▁User ▁Stor y ▁ 1005 ▁- ▁Client ▁ easy ▁provision ▁* ▁* ▁November , ▁2013 ▁* ▁* ▁Copy right ▁( c ) ▁2013 , ▁2016 ▁by ▁ cisco ▁S ystems , ▁Inc . ▁* ▁All ▁ right s ▁ reserved . ▁* -- ---------------- ---------------- ---------------- ---------------- ▁*/ ▁# include ▁ < std io . h > ▁# include ▁ < string . h > ▁# if n def ▁W IN 32 ▁# include ▁ < uni std . h > ▁# endif ▁# include ▁ < est . h > ▁# include ▁" test _ util s . h " ▁# include ▁" st _ server . h " ▁# include ▁ < openssl / ssl . h > ▁# include ▁ < openssl / x 509 v 3 . h > ▁# if def ▁HA VE _ C UNIT ▁# include ▁" CUnit / Basic . h " ▁# include ▁" CUnit / A utomat ed . h " ▁# endif ▁# if def ▁W IN 32 ▁static ▁CR ITI CAL _ SE CTION ▁logger _ critical _ section ; ▁# endif ▁static ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁static ▁int ▁cacerts _ len ▁= ▁0; ▁# define ▁US 1005_ SERVER _ PORT ▁ 3 1005 ▁# define ▁US 1005_ SERVER _ IP ▁"127.0.0.1" ▁# define ▁US 1005_ UID ▁" estuser " ▁# define ▁US 1005_ PWD ▁" estpwd " ▁# if n def ▁W IN 32 ▁# define ▁US 1005_ CACERTS ▁" CA / estCA / cacert . crt " ▁# define ▁US 1005_ TRUST _ CERTS ▁" CA / trustedcerts . crt " ▁# define ▁US 1005_ SERVER _ CERTKEY ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 1005_ CLIENT _ KEY ▁" US 1005 / implicit - key . pem " ▁# define ▁US 1005_ CLIENT _ CERT ▁" US 1005 / implicit - cert . pem " ▁# else ▁# define ▁US 1005_ CACERTS ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 1005_ TRUST _ CERTS ▁" CA \\ trustedcerts . crt " ▁# define ▁US 1005_ SERVER _ CERTKEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# define ▁US 1005_ CLIENT _ KEY ▁" US 1005 \\ implicit - key . pem " ▁# define ▁US 1005_ CLIENT _ CERT ▁" US 1005 \\ implicit - cert . pem " ▁# endif ▁# define ▁US 1005_ CSR _ NOPOP ▁" MB QGBysGAQEBARYG CWCGSAFlAwQCAg == \0" ▁static ▁char ▁* log _ search _ target ▁= ▁NULL ; ▁static ▁int ▁search _ target _ found ▁= ▁0; ▁/* ▁* ▁This ▁is ▁a ▁simple ▁callback ▁used ▁to ▁overr ide ▁the ▁default ▁* ▁logging ▁facility ▁in ▁libest . ▁We ' ll ▁use ▁this ▁to ▁look ▁* ▁for ▁specific ▁debug ▁output . ▁*/ ▁static ▁void ▁us 1005_ logger _ stderr ▁( char ▁* format , ▁va _ list ▁l ) ▁{ ▁char ▁t _ log [ 1024 ]; ▁# if n def ▁W IN 32 ▁f lock file ( stderr ); ▁# else ▁E nter CriticalSection (& logger _ critical _ section ); ▁# endif ▁if ▁( log _ search _ target ) ▁{ ▁vsnprintf ( t _ log , ▁1024 , ▁format , ▁l ); ▁if ▁( strstr ( t _ log , ▁log _ search _ target )) ▁{ ▁search _ target _ found ▁= ▁1; ▁} ▁f printf ( stderr , ▁"% s ", ▁t _ log ); ▁} ▁else ▁{ ▁ vf printf ( stderr , ▁format , ▁l ); ▁} ▁f flu sh ( stderr ); ▁# if n def ▁W IN 32 ▁f unlock file ( stderr ); ▁# else ▁ Leav eCriticalSection (& logger _ critical _ section ); ▁# endif ▁} ▁static ▁void ▁us 1005_ clean ▁( void ) ▁{ ▁} ▁static ▁int ▁us 1005_ start _ server ▁( int ▁manual _ enroll , ▁int ▁nid , ▁int ▁no _ http _ auth , ▁int ▁enable _ pop ) ▁{ ▁int ▁rv ; ▁rv ▁= ▁st _ start ( US 1005_ SERVER _ PORT , ▁US 1005_ SERVER _ CERTKEY , ▁US 1005_ SERVER _ CERTKEY , ▁" US 1005 ▁test ▁realm ", ▁US 1005_ CACERTS , ▁US 1005_ TRUST _ CERTS , ▁" CA / est Example CA . cnf ", ▁manual _ enroll , ▁enable _ pop , ▁nid ); ▁if ▁( no _ http _ auth ) ▁{ ▁st _ disable _ http _ auth (); ▁} ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁initialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁allocate ▁data ▁or ▁open ▁any ▁* ▁resource s ▁required ▁for ▁all ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 1005_ init _ suite ▁( void ) ▁{ ▁int ▁rv ; ▁# if def ▁W IN 32 ▁/* ▁Initialize ▁ critical ▁section ▁on ▁Windows */ ▁Initialize CriticalSection (& logger _ critical _ section ); ▁# endif ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁& us 1005_ logger _ stderr ); ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 1005_ CACERTS , ▁& cacerts ); ▁if ▁( cacerts _ len ▁ < = ▁0) ▁{ ▁return ▁1; ▁} ▁us 1005_ clean (); ▁/* ▁* ▁Start ▁an ▁instance ▁of ▁the ▁EST ▁server ▁with ▁* ▁automatic ▁enrollment ▁enabled . ▁*/ ▁rv ▁= ▁us 1005_ start _ server ( 0 , ▁0, ▁0, ▁0); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁uninitialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁de allocate ▁data ▁or ▁close ▁any ▁* ▁resource s ▁that ▁we re ▁used ▁for ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 1005_ destroy _ suite ▁( void ) ▁{ ▁st _ stop (); ▁free ( cacerts ); ▁return ▁0; ▁} ▁static ▁E VP _ PKEY ▁* ▁generate _ private _ key ▁( void ) ▁{ ▁RSA ▁* rsa ▁= ▁RSA _ new (); ▁B IG NUM ▁* bn ▁= ▁ BN _ new (); ▁E VP _ PKEY ▁* pkey ; ▁/* ▁* ▁create ▁an ▁RSA ▁ keypair ▁and ▁assign ▁them ▁to ▁a ▁ PKEY ▁and ▁return ▁it . ▁*/ ▁ BN _ set _ word ( bn , ▁0 x 1000 1); ▁RSA _ generate _ key _ ex ( rsa , ▁1024 , ▁bn , ▁NULL ); ▁pkey ▁= ▁E VP _ PKEY _ new (); ▁if ▁( pkey ▁ == ▁NULL ) ▁{ ▁ printf (" \ n Error ▁allocat ing ▁ PKEY ▁structure ▁for ▁new ▁key ▁pair \ n "); ▁return ▁NULL ; ▁} ▁if ▁(! E VP _ PKEY _ set 1 _ RSA ( pkey , ▁rsa )) ▁{ ▁ printf (" \ n Error ▁assign ing ▁RSA ▁key ▁pair ▁to ▁ PKEY ▁structure \ n "); ▁return ▁NULL ; ▁} ▁RSA _ free ( rsa ); ▁ BN _ free ( bn ); ▁return ▁( pkey ); ▁} ▁/* ▁* ▁This ▁function ▁perform s ▁the ▁ easy ▁provision ▁operation ▁using ▁* ▁a ▁UID / PWD ▁to ▁identify ▁the ▁client ▁to ▁the ▁server . ▁This ▁* ▁is ▁used ▁for ▁a ▁variet y ▁of ▁test ▁cases ▁in ▁this ▁ module . ▁*/ ▁static ▁void ▁us 1005_ easy _ provision ▁( char ▁* cn , ▁char ▁* server , ▁int ▁ba _ hint , ▁int ▁use _ cert ) ▁{ ▁EST _ CTX ▁* ectx ; ▁E VP _ PKEY ▁* new _ key ; ▁int ▁rv ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁int ▁ca _ certs _ len ▁= ▁0; ▁un signed ▁char ▁* new _ cert ▁= ▁NULL ; ▁E VP _ PKEY ▁* key ▁= ▁NULL ; ▁un signed ▁char ▁* key _ raw ; ▁int ▁key _ len ; ▁un signed ▁char ▁* cert _ raw ; ▁int ▁cert _ len ; ▁X 509 ▁* cert ▁= ▁NULL ; ▁BIO ▁* in ; ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁NULL ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁if ▁( use _ cert ) ▁{ ▁/* ▁* ▁Rea d ▁in ▁the ▁private ▁key ▁*/ ▁key _ len ▁= ▁read _ binary _ file ( US 1005_ CLIENT _ KEY , ▁& key _ raw ); ▁CU _ ASSERT ( key _ len ▁> ▁0); ▁key ▁= ▁est _ load _ key ( key _ raw , ▁key _ len , ▁EST _ FORMAT _ PEM ); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁free ( key _ raw ); ▁/* ▁* ▁Rea d ▁in ▁the ▁old ▁cert ▁*/ ▁cert _ len ▁= ▁read _ binary _ file ( US 1005_ CLIENT _ CERT , ▁& cert _ raw ); ▁CU _ ASSERT ( cert _ len ▁> ▁0); ▁in ▁= ▁BIO _ new _ mem _ buf ( cert _ raw , ▁cert _ len ); ▁CU _ ASSERT ( in ▁ != ▁NULL ); ▁if ▁(! in ) ▁return ; ▁cert ▁= ▁PEM _ read _ bio _ X 509_ AU X ( in , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( cert ▁ != ▁NULL ); ▁if ▁(! cert ) ▁return ; ▁BIO _ free _ all ( in ); ▁free ( cert _ raw ); ▁} ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁rv ▁= ▁est _ client _ set _ auth ( ectx , ▁US 1005_ UID , ▁US 1005_ PWD , ▁cert , ▁key ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁if ▁( ba _ hint ) ▁{ ▁rv ▁= ▁est _ client _ enable _ basic _ auth _ hint ( ectx ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁} ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁server , ▁US 1005_ SERVER _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁new ▁private ▁key ▁*/ ▁new _ key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( new _ key ▁ != ▁NULL ); ▁/* ▁* ▁Attempt ▁to ▁provision ▁a ▁new ▁cert ▁*/ ▁rv ▁= ▁est _ client _ provision _ cert ( ectx , ▁cn , ▁& pkcs 7_ len , ▁& ca _ certs _ len , ▁new _ key ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁E VP _ PKEY _ free ( new _ key ); ▁/* ▁* ▁ Retrieve ▁the ▁cert ▁that ▁was ▁given ▁to ▁us ▁by ▁the ▁EST ▁server ▁*/ ▁if ▁( rv ▁ == ▁EST _ ERR _ NONE ) ▁{ ▁new _ cert ▁= ▁malloc ( pkcs 7_ len ); ▁CU _ ASSERT ( new _ cert ▁ != ▁NULL ); ▁rv ▁= ▁est _ client _ copy _ enrolled _ cert ( ectx , ▁new _ cert ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁if ▁( new _ cert ) ▁free ( new _ cert ); ▁} ▁else ▁{ ▁est _ destroy ( ectx ); ▁return ; ▁} ▁/* ▁* ▁ Retrieve ▁a ▁copy ▁of ▁the ▁new ▁CA ▁certs ▁*/ ▁if ▁( rv ▁ == ▁EST _ ERR _ NONE ) ▁{ ▁new _ cert ▁= ▁malloc ( ca _ certs _ len ); ▁CU _ ASSERT ( new _ cert ▁ != ▁NULL ); ▁rv ▁= ▁est _ client _ copy _ cacerts ( ectx , ▁new _ cert ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁if ▁( new _ cert ) ▁free ( new _ cert ); ▁} ▁else ▁{ ▁est _ destroy ( ectx ); ▁return ; ▁} ▁E VP _ PKEY _ free ( key ); ▁X 509_ free ( cert ); ▁/* ▁* ▁Cleanup ▁*/ ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁E asy ▁provision ▁- ▁HTTP ▁basic ▁auth , ▁no ▁client ▁cert ▁* ▁* ▁This ▁is ▁a ▁basic ▁test ▁to ▁perform ▁a ▁a ▁full ▁trusted ▁enroll ▁* ▁ sequence ▁of ▁/ cacerts , ▁/ csrattrs , ▁and ▁/ simpleenroll ▁using ▁a ▁* ▁user ▁ID ▁and ▁password ▁to ▁identify ▁the ▁client ▁to ▁the ▁server . ▁* ▁No ▁identity ▁certificate ▁is ▁used ▁by ▁the ▁client . ▁*/ ▁static ▁void ▁us 1005_ test 1 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁us 1005_ easy _ provision (" TC 1005-1 ", ▁US 1005_ SERVER _ IP , ▁0, ▁0); ▁} ▁/* ▁* ▁E asy ▁provision ▁- ▁with ▁HTTP ▁basic ▁auth ▁hint ▁enabled , ▁no ▁client ▁cert ▁* ▁* ▁This ▁is ▁a ▁basic ▁test ▁to ▁perform ▁a ▁a ▁full ▁trusted ▁enroll ▁* ▁ sequence ▁of ▁/ cacerts , ▁/ csrattrs , ▁and ▁/ simpleenroll ▁using ▁a ▁* ▁user ▁ID ▁and ▁password ▁to ▁identify ▁the ▁client ▁to ▁the ▁server . ▁* ▁No ▁identity ▁certificate ▁is ▁used ▁by ▁the ▁client . ▁*/ ▁static ▁void ▁us 1005_ test 2 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁us 1005_ easy _ provision (" TC 1005- 2 ", ▁US 1005_ SERVER _ IP , ▁1, ▁0); ▁} ▁/* ▁* ▁E asy ▁provision ▁- ▁client ▁cert ▁with ▁HTTP ▁basic ▁auth ▁enabled ▁* ▁* ▁This ▁is ▁a ▁basic ▁test ▁to ▁perform ▁a ▁a ▁full ▁trusted ▁enroll ▁* ▁ sequence ▁of ▁/ cacerts , ▁/ csrattrs , ▁and ▁/ simpleenroll ▁using ▁a ▁* ▁user ▁ID ▁and ▁password ▁to ▁identify ▁the ▁client ▁to ▁the ▁server . ▁* ▁No ▁identity ▁certificate ▁is ▁used ▁by ▁the ▁client . ▁*/ ▁static ▁void ▁us 1005_ test 3 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁us 1005_ easy _ provision (" TC 1005- 3 ", ▁US 1005_ SERVER _ IP , ▁0, ▁1); ▁} ▁/* ▁* ▁E asy ▁provision ▁- ▁client ▁cert ▁with ▁HTTP ▁basic ▁auth ▁hint ▁enabled ▁* ▁* ▁This ▁is ▁a ▁basic ▁test ▁to ▁perform ▁a ▁a ▁full ▁trusted ▁enroll ▁* ▁ sequence ▁of ▁/ cacerts , ▁/ csrattrs , ▁and ▁/ simpleenroll ▁using ▁a ▁* ▁user ▁ID ▁and ▁password ▁to ▁identify ▁the ▁client ▁to ▁the ▁server . ▁* ▁No ▁identity ▁certificate ▁is ▁used ▁by ▁the ▁client . ▁*/ ▁static ▁void ▁us 1005_ test 4 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁us 1005_ easy _ provision (" TC 1005- 4", ▁US 1005_ SERVER _ IP , ▁1, ▁1); ▁} ▁/* ▁* ▁Null ▁pointers ▁test ▁*/ ▁static ▁void ▁us 1005_ test 5 ▁( void ) ▁{ ▁int ▁p 7 len ▁= ▁0; ▁int ▁ca len ▁= ▁0; ▁E VP _ PKEY ▁* key ; ▁int ▁rv ; ▁EST _ CTX ▁* ectx ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁C reate ▁a ▁valid ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁NULL ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁rv ▁= ▁est _ client _ set _ auth ( ectx , ▁US 1005_ UID , ▁US 1005_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 1005_ SERVER _ IP , ▁US 1005_ SERVER _ PORT , ▁NULL ); ▁/* ▁* ▁C reate ▁a ▁valid ▁key ▁pair ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁T ry ▁with ▁a ▁NULL ▁context ▁*/ ▁rv ▁= ▁est _ client _ provision _ cert ( NULL , ▁" TEST 2 ", ▁& p 7 len , ▁& calen , ▁key ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NO _ CTX ); ▁/* ▁* ▁T ry ▁with ▁a ▁NULL ▁p 7 ▁length ▁*/ ▁rv ▁= ▁est _ client _ provision _ cert ( ectx , ▁" TEST 2 ", ▁NULL , ▁& calen , ▁key ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ INVALID _ PARAMETERS ); ▁/* ▁* ▁T ry ▁with ▁a ▁NULL ▁cacerts ▁length ▁*/ ▁rv ▁= ▁est _ client _ provision _ cert ( ectx , ▁" TEST 2 ", ▁& p 7 len , ▁NULL , ▁key ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ INVALID _ PARAMETERS ); ▁/* ▁* ▁T ry ▁with ▁a ▁NULL ▁key ▁*/ ▁rv ▁= ▁est _ client _ provision _ cert ( ectx , ▁" TEST 2 ", ▁& p 7 len , ▁& calen , ▁NULL ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NO _ KEY ); ▁E VP _ PKEY _ free ( key ); ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁E nable ▁pop ▁on ▁server , ▁enable ▁CSR ▁attributes ▁on ▁server ▁w / o ▁c hallengePassword ▁OID ▁*/ ▁static ▁void ▁us 1005_ test 6 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Re start ▁the ▁server ▁with ▁PoP ▁enabled ▁*/ ▁st _ stop (); ▁us 1005_ start _ server ( 0 , ▁0, ▁0, ▁1); ▁/* ▁* ▁Set ▁the ▁CSR ▁attributes ▁to ▁a ▁value ▁that ▁does n ' t ▁include ▁c hallengePassword ▁OID ▁*/ ▁st _ set _ csrattrs ( US 1005_ CSR _ NOPOP ); ▁/* ▁* ▁We ▁will ▁search ▁the ▁debug s ▁for ▁the ▁appro pri ate ▁output ▁* ▁to ▁confirm ▁the ▁PoP ▁be havi or ▁is ▁working ▁as ▁desired . ▁*/ ▁log _ search _ target ▁= ▁" Client ▁will ▁include ▁c hallengePassword ▁in ▁CSR \0" ; ▁search _ target _ found ▁= ▁0; ▁/* ▁* ▁P rovision ▁a ▁new ▁cert ▁*/ ▁us 1005_ easy _ provision (" TC 1005- 6 ", ▁US 1005_ SERVER _ IP , ▁0, ▁0); ▁CU _ ASSERT ( search _ target _ found ▁ == ▁1); ▁/* ▁* ▁Set ▁the ▁CSR ▁attributes ▁back ▁to ▁default ▁value ▁*/ ▁st _ set _ csrattrs ( NULL ); ▁} ▁/* ▁* ▁Disabl e ▁pop ▁on ▁server , ▁enable ▁CSR ▁attributes ▁on ▁server ▁w / o ▁c hallengePassword ▁OID ▁*/ ▁static ▁void ▁us 1005_ test 7 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Re start ▁the ▁server ▁with ▁PoP ▁disabled ▁*/ ▁st _ stop (); ▁us 1005_ start _ server ( 0 , ▁0, ▁0, ▁0); ▁/* ▁* ▁Set ▁the ▁CSR ▁attributes ▁to ▁a ▁value ▁that ▁does n ' t ▁include ▁c hallengePassword ▁OID ▁*/ ▁st _ set _ csrattrs ( US 1005_ CSR _ NOPOP ); ▁/* ▁* ▁We ▁will ▁search ▁the ▁debug s ▁for ▁the ▁appro pri ate ▁output ▁* ▁to ▁confirm ▁the ▁PoP ▁be havi or ▁is ▁working ▁as ▁desired . ▁*/ ▁log _ search _ target ▁= ▁" Cert ▁request ▁does ▁not ▁contain ▁PoP \0" ; ▁search _ target _ found ▁= ▁0; ▁/* ▁* ▁P rovision ▁a ▁new ▁cert ▁*/ ▁us 1005_ easy _ provision (" TC 1005- 7", ▁US 1005_ SERVER _ IP , ▁0, ▁0); ▁CU _ ASSERT ( search _ target _ found ▁ == ▁1); ▁/* ▁* ▁Set ▁the ▁CSR ▁attributes ▁back ▁to ▁default ▁value ▁*/ ▁st _ set _ csrattrs ( NULL ); ▁} ▁/* ▁* ▁E nable ▁pop ▁on ▁server , ▁enable ▁CSR ▁attributes ▁on ▁server ▁w / ▁c hallengePassword ▁OID ▁*/ ▁static ▁void ▁us 1005_ test 8 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Re start ▁the ▁server ▁with ▁PoP ▁enabled ▁*/ ▁st _ stop (); ▁us 1005_ start _ server ( 0 , ▁0, ▁0, ▁1); ▁/* ▁* ▁Set ▁the ▁CSR ▁attributes ▁to ▁the ▁default ▁value , ▁which ▁include s ▁c hallengePassword ▁OID ▁*/ ▁st _ set _ csrattrs ( NULL ); ▁/* ▁* ▁We ▁will ▁search ▁the ▁debug s ▁for ▁the ▁appro pri ate ▁output ▁* ▁to ▁confirm ▁the ▁PoP ▁be havi or ▁is ▁working ▁as ▁desired . ▁*/ ▁log _ search _ target ▁= ▁" Client ▁will ▁include ▁c hallengePassword ▁in ▁CSR \0" ; ▁search _ target _ found ▁= ▁0; ▁/* ▁* ▁P rovision ▁a ▁new ▁cert ▁*/ ▁us 1005_ easy _ provision (" TC 1005- 8 ", ▁US 1005_ SERVER _ IP , ▁0, ▁0); ▁CU _ ASSERT ( search _ target _ found ▁ == ▁1); ▁/* ▁* ▁Set ▁the ▁CSR ▁attributes ▁back ▁to ▁default ▁value ▁*/ ▁st _ set _ csrattrs ( NULL ); ▁} ▁/* ▁* ▁Disabl e ▁pop ▁on ▁server , ▁enable ▁CSR ▁attributes ▁on ▁server ▁w / c hallengePassword ▁OID ▁*/ ▁static ▁void ▁us 1005_ test 9 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Re start ▁the ▁server ▁with ▁PoP ▁disabled ▁*/ ▁st _ stop (); ▁us 1005_ start _ server ( 0 , ▁0, ▁0, ▁0); ▁/* ▁* ▁Set ▁the ▁CSR ▁attributes ▁to ▁the ▁default ▁value , ▁which ▁include s ▁c hallengePassword ▁OID ▁*/ ▁st _ set _ csrattrs ( NULL ); ▁/* ▁* ▁We ▁will ▁search ▁the ▁debug s ▁for ▁the ▁appro pri ate ▁output ▁* ▁to ▁confirm ▁the ▁PoP ▁be havi or ▁is ▁working ▁as ▁desired . ▁*/ ▁log _ search _ target ▁= ▁" Client ▁will ▁include ▁c hallengePassword ▁in ▁CSR \0" ; ▁search _ target _ found ▁= ▁0; ▁/* ▁* ▁P rovision ▁a ▁new ▁cert ▁*/ ▁us 1005_ easy _ provision (" TC 1005-9 ", ▁US 1005_ SERVER _ IP , ▁0, ▁0); ▁CU _ ASSERT ( search _ target _ found ▁ == ▁1); ▁/* ▁* ▁Set ▁the ▁CSR ▁attributes ▁back ▁to ▁default ▁value ▁*/ ▁st _ set _ csrattrs ( NULL ); ▁} ▁/* ▁* ▁E nable ▁pop ▁on ▁server , ▁disable ▁CSR ▁attributes ▁on ▁server ▁*/ ▁static ▁void ▁us 1005_ test 10 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Re start ▁the ▁server ▁with ▁PoP ▁enabled ▁*/ ▁st _ stop (); ▁us 1005_ start _ server ( 0 , ▁0, ▁0, ▁1); ▁/* ▁* ▁Set ▁the ▁CSR ▁attributes ▁to ▁the ▁default ▁value , ▁which ▁include s ▁c hallengePassword ▁OID ▁*/ ▁st _ set _ csrattrs ( NULL ); ▁st _ disable _ csr _ cb (); ▁/* ▁* ▁We ▁will ▁search ▁the ▁debug s ▁for ▁the ▁appro pri ate ▁output ▁* ▁to ▁confirm ▁the ▁PoP ▁be havi or ▁is ▁working ▁as ▁desired . ▁*/ ▁log _ search _ target ▁= ▁" Client ▁will ▁include ▁c hallengePassword ▁in ▁CSR \0" ; ▁search _ target _ found ▁= ▁0; ▁/* ▁* ▁P rovision ▁a ▁new ▁cert ▁*/ ▁us 1005_ easy _ provision (" TC 1005- 10", ▁US 1005_ SERVER _ IP , ▁0, ▁0); ▁CU _ ASSERT ( search _ target _ found ▁ == ▁1); ▁/* ▁* ▁Set ▁the ▁CSR ▁attributes ▁back ▁to ▁default ▁value ▁*/ ▁st _ set _ csrattrs ( NULL ); ▁} ▁/* ▁* ▁Disabl e ▁pop ▁on ▁server , ▁disable ▁CSR ▁attributes ▁on ▁server ▁*/ ▁static ▁void ▁us 1005_ test 11 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Re start ▁the ▁server ▁with ▁PoP ▁disabled ▁*/ ▁st _ stop (); ▁us 1005_ start _ server ( 0 , ▁0, ▁0, ▁0); ▁/* ▁* ▁Set ▁the ▁CSR ▁attributes ▁to ▁the ▁default ▁value , ▁which ▁include s ▁c hallengePassword ▁OID ▁*/ ▁st _ set _ csrattrs ( NULL ); ▁st _ disable _ csr _ cb (); ▁/* ▁* ▁We ▁will ▁search ▁the ▁debug s ▁for ▁the ▁appro pri ate ▁output ▁* ▁to ▁confirm ▁the ▁PoP ▁be havi or ▁is ▁working ▁as ▁desired . ▁*/ ▁log _ search _ target ▁= ▁" Cert ▁request ▁does ▁not ▁contain ▁PoP \0" ; ▁search _ target _ found ▁= ▁0; ▁/* ▁* ▁P rovision ▁a ▁new ▁cert ▁*/ ▁us 1005_ easy _ provision (" TC 1005-1 1", ▁US 1005_ SERVER _ IP , ▁0, ▁0); ▁CU _ ASSERT ( search _ target _ found ▁ == ▁1); ▁/* ▁* ▁Set ▁the ▁CSR ▁attributes ▁back ▁to ▁default ▁value ▁*/ ▁st _ set _ csrattrs ( NULL ); ▁} ▁// ▁// ▁The ▁next ▁two ▁test ▁ca es ▁repeate ▁tests ▁ 3 ▁& ▁4 ▁but ▁with ▁// ▁HTTP ▁auth ▁disabled ▁on ▁the ▁server . ▁// ▁/* ▁* ▁E asy ▁provision ▁- ▁client ▁cert ▁with ▁HTTP ▁basic ▁auth ▁disabled ▁* ▁* ▁This ▁is ▁a ▁basic ▁test ▁to ▁perform ▁a ▁a ▁full ▁trusted ▁enroll ▁* ▁ sequence ▁of ▁/ cacerts , ▁/ csrattrs , ▁and ▁/ simpleenroll ▁using ▁a ▁* ▁user ▁ID ▁and ▁password ▁to ▁identify ▁the ▁client ▁to ▁the ▁server . ▁* ▁No ▁identity ▁certificate ▁is ▁used ▁by ▁the ▁client . ▁*/ ▁static ▁void ▁us 1005_ test 93 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Re start ▁the ▁server ▁with ▁HTTP ▁auth ▁disabled ▁*/ ▁st _ stop (); ▁us 1005_ start _ server ( 0 , ▁0, ▁1, ▁0); ▁us 1005_ easy _ provision (" TC 1005-9 3 ", ▁US 1005_ SERVER _ IP , ▁0, ▁1); ▁} ▁/* ▁* ▁E asy ▁provision ▁- ▁client ▁cert ▁with ▁HTTP ▁basic ▁auth ▁hint ▁enabled ▁* ▁* ▁This ▁is ▁a ▁basic ▁test ▁to ▁perform ▁a ▁a ▁full ▁trusted ▁enroll ▁* ▁ sequence ▁of ▁/ cacerts , ▁/ csrattrs , ▁and ▁/ simpleenroll ▁using ▁a ▁* ▁user ▁ID ▁and ▁password ▁to ▁identify ▁the ▁client ▁to ▁the ▁server . ▁* ▁No ▁identity ▁certificate ▁is ▁used ▁by ▁the ▁client . ▁*/ ▁static ▁void ▁us 1005_ test 94 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁us 1005_ easy _ provision (" TC 1005-9 4", ▁US 1005_ SERVER _ IP , ▁1, ▁1); ▁} ▁int ▁us 1005_ add _ suite ▁( void ) ▁{ ▁# if def ▁HA VE _ C UNIT ▁CU _ pSuite ▁pSuite ▁= ▁NULL ; ▁/* ▁add ▁a ▁suite ▁to ▁the ▁ registry ▁*/ ▁pSuite ▁= ▁CU _ add _ suite (" us 1005_ client _ easy _ provision ", ▁us 1005_ init _ suite , ▁us 1005_ destroy _ suite ); ▁if ▁( NULL ▁ == ▁pSuite ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁/* ▁* ▁Add ▁the ▁tests ▁to ▁the ▁suite ▁* ▁* ▁ ***** *************** IMPORTANT ***** **************** ▁* ▁Do ▁not ▁change ▁the ▁order ▁of ▁these ▁tests . ▁* ▁Some ▁of ▁the ▁tests ▁stop ▁the ▁EST ▁server ▁and ▁restart ▁* ▁it ▁using ▁diff erent ▁certs . ▁If ▁you ▁change ▁the ▁order ▁* ▁then ▁fal se ▁negative s ▁ma y ▁occur . ▁* ▁** **************** **************** **************** ▁* ▁*/ ▁if ▁( ( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" E asy ▁provision ▁- ▁no ▁cert ", ▁us 1005_ test 1)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" E asy ▁provision ▁- ▁no ▁cert ▁HTTP ▁ BA ▁hint ", ▁us 1005_ test 2)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" E asy ▁provision ▁- ▁w / cert ", ▁us 1005_ test 3)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" E asy ▁provision ▁- ▁w / cert ▁HTTP ▁ BA ▁hint ", ▁us 1005_ test 4)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Null ▁pointers ", ▁us 1005_ test 5)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" E nable ▁PoP ▁- ▁no ▁c hallengePassword ", ▁us 1005_ test 6)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Disabl e ▁PoP ▁- ▁no ▁c hallengePassword ", ▁us 1005_ test 7)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" E nable ▁PoP ▁- ▁w / c hallengePassword ", ▁us 1005_ test 8)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Disabl e ▁PoP ▁- ▁w / c hallengePassword ", ▁us 1005_ test 9 )) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" E nable ▁PoP ▁- ▁CSR ▁disabled ", ▁us 1005_ test 10)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Disabl e ▁PoP ▁- ▁CSR ▁disabled ", ▁us 1005_ test 11)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" E asy ▁provision ▁- ▁w / cert ▁no ▁server ▁auth ", ▁us 1005_ test 9 3)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" E asy ▁provision ▁- ▁w / cert ▁HTTP ▁ BA ▁hint ▁no ▁server ▁auth ", ▁us 1005_ test 94 ))) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁return ▁CU E _ SUCCESS ; ▁# endif ▁}