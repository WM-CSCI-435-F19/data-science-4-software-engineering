▁/* -- ---------------- ---------------- ---------------- ---------------- ▁* ▁us 894 . c ▁- ▁ Unit ▁Test s ▁for ▁User ▁Stor y ▁ 894 ▁- ▁ Proxy ▁cacerts ▁* ▁* ▁November , ▁2013 ▁* ▁* ▁Copy right ▁( c ) ▁2013 , ▁2016 ▁by ▁ cisco ▁S ystems , ▁Inc . ▁* ▁All ▁ right s ▁ reserved . ▁* -- ---------------- ---------------- ---------------- ---------------- ▁* ▁* ▁ Proxy ▁mode ▁is ▁primar ily ▁server ▁mode ▁ where ▁the ▁processing ▁of ▁certain ▁* ▁requests ▁from ▁clients ▁are ▁passed ▁long ▁to ▁the ▁upstream ▁server ▁using ▁* ▁client ▁mode ▁function ality . ▁In ▁the ▁case ▁of ▁Get ▁CACerts , ▁proxy ▁mode ▁* ▁functions ▁al most ▁identical ly ▁as ▁server ▁mode . ▁The ▁CA ▁certs ▁response ▁* ▁chain ▁is ▁passed ▁in ▁and ▁is ▁then ▁sent ▁in ▁repl y ▁to ▁the ▁Get ▁CACerts ▁* ▁requests ▁from ▁down stream ▁clients . ▁* ▁* ▁This ▁test ▁code ▁is ▁take n ▁large ly ▁from ▁US 901 , ▁Server ▁Get ▁CACerts , ▁* ▁*/ ▁# include ▁ < std io . h > ▁# if n def ▁W IN 32 ▁# include ▁ < uni std . h > ▁# endif ▁# include ▁ < est . h > ▁# include ▁ < curl / curl . h > ▁# include ▁" curl _ util s . h " ▁# include ▁" test _ util s . h " ▁# include ▁ < openssl / ssl . h > ▁# include ▁" st _ server . h " ▁# include ▁" st _ proxy . h " ▁# if def ▁HA VE _ C UNIT ▁# include ▁" CUnit / Basic . h " ▁# include ▁" CUnit / A utomat ed . h " ▁# endif ▁# define ▁US 894_ PKCS 10_ REQ ▁" MIICh jCCA W 4 CAQAw QT El MC MGA 1 UEAxM c cmV x IGJ 5 IGN saWV u dCB pbiB k ZW 1 v IHN 0\ n ZXAg Mj EY MBYG A 1 UEB RM PU El E Old pZG dl dCB TT joy MIIBIjANBgkq hk iG 9 w 0 BAQEF \ n AAOCAQ 8 AMIIBCgKCAQEA /6 JU Wp X XD wC kv WP DWO 0 y AND Qz FM x ro LE Ih 6/ vd Nw fR SG \ ne NG C 0 ef cL 5 L 4 N xH ZO mO 14 yq MEM Gp Cy Hz 7 Ob 3 hh N Pu 0 K 81 gM Uz R qz w mm JH Xw Rq ob A \ ni 59 OQ Ek H aP hI 1 T 4 Rk V nSY Z LO owS qo n MZ jW bT 0 i qZ DY / RD 8 l 3 Gj H 3 gE IBMQ Fv 62 NT \ n 1 CS u 9 df HE g 7 6+ Dn JA hd dd UD JD XO 3 A WI 5 s 7 zs Ll zB oP lg d 4 oK 5 K 1 wqE E 2 pq h nZ x ei \ nc 94 WF q XQ 1 ky rW 0 PO V lQ + 32 mo WT QT FA 7 SQ E 2 u EF + GB X s RP a EO + FL Qj E 8 J HO ew Lf / T \ n qX 0 ng yw n vx KR pK gu SBi c 31 WV ks wP s 8 E 34 pjj ZA vd x QIDAQABo AAwDQYJKoZIhvcN \ n AQEFBQADggEBA AZ XV oor Rx Av QP iM N DpR ZHh iD 5 O 2 Yd 7 APB Bz nV gR ll 1 H ML 5 dp gnu \ n XY 7 ZC Yw Qt xw NG YV tK Ja ZC iW 7 dWr Zh v nF 5 ua 3 wU r 9 R 2 Z No Lw VR 0 Z 9 Y 5 ww n 1 cJ rd SG \ nc Uu BN /0 XB GI 6 g 6 fQ lD DI mQ oP SF 8 gy gc TC CH ba 7 Uv 0 i 8 oi Ci wf 5 UF + F 3 NY BoB L / PP \ n lO 2 zB EY NQ 65 + W 3 Y gf Uy YP 0 Cr 0 N yX g kz 3 Q h 2 Xa 2 e RFe W 56 oe jm c EaM jq 6 yx 7 WA C 2 X \ nk 3 w 1 G 6 Le 1 UI nz uen MS cN g nt 8 Fa I 43 e AIL Md LQ / Ek xc 30 fj xA 12 RD h / Yz DY i Ex Fv 0\ ndP d 4 o 5 u PK t 4 jR it vG iA Pm / O CdX iY A wq iu 2 w =\ n " ▁# define ▁US 894_ PKCS 10_ CT ▁" Content - Type : ▁application / pkcs 10" ▁# define ▁US 894_ UIDPWD _ GOOD ▁" estuser : estpwd " ▁# define ▁US 894_ UIDPWD _ BAD ▁" estuser : bogus " ▁# if n def ▁W IN 32 ▁# define ▁US 894_ CACERTS ▁" CA / estCA / cacert . crt " ▁# define ▁US 894_ TRUSTED _ CERT ▁" CA / trustedcerts . crt " ▁# define ▁US 894_ TRUSTED _ CERT _ AND _ CRL ▁" US 894/ trustedcerts and crl . crt " ▁# define ▁US 894_ EXPLICIT _ CERT ▁" US 894/ explicit - cert . pem " ▁# define ▁US 894_ EXPLICIT _ KEY ▁" US 894/ explicit - key . pem " ▁# define ▁US 894_ IMPLICIT _ CERT ▁" US 894/ implicit - cert . pem " ▁# define ▁US 894_ IMPLICIT _ KEY ▁" US 894/ implicit - key . pem " ▁# define ▁US 894_ REVOKED _ CERT ▁" US 894/ revoked - cert . pem " ▁# define ▁US 894_ REVOKED _ KEY ▁" US 894/ revoked - key . pem " ▁# define ▁US 894_ SELF SIGN _ CERT ▁" US 894/ self signed - cert . pem " ▁# define ▁US 894_ SELF SIGN _ KEY ▁" US 894/ self signed - key . pem " ▁# define ▁US 894_ CACERT ▁" CA / estCA / cacert . crt " ▁# define ▁US 894_ EXT CERT ▁" CA / extCA / cacert . crt " ▁# define ▁US 894_ SERVER _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 894_ SERVER _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 894_ PROXY _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁// ▁change ▁these ▁other ▁to ▁ ded icated ▁ones ▁# define ▁US 894_ PROXY _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁static ▁char ▁test 5 _ outfile [ FILE NAME _ MAX ] ▁= ▁" US 894/ test 5 . crt "; ▁static ▁char ▁test 26 _ outfile [ FILE NAME _ MAX ] ▁= ▁" US 894/ test 26 . crt "; ▁static ▁char ▁test 27 _ outfile [ FILE NAME _ MAX ] ▁= ▁" US 894/ test 27. crt "; ▁# else ▁# define ▁US 894_ CACERTS ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 894_ TRUSTED _ CERT ▁" CA \\ trustedcerts . crt " ▁# define ▁US 894_ TRUSTED _ CERT _ AND _ CRL ▁" US 894\\ trustedcerts and crl . crt " ▁# define ▁US 894_ EXPLICIT _ CERT ▁" US 894\\ explicit - cert . pem " ▁# define ▁US 894_ EXPLICIT _ KEY ▁" US 894\\ explicit - key . pem " ▁# define ▁US 894_ IMPLICIT _ CERT ▁" US 894\\ implicit - cert . pem " ▁# define ▁US 894_ IMPLICIT _ KEY ▁" US 894\\ implicit - key . pem " ▁# define ▁US 894_ REVOKED _ CERT ▁" US 894\\ revoked - cert . pem " ▁# define ▁US 894_ REVOKED _ KEY ▁" US 894\\ revoked - key . pem " ▁# define ▁US 894_ SELF SIGN _ CERT ▁" US 894\\ self signed - cert . pem " ▁# define ▁US 894_ SELF SIGN _ KEY ▁" US 894\\ self signed - key . pem " ▁# define ▁US 894_ CACERT ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 894_ EXT CERT ▁" CA \\ extCA \\ cacert . crt " ▁# define ▁US 894_ SERVER _ CERT ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# define ▁US 894_ SERVER _ KEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# define ▁US 894_ PROXY _ CERT ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁// ▁change ▁these ▁other ▁to ▁ ded icated ▁ones ▁# define ▁US 894_ PROXY _ KEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁static ▁char ▁test 5 _ outfile [ FILE NAME _ MAX ] ▁= ▁" US 894\\ test 5 . crt "; ▁static ▁char ▁test 26 _ outfile [ FILE NAME _ MAX ] ▁= ▁" US 894\\ test 26 . crt "; ▁static ▁char ▁test 27 _ outfile [ FILE NAME _ MAX ] ▁= ▁" US 894\\ test 27. crt "; ▁# endif ▁/* ▁# define ▁US 894_ TCP _ SERVER _ PORT _ BASIC ▁128 94 ▁*/ ▁# define ▁US 894_ ENROLL _ URL ▁" http s ://127.0.0.1: 16894 /. well - known / est / simpleenroll " ▁# define ▁US 894_ CACERT _ URL ▁" http s ://127.0.0.1: 16894 /. well - known / est / cacerts " ▁/* ▁# define ▁US 894_ TCP _ SERVER _ PORT _ DIGEST ▁13 894 ▁*/ ▁/* ▁# define ▁US 894_ TCP _ SERVER _ PORT _ HTTP _ DISABLE ▁14 894 ▁*/ ▁# define ▁US 894_ TCP _ SERVER _ PORT ▁1589 4 ▁# define ▁US 894_ TCP _ PROXY _ PORT ▁ 16894 ▁static ▁void ▁us 894_ clean ▁( void ) ▁{ ▁char ▁cmd [20 0 ]; ▁# if n def ▁W IN 32 ▁s printf ( cmd , ▁" rm ▁% s ", ▁test 5 _ outfile ); ▁system ( cmd ); ▁s printf ( cmd , ▁" rm ▁% s ", ▁test 26 _ outfile ); ▁system ( cmd ); ▁s printf ( cmd , ▁" rm ▁% s ", ▁test 27 _ outfile ); ▁system ( cmd ); ▁# else ▁s printf ( cmd , ▁" del ▁% s ", ▁test 5 _ outfile ); ▁system ( cmd ); ▁s printf ( cmd , ▁" del ▁% s ", ▁test 26 _ outfile ); ▁system ( cmd ); ▁s printf ( cmd , ▁" del ▁% s ", ▁test 27 _ outfile ); ▁system ( cmd ); ▁# endif ▁} ▁int ▁us 894_ start _ server ▁( ) ▁{ ▁int ▁rv ▁= ▁0; ▁/* ▁* ▁First ▁we ▁start ▁an ▁EST ▁server ▁a cting ▁as ▁the ▁CA ▁*/ ▁rv ▁= ▁st _ start ( US 894_ TCP _ SERVER _ PORT , ▁US 894_ SERVER _ CERT , ▁US 894_ SERVER _ KEY , ▁" estrealm ", ▁US 894_ CACERT , ▁US 894_ TRUSTED _ CERT , ▁" US 894/ est Example CA . cnf ", ▁0, ▁// ▁manual ▁enroll ▁0, ▁// ▁disable ▁PoP ▁0); ▁// ▁ ecdhe ▁nid ▁info ▁SL EEP (1); ▁if ▁( rv ▁ != ▁EST _ ERR _ NONE ) ▁return ▁rv ; ▁/* ▁* ▁ Next ▁we ▁start ▁an ▁EST ▁proxy ▁a cting ▁as ▁an ▁RA . ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 894_ TCP _ PROXY _ PORT , ▁US 894_ PROXY _ CERT , ▁US 894_ PROXY _ KEY , ▁" estrealm ", ▁US 894_ CACERT , ▁US 894_ TRUSTED _ CERT , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 894_ TCP _ SERVER _ PORT , ▁0, ▁// ▁disable ▁PoP ▁0); ▁// ▁ ecdhe ▁nid ▁info ▁SL EEP (1); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁initialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁allocate ▁data ▁or ▁open ▁any ▁* ▁resource s ▁required ▁for ▁all ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 894_ init _ suite ▁( void ) ▁{ ▁int ▁rv ; ▁us 894_ clean (); ▁ printf (" \ n Start ing ▁EST ▁ Proxy ▁Get ▁CACerts ▁ unit ▁tests . \ n "); ▁/* ▁* ▁Start ▁an ▁instance ▁of ▁the ▁EST ▁server ▁with ▁* ▁automatic ▁enrollment ▁enabled . ▁*/ ▁rv ▁= ▁us 894_ start _ server (); ▁return ▁rv ; ▁} ▁void ▁us 894_ stop _ server ▁( ) ▁{ ▁st _ stop (); ▁st _ proxy _ stop (); ▁SL EEP ( 2 ); ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁uninitialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁de allocate ▁data ▁or ▁close ▁any ▁* ▁resource s ▁that ▁we re ▁used ▁for ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 894_ destroy _ suite ▁( void ) ▁{ ▁us 894_ stop _ server (); ▁ printf (" C ompleted ▁EST ▁ Proxy ▁Get ▁CACerts ▁ unit ▁tests . \ n "); ▁return ▁0; ▁} ▁/* ▁* ▁HTTP ▁Basic ▁auth ▁* ▁* ▁This ▁test ▁case ▁uses ▁libcurl ▁to ▁test ▁HTTP ▁Basic ▁* ▁authentication ▁is ▁working ▁on ▁the ▁EST ▁proxy / server . ▁* ▁It ▁must ▁use ▁a ▁simpleenroll ▁message ▁since ▁the ▁* ▁cacerts ▁message ▁does ▁not ▁require ▁the ▁client ▁* ▁to ▁be ▁authenticated . ▁*/ ▁static ▁void ▁us 894_ test 1 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post ( US 894_ ENROLL _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ UIDPWD _ GOOD , ▁US 894_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁a ▁valid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁} ▁/* ▁* ▁HTTP ▁Basic ▁Auth ▁failure , ▁B ad ▁Password ▁* ▁* ▁This ▁test ▁case ▁uses ▁libcurl ▁to ▁test ▁HTTP ▁Basic ▁* ▁authentication ▁is ▁working ▁on ▁the ▁EST ▁proxy / server , ▁* ▁while ▁using ▁a ▁ bogus ▁password . ▁* ▁It ▁must ▁use ▁a ▁simpleenroll ▁message ▁since ▁the ▁* ▁cacerts ▁message ▁does ▁not ▁require ▁the ▁client ▁* ▁to ▁be ▁authenticated . ▁*/ ▁static ▁void ▁us 894_ test 2 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post ( US 894_ ENROLL _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ UIDPWD _ BAD , ▁US 894_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁an ▁invalid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁400 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁401 ); ▁} ▁/* ▁* ▁HTTP ▁Digest ▁Auth ▁* ▁* ▁This ▁test ▁case ▁uses ▁libcurl ▁to ▁test ▁HTTP ▁Digest ▁* ▁authentication ▁is ▁working ▁on ▁the ▁EST ▁proxy / server . ▁* ▁It ▁must ▁use ▁a ▁simpleenroll ▁message ▁since ▁the ▁* ▁cacerts ▁message ▁does ▁not ▁require ▁the ▁client ▁* ▁to ▁be ▁authenticated . ▁* ▁* ▁This ▁test ▁also ▁tests ▁the ▁correct ▁operation ▁of ▁est _ proxy _ set _ auth () ▁*/ ▁static ▁void ▁us 894_ test 3 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁st _ proxy _ set _ auth ( AUTH _ DIGEST ); ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post ( US 894_ ENROLL _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ UIDPWD _ GOOD , ▁US 894_ CACERTS , ▁CURL AUTH _ DIGEST , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁a ▁valid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁success ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁st _ proxy _ set _ auth ( AUTH _ BASIC ); ▁} ▁/* ▁* ▁HTTP ▁Digest ▁Auth ▁fail ▁* ▁* ▁This ▁test ▁case ▁uses ▁libcurl ▁to ▁test ▁HTTP ▁Digest ▁* ▁authentication ▁is ▁working ▁on ▁the ▁EST ▁proxy / server . ▁* ▁This ▁is ▁the ▁negative ▁test ▁case ▁for ▁Digest ▁auth . ▁* ▁It ▁must ▁use ▁a ▁simpleenroll ▁message ▁since ▁the ▁* ▁cacerts ▁message ▁does ▁not ▁require ▁the ▁client ▁* ▁to ▁be ▁authenticated . ▁The ▁EST ▁proxy / server ▁should ▁be ▁* ▁running ▁and ▁listen ing ▁to ▁port ▁808 7 ▁prior ▁to ▁this ▁* ▁test ▁being ▁run . ▁*/ ▁static ▁void ▁us 894_ test 4 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁st _ proxy _ set _ auth ( AUTH _ DIGEST ); ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post ( US 894_ ENROLL _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ UIDPWD _ BAD , ▁US 894_ CACERTS , ▁CURL AUTH _ DIGEST , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁an ▁invalid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁a ▁400 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁401 ); ▁st _ proxy _ set _ auth ( AUTH _ BASIC ); ▁} ▁static ▁ FILE ▁* outfile ; ▁static ▁size _ t ▁write _ func ▁( void ▁* ptr , ▁size _ t ▁size , ▁size _ t ▁nmemb , ▁void ▁* user data ) ▁{ ▁size _ t ▁written ; ▁written ▁= ▁f write ( ptr , ▁size , ▁nmemb , ▁outfile ); ▁return ▁written ; ▁} ▁/* ▁* ▁This ▁test ▁case ▁does ▁a ▁simple ▁cacerts ▁request ▁* ▁and ▁look s ▁for ▁the ▁HTTP ▁200 ▁response ▁code . ▁*/ ▁static ▁void ▁us 894_ test 5 ▁( void ) ▁{ ▁long ▁rv ; ▁char ▁cmd [20 0 ]; ▁ LOG _ FUNC _ NM ▁; ▁SL EEP (1); ▁outfile ▁= ▁f open ( test 5 _ outfile , ▁" w "); ▁rv ▁= ▁curl _ http _ get ( US 894_ CACERT _ URL , ▁US 894_ CACERTS , ▁& write _ func ); ▁f close ( outfile ); ▁/* ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁a ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁s printf ( ▁cmd , ▁" openssl ▁base 64 ▁- d ▁- in ▁% s ▁| ▁openssl ▁pkcs 7 ▁- inform ▁DER ▁- text ▁- print _ certs ", ▁test 5 _ outfile ); ▁rv ▁= ▁system ( cmd ); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁} ▁static ▁void ▁us 894_ test _ sslversion ▁( const ▁SSL _ METHOD ▁* m , ▁int ▁expect _ fail ) ▁{ ▁BIO ▁* conn ; ▁SSL ▁* ssl ; ▁SSL _ CTX ▁* ssl _ ctx ▁= ▁NULL ; ▁int ▁rv ; ▁ssl _ ctx ▁= ▁SSL _ CTX _ new ( m ); ▁CU _ ASSERT ( ssl _ ctx ▁ != ▁NULL ); ▁/* ▁* ▁No w ▁that ▁the ▁SSL ▁context ▁is ▁ready , ▁open ▁a ▁socket ▁* ▁with ▁the ▁server ▁and ▁bind ▁that ▁socket ▁to ▁the ▁context . ▁*/ ▁conn ▁= ▁open _ tcp _ socket _ ip v 4 ( "127.0.0.1", ▁" 16894 "); ▁CU _ ASSERT ( conn ▁ != ▁NULL ); ▁/* ▁* ▁C reate ▁an ▁SSL ▁session ▁context ▁*/ ▁ssl ▁= ▁SSL _ new ( ssl _ ctx ); ▁SSL _ set _ bio ( ssl , ▁conn , ▁conn ); ▁/* ▁* ▁No w ▁that ▁we ▁have ▁everything ▁ready , ▁let ' s ▁initiate ▁the ▁TLS ▁* ▁handshake . ▁*/ ▁rv ▁= ▁SSL _ connect ( ssl ); ▁if ▁(! expect _ fail ) ▁{ ▁CU _ ASSERT ( rv ▁> ▁0); ▁} ▁else ▁{ ▁CU _ ASSERT ( rv ▁ < = ▁0); ▁} ▁/* ▁* ▁Cleanup ▁all ▁the ▁data ▁*/ ▁SSL _ shutdown ( ssl ); ▁SSL _ free ( ssl ); ▁SSL _ CTX _ free ( ssl _ ctx ); ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁create ▁a ▁SSL ▁3. 0 ▁connection ▁* ▁with ▁the ▁EST ▁server . ▁This ▁should ▁fail , ▁as ▁TLS ▁1.0 ▁* ▁is ▁not ▁allowed . ▁*/ ▁static ▁void ▁us 894_ test 6 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁us 894_ test _ sslversion ( SSLv 3 _ client _ method (), ▁1); ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁create ▁a ▁TLS ▁1.0 ▁connection ▁* ▁with ▁the ▁EST ▁server . ▁This ▁should ▁fail , ▁as ▁TLS ▁1.0 ▁* ▁is ▁not ▁allowed . ▁*/ ▁static ▁void ▁us 894_ test 7 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁us 894_ test _ sslversion ( TLS v 1 _ client _ method (), ▁1); ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁create ▁a ▁TLS ▁1.1 ▁connection ▁* ▁with ▁the ▁EST ▁server . ▁This ▁should ▁succeed . ▁*/ ▁static ▁void ▁us 894_ test 8 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁us 894_ test _ sslversion ( TLS v 1 _ 1 _ client _ method (), ▁0); ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁create ▁a ▁TLS ▁1.2 ▁connection ▁* ▁with ▁the ▁EST ▁server . ▁This ▁should ▁succeed . ▁*/ ▁static ▁void ▁us 894_ test 9 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁us 894_ test _ sslversion ( TLS v 1 _ 2 _ client _ method (), ▁0); ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁use ▁a ▁client ▁certificate ▁to ▁* ▁verify ▁the ▁TLS ▁client ▁authenti ait on ▁is ▁working . ▁* ▁The ▁certificate ▁used ▁is ▁signed ▁by ▁the ▁explicit ▁cert ▁* ▁chain . ▁This ▁should ▁succeed . ▁*/ ▁static ▁void ▁us 894_ test 10 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁rv ▁= ▁st _ proxy _ http _ disable (1); ▁if ▁( rv ▁ == ▁-1) ▁{ ▁ printf (" C ould ▁not ▁set ▁HTTP ▁authentication ▁callback \ n "); ▁return ; ▁} ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post _ cert ( US 894_ ENROLL _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ EXPLICIT _ CERT , ▁US 894_ EXPLICIT _ KEY , ▁US 894_ CACERTS , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁a ▁valid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁rv ▁= ▁st _ proxy _ http _ disable ( 0 ); ▁if ▁( rv ▁ == ▁-1) ▁{ ▁ printf (" C ould ▁not ▁set ▁HTTP ▁authentication ▁callback \ n "); ▁return ; ▁} ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁use ▁a ▁client ▁certificate ▁to ▁* ▁verify ▁the ▁TLS ▁client ▁authentication ▁is ▁working . ▁* ▁The ▁certificate ▁used ▁is ▁signed ▁by ▁the ▁implicit ▁cert ▁* ▁chain . ▁This ▁should ▁succeed . ▁*/ ▁static ▁void ▁us 894_ test 11 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁rv ▁= ▁st _ proxy _ http _ disable (1); ▁if ▁( rv ▁ == ▁-1) ▁{ ▁ printf (" C ould ▁not ▁set ▁HTTP ▁authentication ▁callback \ n "); ▁return ; ▁} ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post _ cert ( US 894_ ENROLL _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ IMPLICIT _ CERT , ▁US 894_ IMPLICIT _ KEY , ▁US 894_ CACERTS , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁a ▁valid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁rv ▁= ▁st _ proxy _ http _ disable ( 0 ); ▁if ▁( rv ▁ == ▁-1) ▁{ ▁ printf (" C ould ▁not ▁set ▁HTTP ▁authentication ▁callback \ n "); ▁return ; ▁} ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁use ▁a ▁revoked ▁client ▁certificate ▁to ▁* ▁verify ▁CRL ▁checks ▁are ▁working ▁in ▁the ▁TLS ▁layer . ▁* ▁This ▁should ▁fail . ▁*/ ▁static ▁void ▁us 894_ test 12 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁st _ proxy _ stop (); ▁rv ▁= ▁st _ proxy _ start ( US 894_ TCP _ PROXY _ PORT , ▁US 894_ PROXY _ CERT , ▁US 894_ PROXY _ KEY , ▁" estrealm ", ▁US 894_ CACERT , ▁US 894_ TRUSTED _ CERT _ AND _ CRL , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 894_ TCP _ SERVER _ PORT , ▁0, ▁// ▁disable ▁PoP ▁0); ▁// ▁ ecdhe ▁nid ▁info ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post _ cert ( US 894_ ENROLL _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ REVOKED _ CERT , ▁US 894_ REVOKED _ KEY , ▁US 894_ CACERTS , ▁NULL ); ▁/* ▁* ▁S ince ▁the ▁client ▁cert ▁has ▁been ▁revoked ▁the ▁TLS ▁handshake ▁* ▁will ▁fail . ▁The ▁EST ▁server ▁should ▁return ▁a ▁401 ▁response . ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁0); ▁st _ proxy _ stop (); ▁rv ▁= ▁st _ proxy _ start ( US 894_ TCP _ PROXY _ PORT , ▁US 894_ PROXY _ CERT , ▁US 894_ PROXY _ KEY , ▁" estrealm ", ▁US 894_ CACERT , ▁US 894_ TRUSTED _ CERT , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 894_ TCP _ SERVER _ PORT , ▁0, ▁// ▁disable ▁PoP ▁0); ▁// ▁ ecdhe ▁nid ▁info ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁use ▁a ▁self - signed ▁client ▁certificate ▁to ▁* ▁verify ▁cert ▁chain ▁will ▁reject ▁a ▁cert ▁that ▁has ▁not ▁been ▁* ▁signed ▁by ▁a ▁valid ▁CA . ▁This ▁should ▁fail . ▁*/ ▁static ▁void ▁us 894_ test 13 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post _ cert ( US 894_ ENROLL _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ SELF SIGN _ CERT , ▁US 894_ SELF SIGN _ KEY , ▁US 894_ CACERTS , ▁NULL ); ▁/* ▁* ▁S ince ▁the ▁client ▁cert ▁is ▁not ▁signed ▁by ▁ ei ther ▁the ▁local ▁CA ▁* ▁or ▁external ▁CA , ▁the ▁TLS ▁handshake ▁will ▁fail . ▁* ▁We ▁will ▁not ▁receive ▁an ▁HTTP ▁status ▁message ▁* ▁from ▁the ▁server . ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁0); ▁} ▁/* ▁* ▁TLS ▁anon ym ous ▁cipher ▁suites ▁disabled ▁* ▁* ▁This ▁test ▁case ▁uses ▁libcurl ▁to ▁test ▁that ▁the ▁* ▁EST ▁server ▁will ▁not ▁accept ▁anon ym ous ▁cipher ▁* ▁suites ▁from ▁the ▁client . ▁We ▁only ▁test ▁a ▁single ▁* ▁cipher ▁suite ▁here . ▁This ▁attempts ▁to ▁do ▁a ▁* ▁simple ▁enroll ▁with ▁the ▁server . ▁*/ ▁static ▁void ▁us 894_ test 14 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post ( US 894_ ENROLL _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ UIDPWD _ GOOD , ▁US 894_ CACERTS , ▁CURL AUTH _ BASIC , ▁" AD H - AES 128 - SHA 256 ", ▁NULL , ▁NULL ); ▁/* ▁* ▁TLS ▁handshake ▁should ▁have ▁failed , ▁curl ▁should ▁return ▁0 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁0); ▁} ▁/* ▁* ▁Null ▁HTTP ▁realm ▁when ▁initializ ing ▁server ▁*/ ▁static ▁void ▁us 894_ test 15 ▁( void ) ▁{ ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁BIO ▁* certin , ▁* keyin ; ▁X 509 ▁* x ; ▁E VP _ PKEY ▁* ▁priv _ key ; ▁int ▁rv ; ▁EST _ CTX ▁* ctx ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 894_ CACERT , ▁& cacerts ); ▁CU _ ASSERT ( cacerts _ len ▁> ▁0); ▁/* ▁* ▁Rea d ▁the ▁server ▁cert ▁*/ ▁ certin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( certin , ▁US 894_ SERVER _ CERT ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁x ▁= ▁PEM _ read _ bio _ X 509( certin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( x ▁ != ▁NULL ); ▁BIO _ free ( certin ); ▁/* ▁* ▁Rea d ▁the ▁server ▁key ▁*/ ▁keyin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( keyin , ▁US 894_ SERVER _ KEY ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁priv _ key ▁= ▁PEM _ read _ bio _ PrivateKey ( keyin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( priv _ key ▁ != ▁NULL ); ▁BIO _ free ( keyin ); ▁/* ▁* ▁Attempt ▁to ▁init ▁EST ▁server ▁using ▁NULL ▁realm ▁*/ ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁ctx ▁= ▁est _ proxy _ init ( cacerts , ▁cacerts _ len , ▁cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁NULL , ▁x , ▁priv _ key , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( ctx ▁ == ▁NULL ); ▁X 509_ free ( x ); ▁E VP _ PKEY _ free ( priv _ key ); ▁} ▁/* ▁* ▁Null ▁Server ▁certificate ▁when ▁initializ ing ▁server ▁*/ ▁static ▁void ▁us 894_ test 16 ▁( void ) ▁{ ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁BIO ▁* keyin ; ▁E VP _ PKEY ▁* ▁priv _ key ; ▁int ▁rv ; ▁EST _ CTX ▁* ctx ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 894_ CACERT , ▁& cacerts ); ▁CU _ ASSERT ( cacerts _ len ▁> ▁0); ▁/* ▁* ▁Rea d ▁the ▁server ▁key ▁*/ ▁keyin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( keyin , ▁US 894_ SERVER _ KEY ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁priv _ key ▁= ▁PEM _ read _ bio _ PrivateKey ( keyin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( priv _ key ▁ != ▁NULL ); ▁BIO _ free ( keyin ); ▁/* ▁* ▁Attempt ▁to ▁init ▁EST ▁proxy ▁using ▁NULL ▁server ▁key ▁*/ ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁ctx ▁= ▁est _ proxy _ init ( cacerts , ▁cacerts _ len , ▁cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁" test realm ", ▁NULL , ▁priv _ key , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( ctx ▁ == ▁NULL ); ▁E VP _ PKEY _ free ( priv _ key ); ▁} ▁/* ▁* ▁Null ▁Server ▁certificate ▁private ▁key ▁when ▁initializ ing ▁server ▁*/ ▁static ▁void ▁us 894_ test 17 ▁( void ) ▁{ ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁BIO ▁* certin ; ▁X 509 ▁* x ; ▁int ▁rv ; ▁EST _ CTX ▁* ctx ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 894_ CACERT , ▁& cacerts ); ▁CU _ ASSERT ( cacerts _ len ▁> ▁0); ▁/* ▁* ▁Rea d ▁the ▁server ▁cert ▁*/ ▁ certin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( certin , ▁US 894_ SERVER _ CERT ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁x ▁= ▁PEM _ read _ bio _ X 509( certin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( x ▁ != ▁NULL ); ▁BIO _ free ( certin ); ▁/* ▁* ▁Attempt ▁to ▁init ▁EST ▁proxy ▁using ▁NULL ▁private ▁key ▁*/ ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁ctx ▁= ▁est _ proxy _ init ( cacerts , ▁cacerts _ len , ▁cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁" test realm ", ▁x , ▁NULL , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( ctx ▁ == ▁NULL ); ▁X 509_ free ( x ); ▁} ▁/* ▁* ▁Null ▁trusted ▁CA ▁chain ▁when ▁initializ ing ▁server ▁*/ ▁static ▁void ▁us 894_ test 18 ▁( void ) ▁{ ▁BIO ▁* certin , ▁* keyin ; ▁X 509 ▁* x ; ▁E VP _ PKEY ▁* ▁priv _ key ; ▁int ▁rv ; ▁EST _ CTX ▁* ctx ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Rea d ▁the ▁server ▁cert ▁*/ ▁ certin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( certin , ▁US 894_ SERVER _ CERT ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁x ▁= ▁PEM _ read _ bio _ X 509( certin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( x ▁ != ▁NULL ); ▁BIO _ free ( certin ); ▁/* ▁* ▁Rea d ▁the ▁server ▁key ▁*/ ▁keyin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( keyin , ▁US 894_ SERVER _ KEY ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁priv _ key ▁= ▁PEM _ read _ bio _ PrivateKey ( keyin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( priv _ key ▁ != ▁NULL ); ▁BIO _ free ( keyin ); ▁/* ▁* ▁Attempt ▁to ▁init ▁EST ▁proxy ▁using ▁NULL ▁local ▁CA ▁chain ▁*/ ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁ctx ▁= ▁est _ proxy _ init ( NULL , ▁0, ▁NULL , ▁0, ▁EST _ CERT _ FORMAT _ PEM , ▁" test realm ", ▁x , ▁priv _ key , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( ctx ▁ == ▁NULL ); ▁X 509_ free ( x ); ▁E VP _ PKEY _ free ( priv _ key ); ▁} ▁/* ▁* ▁Corrupt ed ▁CA ▁chain ▁when ▁initializ ing ▁server ▁*/ ▁static ▁void ▁us 894_ test 19 ▁( void ) ▁{ ▁BIO ▁* certin , ▁* keyin ; ▁X 509 ▁* x ; ▁E VP _ PKEY ▁* ▁priv _ key ; ▁int ▁rv ; ▁EST _ CTX ▁* ctx ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Rea d ▁the ▁server ▁cert ▁*/ ▁ certin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( certin , ▁US 894_ SERVER _ CERT ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁x ▁= ▁PEM _ read _ bio _ X 509( certin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( x ▁ != ▁NULL ); ▁BIO _ free ( certin ); ▁/* ▁* ▁Rea d ▁the ▁server ▁key ▁*/ ▁keyin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( keyin , ▁US 894_ SERVER _ KEY ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁priv _ key ▁= ▁PEM _ read _ bio _ PrivateKey ( keyin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( priv _ key ▁ != ▁NULL ); ▁BIO _ free ( keyin ); ▁/* ▁* ▁Attempt ▁to ▁init ▁EST ▁proxy ▁a ▁corrupted ▁CA ▁chain ▁*/ ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁ctx ▁= ▁est _ proxy _ init ( ( un signed ▁char *) ▁" B ogus ▁CA ▁chain ", ▁14, ▁( un signed ▁char *) ▁" B ogus ▁CA ▁chain ", ▁14, ▁EST _ CERT _ FORMAT _ PEM , ▁" test realm ", ▁x , ▁priv _ key , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( ctx ▁ == ▁NULL ); ▁X 509_ free ( x ); ▁E VP _ PKEY _ free ( priv _ key ); ▁} ▁/* ▁* ▁This ▁test ▁case ▁attempts ▁simple ▁cacerts ▁request ▁using ▁* ▁POST ▁instead ▁of ▁GET . ▁It ▁should ▁fail . ▁*/ ▁static ▁void ▁us 894_ test 20 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁SL EEP (1); ▁outfile ▁= ▁f open ( test 5 _ outfile , ▁" w "); ▁rv ▁= ▁curl _ http _ post ( US 894_ CACERT _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ UIDPWD _ GOOD , ▁US 894_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁f close ( outfile ); ▁/* ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁a ▁400 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁400 ); ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁use ▁a ▁client ▁certificate ▁to ▁* ▁verify ▁the ▁TLS ▁client ▁authenti ait on ▁is ▁working . ▁* ▁The ▁certificate ▁used ▁is ▁signed ▁by ▁the ▁explicit ▁cert ▁* ▁chain . ▁Valid ▁HTTP ▁authentication ▁credentials ▁are ▁* ▁also ▁provided . ▁This ▁should ▁succeed . ▁*/ ▁static ▁void ▁us 894_ test 21 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post _ cert uid ( US 894_ ENROLL _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ UIDPWD _ GOOD , ▁US 894_ EXPLICIT _ CERT , ▁US 894_ EXPLICIT _ KEY , ▁US 894_ CACERTS , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁a ▁valid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁use ▁a ▁client ▁certificate ▁to ▁* ▁verify ▁the ▁TLS ▁client ▁authenti ait on ▁is ▁working . ▁* ▁The ▁certificate ▁used ▁is ▁signed ▁by ▁the ▁explicit ▁cert ▁* ▁chain . ▁I nvalid ▁HTTP ▁authentication ▁credentials ▁are ▁* ▁also ▁provided . ▁This ▁should ▁fail ▁with ▁a ▁401 ▁response . ▁*/ ▁static ▁void ▁us 894_ test 2 2 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post _ cert uid ( US 894_ ENROLL _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ UIDPWD _ BAD , ▁US 894_ EXPLICIT _ CERT , ▁US 894_ EXPLICIT _ KEY , ▁US 894_ CACERTS , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁an ▁invalid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁401 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁401 ); ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁enroll ▁without ▁using ▁a ▁certificate ▁* ▁to ▁identity ▁the ▁client , ▁while ▁using ▁a ▁good ▁user ▁ID / pwd . ▁* ▁H owever , ▁the ▁EST ▁server ▁is ▁set up ▁to ▁only ▁perform ▁* ▁certificate ▁authentication ▁( HTTP ▁auth ▁disabled ) . ▁* ▁This ▁should ▁fail ▁with ▁a ▁401 ▁response . ▁*/ ▁static ▁void ▁us 894_ test 2 3 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁rv ▁= ▁st _ proxy _ http _ disable (1); ▁if ▁( rv ▁ == ▁-1) ▁{ ▁ printf (" C ould ▁not ▁set ▁HTTP ▁authentication ▁callback \ n "); ▁return ; ▁} ▁SL EEP (1); ▁rv ▁= ▁curl _ http _ post ( US 894_ ENROLL _ URL , ▁US 894_ PKCS 10_ CT , ▁US 894_ PKCS 10_ REQ , ▁US 894_ UIDPWD _ GOOD , ▁US 894_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁an ▁invalid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁401 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁401 ); ▁rv ▁= ▁st _ proxy _ http _ disable ( 0 ); ▁if ▁( rv ▁ == ▁-1) ▁{ ▁ printf (" C ould ▁not ▁set ▁HTTP ▁authentication ▁callback \ n "); ▁return ; ▁} ▁} ▁/* ▁* ▁Test ▁the ▁parameters ▁of ▁est _ proxy _ set _ server () ▁*/ ▁static ▁void ▁us 894_ test 24 ▁( void ) ▁{ ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁BIO ▁* certin , ▁* keyin ; ▁X 509 ▁* x ; ▁E VP _ PKEY ▁* ▁priv _ key ; ▁int ▁rv ; ▁EST _ CTX ▁* ctx ; ▁EST _ ERROR ▁est _ rv ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 894_ CACERT , ▁& cacerts ); ▁CU _ ASSERT ( cacerts _ len ▁> ▁0); ▁/* ▁* ▁Rea d ▁the ▁server ▁cert ▁*/ ▁ certin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( certin , ▁US 894_ SERVER _ CERT ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁x ▁= ▁PEM _ read _ bio _ X 509( certin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( x ▁ != ▁NULL ); ▁BIO _ free ( certin ); ▁/* ▁* ▁Rea d ▁the ▁server ▁key ▁*/ ▁keyin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( keyin , ▁US 894_ SERVER _ KEY ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁priv _ key ▁= ▁PEM _ read _ bio _ PrivateKey ( keyin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( priv _ key ▁ != ▁NULL ); ▁BIO _ free ( keyin ); ▁/* ▁* ▁init ▁EST ▁in ▁proxy ▁mode ▁*/ ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁ctx ▁= ▁est _ proxy _ init ( ▁cacerts , ▁cacerts _ len , ▁cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁" test realm ", ▁x , ▁priv _ key , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( ctx ▁ != ▁NULL ); ▁est _ rv ▁= ▁est _ proxy _ set _ server ( NULL , ▁"127.0.0.1", ▁808 0 ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ NO _ CTX ); ▁est _ rv ▁= ▁est _ proxy _ set _ server ( ctx , ▁NULL , ▁808 0 ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ INVALID _ SERVER _ NAME ); ▁est _ rv ▁= ▁est _ proxy _ set _ server ( ctx , ▁"127.0.0.1", ▁65536 ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ INVALID _ PORT _ NUM ); ▁X 509_ free ( x ); ▁E VP _ PKEY _ free ( priv _ key ); ▁} ▁/* ▁* ▁Test ▁the ▁parameters ▁of ▁est _ proxy _ set _ auth _ mode () ▁*/ ▁static ▁void ▁us 894_ test 2 5 ▁( void ) ▁{ ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁BIO ▁* certin , ▁* keyin ; ▁X 509 ▁* x ; ▁E VP _ PKEY ▁* ▁priv _ key ; ▁int ▁rv ; ▁EST _ CTX ▁* ctx ; ▁EST _ ERROR ▁est _ rv ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 894_ CACERT , ▁& cacerts ); ▁CU _ ASSERT ( cacerts _ len ▁> ▁0); ▁/* ▁* ▁Rea d ▁the ▁server ▁cert ▁*/ ▁ certin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( certin , ▁US 894_ SERVER _ CERT ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁x ▁= ▁PEM _ read _ bio _ X 509( certin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( x ▁ != ▁NULL ); ▁BIO _ free ( certin ); ▁/* ▁* ▁Rea d ▁the ▁server ▁key ▁*/ ▁keyin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( keyin , ▁US 894_ SERVER _ KEY ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁priv _ key ▁= ▁PEM _ read _ bio _ PrivateKey ( keyin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( priv _ key ▁ != ▁NULL ); ▁BIO _ free ( keyin ); ▁/* ▁* ▁init ▁EST ▁in ▁proxy ▁mode ▁*/ ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁ctx ▁= ▁est _ proxy _ init ( cacerts , ▁cacerts _ len , ▁cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁" test realm ", ▁x , ▁priv _ key , ▁" estuser ", ▁" estpwd "); ▁CU _ ASSERT ( ctx ▁ != ▁NULL ); ▁est _ rv ▁= ▁est _ proxy _ set _ auth _ mode ( ctx , ▁AUTH _ NONE ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ BAD _ MODE ); ▁est _ rv ▁= ▁est _ proxy _ set _ auth _ mode ( ctx , ▁AUTH _ BASIC ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ NONE ); ▁est _ rv ▁= ▁est _ proxy _ set _ auth _ mode ( ctx , ▁AUTH _ DIGEST ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ NONE ); ▁est _ rv ▁= ▁est _ proxy _ set _ auth _ mode ( ctx , ▁0 xf fffffff ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ BAD _ MODE ); ▁est _ rv ▁= ▁est _ proxy _ set _ auth _ mode ( NULL , ▁AUTH _ BASIC ); ▁CU _ ASSERT ( est _ rv ▁ == ▁EST _ ERR _ NO _ CTX ); ▁X 509_ free ( x ); ▁E VP _ PKEY _ free ( priv _ key ); ▁} ▁/* ▁* ▁Test ▁the ▁optional ▁setting ▁of ▁the ▁CA ▁Certs ▁response ▁chain ▁in ▁est _ proxy _ init () ▁* ▁test ▁pass through ▁( cache ▁disabled ) ▁mode ▁of ▁the ▁CA ▁Certs ▁response ▁chain . ▁*/ ▁static ▁void ▁us 894_ test 26 ▁( void ) ▁{ ▁long ▁rv ; ▁char ▁cmd [20 0 ]; ▁ LOG _ FUNC _ NM ▁; ▁st _ proxy _ stop (); ▁SL EEP (1); ▁/* ▁* ▁restart ▁the ▁proxy ▁without ▁pass ing ▁the ▁ca ▁certs ▁response ▁change ▁parameter ▁* ▁ param ▁ 5 ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 894_ TCP _ PROXY _ PORT , ▁US 894_ PROXY _ CERT , ▁US 894_ PROXY _ KEY , ▁" estrealm ", ▁NULL , ▁US 894_ TRUSTED _ CERT , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 894_ TCP _ SERVER _ PORT , ▁0, ▁// ▁disable ▁PoP ▁0); ▁// ▁ ecdhe ▁nid ▁info ▁SL EEP (1); ▁outfile ▁= ▁f open ( test 26 _ outfile , ▁" w "); ▁rv ▁= ▁curl _ http _ get ( US 894_ CACERT _ URL , ▁US 894_ CACERTS , ▁& write _ func ); ▁f close ( outfile ); ▁/* ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁a ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁s printf ( ▁cmd , ▁" openssl ▁base 64 ▁- d ▁- in ▁% s ▁| ▁openssl ▁pkcs 7 ▁- inform ▁DER ▁- text ▁- print _ certs ", ▁test 26 _ outfile ); ▁rv ▁= ▁system ( cmd ); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁restart ▁the ▁proxy ▁and ▁include ▁the ▁CA ▁Cert ▁response ▁chain ▁*/ ▁st _ proxy _ stop (); ▁SL EEP (1); ▁rv ▁= ▁st _ proxy _ start ( US 894_ TCP _ PROXY _ PORT , ▁US 894_ PROXY _ CERT , ▁US 894_ PROXY _ KEY , ▁" estrealm ", ▁US 894_ CACERT , ▁US 894_ TRUSTED _ CERT , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 894_ TCP _ SERVER _ PORT , ▁0, ▁// ▁disable ▁PoP ▁0); ▁// ▁ ecdhe ▁nid ▁info ▁SL EEP (1); ▁} ▁/* ▁* ▁Test ▁the ▁pass ing ▁of ▁bad ▁userid / password ▁values ▁to ▁est _ proxy _ init ▁to ▁make ▁sure ▁* ▁they ' re ▁error ▁checked . ▁*/ ▁static ▁void ▁us 894_ test 27 ▁( void ) ▁{ ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁BIO ▁* certin , ▁* keyin ; ▁X 509 ▁* x ; ▁E VP _ PKEY ▁* ▁priv _ key ; ▁int ▁rv ; ▁EST _ CTX ▁* ctx ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 894_ CACERT , ▁& cacerts ); ▁CU _ ASSERT ( cacerts _ len ▁> ▁0); ▁/* ▁* ▁Rea d ▁the ▁server ▁cert ▁*/ ▁ certin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( certin , ▁US 894_ SERVER _ CERT ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁x ▁= ▁PEM _ read _ bio _ X 509( certin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( x ▁ != ▁NULL ); ▁BIO _ free ( certin ); ▁/* ▁* ▁Rea d ▁the ▁server ▁key ▁*/ ▁keyin ▁= ▁BIO _ new ( BIO _ s _ file _ in ternal () ); ▁rv ▁= ▁BIO _ read _ file name ( keyin , ▁US 894_ SERVER _ KEY ); ▁CU _ ASSERT ( rv ▁> ▁0); ▁priv _ key ▁= ▁PEM _ read _ bio _ PrivateKey ( keyin , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( priv _ key ▁ != ▁NULL ); ▁BIO _ free ( keyin ); ▁/* ▁* ▁Attempt ▁to ▁init ▁EST ▁proxy ▁using ▁NULL ▁userid ▁*/ ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁ctx ▁= ▁est _ proxy _ init ( ▁cacerts , ▁cacerts _ len , ▁cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁" estrealm ", ▁x , ▁priv _ key , ▁NULL , ▁" estpwd "); ▁CU _ ASSERT ( ctx ▁ == ▁NULL ); ▁ctx ▁= ▁est _ proxy _ init ( ▁cacerts , ▁cacerts _ len , ▁cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁" estrealm ", ▁x , ▁priv _ key , ▁" bad _ userid _ too _ long _ xxxxxxxxxxxxxxx xxxxxxxxxxxxxxx xxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx ", ▁" estpwd "); ▁CU _ ASSERT ( ctx ▁ == ▁NULL ); ▁X 509_ free ( x ); ▁E VP _ PKEY _ free ( priv _ key ); ▁} ▁/* ▁The ▁main () ▁function ▁for ▁setting ▁up ▁and ▁running ▁the ▁tests . ▁* ▁Returns ▁a ▁CU E _ SUCCESS ▁on ▁successful ▁running , ▁another ▁* ▁ CUnit ▁error ▁code ▁on ▁failure . ▁*/ ▁int ▁us 894_ add _ suite ▁( void ) ▁{ ▁# if def ▁HA VE _ C UNIT ▁CU _ pSuite ▁pSuite ▁= ▁NULL ; ▁/* ▁add ▁a ▁suite ▁to ▁the ▁ registry ▁*/ ▁pSuite ▁= ▁CU _ add _ suite (" us 894_ proxy _ cacerts ", ▁us 894_ init _ suite , ▁us 894_ destroy _ suite ); ▁if ▁( NULL ▁ == ▁pSuite ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁/* ▁add ▁the ▁tests ▁to ▁the ▁suite ▁*/ ▁/* ▁NOTE ▁- ▁OR DER ▁IS ▁ IMPORTANT ▁- ▁MUST ▁TEST ▁f read () ▁ AFTER ▁f printf () ▁*/ ▁if ▁( ( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" HTTP ▁Basic ▁Auth ", ▁us 894_ test 1)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" HTTP ▁Basic ▁Auth ▁Fail ", ▁us 894_ test 2)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" HTTP ▁Digest ▁Auth ", ▁us 894_ test 3)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" HTTP ▁Digest ▁Auth ▁Fail ", ▁us 894_ test 4)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Get ▁CA ▁Certificates ", ▁us 894_ test 5)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SSL ▁3. 0 ▁Fail ", ▁us 894_ test 6)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" TLS ▁1.0 ▁Fail ", ▁us 894_ test 7)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" TLS ▁1.1 ", ▁us 894_ test 8)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" TLS ▁1.2 ", ▁us 894_ test 9 )) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Certificate ▁auth ▁- ▁explicit ▁cert ▁chain ", ▁us 894_ test 10)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Certificate ▁auth ▁- ▁implicit ▁cert ▁chain ", ▁us 894_ test 11)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Certificate ▁auth ▁- ▁revoked ▁cert ", ▁us 894_ test 12)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Certificate ▁auth ▁- ▁self - signed ▁cert ", ▁us 894_ test 1 3)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" An on ▁cipher ▁suite ▁disabled ", ▁us 894_ test 1 4)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" NULL ▁Real m ", ▁us 894_ test 1 5)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" NULL ▁server ▁cert ", ▁us 894_ test 16)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" NULL ▁server ▁key ", ▁us 894_ test 17)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" NULL ▁local ▁CA ▁chain ", ▁us 894_ test 18)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" C orrupted ▁local ▁CA ▁chain ", ▁us 894_ test 19 )) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" HTTP ▁POST ▁cacerts ", ▁us 894_ test 20 )) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SimpleEnroll ▁- ▁good ▁HTTP ▁auth / good ▁Cert ", ▁us 894_ test 2 1)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SimpleEnroll ▁- ▁bad ▁HTTP ▁auth / good ▁Cert ", ▁us 894_ test 22)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" SimpleEnroll ▁- ▁no ▁HTTP ▁auth / no ▁Cert ", ▁us 894_ test 23)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Set ▁Server ▁I nvalid ▁parameters ", ▁us 894_ test 2 4)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Set ▁Auth ▁Mode ▁I nvalid ▁parameters ", ▁us 894_ test 2 5)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Optional ▁CA ▁Cha in ▁Response ", ▁us 894_ test 2 6)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Ba d ▁userid / password ▁for ▁proxy ▁init ", ▁us 894_ test 27 ))) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁return ▁CU E _ SUCCESS ; ▁# endif ▁}