▁/* -- ---------------- ---------------- ---------------- ---------------- ▁* ▁us 896 . c ▁- ▁ Unit ▁Test s ▁for ▁User ▁Stor y ▁ 896 ▁- ▁Client ▁CSR ▁Attributes ▁* ▁* ▁November , ▁2013 ▁* ▁* ▁Copy right ▁( c ) ▁2013 , ▁2016 ▁by ▁ cisco ▁S ystems , ▁Inc . ▁* ▁All ▁ right s ▁ reserved . ▁* -- ---------------- ---------------- ---------------- ---------------- ▁*/ ▁# include ▁ < std io . h > ▁# if n def ▁W IN 32 ▁# include ▁ < uni std . h > ▁# endif ▁# include ▁ < est . h > ▁# include ▁ < curl / curl . h > ▁# include ▁" curl _ util s . h " ▁# include ▁" test _ util s . h " ▁# include ▁" st _ server . h " ▁# include ▁ < openssl / ssl . h > ▁# if def ▁HA VE _ C UNIT ▁# include ▁" CUnit / Basic . h " ▁# include ▁" CUnit / A utomat ed . h " ▁# endif ▁# if n def ▁W IN 32 ▁# define ▁CLIENT _ UT _ CACERT ▁" CA / estCA / cacert . crt " ▁# define ▁US 896_ CACERTS ▁" CA / estCA / cacert . crt " ▁# define ▁US 896_ TRUST _ CERTS ▁" CA / trustedcerts . crt " ▁# define ▁US 896_ SERVER _ CERTKEY ▁" CA / estCA / private / estserver cert and key . pem " ▁# else ▁# define ▁CLIENT _ UT _ CACERT ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 896_ CACERTS ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 896_ TRUST _ CERTS ▁" CA \\ trustedcerts . crt " ▁# define ▁US 896_ SERVER _ CERTKEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# endif ▁# define ▁CLIENT _ UT _ PUBKEY ▁" . / est _ client _ ut _ keypair " ▁# define ▁US 896_ SERVER _ PORT ▁2989 6 ▁# define ▁US 896_ SERVER _ IP ▁"127.0.0.1" ▁# define ▁TEST _ SHORT _ ATTR ▁" M == \0" ▁# define ▁TEST _ LONG _ ATTR ▁" MIIE N zCCA 5 4 GA 4 g 3 AjGCA 5 UGA 4 g 3 AwYDiDcEE mU xM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OTA wMTIzNDU 2 N zg 5 MB Jl MTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkw MDEyMzQ 1 Nj c 4 OTA S ZT EyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MD AxM jM 0 N TY 3 ODkwE mU xM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OTA wMTIzNDU 2 N zg 5 MB Jl MTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkw MDEyMzQ 1 Nj c 4 OTA S ZT EyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MD AxM jM 0 N TY 3 ODkwE mU xM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OTA wMTIzNDU 2 N zg 5 MB Jl MTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkw MDEyMzQ 1 Nj c 4 OTA TUV Bhc nNl IF NF VC Bhc yA yL jk 5 OS 4 yI DEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MA YJYIZIAWUDBAIC BgkrJAMDAggBAQsw aw YDiDcBM WQ TY l Bhc nNl IF NF VC Bhc yA yL jk 5 OS 4 xIGRhdGE g MTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 N TY 3 ODkw YWI xM jM 0 N TY 3 ODkwMTIzNDU 2 N zg 5 MDEyMzQ 1 Nj c 4 OT AxM jM 0 NT EyMzQ 1 BgcrBgEBAQEW BgcrBgEBAQEW \0" ▁# define ▁TEST _ CORRUPT _ ATTR 1 ▁" MHw w LA YDiDcCMS UGA 4 g 3 AwYDiDcEE xlQ YXJ z ZSB T RV QgY XMg Mi 45 OTkuMiBkYXRhBg lg hk g BZQ MEA g IGCSskAwMCCAEBCz AiBgOI Ex G xM ZU GFy c 2 U gU 0 VU IG FzI DI u OTk 5 Lj EgZG F 0 YQYHKwYBAQEBFg YJKoZIhvcNAQk H \0" ▁# define ▁TEST _ CORRUPT _ ATTR 2 ▁" MIH T MIG B BgOINwIx e gEB / wI CA P 8 GA 4 g 3 AwYDiDcE C gE CE h AxM jM 0 N TY 3 ODkw QU JD REV GE xRQ YXJ z ZSB T RV QgY XMg Mi 45 OTkuMhQFM 12345 TIzNDU UB T EyMzQ 1 F gU xM jM 0 NR o FMTIzNDU cF AAAA DE AAAA y AAAA Mw AAAD Q AAAA 1 Hg oAM QA yA DM ANA A 1 Bg lg hk g BZQ MEA g IGCSskAwMCCAEBCz Ai BgOINwEx G xM ZU GFy c 2 U gU 0 VU IG FzI DI u OTk 5 Lj EgZG F 0 YQYHKwYBAQEBFg YHKwYBAQEBFg EBAA == \0" ▁# define ▁EST _ UT _ MAX _ CMD _ LEN ▁255 ▁static ▁void ▁us 896_ clean ( void ) ▁{ ▁} ▁static ▁int ▁us 896_ start _ server ( int ▁manual _ enroll , ▁int ▁nid ) ▁{ ▁int ▁rv ; ▁rv ▁= ▁st _ start ( US 896_ SERVER _ PORT , ▁US 896_ SERVER _ CERTKEY , ▁US 896_ SERVER _ CERTKEY , ▁" US 896 ▁test ▁realm ", ▁US 896_ CACERTS , ▁US 896_ TRUST _ CERTS , ▁" CA / est Example CA . cnf ", ▁manual _ enroll , ▁0, ▁nid ); ▁SL EEP (1); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁initialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁allocate ▁data ▁or ▁open ▁any ▁* ▁resource s ▁required ▁for ▁all ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 896_ init _ suite ( void ) ▁{ ▁int ▁rv ▁= ▁0; ▁char ▁cmd [ EST _ UT _ MAX _ CMD _ LEN ]; ▁ printf (" Start ing ▁EST ▁Server ▁CSR ▁attributes ▁ unit ▁tests . \ n "); ▁/* ▁* ▁gen ▁the ▁ keypair ▁to ▁be ▁used ▁for ▁EST ▁Client ▁testing ▁*/ ▁ snprintf ( cmd , ▁EST _ UT _ MAX _ CMD _ LEN , ▁" openssl ▁ec param ▁- name ▁prime 256 v 1 ▁- gen key ▁- out ▁% s ", ▁CLIENT _ UT _ PUBKEY ); ▁ printf ("% s \ n ", ▁cmd ); ▁rv ▁= ▁system ( cmd ); ▁/* ▁* ▁start ▁the ▁server ▁for ▁the ▁tests ▁that ▁need ▁to ▁t alk ▁to ▁a ▁server ▁*/ ▁us 896_ clean (); ▁/* ▁* ▁Start ▁an ▁instance ▁of ▁the ▁EST ▁server ▁*/ ▁rv ▁= ▁us 896_ start _ server ( 0 , ▁0); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁uninitialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁de allocate ▁data ▁or ▁close ▁any ▁* ▁resource s ▁that ▁we re ▁used ▁for ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 896_ destroy _ suite ( void ) ▁{ ▁st _ stop (); ▁SL EEP ( 2 ); ▁return ▁0; ▁} ▁/* ▁* ▁C allback ▁function ▁passed ▁to ▁est _ client _ init () ▁*/ ▁static ▁int ▁client _ manual _ cert _ verify ( X 509 ▁* cur _ cert , ▁int ▁openssl _ cert _ error ) ▁{ ▁BIO ▁* bio _ err ; ▁bio _ err ▁= ▁BIO _ new _ fp ( stderr , ▁BIO _ NO CLOSE ); ▁int ▁approve ▁= ▁0; ▁/* ▁* ▁Pr int ▁out ▁the ▁specific s ▁of ▁this ▁cert ▁*/ ▁ printf ( ▁"% s : ▁OpenSSL / EST ▁server ▁cert ▁verification ▁failed ▁with ▁the ▁following ▁error : ▁openssl _ cert _ error ▁= ▁% d ▁(% s ) \ n ", ▁ _ _ FUNCTION _ _ , ▁openssl _ cert _ error , ▁X 509_ verify _ cert _ error _ string ( openssl _ cert _ error ) ); ▁ printf (" Fail ing ▁Cert : \ n "); ▁X 509_ print _ fp ( stdout , ▁cur _ cert ); ▁/* ▁* ▁ Next ▁call ▁print s ▁out ▁the ▁signature ▁which ▁can ▁be ▁used ▁as ▁the ▁fingerprint ▁* ▁This ▁fingerprint ▁can ▁be ▁checked ▁against ▁the ▁anti cip ated ▁value ▁to ▁determine ▁* ▁whether ▁or ▁not ▁the ▁server ' s ▁cert ▁should ▁be ▁approved . ▁*/ ▁X 509_ signature _ print ( bio _ err , ▁cur _ cert -> sig _ alg , ▁cur _ cert -> signature ); ▁if ▁( openssl _ cert _ error ▁ == ▁X 509_ V _ ERR _ U NABLE _ TO _ GET _ CRL ) ▁{ ▁approve ▁= ▁1; ▁} ▁BIO _ free ( bio _ err ); ▁return ▁approve ; ▁} ▁/* ▁* ▁Test 1 ▁- ▁ex erc ise ▁the ▁est _ client _ get _ csrattrs () ▁API . ▁*/ ▁static ▁void ▁us 896_ test 1 ( void ) ▁{ ▁int ▁rc ; ▁un signed ▁char ▁* csr _ data ; ▁int ▁csr _ len ; ▁EST _ CTX ▁* ctx ▁= ▁NULL ; ▁ LOG _ FUNC _ NM ▁; ▁rc ▁= ▁est _ client _ get _ csrattrs ( ctx , ▁& csr _ data , ▁& csr _ len ); ▁CU _ ASSERT ( rc ▁ != ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ get _ csrattrs ( ctx , ▁NULL , ▁& csr _ len ); ▁CU _ ASSERT ( rc ▁ != ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ get _ csrattrs ( ctx , ▁& csr _ data , ▁NULL ); ▁CU _ ASSERT ( rc ▁ != ▁EST _ ERR _ NONE ); ▁} ▁/* ▁* ▁Test 2 ▁- ▁ex erc ise ▁the ▁response ▁variations ▁tri gger ed ▁* ▁by ▁est _ client _ get _ csrattrs () ▁*/ ▁static ▁void ▁us 896_ test 2 ( void ) ▁{ ▁EST _ CTX ▁* ctx ; ▁un signed ▁char ▁* pkey ▁= ▁NULL ; ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁int ▁cacerts _ len ▁= ▁0; ▁EST _ ERROR ▁rc ▁= ▁EST _ ERR _ NONE ; ▁un signed ▁char ▁* retrieved _ cacerts ▁= ▁NULL ; ▁int ▁retrieved _ cacerts _ len ▁= ▁0; ▁E VP _ PKEY ▁* priv _ key ; ▁SL EEP (1); ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( CLIENT _ UT _ CACERT , ▁& cacerts ); ▁CU _ ASSERT ( cacerts _ len ▁> ▁0); ▁/* ▁* ▁Rea d ▁in ▁the ▁private ▁key ▁file ▁*/ ▁priv _ key ▁= ▁read _ private _ key ( CLIENT _ UT _ PUBKEY ); ▁if ▁( priv _ key ▁ == ▁NULL ) ▁{ ▁ printf (" \ n Error ▁while ▁reading ▁private ▁key ▁file ▁% s \ n ", ▁CLIENT _ UT _ PUBKEY ); ▁return ; ▁} ▁ctx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ctx ▁ != ▁NULL ); ▁rc ▁= ▁est _ client _ set _ auth ( ctx , ▁"", ▁"", ▁NULL , ▁priv _ key ); ▁CU _ ASSERT ( rc ▁ == ▁EST _ ERR _ NONE ); ▁est _ client _ set _ server ( ctx , ▁US 896_ SERVER _ IP , ▁US 896_ SERVER _ PORT , ▁NULL ); ▁/* ▁* ▁issue ▁the ▁get ▁ca ▁certs ▁request ▁*/ ▁rc ▁= ▁est _ client _ get _ cacerts ( ctx , ▁& retrieved _ cacerts _ len ); ▁/* ▁* ▁should ▁be ▁successful , ▁and ▁should ▁have ▁obtained ▁a ▁valid ▁buffer ▁* ▁containing ▁the ▁CA ▁certs ▁*/ ▁CU _ ASSERT ( rc ▁ == ▁EST _ ERR _ NONE ); ▁CU _ ASSERT ( retrieved _ cacerts _ len ▁> ▁0); ▁retrieved _ cacerts ▁= ▁malloc ( retrieved _ cacerts _ len ); ▁rc ▁= ▁est _ client _ copy _ cacerts ( ctx , ▁retrieved _ cacerts ); ▁/* ▁* ▁output ▁the ▁retrieved ▁ca ▁certs ▁and ▁compare ▁to ▁what ▁they ▁should ▁be ▁*/ ▁if ▁( retrieved _ cacerts ) ▁{ ▁ printf (" \ nR etrieved ▁CA ▁Certs ▁buffer : \ n ▁% s \ n ", ▁retrieved _ cacerts ); ▁ printf (" Retrieve d ▁CA ▁certs ▁buffer ▁length : ▁% d \ n ", ▁retrieved _ cacerts _ len ); ▁} ▁free ( retrieved _ cacerts ); ▁/* ▁* ▁All ▁of ▁these ▁are ▁negative ▁tests ▁and ▁require ▁that ▁code ▁in ▁the ▁* ▁EST ▁server ▁is ▁modifi ed ▁suc h ▁that ▁it ▁will ▁allow ▁bad / corrupted ▁* ▁attributes ▁to ▁be ▁initialized ▁so ▁they ▁can ▁be ▁sent ▁to ▁the ▁client . ▁*/ ▁# if def ▁N EG ATIVE _ UNIT _ TEST ▁un signed ▁char ▁* csr _ data ; ▁int ▁csr _ len ; ▁/* ▁clear ▁callback ▁*/ ▁if ▁( est _ set _ csr _ cb ( ectx , ▁NULL )) ▁{ ▁ printf (" \ nU nable ▁to ▁set ▁EST ▁CSR ▁Attributes ▁callback . ▁A bort ing !!! \ n "); ▁exit (1); ▁} ▁rc ▁= ▁est _ server _ init _ csrattrs ( ectx , ▁TEST _ CORRUPT _ ATTR 1, ▁str len ( TEST _ CORRUPT _ ATTR 1)) ; ▁CU _ ASSERT ( rc ▁ == ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ get _ csrattrs ( ctx , ▁& csr _ data , ▁& csr _ len ); ▁CU _ ASSERT ( rc ▁ != ▁EST _ ERR _ NONE ); ▁CU _ ASSERT ( csr _ len ▁ == ▁0); ▁CU _ ASSERT ( csr _ data ▁ == ▁NULL ); ▁rc ▁= ▁est _ server _ init _ csrattrs ( ectx , ▁TEST _ CORRUPT _ ATTR 2 , ▁str len ( TEST _ CORRUPT _ ATTR 2)) ; ▁CU _ ASSERT ( rc ▁ == ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ get _ csrattrs ( ctx , ▁& csr _ data , ▁& csr _ len ); ▁CU _ ASSERT ( rc ▁ != ▁EST _ ERR _ NONE ); ▁CU _ ASSERT ( csr _ len ▁ == ▁0); ▁CU _ ASSERT ( csr _ data ▁ == ▁NULL ); ▁rc ▁= ▁est _ server _ init _ csrattrs ( ectx , ▁TEST _ SHORT _ ATTR , ▁str len ( TEST _ SHORT _ ATTR ) ); ▁CU _ ASSERT ( rc ▁ == ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ get _ csrattrs ( ctx , ▁& csr _ data , ▁& csr _ len ); ▁CU _ ASSERT ( rc ▁ != ▁EST _ ERR _ NONE ); ▁CU _ ASSERT ( csr _ len ▁ == ▁0); ▁CU _ ASSERT ( csr _ data ▁ == ▁NULL ); ▁rc ▁= ▁est _ server _ init _ csrattrs ( ectx , ▁TEST _ LONG _ ATTR , ▁str len ( TEST _ LONG _ ATTR ) ); ▁CU _ ASSERT ( rc ▁ == ▁EST _ ERR _ NONE ); ▁rc ▁= ▁est _ client _ get _ csrattrs ( ctx , ▁& csr _ data , ▁& csr _ len ); ▁CU _ ASSERT ( rc ▁ != ▁EST _ ERR _ NONE ); ▁CU _ ASSERT ( csr _ len ▁ == ▁0); ▁CU _ ASSERT ( csr _ data ▁ == ▁NULL ); ▁# endif ▁if ▁( ctx ) ▁{ ▁est _ destroy ( ctx ); ▁} ▁if ▁( cacerts ) ▁{ ▁free ( cacerts ); ▁} ▁if ▁( pkey ) ▁{ ▁free ( pkey ); ▁} ▁} ▁/* ▁The ▁main () ▁function ▁for ▁setting ▁up ▁and ▁running ▁the ▁tests . ▁* ▁Returns ▁a ▁CU E _ SUCCESS ▁on ▁successful ▁running , ▁another ▁* ▁ CUnit ▁error ▁code ▁on ▁failure . ▁*/ ▁int ▁us 896_ add _ suite ( void ) ▁{ ▁# if def ▁HA VE _ C UNIT ▁CU _ pSuite ▁pSuite ▁= ▁NULL ; ▁/* ▁add ▁a ▁suite ▁to ▁the ▁ registry ▁*/ ▁pSuite ▁= ▁CU _ add _ suite (" us 896_ client _ csrattrs ", ▁us 896_ init _ suite , ▁us 896_ destroy _ suite ); ▁if ▁( NULL ▁ == ▁pSuite ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁/* ▁add ▁the ▁tests ▁to ▁the ▁suite ▁*/ ▁if ▁( ( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" CSR ▁Client ▁Attributes ▁API 1", ▁us 896_ test 1)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" CSR ▁Client ▁Attributes ▁API 2 ▁" , ▁us 896_ test 2))) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁return ▁CU E _ SUCCESS ; ▁# endif ▁}