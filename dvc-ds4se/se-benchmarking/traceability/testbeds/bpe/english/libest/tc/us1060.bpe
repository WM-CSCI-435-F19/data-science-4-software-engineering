▁/* -- ---------------- ---------------- ---------------- ---------------- ▁* ▁us 1060 . c ▁- ▁ Unit ▁Test s ▁for ▁User ▁Stor y ▁ 1060 ▁- ▁TLS ▁SRP ▁support ▁( Server / Proxy ) ▁* ▁* ▁May , ▁2014 ▁* ▁* ▁Copy right ▁( c ) ▁2014 - 2016 ▁by ▁ cisco ▁S ystems , ▁Inc . ▁* ▁All ▁ right s ▁ reserved . ▁* -- ---------------- ---------------- ---------------- ---------------- ▁*/ ▁# include ▁ < std io . h > ▁# include ▁ < string . h > ▁# if n def ▁W IN 32 ▁# include ▁ < uni std . h > ▁# include ▁ < pthread . h > ▁# endif ▁# include ▁ < est . h > ▁# include ▁ < curl / curl . h > ▁# include ▁" test _ util s . h " ▁# include ▁" curl _ util s . h " ▁# include ▁" st _ server . h " ▁# include ▁" st _ proxy . h " ▁# include ▁ < openssl / ssl . h > ▁# include ▁ < openssl / x 509 v 3 . h > ▁# if def ▁HA VE _ C UNIT ▁# include ▁" CUnit / Basic . h " ▁# include ▁" CUnit / A utomat ed . h " ▁# endif ▁# define ▁US 1060_ SERVER _ PORT ▁ 31060 ▁# define ▁US 1060_ SERVER _ IP ▁"127.0.0.1" ▁# define ▁US 1060_ UID ▁" estuser " ▁# define ▁US 1060_ PWD ▁" estpwd " ▁# if n def ▁W IN 32 ▁# define ▁US 1060_ CACERTS ▁" CA / estCA / cacert . crt " ▁# define ▁US 1060_ TRUST _ CERTS ▁" CA / trustedcerts . crt " ▁# define ▁US 1060_ SERVER _ CERTKEY ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 1060_ VFILE ▁" US 1060/ passw d . srp v " ▁# define ▁US 1060_ EXPLICIT _ CERT ▁" US 1060/ explicit - cert . pem " ▁# define ▁US 1060_ EXPLICIT _ KEY ▁" US 1060/ explicit - key . pem " ▁# define ▁US 1060_ SELF SIGN _ CERT ▁" US 1060/ self signed - cert . pem " ▁# define ▁US 1060_ SELF SIGN _ KEY ▁" US 1060/ self signed - key . pem " ▁# else ▁# define ▁US 1060_ CACERTS ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 1060_ TRUST _ CERTS ▁" CA \\ trustedcerts . crt " ▁# define ▁US 1060_ SERVER _ CERTKEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# define ▁US 1060_ VFILE ▁" US 1060\\ passw d . srp v " ▁# define ▁US 1060_ EXPLICIT _ CERT ▁" US 1060\\ explicit - cert . pem " ▁# define ▁US 1060_ EXPLICIT _ KEY ▁" US 1060\\ explicit - key . pem " ▁# define ▁US 1060_ SELF SIGN _ CERT ▁" US 1060\\ self signed - cert . pem " ▁# define ▁US 1060_ SELF SIGN _ KEY ▁" US 1060\\ self signed - key . pem " ▁# endif ▁# define ▁US 1060_ ENROLL _ URL ▁" http s ://127.0.0.1: 3 1060/ . well - known / est / simpleenroll " ▁# define ▁US 1060_ UIDPWD _ GOOD ▁" estuser : estpwd " ▁# define ▁US 1060_ UIDPWD _ BAD ▁" estuser : xxx 1 1122 2 " ▁# define ▁US 1060_ PKCS 10_ CT ▁" Content - Type : ▁application / pkcs 10" ▁# define ▁US 1060_ PROXY _ ENROLL _ URL ▁" http s ://127.0.0.1: 4 1060/ . well - known / est / simpleenroll " ▁# define ▁US 1060_ PROXY _ PORT ▁ 41060 ▁# define ▁US 1060_ PKCS 10_ REQ ▁" MIICh jCCA W 4 CAQAw QT El MC MGA 1 UEAxM c cmV x IGJ 5 IGN saWV u dCB pbiB k ZW 1 v IHN 0\ n ZXAg Mj EY MBYG A 1 UEB RM PU El E Old pZG dl dCB TT joy MIIBIjANBgkq hk iG 9 w 0 BAQEF \ n AAOCAQ 8 AMIIBCgKCAQEA /6 JU Wp X XD wC kv WP DWO 0 y AND Qz FM x ro LE Ih 6/ vd Nw fR SG \ ne NG C 0 ef cL 5 L 4 N xH ZO mO 14 yq MEM Gp Cy Hz 7 Ob 3 hh N Pu 0 K 81 gM Uz R qz w mm JH Xw Rq ob A \ ni 59 OQ Ek H aP hI 1 T 4 Rk V nSY Z LO owS qo n MZ jW bT 0 i qZ DY / RD 8 l 3 Gj H 3 gE IBMQ Fv 62 NT \ n 1 CS u 9 df HE g 7 6+ Dn JA hd dd UD JD XO 3 A WI 5 s 7 zs Ll zB oP lg d 4 oK 5 K 1 wqE E 2 pq h nZ x ei \ nc 94 WF q XQ 1 ky rW 0 PO V lQ + 32 mo WT QT FA 7 SQ E 2 u EF + GB X s RP a EO + FL Qj E 8 J HO ew Lf / T \ n qX 0 ng yw n vx KR pK gu SBi c 31 WV ks wP s 8 E 34 pjj ZA vd x QIDAQABo AAwDQYJKoZIhvcN \ n AQEFBQADggEBA AZ XV oor Rx Av QP iM N DpR ZHh iD 5 O 2 Yd 7 APB Bz nV gR ll 1 H ML 5 dp gnu \ n XY 7 ZC Yw Qt xw NG YV tK Ja ZC iW 7 dWr Zh v nF 5 ua 3 wU r 9 R 2 Z No Lw VR 0 Z 9 Y 5 ww n 1 cJ rd SG \ nc Uu BN /0 XB GI 6 g 6 fQ lD DI mQ oP SF 8 gy gc TC CH ba 7 Uv 0 i 8 oi Ci wf 5 UF + F 3 NY BoB L / PP \ n lO 2 zB EY NQ 65 + W 3 Y gf Uy YP 0 Cr 0 N yX g kz 3 Q h 2 Xa 2 e RFe W 56 oe jm c EaM jq 6 yx 7 WA C 2 X \ nk 3 w 1 G 6 Le 1 UI nz uen MS cN g nt 8 Fa I 43 e AIL Md LQ / Ek xc 30 fj xA 12 RD h / Yz DY i Ex Fv 0\ ndP d 4 o 5 u PK t 4 jR it vG iA Pm / O CdX iY A wq iu 2 w =\ n " ▁static ▁char ▁* log _ search _ target ▁= ▁NULL ; ▁static ▁int ▁search _ target _ found ▁= ▁0; ▁static ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁static ▁int ▁cacerts _ len ▁= ▁0; ▁static ▁SRP _ VBASE ▁* srpdb ▁= ▁NULL ; ▁# if def ▁W IN 32 ▁CR ITI CAL _ SE CTION ▁logger _ critical _ section ; ▁# endif ▁/* ▁* ▁This ▁is ▁a ▁simple ▁callback ▁used ▁to ▁overr ide ▁the ▁default ▁* ▁logging ▁facility ▁in ▁libest . ▁We ' ll ▁use ▁this ▁to ▁look ▁* ▁for ▁specific ▁debug ▁output . ▁*/ ▁static ▁void ▁us 1060_ logger _ stderr ▁( char ▁* format , ▁va _ list ▁l ) ▁{ ▁char ▁t _ log [ 1024 ]; ▁# if n def ▁W IN 32 ▁f lock file ( stderr ); ▁# else ▁E nter CriticalSection (& logger _ critical _ section ); ▁# endif ▁if ▁( log _ search _ target ) ▁{ ▁vsnprintf ( t _ log , ▁1024 , ▁format , ▁l ); ▁if ▁( strstr ( t _ log , ▁log _ search _ target )) ▁{ ▁search _ target _ found ▁= ▁1; ▁} ▁f printf ( stderr , ▁"% s ", ▁t _ log ); ▁} ▁else ▁{ ▁ vf printf ( stderr , ▁format , ▁l ); ▁} ▁f flu sh ( stderr ); ▁# if n def ▁W IN 32 ▁f unlock file ( stderr ); ▁# else ▁ Leav eCriticalSection (& logger _ critical _ section ); ▁# endif ▁} ▁static ▁int ▁us 1060_ start _ server ▁( char ▁* cert , ▁char ▁* key , ▁int ▁no _ http _ auth , ▁int ▁enable _ pop , ▁int ▁enable _ srp ) ▁{ ▁int ▁rv ; ▁if ▁( enable _ srp ) ▁{ ▁rv ▁= ▁st _ start _ srp ( US 1060_ SERVER _ PORT , ▁cert , ▁key , ▁" US 1060 ▁test ▁realm ", ▁US 1060_ CACERTS , ▁US 1060_ TRUST _ CERTS , ▁" CA / est Example CA . cnf ", ▁enable _ pop , ▁US 1060_ VFILE ); ▁} ▁else ▁{ ▁rv ▁= ▁st _ start ( US 1060_ SERVER _ PORT , ▁cert , ▁key , ▁" US 1060 ▁test ▁realm ", ▁US 1060_ CACERTS , ▁US 1060_ TRUST _ CERTS , ▁" CA / est Example CA . cnf ", ▁0, ▁enable _ pop , ▁0); ▁} ▁if ▁( no _ http _ auth ) ▁{ ▁st _ disable _ http _ auth (); ▁} ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁initialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁allocate ▁data ▁or ▁open ▁any ▁* ▁resource s ▁required ▁for ▁all ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 1060_ init _ suite ▁( void ) ▁{ ▁int ▁rv ; ▁# if def ▁W IN 32 ▁/* ▁Initialize ▁ critical ▁section ▁on ▁Windows */ ▁Initialize CriticalSection (& logger _ critical _ section ); ▁# endif ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁& us 1060_ logger _ stderr ); ▁/* ▁* ▁Start ▁an ▁instance ▁of ▁the ▁EST ▁server ▁with ▁* ▁automatic ▁enrollment ▁enabled . ▁*/ ▁rv ▁= ▁us 1060_ start _ server ( US 1060_ SERVER _ CERTKEY , ▁US 1060_ SERVER _ CERTKEY , ▁0, ▁0, ▁1); ▁/* ▁* ▁Start ▁an ▁instance ▁of ▁the ▁proxy ▁with ▁SRP ▁enabled ▁*/ ▁rv ▁= ▁st _ proxy _ start _ srp ( US 1060_ PROXY _ PORT , ▁US 1060_ SERVER _ CERTKEY , ▁US 1060_ SERVER _ CERTKEY , ▁" US 1060 ▁proxy ▁realm ", ▁US 1060_ CACERTS , ▁US 1060_ TRUST _ CERTS , ▁US 1060_ UID , ▁US 1060_ PWD , ▁US 1060_ SERVER _ IP , ▁US 1060_ SERVER _ PORT , ▁0, ▁US 1060_ VFILE ); ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁* ▁Use d ▁for ▁client - side ▁API ▁testing ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 1060_ CACERTS , ▁& cacerts ); ▁if ▁( cacerts _ len ▁ < = ▁0) ▁{ ▁return ▁1; ▁} ▁ srpdb ▁= ▁SRP _ VBASE _ new ( NULL ); ▁if ▁(! srpdb ) ▁{ ▁ printf (" \ nU nable ▁allocate ▁SRP ▁verifie r ▁database . ▁A bort ing !!! \ n "); ▁} ▁if ▁( SRP _ VBASE _ init ( srpdb , ▁US 1060_ VFILE ) ▁ != ▁SRP _ NO _ ERROR ) ▁{ ▁ printf (" \ nU nable ▁initialize ▁SRP ▁verifie r ▁database . ▁A bort ing !!! \ n "); ▁} ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁uninitialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁de allocate ▁data ▁or ▁close ▁any ▁* ▁resource s ▁that ▁we re ▁used ▁for ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 1060_ destroy _ suite ▁( void ) ▁{ ▁if ▁( srpdb ) ▁{ ▁SRP _ VBASE _ free ( srpdb ); ▁} ▁st _ stop (); ▁st _ proxy _ stop (); ▁free ( cacerts ); ▁return ▁0; ▁} ▁typedef ▁enum ▁{ ▁SRP _ OFF , ▁SRP _ ON ▁} ▁server _ srp _ mode ; ▁typedef ▁enum ▁{ ▁SRP _ GOOD , ▁SRP _ BAD , ▁SRP _ NONE , ▁} ▁client _ srp _ mode ; ▁typedef ▁enum ▁{ ▁HTTP _ OFF , ▁HTTP _ OPTIONAL , ▁HTTP _ REQUIRED ▁} ▁server _ http _ mode ; ▁typedef ▁struct ▁{ ▁char ▁* test _ name ; ▁char ▁* curl _ cert ; ▁char ▁* curl _ key ; ▁char ▁* curl _ http _ auth ; ▁client _ srp _ mode ▁curl _ srp ; ▁server _ http _ mode ▁server _ http ; ▁server _ srp _ mode ▁server _ srp ; ▁int ▁expected _ http _ result ; ▁} ▁us 1060_ matrix ; ▁/* ▁* ▁This ▁is ▁the ▁ unit ▁test ▁matrix ▁for ▁server - side ▁SRP ▁support . ▁Curl ▁is ▁* ▁used ▁as ▁the ▁EST ▁client . ▁B ecause ▁of ▁this ▁PoP ▁is ▁disabled ▁on ▁the ▁* ▁server ▁for ▁all ▁test ▁cases . ▁We ▁try ▁to ▁cover ▁a ▁variet y ▁of ▁configuration s ▁* ▁and ▁potential ▁scenario s . ▁The ▁client ▁side ▁variations ▁include : ▁* ▁* ▁curl _ cert : ▁The ▁certificate ▁curl ▁uses , ▁which ▁ma y ▁be ▁NULL ▁* ▁curl _ key : ▁The ▁key ▁curl ▁uses , ▁which ▁ma y ▁be ▁NULL ▁* ▁curl _ http _ auth : ▁The ▁HTTP ▁auth ▁credentials ▁used ▁by ▁curl . ▁* ▁client _ srp _ mode : ▁E i ther ▁GOOD , ▁ BAD , ▁ NONE . ▁Determine s ▁which ▁SRP ▁credentials ▁are ▁used ▁* ▁Curl . ▁* ▁* ▁On ▁the ▁server ▁side ▁we ▁configure ▁the ▁server ▁using ▁the ▁following ▁variations : ▁* ▁* ▁server _ http _ mode : ▁HTTP ▁auth ▁is ▁required , ▁optional , ▁or ▁disabled . ▁* ▁( optional ▁mean s ▁it ▁only ▁occurs ▁when ▁TLS ▁auth ▁fails ) ▁* ▁server _ srp _ mode : ▁SRP ▁is ▁ ei ther ▁enabled ▁or ▁disabled ▁on ▁the ▁server . ▁* ▁* ▁expected _ http _ result : ▁This ▁is ▁the ▁expected ▁HTTP ▁status ▁code ▁received ▁on ▁by ▁Curl . ▁* ▁When ▁SRP ▁fails , ▁this ▁result s ▁in ▁a ▁failed ▁TLS ▁session . ▁Curl ▁* ▁returns ▁a ▁zero ▁in ▁this ▁case ▁since ▁the ▁HTTP ▁layer ▁can ▁not ▁* ▁communicate . ▁If ▁TLS ▁succeeds , ▁but ▁HTTP ▁auth ▁fails , ▁then ▁* ▁the ▁server ▁should ▁return ▁a ▁HTTP ▁401 ▁response ▁to ▁the ▁client . ▁* ▁When ▁enrollment ▁succeeds , ▁the ▁server ▁should ▁send ▁a ▁* ▁HTTP ▁200 ▁response . ▁* ▁* ▁*/ ▁static ▁us 1060_ matrix ▁test _ matrix [] ▁= ▁{ ▁{"1 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ GOOD , ▁HTTP _ REQUIRED , ▁SRP _ ON , ▁200 } , ▁{"2 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ BAD , ▁HTTP _ REQUIRED , ▁SRP _ ON , ▁0 } , ▁{"3 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ REQUIRED , ▁SRP _ ON , ▁200 } , ▁{"4 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ GOOD , ▁HTTP _ OPTIONAL , ▁SRP _ ON , ▁200 } , ▁{"5 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ BAD , ▁HTTP _ OPTIONAL , ▁SRP _ ON , ▁0 } , ▁{"6 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ OPTIONAL , ▁SRP _ ON , ▁200 } , ▁{"7 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ GOOD , ▁HTTP _ OFF , ▁SRP _ ON , ▁200 } , ▁{ " 8 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ BAD , ▁HTTP _ OFF , ▁SRP _ ON , ▁0 } , ▁{ " 9", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ OFF , ▁SRP _ ON , ▁401 } , ▁{"1 1", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ GOOD , ▁HTTP _ REQUIRED , ▁SRP _ ON , ▁401 } , ▁{"1 2 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ BAD , ▁HTTP _ REQUIRED , ▁SRP _ ON , ▁0 } , ▁{"1 3 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ REQUIRED , ▁SRP _ ON , ▁401 } , ▁{"1 4", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ GOOD , ▁HTTP _ OPTIONAL , ▁SRP _ ON , ▁200 } , ▁{"1 5 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ BAD , ▁HTTP _ OPTIONAL , ▁SRP _ ON , ▁0 } , ▁{"1 6 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ OPTIONAL , ▁SRP _ ON , ▁401 } , ▁{"1 7", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ GOOD , ▁HTTP _ OFF , ▁SRP _ ON , ▁200 } , ▁{"1 8 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ BAD , ▁HTTP _ OFF , ▁SRP _ ON , ▁0 } , ▁{"1 9", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ OFF , ▁SRP _ ON , ▁401 } , ▁{"2 1", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ GOOD , ▁HTTP _ REQUIRED , ▁SRP _ OFF , ▁0 } , ▁{"2 2 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ BAD , ▁HTTP _ REQUIRED , ▁SRP _ OFF , ▁0 } , ▁{"2 3 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ REQUIRED , ▁SRP _ OFF , ▁200 } , ▁{"2 4", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ GOOD , ▁HTTP _ OPTIONAL , ▁SRP _ OFF , ▁0 } , ▁{"2 5 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ BAD , ▁HTTP _ OPTIONAL , ▁SRP _ OFF , ▁0 } , ▁{"2 6 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ OPTIONAL , ▁SRP _ OFF , ▁200 } , ▁{"2 7", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ GOOD , ▁HTTP _ OFF , ▁SRP _ OFF , ▁0 } , ▁{"2 8 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ BAD , ▁HTTP _ OFF , ▁SRP _ OFF , ▁0 } , ▁{"2 9", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ OFF , ▁SRP _ OFF , ▁401 } , ▁{"3 1", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ GOOD , ▁HTTP _ REQUIRED , ▁SRP _ OFF , ▁0 } , ▁{"3 2 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ BAD , ▁HTTP _ REQUIRED , ▁SRP _ OFF , ▁0 } , ▁{"3 3 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ REQUIRED , ▁SRP _ OFF , ▁401 } , ▁{"3 4", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ GOOD , ▁HTTP _ OPTIONAL , ▁SRP _ OFF , ▁0 } , ▁{"3 5 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ BAD , ▁HTTP _ OPTIONAL , ▁SRP _ OFF , ▁0 } , ▁{"3 6 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ OPTIONAL , ▁SRP _ OFF , ▁401 } , ▁{"3 7", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ GOOD , ▁HTTP _ OFF , ▁SRP _ OFF , ▁0 } , ▁{"3 8 ", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ BAD , ▁HTTP _ OFF , ▁SRP _ OFF , ▁0 } , ▁{"3 9", ▁NULL , ▁NULL , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ OFF , ▁SRP _ OFF , ▁401 } , ▁{"4 0", ▁US 1060_ EXPLICIT _ CERT , ▁US 1060_ EXPLICIT _ KEY , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ REQUIRED , ▁SRP _ ON , ▁200 } , ▁{"4 1", ▁US 1060_ EXPLICIT _ CERT , ▁US 1060_ EXPLICIT _ KEY , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ REQUIRED , ▁SRP _ ON , ▁401 } , ▁{"4 2 ", ▁US 1060_ EXPLICIT _ CERT , ▁US 1060_ EXPLICIT _ KEY , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ OPTIONAL , ▁SRP _ ON , ▁200 } , ▁{"4 3 ", ▁US 1060_ EXPLICIT _ CERT , ▁US 1060_ EXPLICIT _ KEY , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ OPTIONAL , ▁SRP _ ON , ▁200 } , ▁{"4 4", ▁US 1060_ EXPLICIT _ CERT , ▁US 1060_ EXPLICIT _ KEY , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ OFF , ▁SRP _ ON , ▁200 } , ▁{"4 5 ", ▁US 1060_ EXPLICIT _ CERT , ▁US 1060_ EXPLICIT _ KEY , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ OFF , ▁SRP _ ON , ▁200 } , ▁{"4 6 ", ▁US 1060_ EXPLICIT _ CERT , ▁US 1060_ EXPLICIT _ KEY , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ REQUIRED , ▁SRP _ OFF , ▁200 } , ▁{"4 7", ▁US 1060_ EXPLICIT _ CERT , ▁US 1060_ EXPLICIT _ KEY , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ REQUIRED , ▁SRP _ OFF , ▁401 } , ▁{"4 8 ", ▁US 1060_ EXPLICIT _ CERT , ▁US 1060_ EXPLICIT _ KEY , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ OPTIONAL , ▁SRP _ OFF , ▁200 } , ▁{"4 9", ▁US 1060_ EXPLICIT _ CERT , ▁US 1060_ EXPLICIT _ KEY , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ OPTIONAL , ▁SRP _ OFF , ▁200 } , ▁{"5 0", ▁US 1060_ EXPLICIT _ CERT , ▁US 1060_ EXPLICIT _ KEY , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ OFF , ▁SRP _ OFF , ▁200 } , ▁{"5 1", ▁US 1060_ EXPLICIT _ CERT , ▁US 1060_ EXPLICIT _ KEY , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ OFF , ▁SRP _ OFF , ▁200 } , ▁{"6 0", ▁US 1060_ SELF SIGN _ CERT , ▁US 1060_ SELF SIGN _ KEY , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ REQUIRED , ▁SRP _ ON , ▁0 } , ▁{"6 1", ▁US 1060_ SELF SIGN _ CERT , ▁US 1060_ SELF SIGN _ KEY , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ REQUIRED , ▁SRP _ ON , ▁0 } , ▁{"6 2 ", ▁US 1060_ SELF SIGN _ CERT , ▁US 1060_ SELF SIGN _ KEY , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ OPTIONAL , ▁SRP _ ON , ▁0 } , ▁{"6 3 ", ▁US 1060_ SELF SIGN _ CERT , ▁US 1060_ SELF SIGN _ KEY , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ OPTIONAL , ▁SRP _ ON , ▁0 } , ▁{"6 4", ▁US 1060_ SELF SIGN _ CERT , ▁US 1060_ SELF SIGN _ KEY , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ OFF , ▁SRP _ ON , ▁0 } , ▁{"6 5 ", ▁US 1060_ SELF SIGN _ CERT , ▁US 1060_ SELF SIGN _ KEY , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ OFF , ▁SRP _ ON , ▁0 } , ▁{"6 6 ", ▁US 1060_ SELF SIGN _ CERT , ▁US 1060_ SELF SIGN _ KEY , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ REQUIRED , ▁SRP _ OFF , ▁0 } , ▁{"6 7", ▁US 1060_ SELF SIGN _ CERT , ▁US 1060_ SELF SIGN _ KEY , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ REQUIRED , ▁SRP _ OFF , ▁0 } , ▁{"6 8 ", ▁US 1060_ SELF SIGN _ CERT , ▁US 1060_ SELF SIGN _ KEY , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ OPTIONAL , ▁SRP _ OFF , ▁0 } , ▁{"6 9", ▁US 1060_ SELF SIGN _ CERT , ▁US 1060_ SELF SIGN _ KEY , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ OPTIONAL , ▁SRP _ OFF , ▁0 } , ▁{"7 0", ▁US 1060_ SELF SIGN _ CERT , ▁US 1060_ SELF SIGN _ KEY , ▁US 1060_ UIDPWD _ GOOD , ▁SRP _ NONE , ▁HTTP _ OFF , ▁SRP _ OFF , ▁0 } , ▁{"7 1", ▁US 1060_ SELF SIGN _ CERT , ▁US 1060_ SELF SIGN _ KEY , ▁US 1060_ UIDPWD _ BAD , ▁SRP _ NONE , ▁HTTP _ OFF , ▁SRP _ OFF , ▁0 } , ▁} ; ▁/* ▁* ▁This ▁is ▁our ▁work er ▁for ▁ each ▁entry ▁in ▁the ▁test ▁matrix ▁above . ▁* ▁We ▁read ▁the ▁configuration ▁from ▁the ▁entry , ▁configure ▁the ▁* ▁server ▁and ▁client ▁as ▁needed , ▁and ▁attempt ▁a ▁simple ▁enroll ▁* ▁using ▁Curl ▁as ▁the ▁client . ▁* ▁The ▁argument ▁i ▁is ▁the ▁ index ▁of ▁the ▁entry ▁in ▁the ▁t able ▁above . ▁*/ ▁static ▁void ▁us 1060_ test _ matrix _ item ▁( int ▁i ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁ printf (" \ nR unning ▁matrix ▁test ▁% s \ n ", ▁test _ matrix [ i ]. test _ name ); ▁/* ▁* ▁Sto p ▁the ▁server ▁and ▁restart ▁it ▁to ▁make ▁sure ▁* ▁it ' s ▁in ▁the ▁correct ▁mode . ▁*/ ▁st _ stop (); ▁SL EEP (1); ▁if ▁( test _ matrix [ i ]. server _ srp ▁ == ▁SRP _ ON ) ▁{ ▁rv ▁= ▁us 1060_ start _ server ( US 1060_ SERVER _ CERTKEY , ▁US 1060_ SERVER _ CERTKEY , ▁0, ▁0, ▁1); ▁} ▁else ▁{ ▁rv ▁= ▁us 1060_ start _ server ( US 1060_ SERVER _ CERTKEY , ▁US 1060_ SERVER _ CERTKEY , ▁0, ▁0, ▁0); ▁} ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Set ▁the ▁server ▁HTTP ▁auth ▁configuration ▁*/ ▁switch ▁( test _ matrix [ i ]. server _ http ) ▁{ ▁case ▁HTTP _ OFF : ▁st _ disable _ http _ auth (); ▁break ; ▁case ▁HTTP _ OPTIONAL : ▁st _ enable _ http _ auth (); ▁st _ set _ http _ auth _ optional (); ▁break ; ▁case ▁HTTP _ REQUIRED : ▁st _ enable _ http _ auth (); ▁st _ set _ http _ auth _ required (); ▁break ; ▁} ▁switch ▁( test _ matrix [ i ]. curl _ srp ) ▁{ ▁case ▁SRP _ GOOD : ▁rv ▁= ▁curl _ http _ post _ srp ( US 1060_ ENROLL _ URL , ▁US 1060_ PKCS 10_ CT , ▁US 1060_ PKCS 10_ REQ , ▁test _ matrix [ i ]. curl _ http _ auth , ▁NULL , ▁CURL AUTH _ BASIC , ▁NULL , ▁" srp _ user ", ▁" srp _ pwd ", ▁NULL , ▁NULL ); ▁break ; ▁case ▁SRP _ BAD : ▁rv ▁= ▁curl _ http _ post _ srp ( US 1060_ ENROLL _ URL , ▁US 1060_ PKCS 10_ CT , ▁US 1060_ PKCS 10_ REQ , ▁test _ matrix [ i ]. curl _ http _ auth , ▁NULL , ▁CURL AUTH _ BASIC , ▁NULL , ▁" srp _ user ", ▁" bogus pwd ", ▁NULL , ▁NULL ); ▁break ; ▁case ▁SRP _ NONE : ▁/* ▁* ▁Some ▁of ▁the ▁SRP ▁disabled ▁test ▁cases ▁use ▁a ▁client ▁* ▁certificate . ▁*/ ▁if ▁( test _ matrix [ i ]. curl _ cert ) ▁{ ▁rv ▁= ▁curl _ http _ post _ cert uid ( US 1060_ ENROLL _ URL , ▁US 1060_ PKCS 10_ CT , ▁US 1060_ PKCS 10_ REQ , ▁test _ matrix [ i ]. curl _ http _ auth , ▁test _ matrix [ i ]. curl _ cert , ▁test _ matrix [ i ]. curl _ key , ▁US 1060_ CACERTS , ▁NULL ); ▁} ▁else ▁{ ▁rv ▁= ▁curl _ http _ post ( US 1060_ ENROLL _ URL , ▁US 1060_ PKCS 10_ CT , ▁US 1060_ PKCS 10_ REQ , ▁test _ matrix [ i ]. curl _ http _ auth , ▁US 1060_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁} ▁break ; ▁} ▁CU _ ASSERT ( rv ▁ == ▁test _ matrix [ i ]. expected _ http _ result ); ▁if ▁( rv ▁ != ▁test _ matrix [ i ]. expected _ http _ result ) ▁{ ▁ printf (" \ nM atrix ▁test ▁% s ▁failed ▁with ▁rv ▁= ▁% d \ n ", ▁test _ matrix [ i ]. test _ name , ▁( int ) ▁rv ); ▁} ▁} ▁/* ▁* ▁This ▁test ▁case ▁run s ▁all ▁the ▁tests ▁in ▁the ▁matrix ▁*/ ▁static ▁void ▁us 1060_ test 0 ▁( void ) ▁{ ▁int ▁i ; ▁int ▁test _ cnt ▁= ▁sizeof ( test _ matrix ) ▁/ ▁sizeof ( test _ matrix [0]); ▁for ▁( i ▁= ▁0; ▁i ▁ < ▁test _ cnt ; ▁i ++) ▁{ ▁us 1060_ test _ matrix _ item ( i ); ▁} ▁} ▁/* ▁* ▁This ▁test ▁case ▁is ▁verifie s ▁the ▁happ y ▁path ▁when ▁EST ▁* ▁proxy ▁is ▁configured ▁in ▁SRP ▁mode . ▁The ▁client ▁will ▁attempt ▁* ▁to ▁use ▁SRP . ▁The ▁connection ▁between ▁the ▁proxy ▁and ▁* ▁server ▁does ▁not ▁use ▁SRP . ▁We ▁perform ▁a ▁simple ▁enroll ▁* ▁operation . ▁*/ ▁static ▁void ▁us 1060_ test 200 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Re start ▁the ▁EST ▁server ▁with ▁SRP ▁disabled ▁*/ ▁st _ stop (); ▁SL EEP ( 2 ); ▁rv ▁= ▁us 1060_ start _ server ( US 1060_ SERVER _ CERTKEY , ▁US 1060_ SERVER _ CERTKEY , ▁0, ▁0, ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁rv ▁= ▁curl _ http _ post _ srp ( US 1060_ PROXY _ ENROLL _ URL , ▁US 1060_ PKCS 10_ CT , ▁US 1060_ PKCS 10_ REQ , ▁US 1060_ UIDPWD _ GOOD , ▁NULL , ▁CURL AUTH _ BASIC , ▁NULL , ▁" srp _ user ", ▁" srp _ pwd ", ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁a ▁valid ▁SRP ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁success ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁} ▁/* ▁* ▁This ▁test ▁case ▁is ▁verifie s ▁the ▁simple ▁enroll ▁fails ▁* ▁when ▁the ▁EST ▁client ▁provide s ▁a ▁bad ▁SRP ▁password . ▁* ▁The ▁connection ▁between ▁the ▁proxy ▁and ▁server ▁does ▁not ▁* ▁use ▁SRP . ▁*/ ▁static ▁void ▁us 1060_ test 201 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁rv ▁= ▁curl _ http _ post _ srp ( US 1060_ PROXY _ ENROLL _ URL , ▁US 1060_ PKCS 10_ CT , ▁US 1060_ PKCS 10_ REQ , ▁US 1060_ UIDPWD _ GOOD , ▁NULL , ▁CURL AUTH _ BASIC , ▁NULL , ▁" srp _ user ", ▁" bogus pwd ", ▁NULL , ▁NULL ); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁} ▁/* ▁* ▁This ▁test ▁case ▁is ▁verifie s ▁the ▁simple ▁enroll ▁fails ▁* ▁when ▁the ▁EST ▁client ▁provide s ▁a ▁bad ▁HTTP ▁password ▁* ▁and ▁SRP ▁is ▁used . ▁The ▁connection ▁between ▁the ▁proxy ▁* ▁and ▁server ▁does ▁not ▁use ▁SRP . ▁*/ ▁static ▁void ▁us 1060_ test 202 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁rv ▁= ▁curl _ http _ post _ srp ( US 1060_ PROXY _ ENROLL _ URL , ▁US 1060_ PKCS 10_ CT , ▁US 1060_ PKCS 10_ REQ , ▁US 1060_ UIDPWD _ BAD , ▁NULL , ▁CURL AUTH _ BASIC , ▁NULL , ▁" srp _ user ", ▁" srp _ pwd ", ▁NULL , ▁NULL ); ▁CU _ ASSERT ( rv ▁ == ▁401 ); ▁} ▁/* ▁* ▁This ▁test ▁case ▁is ▁verifie s ▁the ▁simple ▁enroll ▁works ▁* ▁when ▁the ▁EST ▁client ▁provide s ▁no ▁HTTP ▁password ▁* ▁and ▁SRP ▁is ▁used . ▁The ▁connection ▁between ▁the ▁proxy ▁* ▁and ▁server ▁does ▁not ▁use ▁SRP . ▁HTTP ▁auth ▁is ▁disabled ▁* ▁on ▁the ▁proxy . ▁*/ ▁static ▁void ▁us 1060_ test 203 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁st _ proxy _ http _ disable (1); ▁rv ▁= ▁curl _ http _ post _ srp ( US 1060_ PROXY _ ENROLL _ URL , ▁US 1060_ PKCS 10_ CT , ▁US 1060_ PKCS 10_ REQ , ▁NULL , ▁NULL , ▁CURL AUTH _ NONE , ▁NULL , ▁" srp _ user ", ▁" srp _ pwd ", ▁NULL , ▁NULL ); ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁} ▁int ▁us 1060_ add _ suite ▁( void ) ▁{ ▁# if def ▁HA VE _ C UNIT ▁CU _ pSuite ▁pSuite ▁= ▁NULL ; ▁/* ▁add ▁a ▁suite ▁to ▁the ▁ registry ▁*/ ▁pSuite ▁= ▁CU _ add _ suite (" us 1060_ tls _ srp ▁( server / proxy )", ▁us 1060_ init _ suite , ▁us 1060_ destroy _ suite ); ▁if ▁( NULL ▁ == ▁pSuite ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁/* ▁* ▁Add ▁the ▁tests ▁to ▁the ▁suite ▁* ▁* ▁ ***** *************** IMPORTANT ***** **************** ▁* ▁Do ▁not ▁change ▁the ▁order ▁of ▁these ▁tests . ▁* ▁Some ▁of ▁the ▁tests ▁stop ▁the ▁EST ▁server ▁and ▁restart ▁* ▁it ▁using ▁diff erent ▁certs . ▁If ▁you ▁change ▁the ▁order ▁* ▁then ▁fal se ▁negative s ▁ma y ▁occur . ▁* ▁** **************** **************** **************** ▁* ▁*/ ▁if ▁( ( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" TLS - SRP ▁server : ▁matrix ▁master ", ▁us 1060_ test 0)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" TLS - SRP ▁proxy : ▁enroll ▁w / SRP ", ▁us 1060_ test 200 )) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" TLS - SRP ▁proxy : ▁enroll ▁bad ▁SRP ▁pwd ", ▁us 1060_ test 20 1)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" TLS - SRP ▁proxy : ▁enroll ▁bad ▁HTTP ▁pwd ", ▁us 1060_ test 20 2)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" TLS - SRP ▁proxy : ▁enroll ▁w / o ▁HTTP ▁auth ", ▁us 1060_ test 203 ))) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁return ▁CU E _ SUCCESS ; ▁# endif ▁}