▁/* -- ---------------- ---------------- ---------------- ---------------- ▁* ▁us 2174 . c ▁- ▁ Unit ▁Test s ▁for ▁User ▁Stor y ▁ 2174 ▁- ▁ Proxy ▁simple ▁enroll ▁* ▁* ▁August , ▁2013 ▁* ▁* ▁Copy right ▁( c ) ▁2013 , ▁2016 ▁by ▁ cisco ▁S ystems , ▁Inc . ▁* ▁All ▁ right s ▁ reserved . ▁* -- ---------------- ---------------- ---------------- ---------------- ▁*/ ▁# include ▁ < std io . h > ▁# if n def ▁W IN 32 ▁# include ▁ < uni std . h > ▁# endif ▁# include ▁ < est . h > ▁# include ▁ < curl / curl . h > ▁# include ▁" curl _ util s . h " ▁# include ▁" test _ util s . h " ▁# include ▁" st _ server . h " ▁# include ▁" st _ proxy . h " ▁# include ▁ < openssl / ssl . h > ▁# if def ▁HA VE _ C UNIT ▁# include ▁" CUnit / Basic . h " ▁# include ▁" CUnit / A utomat ed . h " ▁# endif ▁static ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁static ▁int ▁cacerts _ len ▁= ▁0; ▁# define ▁US 2174_ RETRY _ INTERVAL ▁3600 ▁// # define ▁US 2174_ TCP _ PORT ▁ 29001 ▁# define ▁US 2174_ TCP _ SERVER _ PORT ▁ 5 2174 ▁# define ▁US 2174_ TCP _ PROXY _ PORT ▁ 6 2174 ▁# if n def ▁W IN 32 ▁# define ▁US 2174_ SERVER _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 2174_ SERVER _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁/* ▁# define ▁US 2174_ PROXY _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁*/ ▁/* ▁# define ▁US 2174_ PROXY _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁*/ ▁# define ▁US 2174_ PROXY _ CERT ▁" US 2174/ cert . pem " ▁# define ▁US 2174_ PROXY _ KEY ▁" US 2174/ key . pem " ▁# define ▁US 2174_ CACERT ▁" CA / estCA / cacert . crt " ▁# define ▁US 2174_ CACERTS ▁" CA / estCA / cacert . crt " ▁# define ▁US 2174_ TRUSTED _ CERTS ▁" CA / trustedcerts . crt " ▁# define ▁US 2174_ EXPLICIT _ CERT ▁" US 2174/ cert - RA . pem " ▁# define ▁US 2174_ EXPLICIT _ KEY ▁" US 2174/ key - RA . pem " ▁# else ▁# define ▁US 2174_ SERVER _ CERT ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# define ▁US 2174_ SERVER _ KEY ▁" CA \\ estCA \\ private / estserver cert and key . pem " ▁/* ▁# define ▁US 2174_ PROXY _ CERT ▁" CA / estCA / private / estserver cert and key . pem " ▁*/ ▁/* ▁# define ▁US 2174_ PROXY _ KEY ▁" CA / estCA / private / estserver cert and key . pem " ▁*/ ▁# define ▁US 2174_ PROXY _ CERT ▁" US 2174\\ cert . pem " ▁# define ▁US 2174_ PROXY _ KEY ▁" US 2174\\ key . pem " ▁# define ▁US 2174_ CACERT ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 2174_ CACERTS ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 2174_ TRUSTED _ CERTS ▁" CA \\ trustedcerts . crt " ▁# define ▁US 2174_ EXPLICIT _ CERT ▁" US 2174\\ cert - RA . pem " ▁# define ▁US 2174_ EXPLICIT _ KEY ▁" US 2174\\ key - RA . pem " ▁# endif ▁# define ▁US 2174_ SERVER _ IP ▁"127.0.0.1" ▁# define ▁US 2174_ TCP _ PORT ▁US 2174_ TCP _ SERVER _ PORT ▁/* ▁* ▁The ▁following ▁CSR ▁was ▁ generated ▁using ▁the ▁following ▁openssl ▁command ▁and ▁then ▁* ▁using ▁cat ▁on ▁the ▁rsa . req ▁file : ▁* ▁* ▁openssl ▁req ▁- new key ▁rsa : 2048 ▁- key out ▁rsa key . pem ▁- key form ▁PEM ▁- out ▁rsa . req ▁- out form ▁PEM ▁*/ ▁# define ▁US 2174_ PKCS 10_ RSA 2048 ▁" MIIC v TCCAa U CAQAw e DEL MAkG A 1 UEB h MCV VM x CzA J BgNVBA g MAk 5 DM Qw wC gYDVQQ H \ nDANSVFAxE j AQ BgNVBAoMC VJ TQW Nl cn Rj bz EM MA oGA 1 UEC wwD cnN h MR AwDgYDV QQD \ nDA d yc 2 EgZG 9 lMR o wGA YJKoZIhvcNAQkBFg ty c 2 FA ZG 9 l Lm Nvb T CCASIwDQYJKoZI \ n hvcNAQEBBQADgg EPADCCAQoCggEBA N 6 pC TB rK 7 T 0 29 Bg a nq 0 QH XH y NL 8 op v xc 7 JY \ n Xa Qz 39 R 3 J 9 BoB E 72 XZ 0 QX sB tU EY GNh HO La IS ASN zs 2 ZK Wp vM HJ W mP YN t 39 OC i 48 Y \ n FO gL Db An 83 mA OK Sf c ML bi bC c sh 4 HO l haa F rWs kRT As ew 16 MU Oz Fu 6 vB kw / A hI 82 J \ nK PY ws 0 dY Ox uW FI gE 1 HL + m / gpl bz q 7 Fr BI d rq k NL + dd gy Xo Dd 5 Nu LM JG DAK 7 vB 1 Ww \ n 9/ Ba w /6 Ai 9 V 5 ps ye 1 v 8 f WD r 6 HW 2 gg 9 X n VtM wB 4 pC g 1 rl 1 l SY stum T GY bM 6 cx Jy we \ nL uM nD jj 1 Zw D sZ 1 wI Xa BA XZa x EIS / rX OX 0 H nZ MT ef xY / gp Fk 1 Kv 0 CAwEAAa AAMA 0 G \ n CS qGS Ib 3 DQEBBQUA A 4 IBAQB 6 r Iw Nj E 8 l 8 jF KR 1 hQ / qe Sv ee / bAQ a 58 Ru fZ 4 US Ku K \ nl si h 7 UC f 8 b kQ vg lj nh s c Qu cz Ibn Jz eq EP qS dn om FW 6 Cv Mc / ah + Qf X 87 FG Y xJ gp wF \ n ut nU if j Di Zh rW gf / jN N bt H rke cw / Z ex 4 sZ / HC 127 j tE 3 cy E kD srA 1 oB xYR Cq 93 tC \ nW 2 q 9 PL Vm Ll yjc Z cS 1 KH VD 2 n ya 79 kfS 0 Y GM ocs w 1 Ge l VL 2 iz / oca yA S 5 GB 9 Y 2 s E Bw \ nR kC aY Zw 6 v hj 5 qj p CU zJ 3 E 8 Cl 3 VD 4 Kp i 3 j 3 bZGD JA 9 md md 8 j 5 Zy PY 56 e Au xa rW ssD \ n ci UM / h 6 E 99 w 3 tm rU Zb Ll jk jJ 7 pBX Rn ont gm 5 WZ mQ FH 4 X " ▁/* ▁* ▁The ▁following ▁CSR ▁was ▁ generated ▁using ▁the ▁following ▁openssl ▁command ▁and ▁then ▁* ▁using ▁cat ▁on ▁the ▁ec . req ▁file : ▁* ▁* ▁openssl ▁req ▁- new key ▁ec : 256 parms ▁- key out ▁eckey . pem ▁- key form ▁PEM ▁- out ▁ec . req ▁- out form ▁PEM ▁*/ ▁# define ▁US 2174_ PKCS 10_ DSA 1024 ▁" MIIC f jCCA j 0 CAQAw f DEL MAkG A 1 UEB h MCV VM x CzA J BgNVBA g MAk 5 DM Qw wC gYDVQQ H \ nDANSVFAxE zA R BgNVBAoMC kRTQ U Nvb X Bhb nk xD zA N BgNVBA s MB kRTQ W 9 yZzE Q MA 4 G \ nA 1 UEAww H ZHNh IGRv ZT EaM Bg GCS qGS Ib 3 DQEJ ARY L ZHNh Q GRvZ S 5 jb 20 wgg G 2 MIIB \ n KwY HKoZIzjgEA TCCA R 4 CgYEA q If by k 7 rE AaU L IP B 1 Gc H Hc 0 ctx 6 g 0 dh Bf d Ud OP NG \ nB SE + TP 5 UF 5 lw 8 Qm 6 o CX stU 3 nY EJ al mMv k jF wb g vB ws 8 a JBn j 09 dD Dn 8 s pK EG cG 0 M \ n Zp qd My s 6+ b 4 QJ jq 5 Y AxE a ATV Y /1 L / rBg G Gm 1 EF Dhc /6 E zm 2 T 3 C Ge Qk lw o 5 a BZQ Cc \ n aI sCF QD C 1 ol BF uE + ph Ohj X AwE E 5 EP Jk R Jw KBgD + vZ + t L CT jB zV FN jAO 8 X / SM am wW \ no ra Nf dyZ + ZC EA mYI / D 4 838 n C GA jVR Qy Db 1 q 5 ak kL yx oJ X 1 YV 7 g Nba BN Uy s 3 wa qd u \ nso 1 Ht uE ur 2 cb hU 5 iO eKB Wp j 6 MI Wl P dD 3 uC Ru 4 ui BF 9 XB iAN a RID 8 CT 2 kc hh wy 4 Ok \ nF f QM uY Oz 4 e BhM Qq mA 4 G EAA KBgD u wR 7 H 3 U 4 C fu Qj We T t rI 50 M 1 Tx hlV Z 3 T on RtV Ix \ n EH pu X xA ou x ATV kt h J ta CBK c 0 EH i i 1 bE / kg N Ug GX / Zd F jB Ub / X fp k Ys RT 3 QR LF 0+ s \ n PZ GY /0 T ov O 9 pK jq iw 0 C 10 le N KF b EV dl XY t Ak jX Ub Hm yN og 31 95/ t 7 oK XH MT 1 A / 5 p \ n hUC R oAAw CQ YHKoZIzjgEA w Mw ADA tA hU Ah PCq QG 3 gK UU PK dw BN Cm Zf z WD qj sCF Ah 0\ nz n 9 H uj lXN a TA 1 Ohj mP m cJ SxT " ▁/* ▁* ▁The ▁following ▁CSR ▁was ▁ generated ▁using ▁the ▁following ▁openssl ▁command ▁and ▁then ▁* ▁using ▁cat ▁on ▁the ▁dsa . req ▁file : ▁* ▁* ▁openssl ▁req ▁- new key ▁dsa : dsa parms ▁- key out ▁dsa key . pem ▁- key form ▁PEM ▁- out ▁dsa . req ▁- out form ▁PEM ▁*/ ▁# define ▁US 2174_ PKCS 10_ ECDSA 256 ▁" MIIB MT CB 2 gIBADB 4 MQswCQYDVQQGEwJ VU zE L MAkG A 1 UECAw CT kM xD DAK BgNVBA cM \ nA 1 JU U DES MB AGA 1 UECgw JR UND b 21 wYW 55 MQ 4 wDAYDVQQLDAVFQ 29 yZzE P MA 0 GA 1 UE \ n AwwG R UM gZG 9 l MRkwFwY JKoZIhvcNAQkBFg p lY 0 Bkb 2 U uY 29 t MF kwE wYHKoZIzj 0 C \ nAQ YI KoZIzj 0 DAQ c DQ gA EO 1 us z CK dXN Fz yg NL N eS 8 az QK od 151 6 GT 9 qd Dd d t 9 iJ N 4\ nL pB Tnv +7 K 7+ t ji 5 kt s 1 kW SY yv qL xv nq 8 Q / TU 1 i QJ 56 AAMA k GBy qGS M 49 BA E DR wAw \ nR AIg P 6 qd a +0 TE KZ F Pop gU fwF MRs xc N mu QU e 2 y uz 1 64 60/ SQ C IB fL vm uM ey YO qb bD \ nX 0 I fde 9 y zk RO VB C EP vK 0 h cU 5 KsT O " ▁# define ▁US 2174_ PKCS 10_ CORRUPT ▁" MIIB MT CB 2 gIBADB 4 MQswCQYDVQQGEwJ VU zE L MAkG A 1 UECAw CT kM xD DAK BgNVBA cM \ nA 1 JU U DES MB AGA 1 UECgw JR UND b 21 wYW 55 MQ 4 wDAYDVQQLDAVFQ 39 yZzE P MA 0 GA 1 UE \ n AwwG R UM gZG 9 l MRkwFwY JKoZIhvcNAQkBFg p lY 0 Bkb 2 U uY 29 t MF kwE wYHKoZIzj 0 C \ nAQ YI KoZIzj 0 DAQ c DQ gA EO 1 us z CK dXN Fz yg NL N eS 8 az QK od 151 6 GT 9 qd Dd d t 9 iJ N 4\ nL pB Tnv +7 K 7+ t ji 5 kt s 1 kW SY yv qL xv nq 8 Q / TU 1 i QJ 56 AAMA k GBy qGS M 49 BA E DR wAw \ nR AIg P 6 qd a +0 TE KZ F Pop gU fwF MRs xc N mu QU e 2 y uz 1 64 60/ SQ C IB fL vm uM ey YO qb bD \ nX 0 I fde 9 y zk RO VB C EP vK 0 h cU 5 KsT O " ▁/* ▁* ▁The ▁following ▁is ▁a ▁valid ▁CSR ▁that ▁al ready ▁contains ▁a ▁PoP ▁* ▁c hallengePassword . ▁This ▁was ▁c oll ected ▁using ▁est server ▁with ▁* ▁the ▁dump bin () ▁function . ▁This ▁CSR ▁should ▁ne ver ▁work ▁since ▁* ▁the ▁PoP ▁value ▁in ▁it ▁will ▁be ▁sta le . ▁*/ ▁# define ▁US 2174_ PKCS 10_ STA LE _ POP ▁" MIIB cj CB 3 A IBADA R MQ 8 wDQ YDVQQDE wZ URV NU Q 04 w gZ 8 wDQYJKoZI hvcNAQEBBQAD \ n gY 0 A MIG JAoGBA PD Hv rk VB 3 + r FH l + Ku I sr ZG i xld RY RD 50 S 2 vF s 8 mW 5 wW Vx DS 3 x FR \ nz cK t qg 7 JU yW 8 NY OF N WX 0 oz h Ce 87 XP 2 h 7 tUp Hy H lL /8 N /8 4 zuM tA t KT LU 3 Bjg q 1 xg \ nu u 8 a 1 ht 10 wi y 8 u 2 r / u EK MhQ w pv t 56 UY 5 pH zu qm ql O 0 ql m E + M 58 WN 49 Ih AgMBAAGg \ n IjA g Bgkq hk iG 9 w 0 BCQcxE xYR Uj dGN 1 ZUN Uw yd 2 Vu eW t Mc A ow DQYJKoZIhvcNAQEF \ n BQADgYEA y enrs km fR IX cp eKB vL 3 V nW 5 N 4 Hc LT wI 9 Hc br 74 4 SW FQ aw / R + ru + UX d 2 j \ n 99 AG Br / Gv Tk T gh IN Wg 2 C 7 v z GF / z hI uG 6 Ok 9 Ft iM n N r 9 hZ +5 SL Yh fS FJ bu Iv 65 rW H \ n vf LR 9 N 9 M 2 Q 9 jl f 7 p 4 AY fW XD 2 qD 2 X OT Zw 2 t 4 tr G ZG KA 2 JR / O iB 40 =" ▁# define ▁US 2174_ ENROLL _ URL _ BA ▁" http s ://127.0.0.1: 6217 5 /. well - known / est / simpleenroll " ▁# define ▁US 2174_ PKCS 10_ CT ▁" Content - Type : ▁application / pkcs 10" ▁# define ▁US 2174_ UIDPWD _ GOOD ▁" estuser : estpwd " ▁static ▁E VP _ PKEY ▁* ▁generate _ private _ key ▁( void ) ▁{ ▁RSA ▁* rsa ▁= ▁RSA _ new (); ▁B IG NUM ▁* bn ▁= ▁ BN _ new (); ▁E VP _ PKEY ▁* pkey ; ▁/* ▁* ▁create ▁an ▁RSA ▁ keypair ▁and ▁assign ▁them ▁to ▁a ▁ PKEY ▁and ▁return ▁it . ▁*/ ▁ BN _ set _ word ( bn , ▁0 x 1000 1); ▁RSA _ generate _ key _ ex ( rsa , ▁1024 , ▁bn , ▁NULL ); ▁pkey ▁= ▁E VP _ PKEY _ new (); ▁if ▁( pkey ▁ == ▁NULL ) ▁{ ▁ printf (" \ n Error ▁allocat ing ▁ PKEY ▁structure ▁for ▁new ▁key ▁pair \ n "); ▁return ▁NULL ; ▁} ▁if ▁(! E VP _ PKEY _ set 1 _ RSA ( pkey , ▁rsa )) ▁{ ▁ printf (" \ n Error ▁assign ing ▁RSA ▁key ▁pair ▁to ▁ PKEY ▁structure \ n "); ▁return ▁NULL ; ▁} ▁RSA _ free ( rsa ); ▁ BN _ free ( bn ); ▁return ▁( pkey ); ▁} ▁# define ▁GOOD _ TOKEN ▁" WW 91 IGRv bid 0 IGhhdmUg dG 8 gaG 9 sb GVy IEkg a GVhc iB 5 b 3 U =" ▁# define ▁DI FFER ENT _ TOKEN ▁" V 2 VsbC wgSSd 2 ZSB nb 3 QgdG 8 gc nVuIH RvIG tl ZXAg Z nJvbSB oa WRpbicNCkFuZCBJJ 20 gYm 91 bmQgdG 8 ga 2 Vl c CBvb iBy a WRpbicNCkFuZCBJJ 3 Zl IGdv d CBvb mUgbW 9 yZSB zaW x 2 ZXIgZ G 9 sb GFy DQp CdX Q gSSdtIG 5 vdCB nb 2 5 u YSB s ZXQg J 2 Vt IGN hdG No IG 1 lLCB ub w 0 KT m 90 IGdv bm 5 hIG xld CA n ZW 0 gY 2 F 0 Y 2 g gdGhlIG 1 pZG 5 pZ 2 h 0 IHJpZ GVy " ▁# define ▁NULL _ TOKEN ▁NULL ; ▁# define ▁LONG _ TOKEN ▁" S SBj YW 4 ndCB hZ 3 Jl ZSB 0 byB ka XN hZ 3 Jl ZSANCk Zp Z 2 h 0 aW 5 nIG xpa 2 U gSSdtIG Zp Z 2 h 0 aW 5 n IGZvciB saW ZlI A 0 KV GhleS dyZSB vbm x 5 IHd v cm Rz IGJ 1 dCB 0 aGV 5 IGN 1 dCB sa WtlIG E gYmxh ZG UgDQp T d 2 luZ 2 luZyB 3 aWRlIH dp d Ggg YWxs IG 9 mIG 15 IG 1 pZ 2 h 0 IA 0 KDQp B aCB 5 ZWFoLCB JIG d 1 ZXN zIG l 0 J 3 MgY WxsI G 9 m IHRo YXQg Y 29 mZ mVl LCB 0 aGF 0 J 3 MgZ 290 IG 15 IG 1 p bmQg aW 4 g YSB 3 aG ly bC ANCkknbSBzdG l sbCB j dXN zaW 5 nIG FuZCB ia X Rj a GluZyB hbmQg d GhlcmUgY Wl uJ 3 Qgb m 9 ib 2 R 5 IGhlcmUg DQoNCk 9 oIHl lYW g sIHlvdSB kb 24 ndCB oYX Zl IHRvIG h vb Gxl ci BJIGh lY XI geW 91 IA 0 KSSdtI HN 0 YW 5 k aW 5 n IHJpZ 2 h 0 IGhlcmUg Ym Vz aWRlIH lvdSANCk 9 oL CA 5 O SBza GF kZ XMg b 2 Y gY 3 JhenksI E knbS A 5 O SBza GF kZ XMg b 2 Y gY 3 JhenkgDQp Dc mF 6 eSwg Y 3 JhenksI GN yY Xp 5 LCB jc mF 6 eSANC g 0 KU G 91 ci Bhbm 90 aGVy IGR yaW 5 r LCB tY WtlIG l 0 IG EgZG 91 Ymx l IGZvciB t ZSANCk 1 h eW Jl IEkg Y 2 Fu IGR yaW 5 r IHRoaXMg YX dh eSANCk l 0 J 3 M gbmV 2 ZXIgZ nVuIH d oZW 4 gdGhl eSB wd WxsI G 91 dCB 0 aGUg Z 3 VuI A 0 KQ mVh dCB 5 b 3 U gYmxh Y 2 s gYW 5 k IGJ s d WU s IGJv eSANC l lvdSB nb 3 R 0 YSBwYXk sIHlvdSB nb 3 R 0 YSBwYXk gDQoNCk 9 oLCB 3 aGVyZSB 0 aGUg aGV sbCB h bSB J Py BJIGh vc GUg YXQg b GVhc 3 QgSS BoY WQ gZnVuI A 0 KSSdtI HN 0 dW 1 ib GluZyB 0 aH JvdW do IE 5 ld yB P c mx lYW 5 zIG 9 oLCB 0 byB 0 aGUgc ml zaW 5 n IHN 1 b iAN Cg 0 KT 2 gge WV h aCwg eW 91 IGRv bid 0 IGhhdmUg dG 8 gaG 9 sb GVy IEkg a GVhc iB 5 b 3 UgDQp JJ 20 gc 3 Rhb mR pbmcg cml n aHQ g aGVyZSB i ZXN pZG U geW 91 IA 0 KT 2 gsI Dk 5 IHN oYW Rl cyB vZ iB jc mF 6 eSwg SSdtI Dk 5 IHN oYW Rl cyB vZ iB jc mF 6 eSANCk N yY Xp 5 LCB jc mF 6 eSwg Y 3 JhenksI GN yY Xp 5 IA 0 KDQp Mb 3 Jk IGhhdmUg b WV yY 3 kgb 24 gbW UgDQp Ob 3 Zl b nR hIG 51 ZXZ h IHRv bm 9 zIGR lIG xv Y 28 gDQoNCk kgb mVl ZCB zb 21 lIH B lY WNlLCB q dXN 0 IHN v bWUg cmV saWV m IA 0 KR nJvbSB 0 aGlzIH Z va WNlLCB r aWx saW 5 nIG 1 l IA 0 K WW 91 IHN 0 Y XJlIG F 0 IG 1 lLCB hbmQg eW 91 IGd s Y XJlIG F 0 IG 1 l IA 0 KQ Wxs IHRoaXMg c GF pbiB pdC dz IGF sbCB 0 aGUgc 2 F tZS wga XQ ncy BhbGwg aW 5 zYW 5 l IA 0 KK HlvdSB z ZW Up IA 0 KDQp J cyB 0 aGlzIH Jl YWxs eSB oYX Bw ZW 5 pbmcg b 3 IgZG lkIEkg bW Fr ZSB pdC BhbGwg d XA / IA 0 KSSdtI G JvdW 5 k IGZvciB D aGF 0 dGF ob 29 j aGV lIG 9 u IGEg dH Vy bm lw IHR yd WN r IA 0 K DQpPaC B 5 ZWFoLCB 5 b 3 U gZG 9 uJ 3 QgaG F 2 ZSB 0 byB ob 2 x s ZXIg SSBo ZWF y IHlvdS ANCkknbSBzdG FuZ GluZyB yaW do dCBo Z XJlIG Jlc 2 lkZSB 5 b 3 UgDQp P aCwg OTk gc 2 hh ZGV zIG 9 mIG N yY Xp 5 L CBJJ 20 g OTk gc 2 hh ZGV zIG 9 mIG N yY Xp 5 IA 0 KQ 3 JhenksI GN yY Xp 5 LCB jc mF 6 eSwg Y 3 Jhenk gDQoNCk Fo IHlvdS dyZSB jc mF 6 eSB 5 b 3 Un cmUgY 3 JhenkgDQp Ib 2 x kIG 15 IGZlZXQ s IGZlZXQ gdG 8 gdGhlIG Zp cmUgDQ p Zb 3 UgaG 9 s ZCB t eSB mZ WV 0 IHRv IHRo ZSB ma XJlI A 0 KSS Bu ZXZ lciB zYW lkIEkg d 2 Fz IGRv d 24 gd 2 l 0 aCB 5 b 3 U =" ▁static ▁char ▁* test _ token ▁= ▁" WW 91 IGRv bid 0 IGhhdmUg dG 8 gaG 9 sb GVy IEkg a GVhc iB 5 b 3 U =" ; ▁static ▁int ▁auth _ cred _ callback _ called ▁= ▁0; ▁static ▁int ▁auth _ cred _ force _ error ▁= ▁0; ▁/* ▁* ▁auth _ credentials _ token _ cb () ▁is ▁the ▁application ▁layer ▁callback ▁function ▁that ▁will ▁* ▁return ▁a ▁token ▁based ▁authentication ▁credential ▁when ▁called . ▁It ' s ▁registered ▁* ▁with ▁the ▁EST ▁Client ▁using ▁the ▁est _ client _ set _ auth _ cred _ cb (). ▁* ▁The ▁test ▁function ▁is ▁required ▁to ▁set ▁some ▁global ▁values ▁in ▁order ▁to ▁make ▁this ▁* ▁callback ▁operate ▁the ▁ way ▁that ▁the ▁test ▁case ▁wants . ▁* ▁- ▁auth _ cred _ force _ error ▁= ▁tell ▁this ▁function ▁to ▁force ▁a ▁response ▁code ▁error ▁* ▁- ▁test _ token ▁= ▁pointer ▁to ▁a ▁hard ▁code d ▁string ▁that ▁is ▁the ▁token ▁string ▁to ▁return ▁* ▁* ▁This ▁callback ▁must ▁provide ▁the ▁token ▁credentials ▁in ▁a ▁heap ▁based ▁buffer , ▁and ▁* ▁own er sh ip ▁of ▁that ▁buffer ▁is ▁implicitly ▁transferred ▁to ▁the ▁E T ▁client ▁library ▁upon ▁* ▁return . ▁*/ ▁static ▁EST _ HTTP _ AUTH _ C RED _ RC ▁auth _ credentials _ token _ cb ▁( ▁EST _ HTTP _ AUTH _ HDR ▁* auth _ credentials ) ▁{ ▁char ▁* token _ ptr ▁= ▁NULL ; ▁int ▁token _ len ▁= ▁0; ▁CU _ ASSERT ( auth _ credentials -> mode ▁ == ▁AUTH _ TOKEN ); ▁/* ▁* ▁report ▁that ▁the ▁callback ▁has ▁been ▁called . ▁*/ ▁auth _ cred _ callback _ called ▁= ▁1; ▁/* ▁* ▁Se e ▁if ▁the ▁test ▁is ▁requesting ▁to ▁force ▁an ▁error ▁response ▁code ▁from ▁the ▁* ▁callback ▁*/ ▁if ▁( auth _ cred _ force _ error ) ▁{ ▁return ▁( EST _ HTTP _ AUTH _ C RED _ NOT _ AVAILABLE ); ▁} ▁if ▁( auth _ credentials -> mode ▁ == ▁AUTH _ TOKEN ) ▁{ ▁/* ▁* ▁If ▁the ▁test _ token ▁is ▁set ▁to ▁anything , ▁then ▁we ▁need ▁to ▁allocate ▁* ▁space ▁from ▁the ▁heap ▁and ▁copy ▁in ▁the ▁value . ▁*/ ▁if ▁( test _ token ▁ != ▁NULL ) ▁{ ▁token _ len ▁= ▁str len ( test _ token ); ▁/* ▁use ▁str len () ▁so ▁that ▁the ▁string ▁can ▁be ▁as ▁large ▁as ▁needed ▁to ▁test ▁the ▁EST ▁client ▁*/ ▁if ▁( token _ len ▁ == ▁0) ▁{ ▁ printf ( ▁"\ n Error ▁determin ing ▁length ▁of ▁token ▁string ▁used ▁for ▁credentials \ n "); ▁return ▁EST _ HTTP _ AUTH _ C RED _ NOT _ AVAILABLE ; ▁} ▁token _ ptr ▁= ▁malloc ( token _ len ▁+ ▁1); ▁if ▁( token _ ptr ▁ == ▁NULL ) ▁{ ▁ printf ( ▁"\ n Error ▁allocat ing ▁token ▁string ▁used ▁for ▁credentials \ n "); ▁return ▁EST _ HTTP _ AUTH _ C RED _ NOT _ AVAILABLE ; ▁} ▁strncpy ( token _ ptr , ▁test _ token , ▁str len ( test _ token ) ); ▁token _ ptr [ token _ len ] ▁= ▁'\0'; ▁} ▁/* ▁* ▁If ▁we ▁made ▁it ▁this ▁far , ▁token _ ptr ▁is ▁point ing ▁to ▁a ▁string ▁* ▁containing ▁the ▁token ▁to ▁be ▁returned . ▁As sign ▁it ▁and ▁return ▁success ▁*/ ▁auth _ credentials -> auth _ token ▁= ▁token _ ptr ; ▁return ▁( EST _ HTTP _ AUTH _ C RED _ SUCCESS ); ▁} ▁return ▁( EST _ HTTP _ AUTH _ C RED _ NOT _ AVAILABLE ); ▁} ▁/* ▁* ▁auth _ credentials _ basic _ cb () ▁is ▁the ▁same ▁as ▁the ▁token ▁based ▁one ▁above , ▁but ▁* ▁instead ▁returns ▁the ▁basic ▁credentials ▁of ▁userid ▁and ▁password ▁*/ ▁static ▁EST _ HTTP _ AUTH _ C RED _ RC ▁auth _ credentials _ basic _ cb ▁( ▁EST _ HTTP _ AUTH _ HDR ▁* auth _ credentials ) ▁{ ▁CU _ ASSERT ( auth _ credentials -> mode ▁ == ▁AUTH _ BASIC ); ▁/* ▁* ▁report ▁that ▁the ▁callback ▁has ▁been ▁called . ▁*/ ▁auth _ cred _ callback _ called ▁= ▁1; ▁/* ▁* ▁Se e ▁if ▁the ▁test ▁is ▁requesting ▁to ▁force ▁an ▁error ▁response ▁code ▁from ▁the ▁* ▁callback ▁*/ ▁if ▁( auth _ cred _ force _ error ) ▁{ ▁return ▁( EST _ HTTP _ AUTH _ C RED _ NOT _ AVAILABLE ); ▁} ▁if ▁( auth _ credentials -> mode ▁ == ▁AUTH _ BASIC ) ▁{ ▁auth _ credentials -> user ▁= ▁malloc ( sizeof (" estuser ") ); ▁strncpy ( auth _ credentials -> user , ▁" estuser ", ▁sizeof (" estuser ") ); ▁auth _ credentials -> pwd ▁= ▁malloc ( sizeof (" estpwd ") ); ▁strncpy ( auth _ credentials -> pwd , ▁" estpwd ", ▁sizeof (" estpwd ") ); ▁return ▁( EST _ HTTP _ AUTH _ C RED _ SUCCESS ); ▁} ▁return ▁( EST _ HTTP _ AUTH _ C RED _ NOT _ AVAILABLE ); ▁} ▁# if ▁0 ▁/* ▁* ▁auth _ credentials _ digest _ cb () ▁is ▁the ▁same ▁as ▁the ▁basic ▁based ▁one ▁above , ▁but ▁* ▁instead ▁ver fie s ▁that ▁the ▁auth _ mode ▁passed ▁is ▁digest ▁*/ ▁static ▁EST _ HTTP _ AUTH _ C RED _ RC ▁auth _ credentials _ digest _ cb ( EST _ HTTP _ AUTH _ HDR ▁* auth _ credentials ) ▁{ ▁CU _ ASSERT ( auth _ credentials -> mode ▁ == ▁AUTH _ DIGEST ); ▁/* ▁* ▁report ▁that ▁the ▁callback ▁has ▁been ▁called . ▁*/ ▁auth _ cred _ callback _ called ▁= ▁1; ▁/* ▁* ▁Se e ▁if ▁the ▁test ▁is ▁requesting ▁to ▁force ▁an ▁error ▁response ▁code ▁from ▁the ▁* ▁callback ▁*/ ▁if ▁( auth _ cred _ force _ error ) ▁{ ▁return ( EST _ HTTP _ AUTH _ C RED _ NOT _ AVAILABLE ); ▁} ▁if ▁( auth _ credentials -> mode ▁ == ▁AUTH _ DIGEST ) ▁{ ▁auth _ credentials -> user ▁= ▁malloc ( sizeof (" estuser ") ); ▁strncpy ( auth _ credentials -> user , ▁" estuser ", ▁sizeof (" estuser ") ); ▁auth _ credentials -> pwd ▁= ▁malloc ( sizeof (" estpwd ") ); ▁strncpy ( auth _ credentials -> pwd , ▁" estpwd ", ▁sizeof (" estpwd ") ); ▁return ▁( EST _ HTTP _ AUTH _ C RED _ SUCCESS ); ▁} ▁return ▁( EST _ HTTP _ AUTH _ C RED _ NOT _ AVAILABLE ); ▁} ▁# endif ▁/* ▁* ▁C allback ▁function ▁passed ▁to ▁est _ client _ init () ▁*/ ▁static ▁int ▁client _ manual _ cert _ verify ▁( X 509 ▁* cur _ cert , ▁int ▁openssl _ cert _ error ) ▁{ ▁BIO ▁* ▁bio _ err ; ▁bio _ err ▁= ▁BIO _ new _ fp ( stderr , ▁BIO _ NO CLOSE ); ▁int ▁approve ▁= ▁0; ▁/* ▁* ▁Pr int ▁out ▁the ▁specific s ▁of ▁this ▁cert ▁*/ ▁ printf ( ▁"% s : ▁OpenSSL / EST ▁server ▁cert ▁verification ▁failed ▁with ▁the ▁following ▁error : ▁openssl _ cert _ error ▁= ▁% d ▁(% s ) \ n ", ▁ _ _ FUNCTION _ _ , ▁openssl _ cert _ error , ▁X 509_ verify _ cert _ error _ string ( openssl _ cert _ error ) ); ▁ printf (" Fail ing ▁Cert : \ n "); ▁X 509_ print _ fp ( stdout , ▁cur _ cert ); ▁/* ▁* ▁ Next ▁call ▁print s ▁out ▁the ▁signature ▁which ▁can ▁be ▁used ▁as ▁the ▁fingerprint ▁* ▁This ▁fingerprint ▁can ▁be ▁checked ▁against ▁the ▁anti cip ated ▁value ▁to ▁determine ▁* ▁whether ▁or ▁not ▁the ▁server ' s ▁cert ▁should ▁be ▁approved . ▁*/ ▁X 509_ signature _ print ( bio _ err , ▁cur _ cert -> sig _ alg , ▁cur _ cert -> signature ); ▁if ▁( openssl _ cert _ error ▁ == ▁X 509_ V _ ERR _ U NABLE _ TO _ GET _ CRL ) ▁{ ▁approve ▁= ▁1; ▁} ▁BIO _ free ( bio _ err ); ▁return ▁approve ; ▁} ▁/* ▁* ▁us 2174_ simple _ enroll () ▁is ▁used ▁by ▁test ▁cases ▁to ▁perform ▁a ▁simple ▁enroll . ▁*/ ▁static ▁void ▁us 2174_ simple _ enroll ▁( char ▁* cn , ▁char ▁* server , ▁EST _ ERROR ▁expected _ enroll _ rv , ▁auth _ credentials _ cb ▁callback ) ▁{ ▁EST _ CTX ▁* ectx ; ▁E VP _ PKEY ▁* key ; ▁EST _ ERROR ▁rv ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁un signed ▁char ▁* new _ cert ▁= ▁NULL ; ▁EST _ ERROR ▁e _ rc ; ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁e _ rc ▁= ▁est _ client _ set _ auth _ cred _ cb ( ectx , ▁callback ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁server , ▁US 2174_ TCP _ PROXY _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁private ▁key ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁Use ▁the ▁simplifie d ▁API ▁to ▁enroll ▁a ▁CSR ▁*/ ▁rv ▁= ▁est _ client _ enroll ( ectx , ▁cn , ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( rv ▁ == ▁expected _ enroll _ rv ); ▁/* ▁* ▁Cleanup ▁*/ ▁E VP _ PKEY _ free ( key ); ▁if ▁( new _ cert ) ▁free ( new _ cert ); ▁est _ destroy ( ectx ); ▁} ▁static ▁void ▁us 2174_ simple _ reenroll ▁( char ▁* cn , ▁char ▁* server , ▁EST _ ERROR ▁expected _ enroll _ rv , ▁auth _ credentials _ cb ▁callback ) ▁{ ▁EST _ CTX ▁* ectx ; ▁E VP _ PKEY ▁* key ; ▁EST _ ERROR ▁rv ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁un signed ▁char ▁* new _ cert ▁= ▁NULL ; ▁PKCS 7 ▁* p 7 ▁= ▁NULL ; ▁BIO ▁* b 64, ▁* out ; ▁X 509 ▁* cert ▁= ▁NULL ; ▁ST ACK _ OF ( X 509) ▁* ▁certs ▁= ▁NULL ; ▁int ▁i ; ▁EST _ ERROR ▁e _ rc ; ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁e _ rc ▁= ▁est _ client _ set _ auth _ cred _ cb ( ectx , ▁callback ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁server , ▁US 2174_ TCP _ PROXY _ PORT , ▁NULL ); ▁/* ▁* ▁generate ▁a ▁private ▁key ▁*/ ▁key ▁= ▁generate _ private _ key (); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁/* ▁* ▁Use ▁the ▁simplifie d ▁API ▁to ▁enroll ▁a ▁CSR ▁*/ ▁rv ▁= ▁est _ client _ enroll ( ectx , ▁cn , ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁ Retrieve ▁the ▁cert ▁that ▁was ▁given ▁to ▁us ▁by ▁the ▁EST ▁server ▁*/ ▁if ▁( rv ▁ == ▁EST _ ERR _ NONE ) ▁{ ▁new _ cert ▁= ▁malloc ( pkcs 7_ len ); ▁CU _ ASSERT ( new _ cert ▁ != ▁NULL ); ▁rv ▁= ▁est _ client _ copy _ enrolled _ cert ( ectx , ▁new _ cert ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁} ▁est _ destroy ( ectx ); ▁ectx ▁= ▁NULL ; ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁client _ manual _ cert _ verify ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁No w ▁that ▁we ▁have ▁the ▁cert , ▁switch ▁the ▁server ▁over ▁to ▁token ▁mode ▁*/ ▁st _ enable _ http _ token _ auth (); ▁e _ rc ▁= ▁est _ client _ set _ auth _ cred _ cb ( ectx , ▁callback ); ▁CU _ ASSERT ( e _ rc ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁server , ▁US 2174_ TCP _ PORT , ▁NULL ); ▁/* ▁* ▁ And ▁attempt ▁a ▁reenroll ▁while ▁in ▁token ▁mode ▁* ▁* ▁Convert ▁the ▁cert ▁to ▁an ▁X 509. ▁Be ▁warn ed ▁this ▁is ▁* ▁pur e ▁hack ery . ▁* ▁PDB : ▁This ▁conversion ▁code ▁come s ▁from ▁other ▁test ▁cases . ▁*/ ▁b 64 ▁= ▁BIO _ new ( BIO _ f _ base 64 () ); ▁out ▁= ▁BIO _ new _ mem _ buf ( new _ cert , ▁pkcs 7_ len ); ▁out ▁= ▁BIO _ push ( b 64, ▁out ); ▁p 7 ▁= ▁d 2 i _ PKCS 7_ bio ( out , ▁NULL ); ▁CU _ ASSERT ( p 7 ▁ != ▁NULL ); ▁BIO _ free _ all ( out ); ▁i ▁= ▁OBJ _ obj 2 nid ( p 7-> type ); ▁switch ▁( i ) ▁{ ▁case ▁NID _ pkcs 7_ signed : ▁certs ▁= ▁p 7-> d . sign -> cert ; ▁break ; ▁case ▁NID _ pkcs 7_ signed And Enveloped : ▁certs ▁= ▁p 7-> d . signed _ and _ e nveloped -> cert ; ▁break ; ▁default : ▁break ; ▁} ▁CU _ ASSERT ( certs ▁ != ▁NULL ); ▁if ▁(! certs ) ▁return ; ▁/* ▁our ▁new ▁cert ▁should ▁be ▁the ▁one ▁and ▁only ▁* ▁cert ▁in ▁the ▁pkcs 7 ▁blob . ▁We ▁should n ' t ▁have ▁to ▁* ▁it erate ▁through ▁the ▁full ▁list ▁to ▁find ▁it . ▁*/ ▁cert ▁= ▁sk _ X 509_ value ( certs , ▁0); ▁CU _ ASSERT ( cert ▁ != ▁NULL ); ▁/* ▁* ▁PDB ▁NOTE : ▁At ▁the ▁moment , ▁this ▁is ▁expected ▁to ▁fail ▁since ▁* ▁the ▁server ▁does ▁not ▁yet ▁understand ▁requests ▁with ▁token ▁authentication . ▁* ▁O nce ▁188 4 ▁is ▁complete , ▁the ▁below ▁ ASSERT ▁will ▁begin ▁to ▁fail ▁and ▁will ▁need ▁* ▁to ▁be ▁changed ▁to ▁a ▁pass ing ▁response . ▁*/ ▁rv ▁= ▁est _ client _ reenroll ( ectx , ▁cert , ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( rv ▁ == ▁expected _ enroll _ rv ); ▁/* ▁* ▁Cleanup ▁*/ ▁E VP _ PKEY _ free ( key ); ▁if ▁( new _ cert ) ▁free ( new _ cert ); ▁est _ destroy ( ectx ); ▁} ▁static ▁void ▁us 2174_ clean ▁( void ) ▁{ ▁} ▁static ▁int ▁us 2174_ start _ server ▁( int ▁manual _ enroll , ▁int ▁nid ) ▁{ ▁int ▁rv ▁= ▁0; ▁/* ▁* ▁First ▁we ▁start ▁an ▁EST ▁server ▁a cting ▁as ▁the ▁CA ▁*/ ▁rv ▁= ▁st _ start ( US 2174_ TCP _ SERVER _ PORT , ▁US 2174_ SERVER _ CERT , ▁US 2174_ SERVER _ KEY , ▁" estrealm ", ▁US 2174_ CACERT , ▁US 2174_ TRUSTED _ CERTS , ▁" US 2174/ est Example CA . cnf ", ▁manual _ enroll , ▁// ▁manual ▁enroll ▁0, ▁// ▁disable ▁PoP ▁nid ); ▁// ▁ ecdhe ▁nid ▁info ▁SL EEP (1); ▁if ▁( rv ▁ != ▁EST _ ERR _ NONE ) ▁return ▁rv ; ▁/* ▁* ▁ Next ▁we ▁start ▁an ▁EST ▁proxy ▁a cting ▁as ▁an ▁RA ▁with ▁the ▁server ▁side ▁* ▁operat ing ▁in ▁token ▁auth ▁mode . ▁*/ ▁rv ▁= ▁st _ proxy _ start _ token ( US 2174_ TCP _ PROXY _ PORT , ▁US 2174_ PROXY _ CERT , ▁US 2174_ PROXY _ KEY , ▁" estrealm ", ▁US 2174_ CACERT , ▁US 2174_ TRUSTED _ CERTS , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 2174_ TCP _ SERVER _ PORT , ▁0); ▁// ▁disable ▁PoP ▁SL EEP (1); ▁return ▁rv ; ▁} ▁void ▁us 2174_ stop _ server ▁( ) ▁{ ▁st _ stop (); ▁st _ proxy _ stop (); ▁SL EEP ( 2 ); ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁initialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁allocate ▁data ▁or ▁open ▁any ▁* ▁resource s ▁required ▁for ▁all ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 2174_ init _ suite ▁( void ) ▁{ ▁int ▁rv ; ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 2174_ CACERTS , ▁& cacerts ); ▁if ▁( cacerts _ len ▁ < = ▁0) ▁{ ▁return ▁1; ▁} ▁us 2174_ clean (); ▁/* ▁* ▁Start ▁an ▁instance ▁of ▁the ▁EST ▁server ▁with ▁* ▁automatic ▁enrollment ▁enabled . ▁*/ ▁rv ▁= ▁us 2174_ start _ server ( 0 , ▁0); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁uninitialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁de allocate ▁data ▁or ▁close ▁any ▁* ▁resource s ▁that ▁we re ▁used ▁for ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 2174_ destroy _ suite ▁( void ) ▁{ ▁us 2174_ stop _ server (); ▁free ( cacerts ); ▁return ▁0; ▁} ▁# if ▁0 ▁/* ▁* ▁Simple ▁enroll ▁- ▁* ▁proxy ▁- ▁BASIC ▁* ▁server ▁- ▁BASIC ▁* ▁* ▁M ake ▁sure ▁token ▁auth ▁mode ▁did ▁not ▁break ▁anything . ▁* ▁*/ ▁static ▁void ▁us 2174_ test 1 ( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ; ▁rv ▁= ▁curl _ http _ post ( US 2174_ ENROLL _ URL _ BA , ▁US 2174_ PKCS 10_ CT , ▁US 2174_ PKCS 10_ RSA 2048, ▁US 2174_ UIDPWD _ GOOD , ▁US 2174_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁a ▁valid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁} ▁# endif ▁/* ▁* ▁Simple ▁enroll ▁- ▁* ▁proxy ▁- ▁TOKEN ▁* ▁server ▁- ▁TOKEN ▁* ▁*/ ▁static ▁void ▁us 2174_ test 2 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁auth _ cred _ callback _ called ▁= ▁0; ▁auth _ cred _ force _ error ▁= ▁0; ▁/* ▁* ▁set ▁server ▁to ▁do ▁token ▁auth ▁challenges ▁* ▁tell ▁the ▁server ▁which ▁token s ▁to ▁accept ▁*/ ▁st _ enable _ http _ token _ auth (); ▁st _ set _ token ( GOOD _ TOKEN ); ▁/* ▁* ▁set ▁the ▁proxy ▁to ▁do ▁token ▁auth ▁challenges ▁and ▁* ▁tell ▁it ▁what ▁token s ▁to ▁accept . ▁*/ ▁st _ proxy _ enable _ http _ token _ auth (); ▁st _ proxy _ set _ srv _ valid _ token ( GOOD _ TOKEN ); ▁/* ▁* ▁tell ▁the ▁client ▁side ▁of ▁proxy ▁which ▁token ▁credential ▁to ▁* ▁use ▁*/ ▁st _ proxy _ set _ cl nt _ token _ cred ( GOOD _ TOKEN ); ▁/* ▁* ▁Set ▁up ▁the ▁EST ▁Client ▁and ▁have ▁it ▁perform ▁a ▁simple ▁enroll . ▁* ▁* ▁Enroll ▁should ▁succeed . ▁*/ ▁us 2174_ simple _ enroll (" TC 2174 - 4", ▁US 2174_ SERVER _ IP , ▁EST _ ERR _ NONE , ▁auth _ credentials _ token _ cb ); ▁/* ▁* ▁callback ▁should ▁have ▁been ▁called ▁*/ ▁CU _ ASSERT ( auth _ cred _ callback _ called ▁ == ▁1); ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁* ▁proxy ▁- ▁TOKEN ▁* ▁server ▁- ▁BASIC ▁*/ ▁static ▁void ▁us 2174_ test 3 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁auth _ cred _ callback _ called ▁= ▁0; ▁auth _ cred _ force _ error ▁= ▁0; ▁/* ▁* ▁set ▁server ▁to ▁do ▁BASIC ▁auth ▁challenges ▁*/ ▁st _ enable _ http _ basic _ auth (); ▁/* ▁* ▁set ▁the ▁proxy ▁to ▁do ▁token ▁auth ▁challenges ▁and ▁* ▁tell ▁it ▁what ▁token s ▁to ▁accept . ▁*/ ▁st _ proxy _ enable _ http _ token _ auth (); ▁st _ proxy _ set _ srv _ valid _ token ( GOOD _ TOKEN ); ▁/* ▁* ▁tell ▁the ▁client ▁side ▁of ▁proxy ▁which ▁token ▁credential ▁to ▁* ▁use ▁*/ ▁st _ proxy _ set _ cl nt _ token _ cred ( GOOD _ TOKEN ); ▁/* ▁* ▁Set ▁up ▁the ▁EST ▁Client ▁and ▁have ▁it ▁perform ▁a ▁simple ▁enroll . ▁* ▁* ▁Enroll ▁should ▁succeed . ▁*/ ▁us 2174_ simple _ enroll (" TC 2174 - 4", ▁US 2174_ SERVER _ IP , ▁EST _ ERR _ NONE , ▁auth _ credentials _ token _ cb ); ▁/* ▁* ▁callback ▁should ▁have ▁been ▁called ▁*/ ▁CU _ ASSERT ( auth _ cred _ callback _ called ▁ == ▁1); ▁} ▁/* ▁* ▁Simple ▁enroll ▁- ▁* ▁proxy ▁- ▁BASIC ▁* ▁server ▁- ▁TOKEN ▁*/ ▁static ▁void ▁us 2174_ test 4 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁auth _ cred _ callback _ called ▁= ▁0; ▁auth _ cred _ force _ error ▁= ▁0; ▁/* ▁* ▁set ▁server ▁to ▁do ▁token ▁auth ▁challenges ▁* ▁tell ▁the ▁server ▁which ▁token s ▁to ▁accept ▁*/ ▁st _ enable _ http _ token _ auth (); ▁st _ set _ token ( GOOD _ TOKEN ); ▁/* ▁* ▁set ▁the ▁proxy ▁to ▁do ▁BASIC ▁auth ▁challenges ▁and ▁* ▁tell ▁it ▁what ▁token s ▁to ▁accept . ▁*/ ▁st _ proxy _ enable _ http _ basic _ auth (); ▁/* ▁st _ proxy _ set _ srv _ valid _ token ( GOOD _ TOKEN ); ▁*/ ▁/* ▁* ▁tell ▁the ▁client ▁side ▁of ▁proxy ▁which ▁token ▁credential ▁to ▁* ▁use ▁*/ ▁st _ proxy _ set _ cl nt _ token _ cred ( GOOD _ TOKEN ); ▁/* ▁* ▁Set ▁up ▁the ▁EST ▁Client ▁and ▁have ▁it ▁perform ▁a ▁simple ▁enroll . ▁* ▁* ▁Enroll ▁should ▁succeed . ▁*/ ▁us 2174_ simple _ enroll (" TC 2174 - 4", ▁US 2174_ SERVER _ IP , ▁EST _ ERR _ NONE , ▁auth _ credentials _ basic _ cb ); ▁/* ▁* ▁callback ▁should ▁have ▁been ▁called ▁*/ ▁CU _ ASSERT ( auth _ cred _ callback _ called ▁ == ▁1); ▁} ▁/* ▁* ▁Simple ▁RE - enroll ▁- ▁* ▁proxy ▁- ▁TOKEN ▁* ▁server ▁- ▁TOKEN ▁* ▁*/ ▁static ▁void ▁us 2174_ test 5 ▁( void ) ▁{ ▁ LOG _ FUNC _ NM ▁; ▁auth _ cred _ callback _ called ▁= ▁0; ▁auth _ cred _ force _ error ▁= ▁0; ▁/* ▁* ▁set ▁server ▁to ▁do ▁token ▁auth ▁challenges ▁* ▁tell ▁the ▁server ▁which ▁token s ▁to ▁accept ▁*/ ▁st _ enable _ http _ token _ auth (); ▁st _ set _ token ( GOOD _ TOKEN ); ▁/* ▁* ▁set ▁the ▁proxy ▁to ▁do ▁token ▁auth ▁challenges ▁and ▁* ▁tell ▁it ▁what ▁token s ▁to ▁accept . ▁*/ ▁st _ proxy _ enable _ http _ token _ auth (); ▁st _ proxy _ set _ srv _ valid _ token ( GOOD _ TOKEN ); ▁/* ▁* ▁tell ▁the ▁client ▁side ▁of ▁proxy ▁which ▁token ▁credential ▁to ▁* ▁use ▁*/ ▁st _ proxy _ set _ cl nt _ token _ cred ( GOOD _ TOKEN ); ▁/* ▁* ▁Set ▁up ▁the ▁EST ▁Client ▁and ▁have ▁it ▁perform ▁a ▁simple ▁RE - enroll . ▁* ▁* ▁RE - enroll ▁should ▁succeed . ▁*/ ▁us 2174_ simple _ reenroll (" TC 2174 - 4", ▁US 2174_ SERVER _ IP , ▁EST _ ERR _ NONE , ▁auth _ credentials _ token _ cb ); ▁/* ▁* ▁callback ▁should ▁have ▁been ▁called ▁*/ ▁CU _ ASSERT ( auth _ cred _ callback _ called ▁ == ▁1); ▁} ▁/* ▁The ▁main () ▁function ▁for ▁setting ▁up ▁and ▁running ▁the ▁tests . ▁* ▁Returns ▁a ▁CU E _ SUCCESS ▁on ▁successful ▁running , ▁another ▁* ▁ CUnit ▁error ▁code ▁on ▁failure . ▁*/ ▁int ▁us 2174_ add _ suite ▁( void ) ▁{ ▁# if def ▁HA VE _ C UNIT ▁CU _ pSuite ▁pSuite ▁= ▁NULL ; ▁/* ▁add ▁a ▁suite ▁to ▁the ▁ registry ▁*/ ▁pSuite ▁= ▁CU _ add _ suite (" us 2174_ token _ proxy ", ▁us 2174_ init _ suite , ▁us 2174_ destroy _ suite ); ▁if ▁( NULL ▁ == ▁pSuite ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁/* ▁add ▁the ▁tests ▁to ▁the ▁suite ▁*/ ▁if ▁( /* ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Proxy ▁Enroll ▁basic ▁ sanity ▁test ", ▁us 2174_ test 1)) ▁|| ▁*/ ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Proxy ▁Enroll ▁token ▁auth , ▁both ▁proxy ▁and ▁server ", ▁us 2174_ test 2)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Proxy ▁Enroll ▁token ▁auth , ▁proxy ▁token / server ▁basic ", ▁us 2174_ test 3)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Proxy ▁Enroll ▁token ▁auth , ▁proxy ▁basic / server ▁token ", ▁us 2174_ test 4)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" Proxy ▁RE - Enroll ▁token ▁auth , ▁proxy ▁basic / server ▁token ", ▁us 2174_ test 5)) ▁ ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁return ▁CU E _ SUCCESS ; ▁# endif ▁}