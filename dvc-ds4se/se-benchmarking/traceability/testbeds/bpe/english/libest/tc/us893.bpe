▁/* -- ---------------- ---------------- ---------------- ---------------- ▁* ▁us 893 . c ▁- ▁ Unit ▁Test s ▁for ▁User ▁Stor y ▁ 893 ▁- ▁proxy ▁reenroll ▁* ▁* ▁October , ▁2013 ▁* ▁* ▁Copy right ▁( c ) ▁2013 , ▁2016 ▁by ▁ cisco ▁S ystems , ▁Inc . ▁* ▁All ▁ right s ▁ reserved . ▁* -- ---------------- ---------------- ---------------- ---------------- ▁*/ ▁# include ▁ < std io . h > ▁# if n def ▁W IN 32 ▁# include ▁ < uni std . h > ▁# endif ▁# include ▁ < est . h > ▁# include ▁ < curl / curl . h > ▁# include ▁" curl _ util s . h " ▁# include ▁" test _ util s . h " ▁# include ▁" st _ server . h " ▁# include ▁" st _ proxy . h " ▁# include ▁ < openssl / ssl . h > ▁# if def ▁HA VE _ C UNIT ▁# include ▁" CUnit / Basic . h " ▁# include ▁" CUnit / A utomat ed . h " ▁# endif ▁static ▁un signed ▁char ▁* cacerts ▁= ▁NULL ; ▁static ▁int ▁cacerts _ len ▁= ▁0; ▁# define ▁US 893_ TCP _ SERVER _ PORT ▁2989 3 ▁# define ▁US 893_ TCP _ PROXY _ PORT ▁ 29093 ▁/* ▁* ▁The ▁following ▁CSR ▁was ▁ generated ▁using ▁the ▁following ▁openssl ▁command ▁and ▁then ▁* ▁using ▁cat ▁on ▁the ▁rsa . req ▁file : ▁* ▁* ▁openssl ▁req ▁- new key ▁rsa : 2048 ▁- key out ▁rsa key . pem ▁- key form ▁PEM ▁- out ▁rsa . req ▁- out form ▁PEM ▁*/ ▁# define ▁US 893_ PKCS 10_ RSA 2048 ▁" MIIC v TCCAa U CAQAw e DEL MAkG A 1 UEB h MCV VM x CzA J BgNVBA g MAk 5 DM Qw wC gYDVQQ H \ nDANSVFAxE j AQ BgNVBAoMC VJ TQW Nl cn Rj bz EM MA oGA 1 UEC wwD cnN h MR AwDgYDV QQD \ nDA d yc 2 EgZG 9 lMR o wGA YJKoZIhvcNAQkBFg ty c 2 FA ZG 9 l Lm Nvb T CCASIwDQYJKoZI \ n hvcNAQEBBQADgg EPADCCAQoCggEBA N 6 pC TB rK 7 T 0 29 Bg a nq 0 QH XH y NL 8 op v xc 7 JY \ n Xa Qz 39 R 3 J 9 BoB E 72 XZ 0 QX sB tU EY GNh HO La IS ASN zs 2 ZK Wp vM HJ W mP YN t 39 OC i 48 Y \ n FO gL Db An 83 mA OK Sf c ML bi bC c sh 4 HO l haa F rWs kRT As ew 16 MU Oz Fu 6 vB kw / A hI 82 J \ nK PY ws 0 dY Ox uW FI gE 1 HL + m / gpl bz q 7 Fr BI d rq k NL + dd gy Xo Dd 5 Nu LM JG DAK 7 vB 1 Ww \ n 9/ Ba w /6 Ai 9 V 5 ps ye 1 v 8 f WD r 6 HW 2 gg 9 X n VtM wB 4 pC g 1 rl 1 l SY stum T GY bM 6 cx Jy we \ nL uM nD jj 1 Zw D sZ 1 wI Xa BA XZa x EIS / rX OX 0 H nZ MT ef xY / gp Fk 1 Kv 0 CAwEAAa AAMA 0 G \ n CS qGS Ib 3 DQEBBQUA A 4 IBAQB 6 r Iw Nj E 8 l 8 jF KR 1 hQ / qe Sv ee / bAQ a 58 Ru fZ 4 US Ku K \ nl si h 7 UC f 8 b kQ vg lj nh s c Qu cz Ibn Jz eq EP qS dn om FW 6 Cv Mc / ah + Qf X 87 FG Y xJ gp wF \ n ut nU if j Di Zh rW gf / jN N bt H rke cw / Z ex 4 sZ / HC 127 j tE 3 cy E kD srA 1 oB xYR Cq 93 tC \ nW 2 q 9 PL Vm Ll yjc Z cS 1 KH VD 2 n ya 79 kfS 0 Y GM ocs w 1 Ge l VL 2 iz / oca yA S 5 GB 9 Y 2 s E Bw \ nR kC aY Zw 6 v hj 5 qj p CU zJ 3 E 8 Cl 3 VD 4 Kp i 3 j 3 bZGD JA 9 md md 8 j 5 Zy PY 56 e Au xa rW ssD \ n ci UM / h 6 E 99 w 3 tm rU Zb Ll jk jJ 7 pBX Rn ont gm 5 WZ mQ FH 4 X " ▁# define ▁US 893_ PKCS 10_ CORRUPT ▁" MIIC v TCCAa U CAQAw e DEL MAkG A 1 UEB h MCV VM x CzA J BgNVBA g MAk 5 DM Qw wC gYDVQQ H \ nDANSVFAxE j AQ BgNVBAoMC VJ TQW Nl cn Rj bz EM MA oGA 1 UEC wwD cnN h MR AwDgYDV QQD \ nDA d yc 2 EgZG 9 lMR o wGA YJKoZIhvcNAQkBFg ty c 2 FA ZG 9 l Lm Nvb T CCASIwDQYJKoZI \ n hvcNAQEBBQADgg EPADCCAQoCggEBA N 6 pC TB rK 7 T 0 29 Bg a nq 0 QH XH y NL 8 op v xc 7 JY \ n Xa Qz 39 R 3 J 9 BoB E 72 XZ 0 QX sB tU EY GNh HO La IS ASN zs 2 ZK Wp vM HJ W mP YN t 39 OC i 48 Y \ n FO gL Db An 83 mA OK Sf c ML bi bC c sh 4 HO l haa F rWs kRT As ew 16 MU Oz Fu 6 vB kw / A hI 82 J \ nK PY ws 0 dY Ox uW FI gE 1 HL + m / gpl bz q 7 Fr BI d rq k NL + dd gy Xo Dd 5 Nu LM JG DAK 7 vB 1 Ww \ n 9/ Ba w /6 Ai 9 V 5 ps ye 1 v 8 f WD r 6 HW 2 gg 9 X n VtM wB 4 pC g 1 rl 1 l SY stum T GY bM 6 cx Jy we \ nL uM nD jj 1 Zw D sZ 1 wI Xa BA XZa x EIS / rX OX 0 H nZ MT ef xY / gp Fk 1 Kv 0 CAwEAAa AAMA 0 G \ n CS qGS Ib 3 DQEBBQUA A 4 IBAQB 6 r Iw Nj E 8 l 8 jF KR 1 hQ / qe Sv ee / bAQ a 58 Ru fZ 4 US Ku K \ nl si h 7 UC f 8 b kQ vg lj nh s c Qu cz Ibn Jz eq EP qS dn om FW 6 Cv Mc / ah + Qf X 87 FG Y xJ gp wF \ n ut nU if j Di Zh rW gf / jN N bt H rke cw / Z ex 4 sZ / HC 127 j tE 3 cy E kD srA 1 oB xYR Cq 93 tC \ nW 2 q 9 PL Vm Ll yjc Z cS 1 KH VD 2 n ya 79 kfS 0 Y GM ocs w 1 Ge l VL 2 iz / oca yA S 5 GB 9 Y 2 s E Bw \ nR kC aY Zw 6 v hj 5 qj p CU zJ 3 E 8 Cl 3 VD 4 Kp i 3 j 3 bZGD fff md md 8 j 5 Zy PY 56 e Au xa rW ssD \ n ci UM / h 6 E 99 w 3 tm rU Zb Ll jk jJ 7 pBX Rn ont gm 5 WZ mQ FH 4 X " ▁# define ▁US 893_ SERVER _ IP ▁"127.0.0.1" ▁# define ▁US 893_ REENROLL _ URL _ BA ▁" http s ://127.0.0.1:290 93/ . well - known / est / simplereenroll " ▁# define ▁US 893_ PKCS 10_ CT ▁" Content - Type : ▁application / pkcs 10" ▁# define ▁US 893_ UIDPWD _ GOOD ▁" estuser : estpwd " ▁# define ▁US 893_ UID ▁" estuser " ▁# define ▁US 893_ PWD ▁" estpwd " ▁# if n def ▁W IN 32 ▁# define ▁US 893_ CACERTS ▁" CA / estCA / cacert . crt " ▁# define ▁US 893_ TRUSTED _ CERTS ▁" CA / trustedcerts . crt " ▁# define ▁US 893_ SERVER _ CERTKEY ▁" CA / estCA / private / estserver cert and key . pem " ▁# define ▁US 893_ PROXY _ CERT ▁" US 893/ cert . pem " ▁# define ▁US 893_ PROXY _ KEY ▁" US 893/ key . pem " ▁# define ▁US 893_ UNTRUSTED _ CERT ▁" US 893/ cert - untrusted . pem " ▁# define ▁US 893_ UNTRUSTED _ KEY ▁" US 893/ key - untrusted . pem " ▁# define ▁US 893_ EXPIRED _ KEY ▁" US 893/ key - expired . pem " ▁# define ▁US 893_ EXPIRED _ CERT ▁" US 893/ cert - expired . pem " ▁# define ▁US 893_ TC 2 _ CERT _ TXT ▁" US 893/ tc 2- new - cert . txt " ▁# define ▁US 893_ TC 2 _ CERT _ B 64 ▁" US 893/ tc 2- new - cert . pkcs 7 b 64" ▁# define ▁US 893_ TC 2 _ CERT _ PK 7 ▁" US 893/ tc 2- new - cert . pkcs 7" ▁# define ▁US 893_ TC 2 _ CERT _ PEM ▁" US 893/ tc 2- new - cert . pem " ▁# else ▁# define ▁US 893_ CACERTS ▁" CA \\ estCA \\ cacert . crt " ▁# define ▁US 893_ TRUSTED _ CERTS ▁" CA \\ trustedcerts . crt " ▁# define ▁US 893_ SERVER _ CERTKEY ▁" CA \\ estCA \\ private \\ estserver cert and key . pem " ▁# define ▁US 893_ PROXY _ CERT ▁" US 893\\ cert . pem " ▁# define ▁US 893_ PROXY _ KEY ▁" US 893\\ key . pem " ▁# define ▁US 893_ UNTRUSTED _ CERT ▁" US 893\\ cert - untrusted . pem " ▁# define ▁US 893_ UNTRUSTED _ KEY ▁" US 893\\ key - untrusted . pem " ▁# define ▁US 893_ EXPIRED _ KEY ▁" US 893\\ key - expired . pem " ▁# define ▁US 893_ EXPIRED _ CERT ▁" US 893\\ cert - expired . pem " ▁# define ▁US 893_ TC 2 _ CERT _ TXT ▁" US 893\\ tc 2- new - cert . txt " ▁# define ▁US 893_ TC 2 _ CERT _ B 64 ▁" US 893\\ tc 2- new - cert . pkcs 7 b 64" ▁# define ▁US 893_ TC 2 _ CERT _ PK 7 ▁" US 893\\ tc 2- new - cert . pkcs 7" ▁# define ▁US 893_ TC 2 _ CERT _ PEM ▁" US 893\\ tc 2- new - cert . pem " ▁# endif ▁static ▁void ▁us 893_ clean ▁( void ) ▁{ ▁char ▁cmd [20 0 ]; ▁/* ▁* ▁These ▁are ▁all ▁temp or ary ▁file s ▁created ▁* ▁by ▁the ▁vari ous ▁test ▁cases . ▁*/ ▁# if n def ▁W IN 32 ▁s printf ( cmd , ▁" rm ▁% s ", ▁US 893_ TC 2 _ CERT _ TXT ); ▁system ( cmd ); ▁s printf ( cmd , ▁" rm ▁% s ", ▁US 893_ TC 2 _ CERT _ B 64 ); ▁system ( cmd ); ▁s printf ( cmd , ▁" rm ▁% s ", ▁US 893_ TC 2 _ CERT _ PK 7 ); ▁system ( cmd ); ▁s printf ( cmd , ▁" rm ▁% s ", ▁US 893_ TC 2 _ CERT _ PEM ); ▁system ( cmd ); ▁# else ▁s printf ( cmd , ▁" del ▁% s ", ▁US 893_ TC 2 _ CERT _ TXT ); ▁system ( cmd ); ▁s printf ( cmd , ▁" del ▁% s ", ▁US 893_ TC 2 _ CERT _ B 64 ); ▁system ( cmd ); ▁s printf ( cmd , ▁" del ▁% s ", ▁US 893_ TC 2 _ CERT _ PK 7 ); ▁system ( cmd ); ▁s printf ( cmd , ▁" del ▁% s ", ▁US 893_ TC 2 _ CERT _ PEM ); ▁system ( cmd ); ▁# endif ▁} ▁static ▁int ▁us 893_ start _ server ▁( int ▁manual _ enroll , ▁int ▁nid ) ▁{ ▁int ▁rv ; ▁/* ▁* ▁First ▁we ▁start ▁an ▁EST ▁server ▁a cting ▁as ▁the ▁CA ▁*/ ▁rv ▁= ▁st _ start ( US 893_ TCP _ SERVER _ PORT , ▁US 893_ SERVER _ CERTKEY , ▁US 893_ SERVER _ CERTKEY , ▁" US 893 ▁test ▁realm ", ▁US 893_ CACERTS , ▁US 893_ TRUSTED _ CERTS , ▁" US 893/ est Example CA . cnf ", ▁manual _ enroll , ▁0, ▁nid ); ▁if ▁( rv ▁ != ▁EST _ ERR _ NONE ) ▁return ▁rv ; ▁/* ▁* ▁ Next ▁we ▁start ▁an ▁EST ▁proxy ▁act g ing ▁as ▁an ▁RA ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 893_ TCP _ PROXY _ PORT , ▁US 893_ PROXY _ CERT , ▁US 893_ PROXY _ KEY , ▁" US 893 ▁test ▁realm ", ▁US 893_ CACERTS , ▁US 893_ TRUSTED _ CERTS , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 893_ TCP _ SERVER _ PORT , ▁0, ▁nid ); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁initialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁allocate ▁data ▁or ▁open ▁any ▁* ▁resource s ▁required ▁for ▁all ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 893_ init _ suite ▁( void ) ▁{ ▁int ▁rv ; ▁est _ init _ logger ( EST _ LOG _ L VL _ INFO , ▁NULL ); ▁/* ▁* ▁Rea d ▁in ▁the ▁CA ▁certificates ▁*/ ▁cacerts _ len ▁= ▁read _ binary _ file ( US 893_ CACERTS , ▁& cacerts ); ▁if ▁( cacerts _ len ▁ < = ▁0) ▁{ ▁return ▁1; ▁} ▁us 893_ clean (); ▁/* ▁* ▁Start ▁an ▁instance ▁of ▁the ▁EST ▁server ▁with ▁* ▁automatic ▁enrollment ▁enabled . ▁*/ ▁rv ▁= ▁us 893_ start _ server ( 0 , ▁0); ▁return ▁rv ; ▁} ▁/* ▁* ▁This ▁routine ▁is ▁called ▁when ▁ CUnit ▁uninitialize s ▁this ▁test ▁* ▁suite . ▁This ▁can ▁be ▁used ▁to ▁de allocate ▁data ▁or ▁close ▁any ▁* ▁resource s ▁that ▁we re ▁used ▁for ▁the ▁test ▁cases . ▁*/ ▁static ▁int ▁us 893_ des tory _ suite ▁( void ) ▁{ ▁st _ stop (); ▁st _ proxy _ stop (); ▁free ( cacerts ); ▁return ▁0; ▁} ▁/* ▁* ▁Simple ▁reenroll ▁- ▁RSA ▁2048 ▁* ▁* ▁This ▁test ▁case ▁uses ▁libcurl ▁to ▁test ▁simple ▁* ▁reenroll ▁of ▁a ▁2048 ▁bit ▁RSA ▁CSR . ▁HTTP ▁Basic ▁* ▁authentication ▁is ▁used . ▁*/ ▁static ▁void ▁us 893_ test 1 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁rv ▁= ▁curl _ http _ post ( US 893_ REENROLL _ URL _ BA , ▁US 893_ PKCS 10_ CT , ▁US 893_ PKCS 10_ RSA 2048, ▁US 893_ UIDPWD _ GOOD , ▁US 893_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁a ▁valid ▁user ID / password , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁200 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁} ▁/* ▁* ▁This ▁test ▁case ▁uses ▁an ▁existing ▁expired ▁cert ▁and ▁* ▁attempts ▁to ▁re - enroll ▁it . ▁The ▁expired ▁certs ▁contains ▁* ▁s ever al ▁X 509 ▁extensions . ▁We ▁verify ▁the ▁new ▁issued ▁* ▁cert ▁preserve s ▁these ▁extensions ▁using ▁grep . ▁Note , ▁* ▁preserv ing ▁these ▁extensions ▁requires ▁the ▁OpenSSL ▁CA ▁* ▁to ▁enable ▁the ▁" copy _ extensions " ▁kno b ▁in ▁the ▁OpenSSL ▁* ▁config ▁file . ▁This ▁is ▁wh y ▁this ▁test ▁suite ▁uses ▁a ▁* ▁unique ▁copy ▁of ▁est Example CA . cnf . ▁*/ ▁static ▁void ▁us 893_ test 2 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁E VP _ PKEY ▁* key ; ▁un signed ▁char ▁* key _ raw ; ▁int ▁key _ len ; ▁un signed ▁char ▁* cert _ raw ; ▁int ▁cert _ len ; ▁int ▁rv ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁un signed ▁char ▁* new _ cert ▁= ▁NULL ; ▁X 509 ▁* cert ▁= ▁NULL ; ▁BIO ▁* in ; ▁char ▁cmd [20 0 ]; ▁un signed ▁char ▁* attr _ data ▁= ▁NULL ; ▁int ▁attr _ len ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁NULL ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁rv ▁= ▁est _ client _ set _ auth ( ectx , ▁US 893_ UID , ▁US 893_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 893_ SERVER _ IP , ▁US 893_ TCP _ PROXY _ PORT , ▁NULL ); ▁/* ▁* ▁Rea d ▁in ▁the ▁private ▁key ▁*/ ▁key _ len ▁= ▁read _ binary _ file ( US 893_ EXPIRED _ KEY , ▁& key _ raw ); ▁CU _ ASSERT ( key _ len ▁> ▁0); ▁key ▁= ▁est _ load _ key ( key _ raw , ▁key _ len , ▁EST _ FORMAT _ PEM ); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁free ( key _ raw ); ▁/* ▁* ▁Rea d ▁in ▁the ▁old ▁cert ▁*/ ▁cert _ len ▁= ▁read _ binary _ file ( US 893_ EXPIRED _ CERT , ▁& cert _ raw ); ▁CU _ ASSERT ( cert _ len ▁> ▁0); ▁in ▁= ▁BIO _ new _ mem _ buf ( cert _ raw , ▁cert _ len ); ▁CU _ ASSERT ( in ▁ != ▁NULL ); ▁if ▁(! in ) ▁return ; ▁cert ▁= ▁PEM _ read _ bio _ X 509_ AU X ( in , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( cert ▁ != ▁NULL ); ▁if ▁(! cert ) ▁return ; ▁BIO _ free _ all ( in ); ▁free ( cert _ raw ); ▁/* ▁* ▁Get ▁the ▁la test ▁CSR ▁attributes ▁*/ ▁rv ▁= ▁est _ client _ get _ csrattrs ( ectx , ▁& attr _ data , ▁& attr _ len ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Enroll ▁an ▁expired ▁cert ▁that ▁contains ▁x 509 ▁extensions . ▁*/ ▁rv ▁= ▁est _ client _ reenroll ( ectx , ▁cert , ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁ Retrieve ▁the ▁cert ▁that ▁was ▁given ▁to ▁us ▁by ▁the ▁EST ▁server ▁*/ ▁if ▁( rv ▁ == ▁EST _ ERR _ NONE ) ▁{ ▁new _ cert ▁= ▁malloc ( pkcs 7_ len ); ▁CU _ ASSERT ( new _ cert ▁ != ▁NULL ); ▁rv ▁= ▁est _ client _ copy _ enrolled _ cert ( ectx , ▁new _ cert ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁} ▁/* ▁* ▁S ave ▁the ▁cert ▁to ▁a ▁local ▁file ▁*/ ▁rv ▁= ▁write _ binary _ file ( US 893_ TC 2 _ CERT _ B 64, ▁new _ cert , ▁pkcs 7_ len ); ▁CU _ ASSERT ( rv ▁ == ▁1); ▁/* ▁* ▁Base ▁64 ▁decode ▁the ▁cert ▁response ▁*/ ▁s printf ( cmd , ▁" openssl ▁base 64 ▁- d ▁- in ▁% s ▁- out ▁% s ", ▁US 893_ TC 2 _ CERT _ B 64, ▁US 893_ TC 2 _ CERT _ PK 7 ); ▁rv ▁= ▁system ( cmd ); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Convert ▁the ▁pkcs 7 ▁cert ▁to ▁a ▁PEM ▁cert ▁*/ ▁s printf ( cmd , ▁" openssl ▁pkcs 7 ▁- in ▁% s ▁- inform ▁DER ▁- print _ certs ▁- out ▁% s ", ▁US 893_ TC 2 _ CERT _ PK 7, ▁US 893_ TC 2 _ CERT _ PEM ); ▁rv ▁= ▁system ( cmd ); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Convert ▁PEM ▁cert ▁to ▁a ▁text ual ▁represent ation ▁of ▁the ▁cert ▁*/ ▁s printf ( cmd , ▁" openssl ▁x 509 ▁- text ▁- in ▁% s ▁> ▁% s ", ▁US 893_ TC 2 _ CERT _ PEM , ▁US 893_ TC 2 _ CERT _ TXT ); ▁rv ▁= ▁system ( cmd ); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Verify ▁the ▁ jimbob ▁ DNS ▁extension ▁was ▁preserve d ▁*/ ▁rv ▁= ▁grep ( US 893_ TC 2 _ CERT _ TXT , ▁" jimbob "); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Verify ▁the ▁ bobcat ▁ DNS ▁extension ▁was ▁preserve d ▁*/ ▁rv ▁= ▁grep ( US 893_ TC 2 _ CERT _ TXT , ▁" bobcat "); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Verify ▁the ▁IP ▁address ▁extension ▁was ▁preserve d ▁*/ ▁rv ▁= ▁grep ( US 893_ TC 2 _ CERT _ TXT , ▁" 17 2 "); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Verify ▁the ▁ Repudiation ▁key ▁usage ▁extension ▁was ▁preserve d ▁*/ ▁rv ▁= ▁grep ( US 893_ TC 2 _ CERT _ TXT , ▁" Repudiation "); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Verify ▁the ▁public ▁key ▁was ▁preserve d ▁*/ ▁rv ▁= ▁grep ( US 893_ TC 2 _ CERT _ TXT , ▁" 00: e 3: ca : 38: 65 : fb : 9 c : 46: a 6: 22: b 1: be : 17: bc : 50 "); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Clean ▁up ▁*/ ▁if ▁( new _ cert ) ▁free ( new _ cert ); ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁Simple ▁reenroll ▁- ▁Corrupt ▁CSR ▁* ▁* ▁Use ▁libcurl ▁to ▁send ▁a ▁reenroll ▁request ▁containing ▁* ▁a ▁corrupted ▁CSR . ▁*/ ▁static ▁void ▁us 893_ test 3 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁rv ▁= ▁curl _ http _ post ( US 893_ REENROLL _ URL _ BA , ▁US 893_ PKCS 10_ CT , ▁US 893_ PKCS 10_ CORRUPT , ▁US 893_ UIDPWD _ GOOD , ▁US 893_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁S ince ▁we ▁passed ▁in ▁a ▁bad ▁CSR , ▁* ▁we ▁expect ▁the ▁server ▁to ▁respond ▁with ▁400 ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁400 ); ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁re - enroll ▁an ▁expired ▁cert ▁* ▁while ▁the ▁EST ▁server ▁is ▁configured ▁for ▁manual ▁* ▁approval . ▁The ▁server ▁will ▁send ▁back ▁a ▁retry - after ▁* ▁response . ▁This ▁verifie s ▁the ▁proxy ▁propagate s ▁the ▁* ▁retry - after ▁response ▁to ▁the ▁client . ▁*/ ▁static ▁void ▁us 893_ test 4 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁E VP _ PKEY ▁* key ; ▁un signed ▁char ▁* key _ raw ; ▁int ▁key _ len ; ▁un signed ▁char ▁* cert _ raw ; ▁int ▁cert _ len ; ▁int ▁rv ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁X 509 ▁* cert ▁= ▁NULL ; ▁BIO ▁* in ; ▁int ▁retry _ val ▁= ▁0; ▁time _ t ▁time _ val ; ▁un signed ▁char ▁* attr _ data ▁= ▁NULL ; ▁int ▁attr _ len ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Sto p ▁the ▁server . ▁*/ ▁st _ stop (); ▁st _ proxy _ stop (); ▁/* ▁* ▁Re start ▁the ▁server ▁with ▁manual ▁approval ▁enabled ▁*/ ▁rv ▁= ▁us 893_ start _ server ( 1, ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁NULL ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁rv ▁= ▁est _ client _ set _ auth ( ectx , ▁US 893_ UID , ▁US 893_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 893_ SERVER _ IP , ▁US 893_ TCP _ PROXY _ PORT , ▁NULL ); ▁/* ▁* ▁Rea d ▁in ▁the ▁private ▁key ▁*/ ▁key _ len ▁= ▁read _ binary _ file ( US 893_ EXPIRED _ KEY , ▁& key _ raw ); ▁CU _ ASSERT ( key _ len ▁> ▁0); ▁key ▁= ▁est _ load _ key ( key _ raw , ▁key _ len , ▁EST _ FORMAT _ PEM ); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁free ( key _ raw ); ▁/* ▁* ▁Rea d ▁in ▁the ▁old ▁cert ▁*/ ▁cert _ len ▁= ▁read _ binary _ file ( US 893_ EXPIRED _ CERT , ▁& cert _ raw ); ▁CU _ ASSERT ( cert _ len ▁> ▁0); ▁in ▁= ▁BIO _ new _ mem _ buf ( cert _ raw , ▁cert _ len ); ▁CU _ ASSERT ( in ▁ != ▁NULL ); ▁if ▁(! in ) ▁return ; ▁cert ▁= ▁PEM _ read _ bio _ X 509_ AU X ( in , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( cert ▁ != ▁NULL ); ▁if ▁(! cert ) ▁return ; ▁BIO _ free _ all ( in ); ▁free ( cert _ raw ); ▁/* ▁* ▁Get ▁the ▁la test ▁CSR ▁attributes ▁*/ ▁rv ▁= ▁est _ client _ get _ csrattrs ( ectx , ▁& attr _ data , ▁& attr _ len ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Enroll ▁an ▁expired ▁cert ▁that ▁contains ▁x 509 ▁extensions . ▁*/ ▁rv ▁= ▁est _ client _ reenroll ( ectx , ▁cert , ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ CA _ ENROLL _ RETRY ); ▁/* ▁* ▁The ▁server ▁should ▁be ▁configured ▁with ▁a ▁retry - after ▁* ▁value ▁of ▁3600 ▁seconds , ▁which ▁is ▁the ▁default . ▁*/ ▁rv ▁= ▁est _ client _ copy _ retry _ after ( ectx , ▁& retry _ val , ▁& time _ val ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁CU _ ASSERT ( retry _ val ▁ == ▁3600 ); ▁/* ▁* ▁Clean ▁up ▁*/ ▁est _ destroy ( ectx ); ▁/* ▁* ▁Sto p ▁the ▁server . ▁*/ ▁st _ stop (); ▁st _ proxy _ stop (); ▁/* ▁* ▁Re start ▁the ▁server ▁with ▁manual ▁approval ▁disabled ▁*/ ▁rv ▁= ▁us 893_ start _ server ( 0 , ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁re - enroll ▁an ▁expired ▁cert ▁* ▁while ▁the ▁EST ▁server ▁is ▁configured ▁with ▁PoP ▁* ▁enabled , ▁but ▁the ▁proxy ▁server ▁is ▁using ▁a ▁cert ▁* ▁that ▁does n ' t ▁contain ▁id - kp - cmcRA . ▁This ▁should ▁* ▁result ▁in ▁a ▁failure . ▁*/ ▁static ▁void ▁us 893_ test 5 ▁( void ) ▁{ ▁int ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁M ake ▁sure ▁PoP ▁is ▁enabled ▁on ▁the ▁server ▁*/ ▁st _ enable _ pop (); ▁/* ▁* ▁Sto p ▁the ▁proxy ▁server ▁so ▁we ▁can ▁restart ▁* ▁it ▁using ▁a ▁diff erent ▁identity ▁cert . ▁*/ ▁st _ proxy _ stop (); ▁/* ▁* ▁Re start ▁the ▁proxy ▁server ▁using ▁the ▁other ▁cert ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 893_ TCP _ PROXY _ PORT , ▁US 893_ SERVER _ CERTKEY , ▁US 893_ SERVER _ CERTKEY , ▁" US 893 ▁test ▁realm ", ▁US 893_ CACERTS , ▁US 893_ TRUSTED _ CERTS , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 893_ TCP _ SERVER _ PORT , ▁0, ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Use ▁libcurl ▁to ▁send ▁an ▁enroll ▁request . ▁We ▁use ▁libcurl ▁* ▁because ▁it ▁will ▁not ▁include ▁the ▁PoP . ▁*/ ▁rv ▁= ▁curl _ http _ post ( US 893_ REENROLL _ URL _ BA , ▁US 893_ PKCS 10_ CT , ▁US 893_ PKCS 10_ RSA 2048, ▁US 893_ UIDPWD _ GOOD , ▁US 893_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁The ▁PoP ▁check ▁should ▁fail ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁400 ); ▁/* ▁* ▁Sto p ▁the ▁proxy ▁server ▁*/ ▁st _ proxy _ stop (); ▁/* ▁* ▁Re start ▁the ▁proxy ▁server ▁using ▁the ▁other ▁cert ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 893_ TCP _ PROXY _ PORT , ▁US 893_ PROXY _ CERT , ▁US 893_ PROXY _ KEY , ▁" US 893 ▁test ▁realm ", ▁US 893_ CACERTS , ▁US 893_ TRUSTED _ CERTS , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 893_ TCP _ SERVER _ PORT , ▁0, ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁re - enroll ▁an ▁expired ▁cert ▁* ▁while ▁the ▁EST ▁server ▁is ▁configured ▁with ▁PoP ▁* ▁disabled , ▁but ▁the ▁proxy ▁server ▁is ▁using ▁a ▁cert ▁* ▁that ▁does n ' t ▁contain ▁id - kp - cmcRA . ▁This ▁should ▁* ▁result ▁in ▁a ▁successful ▁reenroll . ▁*/ ▁static ▁void ▁us 893_ test 6 ▁( void ) ▁{ ▁int ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁M ake ▁sure ▁PoP ▁is ▁disabled ▁on ▁the ▁server ▁*/ ▁st _ disable _ pop (); ▁/* ▁* ▁Sto p ▁the ▁proxy ▁server ▁so ▁we ▁can ▁restart ▁* ▁it ▁using ▁a ▁diff erent ▁identity ▁cert . ▁*/ ▁st _ proxy _ stop (); ▁/* ▁* ▁Re start ▁the ▁proxy ▁server ▁using ▁the ▁other ▁cert ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 893_ TCP _ PROXY _ PORT , ▁US 893_ SERVER _ CERTKEY , ▁US 893_ SERVER _ CERTKEY , ▁" US 893 ▁test ▁realm ", ▁US 893_ CACERTS , ▁US 893_ TRUSTED _ CERTS , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 893_ TCP _ SERVER _ PORT , ▁0, ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Use ▁libcurl ▁to ▁send ▁an ▁enroll ▁request . ▁We ▁use ▁libcurl ▁* ▁because ▁it ▁will ▁not ▁include ▁the ▁PoP . ▁*/ ▁rv ▁= ▁curl _ http _ post ( US 893_ REENROLL _ URL _ BA , ▁US 893_ PKCS 10_ CT , ▁US 893_ PKCS 10_ RSA 2048, ▁US 893_ UIDPWD _ GOOD , ▁US 893_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁The ▁reenroll ▁should ▁work ▁since ▁PoP ▁is ▁not ▁enabled ▁any where . ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁/* ▁* ▁Sto p ▁the ▁proxy ▁server ▁*/ ▁st _ proxy _ stop (); ▁/* ▁* ▁Re start ▁the ▁proxy ▁server ▁using ▁the ▁other ▁cert ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 893_ TCP _ PROXY _ PORT , ▁US 893_ PROXY _ CERT , ▁US 893_ PROXY _ KEY , ▁" US 893 ▁test ▁realm ", ▁US 893_ CACERTS , ▁US 893_ TRUSTED _ CERTS , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 893_ TCP _ SERVER _ PORT , ▁0, ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Re - enable ▁PoP ▁on ▁the ▁server ▁for ▁the ▁for th coming ▁test ▁cases . ▁*/ ▁st _ enable _ pop (); ▁} ▁/* ▁* ▁This ▁test ▁attempts ▁to ▁re - enroll ▁an ▁expired ▁cert ▁* ▁while ▁the ▁EST ▁server ▁is ▁configured ▁with ▁PoP ▁* ▁disabled , ▁but ▁the ▁proxy ▁server ▁is ▁using ▁a ▁cert ▁* ▁that ▁does n ' t ▁contain ▁id - kp - cmcRA . ▁The ▁CSR ▁will ▁* ▁contain ▁the ▁PoP , ▁which ▁force s ▁it ▁to ▁be ▁checked . ▁* ▁This ▁should ▁result ▁in ▁a ▁failure ▁since ▁the ▁RA ▁* ▁cert ▁does n ' t ▁contain ▁id - kp - cmcRA . ▁*/ ▁// The ▁following ▁include ▁should ▁ne ver ▁be ▁used ▁by ▁an ▁application ▁// be ▁we ▁use ▁it ▁here ▁to ▁hack ▁the ▁EST _ CTX ▁values ▁mid - way ▁// through ▁this ▁test ▁# include ▁"../../ src / est / est _ loc l . h " ▁static ▁void ▁us 893_ test 7 ▁( void ) ▁{ ▁int ▁rv ; ▁EST _ CTX ▁* ectx ; ▁E VP _ PKEY ▁* key ; ▁un signed ▁char ▁* key _ raw ; ▁int ▁key _ len ; ▁un signed ▁char ▁* cert _ raw ; ▁int ▁cert _ len ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁X 509 ▁* cert ▁= ▁NULL ; ▁BIO ▁* in ; ▁un signed ▁char ▁* attr _ data ▁= ▁NULL ; ▁int ▁attr _ len ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁M ake ▁sure ▁PoP ▁is ▁disabled ▁on ▁the ▁server ▁*/ ▁st _ disable _ pop (); ▁/* ▁* ▁Sto p ▁the ▁proxy ▁server ▁so ▁we ▁can ▁restart ▁* ▁it ▁using ▁a ▁diff erent ▁identity ▁cert . ▁*/ ▁st _ proxy _ stop (); ▁/* ▁* ▁Re start ▁the ▁proxy ▁server ▁using ▁the ▁other ▁cert ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 893_ TCP _ PROXY _ PORT , ▁US 893_ SERVER _ CERTKEY , ▁US 893_ SERVER _ CERTKEY , ▁" US 893 ▁test ▁realm ", ▁US 893_ CACERTS , ▁US 893_ TRUSTED _ CERTS , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 893_ TCP _ SERVER _ PORT , ▁0, ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁NULL ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁rv ▁= ▁est _ client _ set _ auth ( ectx , ▁US 893_ UID , ▁US 893_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 893_ SERVER _ IP , ▁US 893_ TCP _ PROXY _ PORT , ▁NULL ); ▁/* ▁* ▁Rea d ▁in ▁the ▁private ▁key ▁*/ ▁key _ len ▁= ▁read _ binary _ file ( US 893_ EXPIRED _ KEY , ▁& key _ raw ); ▁CU _ ASSERT ( key _ len ▁> ▁0); ▁key ▁= ▁est _ load _ key ( key _ raw , ▁key _ len , ▁EST _ FORMAT _ PEM ); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁free ( key _ raw ); ▁/* ▁* ▁Rea d ▁in ▁the ▁old ▁cert ▁*/ ▁cert _ len ▁= ▁read _ binary _ file ( US 893_ EXPIRED _ CERT , ▁& cert _ raw ); ▁CU _ ASSERT ( cert _ len ▁> ▁0); ▁in ▁= ▁BIO _ new _ mem _ buf ( cert _ raw , ▁cert _ len ); ▁CU _ ASSERT ( in ▁ != ▁NULL ); ▁if ▁(! in ) ▁return ; ▁cert ▁= ▁PEM _ read _ bio _ X 509_ AU X ( in , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( cert ▁ != ▁NULL ); ▁if ▁(! cert ) ▁return ; ▁BIO _ free _ all ( in ); ▁free ( cert _ raw ); ▁/* ▁* ▁Get ▁the ▁la test ▁CSR ▁attributes ▁*/ ▁rv ▁= ▁est _ client _ get _ csrattrs ( ectx , ▁& attr _ data , ▁& attr _ len ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Enroll ▁an ▁expired ▁cert ▁that ▁contains ▁x 509 ▁extensions . ▁*/ ▁ectx -> csr _ pop _ required ▁= ▁1; ▁// This ▁is ▁a ▁hack ▁for ▁testing ▁only , ▁do ▁not ▁attempt ▁this ▁// We ▁need ▁to ▁force ▁the ▁c hallengePassword ▁into ▁the ▁CSR ▁rv ▁= ▁est _ client _ reenroll ( ectx , ▁cert , ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ HTTP _ BAD _ REQ ); ▁/* ▁* ▁Sto p ▁the ▁proxy ▁server ▁*/ ▁st _ proxy _ stop (); ▁/* ▁* ▁Re start ▁the ▁proxy ▁server ▁using ▁the ▁other ▁cert ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 893_ TCP _ PROXY _ PORT , ▁US 893_ PROXY _ CERT , ▁US 893_ PROXY _ KEY , ▁" US 893 ▁test ▁realm ", ▁US 893_ CACERTS , ▁US 893_ TRUSTED _ CERTS , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 893_ TCP _ SERVER _ PORT , ▁0, ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁Re - enable ▁PoP ▁on ▁the ▁server ▁for ▁the ▁for th coming ▁test ▁cases . ▁*/ ▁st _ enable _ pop (); ▁est _ destroy ( ectx ); ▁} ▁/* ▁* ▁This ▁test ▁case ▁uses ▁an ▁existing ▁expired ▁cert ▁and ▁* ▁attempts ▁to ▁re - enroll ▁it . ▁PoP ▁is ▁disabled ▁on ▁* ▁the ▁EST ▁server . ▁*/ ▁static ▁void ▁us 893_ test 8 ▁( void ) ▁{ ▁EST _ CTX ▁* ectx ; ▁E VP _ PKEY ▁* key ; ▁un signed ▁char ▁* key _ raw ; ▁int ▁key _ len ; ▁un signed ▁char ▁* cert _ raw ; ▁int ▁cert _ len ; ▁X 509 ▁* cert ▁= ▁NULL ; ▁int ▁rv ; ▁int ▁pkcs 7_ len ▁= ▁0; ▁BIO ▁* in ; ▁un signed ▁char ▁* attr _ data ▁= ▁NULL ; ▁int ▁attr _ len ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁M ake ▁sure ▁PoP ▁is ▁disabled ▁on ▁the ▁server ▁*/ ▁st _ disable _ pop (); ▁/* ▁* ▁C reate ▁a ▁client ▁context ▁*/ ▁ectx ▁= ▁est _ client _ init ( cacerts , ▁cacerts _ len , ▁EST _ CERT _ FORMAT _ PEM , ▁NULL ); ▁CU _ ASSERT ( ectx ▁ != ▁NULL ); ▁/* ▁* ▁Set ▁the ▁authentication ▁mode ▁to ▁use ▁a ▁user ▁id / password ▁*/ ▁rv ▁= ▁est _ client _ set _ auth ( ectx , ▁US 893_ UID , ▁US 893_ PWD , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Set ▁the ▁EST ▁server ▁address / port ▁*/ ▁est _ client _ set _ server ( ectx , ▁US 893_ SERVER _ IP , ▁US 893_ TCP _ PROXY _ PORT , ▁NULL ); ▁/* ▁* ▁Rea d ▁in ▁the ▁private ▁key ▁*/ ▁key _ len ▁= ▁read _ binary _ file ( US 893_ EXPIRED _ KEY , ▁& key _ raw ); ▁CU _ ASSERT ( key _ len ▁> ▁0); ▁key ▁= ▁est _ load _ key ( key _ raw , ▁key _ len , ▁EST _ FORMAT _ PEM ); ▁CU _ ASSERT ( key ▁ != ▁NULL ); ▁free ( key _ raw ); ▁/* ▁* ▁Rea d ▁in ▁the ▁old ▁cert ▁*/ ▁cert _ len ▁= ▁read _ binary _ file ( US 893_ EXPIRED _ CERT , ▁& cert _ raw ); ▁CU _ ASSERT ( cert _ len ▁> ▁0); ▁in ▁= ▁BIO _ new _ mem _ buf ( cert _ raw , ▁cert _ len ); ▁CU _ ASSERT ( in ▁ != ▁NULL ); ▁if ▁(! in ) ▁return ; ▁cert ▁= ▁PEM _ read _ bio _ X 509_ AU X ( in , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( cert ▁ != ▁NULL ); ▁if ▁(! cert ) ▁return ; ▁BIO _ free _ all ( in ); ▁free ( cert _ raw ); ▁/* ▁* ▁Get ▁the ▁la test ▁CSR ▁attributes ▁*/ ▁rv ▁= ▁est _ client _ get _ csrattrs ( ectx , ▁& attr _ data , ▁& attr _ len ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁/* ▁* ▁Enroll ▁an ▁expired ▁cert ▁that ▁contains ▁x 509 ▁extensions . ▁*/ ▁rv ▁= ▁est _ client _ reenroll ( ectx , ▁cert , ▁& pkcs 7_ len , ▁key ); ▁CU _ ASSERT ( rv ▁ == ▁EST _ ERR _ NONE ); ▁est _ destroy ( ectx ); ▁/* ▁* ▁Re - enable ▁PoP ▁on ▁the ▁server ▁for ▁the ▁for th coming ▁test ▁cases . ▁*/ ▁st _ enable _ pop (); ▁} ▁/* ▁* ▁This ▁test ▁case ▁uses ▁an ▁existing ▁expired ▁cert ▁and ▁* ▁attempts ▁to ▁re - enroll ▁it . ▁PoP ▁is ▁disabled ▁on ▁* ▁the ▁EST ▁server . ▁The ▁CSR ▁does ▁not ▁contain ▁a ▁PoP . ▁*/ ▁static ▁void ▁us 893_ test 9 ▁( void ) ▁{ ▁int ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁M ake ▁sure ▁PoP ▁is ▁disabled ▁on ▁the ▁server ▁*/ ▁st _ disable _ pop (); ▁/* ▁* ▁Use ▁libcurl ▁to ▁send ▁an ▁enroll ▁request . ▁We ▁use ▁libcurl ▁* ▁because ▁it ▁will ▁not ▁include ▁the ▁PoP . ▁*/ ▁rv ▁= ▁curl _ http _ post ( US 893_ REENROLL _ URL _ BA , ▁US 893_ PKCS 10_ CT , ▁US 893_ PKCS 10_ RSA 2048, ▁US 893_ UIDPWD _ GOOD , ▁US 893_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁The ▁reenroll ▁should ▁work ▁since ▁PoP ▁is ▁not ▁enabled ▁any where . ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁200 ); ▁/* ▁* ▁Re - enable ▁PoP ▁on ▁the ▁server ▁for ▁the ▁for th coming ▁test ▁cases . ▁*/ ▁st _ enable _ pop (); ▁} ▁/* ▁* ▁This ▁test ▁case ▁uses ▁a ▁bad ▁password ▁configured ▁on ▁* ▁the ▁EST ▁proxy ▁context . ▁This ▁should ▁cause ▁the ▁EST ▁* ▁server ▁to ▁reject ▁the ▁reenroll ▁request . ▁*/ ▁static ▁void ▁us 893_ test 10 ▁( void ) ▁{ ▁int ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Sto p ▁the ▁proxy ▁server ▁so ▁we ▁can ▁restart ▁* ▁it ▁using ▁a ▁diff erent ▁identity ▁cert . ▁*/ ▁st _ proxy _ stop (); ▁/* ▁* ▁Re start ▁the ▁proxy ▁server ▁using ▁the ▁other ▁cert ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 893_ TCP _ PROXY _ PORT , ▁US 893_ PROXY _ CERT , ▁US 893_ PROXY _ KEY , ▁" US 893 ▁test ▁realm ", ▁US 893_ CACERTS , ▁US 893_ TRUSTED _ CERTS , ▁" estuser ", ▁" bogus ", ▁"127.0.0.1", ▁US 893_ TCP _ SERVER _ PORT , ▁0, ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁rv ▁= ▁curl _ http _ post ( US 893_ REENROLL _ URL _ BA , ▁US 893_ PKCS 10_ CT , ▁US 893_ PKCS 10_ RSA 2048, ▁US 893_ UIDPWD _ GOOD , ▁US 893_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁CU _ ASSERT ( rv ▁ == ▁401 ); ▁/* ▁* ▁Sto p ▁the ▁proxy ▁server ▁*/ ▁st _ proxy _ stop (); ▁/* ▁* ▁Re start ▁the ▁proxy ▁server ▁using ▁the ▁other ▁cert ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 893_ TCP _ PROXY _ PORT , ▁US 893_ PROXY _ CERT , ▁US 893_ PROXY _ KEY , ▁" US 893 ▁test ▁realm ", ▁US 893_ CACERTS , ▁US 893_ TRUSTED _ CERTS , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 893_ TCP _ SERVER _ PORT , ▁0, ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁} ▁static ▁void ▁us 893_ test 11 ▁( void ) ▁{ ▁int ▁rv ; ▁long ▁http _ code ▁= ▁0; ▁CURL ▁* hnd ; ▁struct ▁curl _ slist ▁* slist 1 ; ▁ LOG _ FUNC _ NM ▁; ▁/* ▁* ▁Sto p ▁the ▁proxy ▁server ▁so ▁we ▁can ▁restart ▁* ▁it ▁using ▁a ▁diff erent ▁identity ▁cert . ▁*/ ▁st _ proxy _ stop (); ▁/* ▁* ▁Re start ▁the ▁proxy ▁server ▁using ▁an ▁untrusted ▁cert ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 893_ TCP _ PROXY _ PORT , ▁US 893_ UNTRUSTED _ CERT , ▁US 893_ UNTRUSTED _ KEY , ▁" US 893 ▁test ▁realm ", ▁US 893_ CACERTS , ▁US 893_ TRUSTED _ CERTS , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 893_ TCP _ SERVER _ PORT , ▁0, ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁/* ▁* ▁We ▁don ' t ▁use ▁the ▁normal ▁curl ▁util ▁API ▁here ▁because ▁* ▁we ▁need ▁to ▁disable ▁TLS ▁peer ▁verification ▁for ▁this ▁* ▁speci al ▁test ▁case . ▁*/ ▁/* ▁* ▁Set ▁the ▁Content - Type ▁header ▁in ▁the ▁HTTP ▁request ▁*/ ▁ slist 1 ▁= ▁NULL ; ▁ slist 1 ▁= ▁curl _ slist _ append ( slist 1, ▁US 893_ PKCS 10_ CT ); ▁/* ▁* ▁Set up ▁all ▁the ▁other ▁field s ▁that ▁CURL ▁requires ▁*/ ▁ hnd ▁= ▁curl _ easy _ init (); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ URL , ▁US 893_ REENROLL _ URL _ BA ); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ NO PRO G RESS , ▁1 L ); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ USER PWD , ▁US 893_ UIDPWD _ GOOD ); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ POSTFIELDS , ▁US 893_ PKCS 10_ RSA 2048 ); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ POSTFIELDS IZE _ L ARG E , ▁( curl _ off _ t ) str len ( US 893_ PKCS 10_ RSA 2048) ); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ USER AG ENT , ▁" curl /7.2 7.0 "); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ HTTP HEADER , ▁ slist 1); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ MAX RED IRS , ▁50 L ); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ SSL _ VERIFY PEER , ▁0 L ); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ HTTP AUTH , ▁CURL AUTH _ BASIC ); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ CA INFO , ▁US 893_ CACERTS ); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ VER BO SE , ▁1 L ); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ TCP _ K EEP ALI VE , ▁1 L ); ▁curl _ easy _ set opt ( hnd , ▁CURL OPT _ FOR B ID _ RE USE , ▁1 L ); ▁/* ▁* ▁Issue ▁the ▁HTTP ▁request ▁*/ ▁curl _ easy _ perform ( hnd ); ▁/* ▁* ▁Get ▁the ▁HTTP ▁re ponse ▁status ▁code ▁from ▁the ▁server ▁*/ ▁curl _ easy _ get info ( hnd , ▁CURL INFO _ RESPONSE _ C ODE , ▁& http _ code ); ▁curl _ easy _ cleanup ( hnd ); ▁ hnd ▁= ▁NULL ; ▁curl _ slist _ free _ all ( slist 1); ▁ slist 1 ▁= ▁NULL ; ▁CU _ ASSERT ( http _ code ▁ == ▁400 ); ▁/* ▁* ▁Sto p ▁the ▁proxy ▁server ▁*/ ▁st _ proxy _ stop (); ▁/* ▁* ▁Re start ▁the ▁proxy ▁server ▁using ▁the ▁other ▁cert ▁*/ ▁rv ▁= ▁st _ proxy _ start ( US 893_ TCP _ PROXY _ PORT , ▁US 893_ PROXY _ CERT , ▁US 893_ PROXY _ KEY , ▁" US 893 ▁test ▁realm ", ▁US 893_ CACERTS , ▁US 893_ TRUSTED _ CERTS , ▁" estuser ", ▁" estpwd ", ▁"127.0.0.1", ▁US 893_ TCP _ SERVER _ PORT , ▁0, ▁0); ▁CU _ ASSERT ( rv ▁ == ▁0); ▁} ▁/* ▁* ▁Simple ▁reenroll ▁- ▁RSA ▁2048 ▁* ▁* ▁This ▁test ▁case ▁uses ▁libcurl ▁to ▁test ▁simple ▁* ▁reenroll ▁of ▁a ▁2048 ▁bit ▁RSA ▁CSR . ▁HTTP ▁Basic ▁* ▁authentication ▁is ▁used . ▁H owever , ▁PoP ▁is ▁now ▁* ▁enabled ▁on ▁the ▁proxy , ▁which ▁should ▁cause ▁a ▁* ▁failure ▁since ▁libcurl ▁does n ' t ▁include ▁the ▁PoP . ▁*/ ▁static ▁void ▁us 893_ test 12 ▁( void ) ▁{ ▁long ▁rv ; ▁ LOG _ FUNC _ NM ▁; ▁st _ proxy _ enable _ pop (); ▁rv ▁= ▁curl _ http _ post ( US 893_ REENROLL _ URL _ BA , ▁US 893_ PKCS 10_ CT , ▁US 893_ PKCS 10_ RSA 2048, ▁US 893_ UIDPWD _ GOOD , ▁US 893_ CACERTS , ▁CURL AUTH _ BASIC , ▁NULL , ▁NULL , ▁NULL ); ▁/* ▁* ▁Should ▁fail ▁since ▁the ▁proxy ▁will ▁fail ▁the ▁PoP ▁check ▁*/ ▁CU _ ASSERT ( rv ▁ == ▁400 ); ▁st _ proxy _ disable _ pop (); ▁} ▁/* ▁The ▁main () ▁function ▁for ▁setting ▁up ▁and ▁running ▁the ▁tests . ▁* ▁Returns ▁a ▁CU E _ SUCCESS ▁on ▁successful ▁running , ▁another ▁* ▁ CUnit ▁error ▁code ▁on ▁failure . ▁*/ ▁int ▁us 893_ add _ suite ▁( void ) ▁{ ▁# if def ▁HA VE _ C UNIT ▁CU _ pSuite ▁pSuite ▁= ▁NULL ; ▁/* ▁add ▁a ▁suite ▁to ▁the ▁ registry ▁*/ ▁pSuite ▁= ▁CU _ add _ suite (" us 893_ proxy _ simp reenroll ", ▁us 893_ init _ suite , ▁us 893_ des tory _ suite ); ▁if ▁( NULL ▁ == ▁pSuite ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁/* ▁add ▁the ▁tests ▁to ▁the ▁suite ▁*/ ▁if ▁( ( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" R eEnroll ▁RSA ▁cert ", ▁us 893_ test 1)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" R eEnroll ▁expired ▁cert ", ▁us 893_ test 2)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" R eEnroll ▁corrupt ▁CSR ", ▁us 893_ test 3)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" R eEnroll ▁expired ▁cert ▁with ▁retry - after ", ▁us 893_ test 4)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" R eEnroll ▁no ▁proxy ▁id - kp - cmcRA ▁with ▁ srv ▁PoP ", ▁us 893_ test 5)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" R eEnroll ▁no ▁proxy ▁id - kp - cmcRA ▁w / o ▁ srv ▁PoP ", ▁us 893_ test 6)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" R eEnroll ▁no ▁proxy ▁id - kp - cmcRA ▁w / o ▁ srv ▁PoP ▁CSR ▁PoP ", ▁us 893_ test 7)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" R eEnroll ▁expired ▁cert ▁w / o ▁ srv ▁PoP ▁CSR ▁PoP ", ▁us 893_ test 8)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" R eEnroll ▁expired ▁cert ▁w / o ▁ srv ▁PoP ▁no ▁CSR ▁PoP ", ▁us 893_ test 9 )) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" R eEnroll ▁proxy ▁mis configured ▁HTTP ▁auth ", ▁us 893_ test 10)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" R eEnroll ▁proxy ▁untrusted ▁identity ▁cert ", ▁us 893_ test 11)) ▁|| ▁( NULL ▁ == ▁CU _ add _ test ( pSuite , ▁" R eEnroll ▁PoP ▁enabled ▁proxy ▁no ▁CSR ▁PoP ", ▁us 893_ test 12)) ) ▁{ ▁CU _ cleanup _ registry (); ▁return ▁CU _ get _ error (); ▁} ▁return ▁CU E _ SUCCESS ; ▁# endif ▁}