▁/* * ▁@ file ▁*/ ▁/* ---------------- ---------------- ---------------- -- ---------------- ▁* ▁est / est . h ▁- ▁Public ▁API ▁for ▁E nrollment ▁over ▁Secure ▁Transport ▁* ▁* ▁November , ▁2012 ▁* ▁* ▁Copy right ▁( c ) ▁2012 -201 4 , ▁2016 , ▁201 7 ▁by ▁ cisco ▁S ystems , ▁Inc . ▁* ▁All ▁ right s ▁ reserved . ▁** -- ---------------- ---------------- ---------------- ---------------- ▁*/ ▁# if n def ▁HEADER _ EST _ H ▁# define ▁HEADER _ EST _ H ▁# if def ▁W IN 32 ▁# if def ▁ LIB EST _ EXPORT S ▁# define ▁ LIB EST _ API ▁ _ _ de cl spec ( dll ex port ) ▁# else ▁# define ▁ LIB EST _ API ▁ _ _ de cl spec ( dll import ) ▁# endif ▁# else ▁# define ▁ LIB EST _ API ▁# endif ▁# include ▁ < openssl / ssl . h > ▁# include ▁ < openssl / engine . h > ▁# include ▁ < openssl / conf . h > ▁# include ▁ < openssl / srp . h > ▁# if def ▁ _ _ c plus plus ▁extern ▁" C " ▁{ ▁# endif ▁/* ▁* ▁All ow ▁for ▁run time ▁checking ▁of ▁the ▁path ▁segment ▁support ▁*/ ▁# if def ▁HA VE _ URI PARSE R ▁# define ▁PA TH _ SEGMENT _ SUPPORT _ E NABLE D ▁1 ▁# endif ▁# define ▁EST _ MAX _ FILE _ LEN ▁( 255 ) ▁# define ▁EST _ MAX _ SERVER NAME _ LEN ▁( 255 ) ▁# define ▁EST _ PORT NUM _ LEN ▁( sizeof ( int )) ▁# define ▁EST _ MAX _ SERVER NAME _ AND _ PORT _ LEN ▁( EST _ MAX _ SERVER NAME _ LEN + EST _ PORT NUM _ LEN ) ▁# define ▁EST _ MAX _ CLIENT _ CERT _ LEN ▁( 4096 ) ▁# define ▁EST _ MAX _ PA TH _ SEGMENT _ LEN ▁( 128) ▁typedef ▁enum ▁{ ▁EST _ SERVER , ▁EST _ CLIENT , ▁EST _ PROXY ▁} ▁EST _ MODE ; ▁typedef ▁enum ▁{ ▁EST _ CLIENT _ PROXY _ NONE ▁= ▁-1, ▁EST _ CLIENT _ PROXY _ HTTP _ NOTUNNEL ▁= ▁0, ▁EST _ CLIENT _ PROXY _ HTTP _ TUNNEL ▁= ▁1, ▁EST _ CLIENT _ PROXY _ SOCKS 4 ▁= ▁4 , ▁EST _ CLIENT _ PROXY _ SOCKS 5 ▁= ▁5, ▁EST _ CLIENT _ PROXY _ SOCKS 4 A ▁= ▁6, ▁EST _ CLIENT _ PROXY _ SOCKS 5 _ HOSTNAME ▁= ▁ 7, ▁} ▁EST _ CLIENT _ PROXY _ PROTO ; ▁/* ▁These ▁values ▁can ▁be ▁OR ed ▁to get her : ▁*/ ▁# define ▁EST _ CLIENT _ PROXY _ AUTH _ NONE ▁0 ▁# define ▁EST _ CLIENT _ PROXY _ AUTH _ BASIC ▁1 ▁# define ▁EST _ CLIENT _ PROXY _ AUTH _ NTLM ▁ 8 ▁# define ▁FOR EAC H _ EST _ ERROR ( E ) ▁\ ▁E ( EST _ ERR _ NO _ CTX ) ▁\ ▁E ( EST _ ERR _ NO _ CSR ) ▁\ ▁E ( EST _ ERR _ NO _ CERT ) ▁\ ▁E ( EST _ ERR _ NO _ KEY ) ▁\ ▁E ( EST _ ERR _ INVALID _ PARAMETERS ) ▁\ ▁E ( EST _ ERR _ LO AD _ CACERTS ) ▁\ ▁E ( EST _ ERR _ LO AD _ TRUST _ CERTS ) ▁\ ▁E ( EST _ ERR _ BAD _ MODE ) ▁\ ▁E ( EST _ ERR _ BAD _ PKCS 10) ▁\ ▁E ( EST _ ERR _ HTTP _ WRITE ) ▁\ ▁E ( EST _ ERR _ HTTP _ UNSUPPORTED ) ▁\ ▁E ( EST _ ERR _ HTTP _ CAN NOT _ BU I LD _ HEADER ) ▁\ ▁E ( EST _ ERR _ HTTP _ BAD _ REQ ) ▁\ ▁E ( EST _ ERR _ HTTP _ NOT _ FOUND ) ▁\ ▁E ( EST _ ERR _ HTTP _ NO _ CONTENT ) ▁\ ▁E ( EST _ ERR _ HTTP _ LOCKED ) ▁\ ▁E ( EST _ ERR _ HTTP _ INVALID _ PA TH _ SEGMENT ) ▁\ ▁E ( EST _ ERR _ HTTP _ PA TH _ SEGMENT _ NOT _ SUPPORTED ) ▁\ ▁E ( EST _ ERR _ BAD _ CONTENT _ TYPE ) ▁\ ▁E ( EST _ ERR _ BAD _ CONTENT _ LEN ) ▁\ ▁E ( EST _ ERR _ NO _ SSL _ CTX ) ▁\ ▁E ( EST _ ERR _ AUTH _ FAIL ) ▁\ ▁E ( EST _ ERR _ AUTH _ FAIL _ TLSUID ) ▁\ ▁E ( EST _ ERR _ AUTH _ PENDING ) ▁\ ▁E ( EST _ ERR _ CA _ ENROLL _ FAIL ) ▁\ ▁E ( EST _ ERR _ CA _ ENROLL _ RETRY ) ▁\ ▁E ( EST _ ERR _ WRONG _ METHOD ) ▁\ ▁E ( EST _ ERR _ X 509_ SIGN ) ▁\ ▁E ( EST _ ERR _ X 509_ VER ) ▁\ ▁E ( EST _ ERR _ X 509_ CN ) ▁\ ▁E ( EST _ ERR _ X 509_ ATTR ) ▁\ ▁E ( EST _ ERR _ X 509_ PUBKEY ) ▁\ ▁E ( EST _ ERR _ MALLOC ) ▁\ ▁E ( EST _ ERR _ SSL _ WRITE ) ▁\ ▁E ( EST _ ERR _ SSL _ READ ) ▁\ ▁E ( EST _ ERR _ SSL _ NEW ) ▁\ ▁E ( EST _ ERR _ SSL _ CTX _ NEW ) ▁\ ▁E ( EST _ ERR _ SSL _ CONNECT ) ▁\ ▁E ( EST _ ERR _ SSL _ C IP HER _ LIST ) ▁\ ▁E ( EST _ ERR _ PEM _ READ ) ▁\ ▁E ( EST _ ERR _ NULL _ CALLBACK ) ▁\ ▁E ( EST _ ERR _ IP _ GETADDR ) ▁\ ▁E ( EST _ ERR _ IP _ CONNECT ) ▁\ ▁E ( EST _ ERR _ INVALID _ SERVER _ NAME ) ▁\ ▁E ( EST _ ERR _ INVALID _ PORT _ NUM ) ▁\ ▁E ( EST _ ERR _ CLIENT _ INVALID _ KEY ) ▁\ ▁E ( EST _ ERR _ CLIENT _ NOT _ INITIALIZED ) ▁\ ▁E ( EST _ ERR _ ZE RO _ LEN G TH _ BUF ) ▁\ ▁E ( EST _ ERR _ READ _ BU FFER _ TOO _ SMALL ) ▁\ ▁E ( EST _ ERR _ BUF _ EXCEED S _ MAX _ LEN ) ▁\ ▁E ( EST _ ERR _ NO _ CERTIFICATE ) ▁\ ▁E ( EST _ ERR _ NO _ CERTS _ FOUND ) ▁\ ▁E ( EST _ ERR _ FQDN _ MISMATCH ) ▁\ ▁E ( EST _ ERR _ SYSCALL ) ▁\ ▁E ( EST _ ERR _ CSR _ AL READ Y _ SIGNED ) ▁\ ▁E ( EST _ ERR _ CSR _ ATTR _ MISSING ) ▁\ ▁E ( EST _ ERR _ INVALID _ DIGEST ) ▁\ ▁E ( EST _ ERR _ CACERT _ VERIFICATION ) ▁\ ▁E ( EST _ ERR _ INVALID _ TOKEN ) ▁\ ▁E ( EST _ ERR _ INVALID _ RETRY _ VALUE ) ▁\ ▁E ( EST _ ERR _ BAD _ X 509) ▁\ ▁E ( EST _ ERR _ BAD _ BASE 64) ▁\ ▁E ( EST _ ERR _ BAD _ ASN 1 _ HEX ) ▁\ ▁E ( EST _ ERR _ BAD _ ASN 1 _ HEX _ TOO _ SHORT ) ▁\ ▁E ( EST _ ERR _ BAD _ ASN 1 _ HEX _ TOO _ LONG ) ▁\ ▁E ( EST _ ERR _ SRP _ STR ENG TH _ LOW ) ▁\ ▁E ( EST _ ERR _ SRP _ USER ID _ BAD ) ▁\ ▁E ( EST _ ERR _ SRP _ PWD _ BAD ) ▁\ ▁E ( EST _ ERR _ CB _ FAILED ) ▁\ ▁E ( EST _ ERR _ CLIENT _ PROXY _ MODE _ NOT _ SUPPORTED ) ▁\ ▁E ( EST _ ERR _ INVALID _ CLIENT _ PROXY _ PROTOCOL ) ▁\ ▁E ( EST _ ERR _ INVALID _ CLIENT _ PROXY _ AUTH ) ▁\ ▁E ( EST _ ERR _ UNKNOWN ) ▁# define ▁GENERAT E _ ENUM ( ENUM ) ▁ ENUM , ▁# define ▁GENERAT E _ STRING ( STRING ) ▁# STRING , ▁/* ! ▁@ enum ▁EST _ ERROR ▁* ▁@ b rie f ▁This ▁enum ▁is ▁used ▁to ▁indicate ▁error ▁conditions ▁to ▁the ▁application ▁layer . ▁* ▁Mo st ▁of ▁the ▁libEST ▁functions ▁return ▁an ▁error ▁indication ▁from ▁this ▁* ▁enum eration . ▁Application s ▁should ▁al way s ▁check ▁the ▁returned ▁error ▁* ▁indication ▁and ▁gracefully ▁handle ▁errors . ▁When ▁no ▁error ▁occurs , ▁libEST ▁* ▁will ▁return ▁EST _ ERR _ NONE , ▁which ▁has ▁the ▁value ▁zero . ▁\ n ▁\ n ▁EST _ ERR _ NONE ▁No ▁error ▁occurred . ▁\ n ▁EST _ ERR _ NO _ CTX ▁The ▁EST _ CTX * ▁was ▁not ▁provided ▁when ▁invoking ▁the ▁function . ▁\ n ▁EST _ ERR _ NO _ CSR ▁The ▁PKCS 10 ▁CSR ▁was ▁not ▁provided ▁when ▁invoking ▁the ▁function . ▁\ n ▁EST _ ERR _ NO _ CERT ▁No ▁valid ▁X 509 ▁certificate ▁was ▁provided ▁when ▁invoking ▁the ▁function . ▁\ n ▁EST _ ERR _ NO _ KEY ▁The ▁E VP _ PKEY * ▁was ▁not ▁provided ▁when ▁invoking ▁the ▁function . ▁\ n ▁EST _ ERR _ INVALID _ PARAMETERS ▁An ▁invalid ▁argument ▁was ▁provided ▁to ▁the ▁function . ▁\ n ▁EST _ ERR _ LO AD _ CACERTS ▁The ▁CA ▁certific tes ▁provided ▁we re ▁not ▁loaded . ▁\ n ▁EST _ ERR _ LO AD _ TRUST _ CERTS ▁The ▁certificate ▁chain ▁of ▁trusted ▁certificates ▁was ▁not ▁loaded . ▁\ n ▁EST _ ERR _ BAD _ MODE ▁An ▁EST ▁operation ▁was ▁attempted ▁while ▁using ▁the ▁wro ng ▁mode ▁of ▁operation . ▁The ▁valid ▁modes ▁are ▁client , ▁server , ▁and ▁proxy . ▁Some ▁EST ▁operations ▁ma y ▁only ▁be ▁performed ▁in ▁certain ▁modes . ▁\ n ▁EST _ ERR _ BAD _ PKCS 10 ▁The ▁PKCS 10 ▁CSR ▁received ▁from ▁the ▁client ▁is ▁corrupted . ▁\ n ▁EST _ ERR _ HTTP _ WRITE ▁An ▁error ▁occurred ▁while ▁writ ing ▁the ▁HTTP ▁response ▁on ▁the ▁socket . ▁\ n ▁EST _ ERR _ HTTP _ UNSUPPORTED ▁The ▁EST ▁server ▁sent ▁an ▁un supported ▁HTTP ▁status ▁code ▁in ▁the ▁response . ▁\ n ▁EST _ ERR _ HTTP _ CAN NOT _ BU I LD _ HEADER ▁The ▁HTTP ▁header ▁c ould ▁not ▁be ▁ built ▁correctly . ▁\ n ▁EST _ ERR _ HTTP _ BAD _ REQ ▁The ▁HTTP ▁request ▁was ▁bad ▁as ▁report ed ▁by ▁the ▁server . ▁\ n ▁EST _ ERR _ HTTP _ NOT _ FOUND ▁The ▁HTTP ▁requested ▁information ▁that ▁is ▁currently ▁not ▁found ▁on ▁the ▁server . ▁\ n ▁EST _ ERR _ HTTP _ NO _ CONTENT ▁The ▁content ▁requested ▁is ▁not ▁available . ▁\ n ▁EST _ ERR _ HTTP _ LOCKED ▁The ▁resource ▁that ▁is ▁being ▁access ed ▁is ▁locked . ▁\ n ▁EST _ ERR _ HTTP _ INVALID _ PA TH _ SEGMENT ▁The ▁URI ▁path ▁segment ▁passed ▁in ▁is ▁invalid , ▁ ei ther ▁too ▁long ▁or ▁contains ▁invalid ▁characters . ▁\ n ▁EST _ ERR _ HTTP _ PA TH _ SEGMENT _ NOT _ SUPPORTED ▁This ▁build ▁of ▁EST ▁does ▁not ▁support ▁the ▁use ▁of ▁an ▁a dditional ▁path ▁segment ▁in ▁the ▁URI . ▁EST ▁needs ▁to ▁be ▁re built ▁with ▁the ▁ uriparser ▁library ▁to ▁support ▁path ▁segments . ▁\ n ▁EST _ ERR _ BAD _ CONTENT _ TYPE ▁The ▁HTTP ▁content ▁type ▁header ▁in ▁the ▁request ▁was ▁invalid . ▁\ n ▁EST _ ERR _ BAD _ CONTENT _ LEN ▁The ▁HTTP ▁content ▁length ▁header ▁in ▁the ▁request ▁specified ▁a ▁value ▁that ▁was ▁too ▁large . ▁\ n ▁EST _ ERR _ NO _ SSL _ CTX ▁The ▁application ▁did ▁not ▁provide ▁a ▁valid ▁SSL _ CTX * ▁reference ▁to ▁the ▁API . ▁\ n ▁EST _ ERR _ AUTH _ FAIL ▁The ▁EST ▁server ▁was ▁un able ▁to ▁authentication ▁the ▁EST ▁client . ▁\ n ▁EST _ ERR _ AUTH _ FAIL _ TLSUID ▁The ▁authentication ▁failure ▁was ▁du e ▁to ▁an ▁invalid ▁challenge ▁password ▁in ▁the ▁PKCS 10 ▁CSR . ▁\ n ▁EST _ ERR _ AUTH _ PENDING ▁An ▁HTTP ▁authentication ▁challenge ▁was ▁sent ▁to ▁the ▁client ▁and ▁the ▁response ▁is ▁yet ▁to ▁arrive . ▁\ n ▁EST _ ERR _ CA _ ENROLL _ FAIL ▁The ▁certificate ▁authorit y ▁was ▁un able ▁to ▁sign ▁the ▁PKCS 10 ▁CSR . ▁\ n ▁EST _ ERR _ CA _ ENROLL _ RETRY ▁The ▁certificate ▁authorit y ▁has ▁requested ▁the ▁client ▁to ▁retry ▁the ▁enroll ▁request ▁in ▁the ▁future , ▁like ly ▁du e ▁to ▁the ▁CA ▁not ▁being ▁configured ▁for ▁automatic ▁enrollment . ▁\ n ▁EST _ ERR _ WRONG _ METHOD ▁An ▁invalid ▁HTTP ▁method ▁( GET / POST ) ▁was ▁used ▁for ▁the ▁request . ▁\ n ▁EST _ ERR _ X 509_ SIGN ▁An ▁error ▁occurred ▁in ▁the ▁OpenSSL ▁library ▁while ▁try ing ▁to ▁sign ▁the ▁PKCS 10 ▁CSR . ▁\ n ▁EST _ ERR _ X 509_ VER ▁An ▁error ▁occurred ▁in ▁the ▁OpenSSL ▁library ▁while ▁try ing ▁to ▁set ▁the ▁version ▁on ▁the ▁PKCS 10 ▁CSR . ▁\ n ▁EST _ ERR _ X 509_ CN ▁An ▁error ▁occurred ▁in ▁the ▁OpenSSL ▁library ▁while ▁try ing ▁to ▁set ▁the ▁common ▁name ▁in ▁the ▁PKCS 10 ▁CSR . ▁\ n ▁EST _ ERR _ X 509_ ATTR ▁An ▁error ▁occurred ▁in ▁the ▁OpenSSL ▁library ▁while ▁try ing ▁to ▁set ▁the ▁X 509 ▁attributes ▁in ▁the ▁PKCS 10 ▁CSR . ▁\ n ▁EST _ ERR _ X 509_ PUBKEY ▁An ▁error ▁occurred ▁in ▁the ▁OpenSSL ▁library ▁while ▁try ing ▁to ▁set ▁the ▁public ▁key ▁in ▁the ▁PKCS 10 ▁CSR . ▁\ n ▁EST _ ERR _ MALLOC ▁U nable ▁to ▁allocation ▁malloc . ▁This ▁like ly ▁indicate s ▁a ▁ critical ▁failure ▁on ▁the ▁host ▁system . ▁\ n ▁EST _ ERR _ SSL _ WRITE ▁An ▁error ▁occurred ▁at ▁the ▁TLS ▁layer ▁while ▁try ing ▁to ▁write ▁to ▁the ▁socket . ▁\ n ▁EST _ ERR _ SSL _ READ ▁An ▁error ▁occurred ▁at ▁the ▁TLS ▁layer ▁while ▁try ing ▁to ▁read ▁from ▁the ▁socket . ▁\ n ▁EST _ ERR _ SSL _ NEW ▁An ▁error ▁occurred ▁in ▁the ▁OpenSSL ▁library ▁while ▁try ing ▁to ▁allocate ▁the ▁SSL * ▁reference . ▁\ n ▁EST _ ERR _ SSL _ CTX _ NEW ▁An ▁error ▁occurred ▁in ▁the ▁OpenSSL ▁library ▁while ▁try ing ▁to ▁allocate ▁the ▁SSL _ CTX * ▁reference . ▁\ n ▁EST _ ERR _ SSL _ CONNECT ▁An ▁error ▁occurred ▁in ▁the ▁OpenSSL ▁library ▁while ▁try ing ▁to ▁establish ▁a ▁TLS ▁session ▁with ▁the ▁server . ▁\ n ▁EST _ ERR _ SSL _ C IP HER _ LIST ▁An ▁error ▁occurred ▁in ▁the ▁OpenSSL ▁library ▁while ▁try ing ▁to ▁set ▁the ▁allowed ▁TLS ▁cipher ▁suites . ▁\ n ▁EST _ ERR _ PEM _ READ ▁An ▁error ▁occurred ▁in ▁the ▁OpenSSL ▁library ▁while ▁try ing ▁to ▁read ▁the ▁PEM ▁encoded ▁PKCS 10 ▁CSR . ▁This ▁ma y ▁be ▁du e ▁to ▁a ▁corrupted ▁PKCS 10 . ▁\ n ▁EST _ ERR _ NULL _ CALLBACK ▁The ▁application ▁layer ▁failed ▁to ▁provide ▁the ▁required ▁callback ▁function ▁for ▁the ▁requested ▁EST ▁operation . ▁\ n ▁EST _ ERR _ IP _ GETADDR ▁U nable ▁to ▁resolve ▁the ▁server ▁host ▁name . ▁\ n ▁EST _ ERR _ IP _ CONNECT ▁U nable ▁to ▁connect ▁to ▁requested ▁host / port . ▁\ n ▁EST _ ERR _ INVALID _ SERVER _ NAME ▁The ▁server ▁name ▁provided ▁to ▁libEST ▁was ▁invalid . ▁It ▁ma y ▁not ▁be ▁NULL ▁and ▁it ▁ma y ▁not ▁exceed ▁the ▁maximum ▁server ▁name ▁length . ▁\ n ▁EST _ ERR _ INVALID _ PORT _ NUM ▁The ▁TCP ▁port ▁number ▁provided ▁to ▁libEST ▁was ▁invalid . ▁It ▁must ▁be ▁greate r ▁than ▁0 ▁and ▁ less ▁than ▁65536 . ▁\ n ▁EST _ ERR _ CLIENT _ INVALID _ KEY ▁The ▁certificate ▁and ▁private ▁key ▁provided ▁to ▁libEST ▁c ould ▁not ▁be ▁loaded . ▁The ▁private ▁key ▁must ▁match ▁the ▁public ▁key ▁in ▁the ▁certificate . ▁\ n ▁EST _ ERR _ CLIENT _ NOT _ INITIALIZED ▁The ▁application ▁attempted ▁to ▁use ▁a ▁libEST ▁API ▁prior ▁to ▁invoking ▁est _ client _ init (). ▁\ n ▁EST _ ERR _ ZE RO _ LEN G TH _ BUF ▁The ▁certificate ▁received ▁from ▁the ▁server ▁ha d ▁an ▁invalid ▁length . ▁\ n ▁EST _ ERR _ READ _ BU FFER _ TOO _ SMALL ▁The ▁I / O ▁buffer ▁provided ▁for ▁reading ▁data ▁from ▁the ▁socket ▁is ▁not ▁large ▁enough ▁to ▁receive ▁the ▁response ▁from ▁the ▁server . ▁\ n ▁EST _ ERR _ BUF _ EXCEED S _ MAX _ LEN ▁The ▁EST ▁server ▁sent ▁a ▁cacerts ▁response ▁that ▁exceed ed ▁the ▁maximum ▁size ▁allowed . ▁\ n ▁EST _ ERR _ NO _ CERTIFICATE ▁An ▁attempt ▁was ▁made ▁to ▁copy ▁the ▁certs ▁from ▁the ▁context ▁prior ▁to ▁the ▁EST ▁operation ▁being ▁performed . ▁\ n ▁EST _ ERR _ NO _ CERTS _ FOUND ▁No ▁certificates ▁we re ▁found ▁in ▁the ▁trusted ▁certificate ▁list ▁provided ▁to ▁libEST . ▁\ n ▁EST _ ERR _ FQDN _ MISMATCH ▁The ▁EST ▁server ▁name ▁did ▁not ▁match ▁the ▁ fully ▁ qual ified ▁do main ▁name ▁in ▁the ▁server ' s ▁X 509 ▁certificate . ▁\ n ▁EST _ ERR _ SYSCALL ▁The ▁OpenSSL ▁library ▁report ed ▁a ▁system ▁call ▁error ▁when ▁attempt ing ▁to ▁establish ▁the ▁TLS ▁session . ▁\ n ▁EST _ ERR _ CSR _ AL READ Y _ SIGNED ▁The ▁PKCS 10 ▁CSR ▁provided ▁to ▁libEST ▁al ready ▁contain ed ▁a ▁signature . ▁libEST ▁requires ▁the ▁CSR ▁to ▁not ▁be ▁signed ▁since ▁libEST ▁is ▁responsible ▁for ▁signing ▁the ▁CSR . ▁\ n ▁EST _ ERR _ CSR _ ATTR _ MISSING ▁The ▁PKCS 10 ▁CSR ▁received ▁from ▁the ▁EST ▁client ▁does ▁not ▁contain ▁all ▁the ▁required ▁CSR ▁attributes . ▁\ n ▁EST _ ERR _ INVALID _ DIGEST ▁An ▁invalid ▁digest ▁type ▁was ▁requested . ▁\ n ▁EST _ ERR _ CACERT _ VERIFICATION ▁Valid ation ▁of ▁the ▁CA ▁certificate ▁chain ▁received ▁from ▁the ▁EST ▁server ▁has ▁failed . ▁\ n ▁EST _ ERR _ INVALID _ TOKEN ▁An ▁invalid ▁authorization ▁token ▁was ▁received . ▁\ n ▁EST _ ERR _ INVALID _ RETRY _ VALUE ▁An ▁invalid ▁or ▁missing ▁retry - after ▁was ▁received ▁from ▁the ▁server . ▁\ n ▁EST _ ERR _ BAD _ X 509 ▁An ▁invalid ▁or ▁corrupted ▁X 509 ▁certificate ▁was ▁provided ▁to ▁libEST . ▁\ n ▁EST _ ERR _ BAD _ BASE 64 ▁An ▁invalid ▁or ▁corrupted ▁CSR ▁Attribute ▁Base 64 ▁encoded ▁string ▁was ▁provided . ▁\ n ▁EST _ ERR _ BAD _ ASN 1 _ HEX ▁An ▁invalid ▁or ▁corrupted ▁CSR ▁Attribute ▁ASN 1 ▁Hex ▁string ▁was ▁provided . ▁\ n ▁EST _ ERR _ BAD _ ASN 1 _ HEX _ TOO _ SHORT ▁A ▁CSR ▁Attribute ▁ASN 1 ▁Hex ▁string ▁is ▁too ▁short . ▁\ n ▁EST _ ERR _ BAD _ ASN 1 _ HEX _ TOO _ LONG ▁A ▁CSR ▁Attribute ▁ASN 1 ▁Hex ▁string ▁is ▁too ▁long . ▁\ n ▁EST _ ERR _ SRP _ STR ENG TH _ LOW ▁The ▁SRP ▁strength ▁requested ▁by ▁the ▁application ▁was ▁too ▁small . ▁\ n ▁EST _ ERR _ SRP _ USER ID _ BAD ▁The ▁SRP ▁user ▁ID ▁was ▁not ▁accepted . ▁\ n ▁EST _ ERR _ SRP _ PWD _ BAD ▁The ▁SRP ▁password ▁was ▁not ▁accepted . ▁\ n ▁EST _ ERR _ CB _ FAILED ▁The ▁application ▁layer ▁call - back ▁facility ▁failed . ▁\ n ▁EST _ ERR _ CLIENT _ PROXY _ MODE _ NOT _ SUPPORTED ▁L ibEST ▁was ▁not ▁ built ▁with ▁libcurl ▁support . ▁L ibcurl ▁is ▁required ▁for ▁client ▁proxy ▁mode . ▁\ n ▁EST _ ERR _ INVALID _ CLIENT _ PROXY _ PROTOCOL ▁I nvalid ▁proxy ▁protocol ▁specified ▁when ▁configur ing ▁client ▁mode ▁for ▁HTTP / Sock s ▁proxy . ▁\ n ▁EST _ ERR _ INVALID _ CLIENT _ PROXY _ AUTH ▁I nvalid ▁proxy ▁authentication ▁mode ▁specified ▁when ▁configur ing ▁client ▁mode ▁for ▁HTTP / Sock s ▁proxy . ▁\ n ▁EST _ ERR _ LAST ▁ Last ▁error ▁in ▁the ▁enum ▁definition . ▁Should ▁ne ver ▁be ▁used . ▁*/ ▁typedef ▁enum ▁{ ▁EST _ ERR _ NONE ▁= ▁0, ▁FOR EAC H _ EST _ ERROR ( GENERAT E _ ENUM ) ▁EST _ ERR _ LAST ▁} ▁EST _ ERROR ; ▁ LIB EST _ API ▁extern ▁const ▁char ▁* EST _ ERR _ STRING S [] ; ▁# define ▁EST _ ERR _ NUM _ TO _ STR ( x ) ▁EST _ ERR _ STRING S [ x ] ▁typedef ▁enum ▁{ ▁AUTH _ NONE , ▁AUTH _ BASIC , ▁AUTH _ DIGEST , ▁AUTH _ TOKEN , ▁AUTH _ FAIL ▁} ▁EST _ HTTP _ AUTH _ MODE ; ▁typedef ▁enum ▁{ ▁HTTP _ AUTH _ NOT _ REQUIRED ▁= ▁0, ▁HTTP _ AUTH _ REQUIRED , ▁} ▁EST _ HTTP _ AUTH _ REQUIRED ; ▁typedef ▁enum ▁{ ▁EST _ CERT _ FORMAT _ PEM ▁= ▁1, ▁EST _ CERT _ FORMAT _ DER , ▁EST _ CERT _ FORMAT _ MAX ▁} ▁EST _ CERT _ FORMAT ; ▁# define ▁EST _ FORMAT _ PEM ▁EST _ CERT _ FORMAT _ PEM ▁# define ▁EST _ FORMAT _ DER ▁EST _ CERT _ FORMAT _ DER ▁/* ▁* ▁This ▁enum ▁allow s ▁the ▁logging ▁to ▁be ▁filter ed ▁to ▁the ▁* ▁desired ▁detail ed ▁level . ▁This ▁is ▁not ▁a ▁bit mask ▁filter . ▁If ▁* ▁add ing ▁a ▁new ▁logging ▁level , ▁the ▁order ▁should ▁be ▁* ▁maintain ed ▁based ▁on ▁the ▁ ur gen cy ▁of ▁the ▁log ▁message . ▁*/ ▁typedef ▁enum ▁{ ▁EST _ LOG _ L VL _ ERR ▁= ▁1, ▁EST _ LOG _ L VL _ WARN , ▁EST _ LOG _ L VL _ INFO ▁} ▁EST _ LOG _ LEVEL ; ▁# define ▁ MAX _ REALM ▁255 ▁# define ▁ MAX _ NONCE ▁64 ▁# define ▁ MAX _ UIDPWD ▁255 ▁# define ▁ MAX _ NC ▁ 9 ▁# define ▁ MAX _ QOP ▁ 10 ▁# define ▁ MAX _ RESPONSE ▁64 ▁# define ▁MIN _ CSRATTRS ▁4 ▁# define ▁ MAX _ CSRATTRS ▁1024 ▁# define ▁MIN _ ASN 1 _ CSRATTRS ▁2 ▁# define ▁ MAX _ CSRATTRS _ WITHPOP ▁ 103 5 ▁# define ▁ MAX _ TOKEN _ ERROR ▁( 255 ) ▁# define ▁ MAX _ TOKEN _ ERROR _ DESC ▁( 255 ) ▁# define ▁ MAX _ AUTH _ TOKEN _ LEN ▁( 512 ) ▁# define ▁ MAX _ HTTP _ METHOD _ LEN ▁( 5 ) ▁/* ▁* ▁The ▁following ▁values ▁ define ▁the ▁minimum , ▁maximum , ▁and ▁default ▁* ▁values ▁for ▁the ▁timeout ▁value ▁for ▁the ▁SSL ▁read ▁operations . ▁* ▁These ▁values ▁are ▁used ▁for ▁both ▁EST ▁Client ▁and ▁ Proxy ▁operations . ▁*/ ▁# define ▁EST _ SSL _ READ _ TIME O UT _ MIN ▁1 ▁# define ▁EST _ SSL _ READ _ TIME O UT _ MAX ▁3600 ▁# define ▁EST _ SSL _ READ _ TIME O UT _ DEF ▁ 10 ▁/* ! ▁@ struct ▁EST _ HTTP _ AUTH _ HDR ▁* ▁@ b rie f ▁This ▁structure ▁is ▁used ▁to ▁pass ▁HTTP ▁authentication ▁parameters ▁to ▁* ▁the ▁application . ▁libEST ▁does ▁not ▁contain ▁a ▁user ▁database ▁* ▁for ▁authenticating ▁user s . ▁It ▁is ▁expected ▁the ▁application ▁will ▁* ▁perform ▁the ▁user ▁authentication ▁against ▁an ▁external ▁authentication ▁* ▁server ▁suc h ▁as ▁Radius . ▁This ▁structure ▁allow s ▁the ▁HTTP ▁authentication ▁* ▁credentials ▁to ▁be ▁passed ▁from ▁the ▁libEST ▁HTTP ▁layer ▁to ▁* ▁the ▁application . ▁* ▁@ var ▁EST _ HTTP _ AUTH _ HDR :: mode ▁* ▁C ontains ▁the ▁HTTP ▁authentication ▁mode ▁being ▁used ▁( Basic ▁or ▁Digest ) . ▁* ▁@ var ▁EST _ HTTP _ AUTH _ HDR :: user ▁* ▁C ontains ▁the ▁user ▁ID ▁from ▁the ▁EST ▁client ▁to ▁be ▁authenticated . ▁* ▁@ var ▁EST _ HTTP _ AUTH _ HDR :: pwd ▁* ▁C ontains ▁the ▁password ▁from ▁the ▁EST ▁client ▁to ▁be ▁authenticated ▁* ▁when ▁HTTP ▁basic ▁authentication ▁is ▁used . ▁* ▁@ var ▁EST _ HTTP _ AUTH _ HDR :: uri ▁* ▁C ontains ▁the ▁URI ▁from ▁the ▁EST ▁client ▁for ▁HTTP ▁digest ▁authentication . ▁* ▁@ var ▁EST _ HTTP _ AUTH _ HDR :: cnonce ▁* ▁C ontains ▁the ▁nonce ▁from ▁the ▁EST ▁client ▁for ▁HTTP ▁digest ▁authentication . ▁* ▁@ var ▁EST _ HTTP _ AUTH _ HDR :: qop ▁* ▁C ontains ▁the ▁operation ▁from ▁the ▁EST ▁client ▁for ▁HTTP ▁digest ▁authentication . ▁* ▁@ var ▁EST _ HTTP _ AUTH _ HDR :: nc ▁* ▁C ontains ▁the ▁nonce ▁count ▁from ▁the ▁EST ▁client ▁for ▁HTTP ▁digest ▁authentication . ▁* ▁@ var ▁EST _ HTTP _ AUTH _ HDR :: nonce ▁* ▁C ontains ▁the ▁server ▁nonce ▁for ▁HTTP ▁digest ▁authentication . ▁* ▁@ var ▁EST _ HTTP _ AUTH _ HDR :: response ▁* ▁C ontains ▁the ▁client ' s ▁digest ▁value ▁to ▁verify . ▁* ▁@ var ▁EST _ HTTP _ AUTH _ HDR :: auth _ token ▁* ▁C ontains ▁the ▁client ' s ▁token ▁value ▁to ▁verify . ▁*/ ▁typedef ▁struct ▁{ ▁EST _ HTTP _ AUTH _ MODE ▁mode ; ▁char ▁* user ; ▁char ▁* pwd ; ▁char ▁* uri ; ▁char ▁* cnonce ; ▁char ▁* qop ; ▁char ▁* nc ; ▁char ▁* nonce ; ▁char ▁* response ; ▁char ▁* auth _ token ; ▁} ▁EST _ HTTP _ AUTH _ HDR ; ▁/* ▁* ▁Defin es ▁the ▁valid ▁return ▁codes ▁that ▁the ▁application ▁layer ' s ▁auth ▁credential ▁* ▁callback ▁function ▁can ▁provide . ▁*/ ▁typedef ▁enum ▁{ ▁EST _ HTTP _ AUTH _ C RED _ SUCCESS ▁= ▁1, ▁EST _ HTTP _ AUTH _ C RED _ NOT _ AVAILABLE , ▁} ▁EST _ HTTP _ AUTH _ C RED _ RC ; ▁/* ! ▁@ struct ▁EST _ CTX ▁* ▁@ b rie f ▁This ▁structure ▁is ▁used ▁to ▁maintain ▁the ▁state ▁of ▁EST ▁operations ▁* ▁on ▁beha lf ▁of ▁the ▁application . ▁A ▁single ▁context ▁can ▁be ▁used ▁to ▁* ▁represent ▁a ▁single ▁instance ▁of ▁ ei ther ▁an ▁EST ▁client , ▁EST ▁server , ▁* ▁or ▁EST ▁proxy ▁server . ▁None ▁of ▁the ▁member s ▁on ▁this ▁structure ▁* ▁are ▁public ally ▁access i ble . ▁Application ▁should ▁use ▁the ▁functions ▁* ▁provided ▁by ▁the ▁libEST ▁API ▁to ▁manage ▁the ▁context . ▁A ▁context ▁* ▁is ▁created ▁using ▁one ▁of : ▁est _ client _ init (), ▁est _ server _ init (), ▁* ▁or ▁est _ proxy _ init (). ▁When ▁the ▁context ▁is ▁no ▁long er ▁needed , ▁* ▁the ▁application ▁shou d ▁invoke ▁est _ destroy () ▁to ▁release ▁all ▁memory ▁* ▁a ssociat ed ▁with ▁the ▁context . ▁*/ ▁typedef ▁struct ▁est _ ctx ▁EST _ CTX ; ▁/* ! ▁@ typedef ▁auth _ credentials _ cb ▁* ▁@ b rie f ▁This ▁typedef ▁ define s ▁the ▁prototype ▁of ▁the ▁callback ▁function ▁* ▁that ▁is ▁to ▁re side ▁in ▁the ▁application ▁code . ▁The ▁application ▁* ▁can ▁register ▁this ▁function ▁callback ▁using ▁the ▁est _ client _ set _ auth _ cred _ cb () ▁* ▁API ▁function . ▁This ▁callback ▁is ▁called ▁by ▁the ▁EST ▁client ▁library ▁* ▁when ▁it ▁requires ▁HTTP ▁authentication ▁credentials . ▁* ▁This ▁callback ▁function ▁takes ▁as ▁input ▁a ▁pointer ▁to ▁a ▁EST _ HTTP _ AUTH _ HDR ▁* ▁structure . ▁The ▁callback ▁function ▁must ▁look ▁at ▁the ▁mode ▁structure ▁* ▁element ▁to ▁determine ▁which ▁type ▁of ▁credentials ▁are ▁required . ▁If ▁the ▁* ▁mode ▁is ▁set ▁to ▁AUTH _ BASIC ▁or ▁AUTH _ DIGEST , ▁the ▁callback ▁function ▁must ▁* ▁suppl y ▁the ▁user ▁and ▁pwd ▁values . ▁If ▁the ▁mode ▁is ▁set ▁to ▁AUTH _ TOKEN , ▁the ▁* ▁the ▁callback ▁must ▁suppl y ▁the ▁auth _ token ▁value . ▁The ▁auth _ token ▁value ▁* ▁must ▁be ▁a ▁base 64 ▁encoded ▁string ▁represent ing ▁the ▁access ▁token . ▁*/ ▁typedef ▁EST _ HTTP _ AUTH _ C RED _ RC ▁(* auth _ credentials _ cb ) ( EST _ HTTP _ AUTH _ HDR ▁* auth _ credentials ); ▁/* ▁* ▁B egin ▁the ▁public ▁API ▁prototypes ▁*/ ▁ LIB EST _ API ▁EST _ ERROR ▁est _ enable _ crl ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ init _ logger ( EST _ LOG _ LEVEL ▁lvl , ▁void ▁(* loggerfunc ) ( char ▁* , ▁va _ list ) ); ▁ LIB EST _ API ▁int ▁est _ get _ ap i _ level ( void ); ▁ LIB EST _ API ▁const ▁char ▁* ▁est _ get _ version ( void ); ▁ LIB EST _ API ▁void ▁est _ enable _ backtrace ( int ▁enable ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ set _ ex _ data ( EST _ CTX ▁* ctx , ▁void ▁* ex _ data ); ▁ LIB EST _ API ▁void ▁* ▁est _ get _ ex _ data ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ CTX ▁* ▁est _ server _ init ( un signed ▁char ▁* ca _ chain , ▁int ▁ca _ chain _ len , ▁un signed ▁char ▁* cacerts _ resp _ chain , ▁int ▁cacerts _ resp _ chain _ len , ▁EST _ CERT _ FORMAT ▁cert _ format , ▁char ▁* http _ realm , ▁X 509 ▁* tls _ cert , ▁E VP _ PKEY ▁* tls _ key ); ▁ LIB EST _ API ▁EST _ CTX ▁* ▁est _ proxy _ init ( un signed ▁char ▁* ca _ chain , ▁int ▁ca _ chain _ len , ▁un signed ▁char ▁* cacerts _ resp _ chain , ▁int ▁cacerts _ resp _ chain _ len , ▁EST _ CERT _ FORMAT ▁cert _ format , ▁char ▁* http _ realm , ▁X 509 ▁* tls _ cert , ▁E VP _ PKEY ▁* tls _ key , ▁char ▁* uid , ▁char ▁* pwd ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ destroy ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ set _ auth _ mode ( EST _ CTX ▁* ctx , ▁EST _ HTTP _ AUTH _ MODE ▁amode ); ▁ LIB EST _ API ▁char ▁* est _ server _ generate _ auth _ digest ( EST _ HTTP _ AUTH _ HDR ▁* ah , ▁char ▁* HA 1); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ start ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ stop ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ enable _ tls 10( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ enable _ srp ( EST _ CTX ▁* ctx , ▁int ▁(* cb ) ( SSL ▁* s , ▁int ▁* ad , ▁void ▁* arg ) ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ enable _ pop ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ disable _ pop ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ handle _ request ( EST _ CTX ▁* ctx , ▁int ▁fd ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ set _ dh _ parms ( EST _ CTX ▁* ctx , ▁DH ▁* dh ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ init _ csrattrs ( EST _ CTX ▁* ctx , ▁char ▁* csrattrs , ▁int ▁cr s attrs _ len ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ set _ retry _ period ( EST _ CTX ▁* ctx , ▁int ▁seconds ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ set _ ecdhe _ curve ( EST _ CTX ▁* ctx , ▁int ▁nid ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ enforce _ csrattr ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ server _ set _ read _ timeout ▁( EST _ CTX ▁* ctx , ▁int ▁timeout ); ▁/* ▁* ▁EST ▁proxy ▁specific ▁functions ▁*/ ▁ LIB EST _ API ▁EST _ ERROR ▁est _ proxy _ start ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ proxy _ stop ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ proxy _ set _ server ( EST _ CTX ▁* ctx , ▁const ▁char ▁* server , ▁int ▁port ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ proxy _ set _ auth _ mode ( EST _ CTX ▁* ctx , ▁EST _ HTTP _ AUTH _ MODE ▁amode ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ proxy _ set _ read _ timeout ( EST _ CTX ▁* ctx , ▁int ▁timeout ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ proxy _ set _ auth _ cred _ cb ( EST _ CTX ▁* ctx , ▁auth _ credentials _ cb ); ▁/* ▁* ▁The ▁following ▁functions ▁are ▁used ▁by ▁an ▁EST ▁client ▁*/ ▁ LIB EST _ API ▁EST _ CTX ▁* est _ client _ init ( un signed ▁char ▁* ca _ chain , ▁int ▁ca _ chain _ len , ▁EST _ CERT _ FORMAT ▁cert _ format , ▁int ▁(* cert _ verify _ cb ) ( X 509 ▁* , ▁int ) ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ set _ auth ( EST _ CTX ▁* ctx , ▁const ▁char ▁* uid , ▁const ▁char ▁* pwd , ▁X 509 ▁* client _ cert , ▁E VP _ PKEY ▁* private _ key ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ set _ auth _ cred _ cb ( EST _ CTX ▁* ctx , ▁auth _ credentials _ cb ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ set _ server ( EST _ CTX ▁* ctx , ▁const ▁char ▁* server , ▁int ▁port , ▁char ▁* path _ segment ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ set _ proxy ( EST _ CTX ▁* ctx , ▁EST _ CLIENT _ PROXY _ PROTO ▁proxy _ proto , ▁const ▁char ▁* proxy _ server , ▁un signed ▁short ▁int ▁proxy _ port , ▁un signed ▁int ▁proxy _ auth , ▁const ▁char ▁* username , ▁const ▁char ▁* password ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ provision _ cert ( EST _ CTX ▁* ctx , ▁char ▁* cn , ▁int ▁* pkcs 7_ len , ▁int ▁* ca _ cert _ len , ▁E VP _ PKEY ▁* new _ public _ key ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ enroll ( EST _ CTX ▁* ctx , ▁char ▁* cn , ▁int ▁* pkcs 7_ len , ▁E VP _ PKEY ▁* new _ public _ key ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ enroll _ csr ( EST _ CTX ▁* ctx , ▁X 509_ REQ ▁* csr , ▁int ▁* pkcs 7_ len , ▁E VP _ PKEY ▁* priv _ key ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ reenroll ( EST _ CTX ▁* ctx , ▁X 509 ▁* cert , ▁int ▁* pkcs 7_ len , ▁E VP _ PKEY ▁* priv _ key ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ copy _ enrolled _ cert ( EST _ CTX ▁* ctx , ▁un signed ▁char ▁* pkcs 7 ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ get _ csrattrs ( EST _ CTX ▁* ctx , ▁un signed ▁char ▁** csr _ data , ▁int ▁* csr _ len ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ get _ cacerts ( EST _ CTX ▁* ctx , ▁int ▁* ca _ certs _ len ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ copy _ cacerts ( EST _ CTX ▁* ctx , ▁un signed ▁char ▁* ca _ certs ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ set _ sign _ digest ( EST _ CTX ▁* ctx , ▁int ▁nid ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ copy _ retry _ after ( EST _ CTX ▁* ctx , ▁int ▁* retry _ delay , ▁time _ t ▁* retry _ time ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ set _ read _ timeout ( EST _ CTX ▁* ctx , ▁int ▁timeout ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ enable _ basic _ auth _ hint ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ force _ pop ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ un force _ pop ( EST _ CTX ▁* ctx ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ client _ enable _ srp ( EST _ CTX ▁* ctx , ▁int ▁strength , ▁char ▁* uid , ▁char ▁* pwd ); ▁ LIB EST _ API ▁int ▁est _ client _ get _ last _ http _ status ( EST _ CTX ▁* ctx ); ▁/* ▁* ▁The ▁following ▁callback ▁entry ▁point s ▁must ▁be ▁set ▁by ▁the ▁application ▁* ▁when ▁a cting ▁as ▁an ▁EST ▁server ▁or ▁proxy . ▁*/ ▁ LIB EST _ API ▁EST _ ERROR ▁est _ set _ ca _ enroll _ cb ( EST _ CTX ▁* ctx , ▁int ▁(* cb ) ( un signed ▁char ▁* ▁pkcs 10 , ▁int ▁p 10_ len , ▁un signed ▁char ▁** pkcs 7, ▁int ▁* pkcs 7_ len , ▁char ▁* user _ id , ▁X 509 ▁* peer _ cert , ▁char ▁* path _ seg , ▁void ▁* ex _ data ) ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ set _ ca _ reenroll _ cb ( EST _ CTX ▁* ctx , ▁int ▁(* cb ) ( un signed ▁char ▁* ▁pkcs 10 , ▁int ▁p 10_ len , ▁un signed ▁char ▁** pkcs 7, ▁int ▁* pkcs 7_ len , ▁char ▁* user _ id , ▁X 509 ▁* peer _ cert , ▁char ▁* path _ seg , ▁void ▁* ex _ data ) ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ set _ csr _ cb ( EST _ CTX ▁* ▁ctx , ▁un signed ▁char ▁* (* cb ) ( int * csr _ len , ▁char ▁* path _ seg , ▁void ▁* ex _ data ) ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ set _ cacerts _ cb ( EST _ CTX ▁* ▁ctx , ▁un signed ▁char ▁* (* cb ) ( int * csr _ len , ▁char ▁* path _ seg , ▁void ▁* ex _ data ) ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ set _ http _ auth _ cb ( EST _ CTX ▁* ▁ctx , ▁int ▁(* cb ) ( EST _ CTX *, ▁EST _ HTTP _ AUTH _ HDR *, ▁X 509* , ▁char ▁* , ▁void *) ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ set _ http _ auth _ required ( EST _ CTX ▁* ▁ctx , ▁EST _ HTTP _ AUTH _ REQUIRED ▁required ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ add _ attributes _ helper ( X 509_ REQ ▁* req , ▁int ▁nid , ▁void ▁* string , ▁int ▁chtype ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ get _ attributes _ helper ( un signed ▁char ▁** der _ ptr , ▁int ▁* der _ len , ▁int ▁* new _ nid ); ▁ LIB EST _ API ▁EST _ ERROR ▁est _ decode _ attributes _ helper ( char ▁* csrattrs , ▁int ▁csrattrs _ len , ▁un signed ▁char ▁** der _ ptr , ▁int ▁* der _ len ); ▁/* ▁* ▁The ▁following ▁are ▁ helper ▁functions ▁to ▁deal ▁with ▁* ▁the ▁OpenSSL ▁data ▁types ▁for ▁certs , ▁keys , ▁etc . ▁*/ ▁ LIB EST _ API ▁X 509_ REQ ▁* est _ read _ x 509_ request ( un signed ▁char ▁* csr , ▁int ▁csr _ len , ▁EST _ CERT _ FORMAT ▁csr _ format ); ▁ LIB EST _ API ▁E VP _ PKEY ▁* est _ load _ key ( un signed ▁char ▁* key , ▁int ▁key _ len , ▁int ▁format ); ▁ LIB EST _ API ▁int ▁est _ convert _ p 7 b 64_ to _ pem ( un signed ▁char ▁* certs _ p 7, ▁int ▁certs _ len , ▁un signed ▁char ▁** pem ); ▁/* ▁* ▁These ▁are ▁ helper ▁m acros ▁that ▁an ▁application ▁can ▁use ▁* ▁to ▁initialize / de - initialize ▁OpenSSL . ▁*/ ▁/* ! ▁@ b rie f ▁est _ app s _ startup () ▁is ▁used ▁by ▁an ▁application ▁to ▁initialize ▁the ▁OpenSSL ▁library . ▁This ▁should ▁be ▁called ▁first ▁prior ▁to ▁using ▁any ▁other ▁functions ▁in ▁the ▁libEST ▁API . ▁This ▁is ▁a ▁ helper ▁function ▁which ▁invokes ▁ CRYPT O _ malloc _ init (), ▁ ERR _ load _ crypto _ strings (), ▁OpenSSL _ add _ all _ algorithms (), ▁E NGIN E _ load _ built in _ engine s (), ▁SSL _ library _ init (), ▁and ▁SSL _ load _ error _ strings (). ▁@ return ▁void . ▁*/ ▁# define ▁est _ app s _ startup () ▁\ ▁do ▁{ ▁ CRYPT O _ malloc _ init (); ▁\ ▁ ERR _ load _ crypto _ strings (); ▁OpenSSL _ add _ all _ algorithms (); ▁\ ▁E NGIN E _ load _ built in _ engine s (); ▁\ ▁SSL _ library _ init (); ▁\ ▁SSL _ load _ error _ strings (); ▁} ▁while ▁(0) ▁/* ! ▁@ b rie f ▁est _ app s _ shutdown () ▁is ▁used ▁by ▁an ▁application ▁to ▁de - initialize ▁the ▁OpenSSL ▁library . ▁This ▁should ▁be ▁called ▁to ▁p revent ▁memory ▁leaks ▁in ▁the ▁OpenSSL ▁library . ▁This ▁is ▁a ▁ helper ▁function ▁which ▁invokes ▁ CONF _ module s _ un load (), ▁OBJ _ cleanup (), ▁E VP _ cleanup (), ▁E NGIN E _ cleanup (), ▁ CRYPT O _ cleanup _ all _ ex _ data (), ▁ ERR _ remove _ thread _ state (), ▁and ▁ ERR _ free _ strings (). ▁@ return ▁void . ▁*/ ▁# define ▁est _ app s _ shutdown () ▁\ ▁do ▁{ ▁ CONF _ module s _ un load (1); ▁\ ▁OBJ _ cleanup (); ▁E VP _ cleanup (); ▁E NGIN E _ cleanup (); ▁\ ▁ CRYPT O _ cleanup _ all _ ex _ data (); ▁ ERR _ remove _ thread _ state ( NULL ); ▁\ ▁ ERR _ free _ strings (); ▁} ▁while ▁(0) ▁# if def ▁ _ _ c plus plus ▁} ▁# endif ▁# endif