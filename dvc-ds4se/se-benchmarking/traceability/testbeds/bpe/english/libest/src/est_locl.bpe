▁ LIB EST _ TEST _ API ▁void ▁est _ log ▁( EST _ LOG _ LEVEL ▁lvl , ▁char ▁* format , ▁...) ; ▁ LIB EST _ TEST _ API ▁void ▁est _ log _ backtrace ▁( void ); ▁/* ▁ From ▁est . c ▁*/ ▁char ▁* ▁est _ get _ tls _ uid ( SSL ▁* ssl , ▁int ▁is _ client ); ▁/* ▁ From ▁est . c ▁*/ ▁ LIB EST _ TEST _ API ▁EST _ ERROR ▁est _ load _ ca _ certs ( EST _ CTX ▁* ctx , ▁un signed ▁char ▁* raw , ▁int ▁size ); ▁/* ▁ From ▁est . c ▁*/ ▁ LIB EST _ TEST _ API ▁EST _ ERROR ▁est _ load _ trusted _ certs ( EST _ CTX ▁* ctx , ▁un signed ▁char ▁* certs , ▁int ▁certs _ len ); ▁/* ▁ From ▁est . c ▁*/ ▁void ▁est _ log ( EST _ LOG _ LEVEL ▁lvl , ▁char ▁* format , ▁...) ; ▁/* ▁ From ▁est . c ▁*/ ▁ LIB EST _ TEST _ API ▁void ▁est _ log _ version ( void ); ▁/* ▁ From ▁est . c ▁*/ ▁void ▁est _ hex _ to _ str ( char ▁* dst , ▁un signed ▁char ▁* src , ▁int ▁len ); ▁/* ▁ From ▁est . c ▁*/ ▁int ▁est _ base 64_ encode ▁( const ▁char ▁* src , ▁int ▁actual _ src _ len , ▁char ▁* dst , ▁int ▁max _ dst _ len ); ▁/* ▁ From ▁est . c ▁*/ ▁ LIB EST _ TEST _ API ▁int ▁est _ base 64_ decode ( const ▁char ▁* src , ▁char ▁* dst , ▁int ▁max _ len ); ▁/* ▁ From ▁est _ server . c ▁*/ ▁int ▁est _ http _ request ( EST _ CTX ▁* ctx , ▁void ▁* http _ ctx , ▁char ▁* method , ▁char ▁* uri , ▁char ▁* body , ▁int ▁body _ len , ▁const ▁char ▁* ct ); ▁/* ▁ From ▁est _ client . c ▁*/ ▁ LIB EST _ TEST _ API ▁EST _ ERROR ▁est _ client _ connect ( EST _ CTX ▁* ctx , ▁SSL ▁** ssl ); ▁/* ▁ From ▁est _ client . c ▁*/ ▁int ▁est _ client _ send _ enroll _ request ( EST _ CTX ▁* ctx , ▁SSL ▁* ssl , ▁ BUF _ MEM ▁* bptr , ▁un signed ▁char ▁* pkcs 7, ▁int ▁* pkcs 7_ len , ▁int ▁reenroll ); ▁/* ▁ From ▁est _ client . c ▁*/ ▁ LIB EST _ TEST _ API ▁void ▁est _ client _ disconnect ( EST _ CTX ▁* ctx , ▁SSL ▁** ssl ); ▁/* ▁ From ▁est _ client . c ▁*/ ▁ LIB EST _ TEST _ API ▁int ▁est _ client _ set _ cert _ and _ key ( SSL _ CTX ▁* ctx , ▁X 509 ▁* cert , ▁E VP _ PKEY ▁* key ); ▁/* ▁ From ▁est _ client . c ▁*/ ▁EST _ ERROR ▁est _ client _ set _ uid _ pw ( EST _ CTX ▁* ctx , ▁const ▁char ▁* uid , ▁const ▁char ▁* pwd ); ▁/* ▁ From ▁est _ client _ http . c ▁*/ ▁EST _ ERROR ▁est _ io _ get _ response ▁( EST _ CTX ▁* ctx , ▁SSL ▁* ssl , ▁EST _ OPERATION ▁op , ▁un signed ▁char ▁** buf , ▁int ▁* payload _ len ); ▁/* ▁ From ▁est _ proxy . c ▁*/ ▁ LIB EST _ TEST _ API ▁EST _ ERROR ▁est _ proxy _ http _ request ( EST _ CTX ▁* ctx , ▁void ▁* http _ ctx , ▁char ▁* method , ▁char ▁* uri , ▁char ▁* body , ▁int ▁body _ len , ▁const ▁char ▁* ct ); ▁/* ▁ From ▁est _ proxy . c ▁*/ ▁void ▁proxy _ cleanup ( EST _ CTX ▁* p _ ctx ); ▁/* ▁ From ▁est _ proxy . c ▁*/ ▁EST _ ERROR ▁est _ asn 1 _ parse _ attributes ( const ▁char ▁* p , ▁int ▁len , ▁int ▁* offset ); ▁/* ▁ From ▁est _ proxy . c ▁*/ ▁EST _ ERROR ▁est _ is _ c hallengePassword _ present ( const ▁char ▁* base 64_ ptr , ▁int ▁b 64_ len , ▁int ▁* offset ); ▁/* ▁ From ▁est _ proxy . c ▁*/ ▁EST _ ERROR ▁est _ add _ c hallengePassword ( const ▁char ▁* base 64_ ptr , ▁int ▁b 64_ len , ▁char ▁** new _ csr , ▁int ▁* pop _ len ); ▁/* ▁ From ▁est _ proxy . c ▁*/ ▁ LIB EST _ TEST _ API ▁EST _ ERROR ▁est _ proxy _ retrieve _ cacerts ▁( EST _ CTX ▁* ctx , ▁un signed ▁char ▁** cacerts _ rtn , ▁int ▁* cacerts _ rtn _ len ); ▁/* ▁ From ▁est _ proxy . c ▁*/ ▁EST _ ERROR ▁est _ send _ csrattr _ data ( EST _ CTX ▁* ctx , ▁char ▁* csr _ data , ▁int ▁csr _ len , ▁void ▁* http _ ctx ); ▁/* ▁ From ▁est _ proxy . c ▁*/ ▁void ▁ cleanse _ auth _ credentials ( EST _ HTTP _ AUTH _ HDR ▁* auth _ cred ); ▁/* ▁ From ▁est _ proxy . c ▁*/ ▁EST _ ERROR ▁est _ parse _ uri ▁( char ▁* uri , ▁EST _ OPERATION ▁* operation , ▁char ▁** path _ seg ); ▁/* ▁ From ▁est _ proxy . c ▁*/ ▁EST _ ERROR ▁est _ store _ path _ segment ▁( EST _ CTX ▁* ctx , ▁char ▁* path _ segment , ▁int ▁path _ segment _ len ); ▁/* ▁ From ▁est _ proxy . c ▁*/ ▁EST _ OPERATION ▁est _ parse _ operation ▁( char ▁* op _ path ); ▁/* ▁ From ▁est _ proxy . c ▁*/ ▁int ▁est _ strcasecmp _ s ▁( char ▁* s 1, ▁char ▁* s 2 );