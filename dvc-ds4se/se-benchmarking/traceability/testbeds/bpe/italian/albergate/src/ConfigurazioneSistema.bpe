▁p ackage ▁interfacce ; ▁import ▁java . awt .* ; ▁import ▁java . awt . event .* ; ▁import ▁java . lang . String ; ▁import ▁common . utility .* ; ▁import ▁common . def .* ; ▁import ▁modul i .* ; ▁p ublic ▁class ▁Configurazione Sistema ▁ext ends ▁Frame ▁{ ▁// ▁font ▁co stanti ▁per ▁un i formare ▁l ' aspett o ▁delle ▁finestre ▁p ublic ▁static ▁final ▁Font ▁font _ base ▁= ▁new ▁Font (" Time s R o ma n ", ▁Font . PL A IN , ▁12) ; ▁p ublic ▁static ▁final ▁Font ▁font _ sub ▁= ▁new ▁Font (" Cour ier ", ▁Font . BOLD , ▁18) ; ▁p ublic ▁static ▁final ▁Font ▁font _ titolo ▁= ▁new ▁Font (" Cour ier ", ▁Font . BOLD , ▁12) ; ▁p ublic ▁static ▁final ▁Font ▁font _ allineato ▁= ▁new ▁Font (" Cour ier ", ▁Font . PL A IN , ▁12) ; ▁// ▁ componenti ▁della ▁finestra ▁di ▁configurazione ▁TextField ▁giorni _ blocco , ▁sup _ bassissima , ▁sup _ bassa , ▁sup _ media , ▁sup _ alta , sup _ letto _ agg , ▁costo _ x _ scatto , ▁sup _ neonato , ▁rid _ bambino , ▁rid _ ragazzo , ▁rid _ comitiva , ▁password , ▁num _ max _ stanze , ▁px _ colazione , ▁px _ mezza , ▁px _ intera , ▁coperto , ▁min _ pers _ comitiva , ▁cambio , ▁albergo , ▁indirizzo _ alb , ▁comune _ alb , ▁citta _ alb , ▁rag _ soc , ▁licenza ; ▁Label ▁cambio _ L _ E ; ▁Label ▁etichetta , ▁etich 1, ▁etich 2, ▁etich 3, ▁etich 4, ▁etich 5, ▁etich 6, ▁etich 7, ▁etich 8, ▁etich 9, ▁etich 10, ▁etich 11 ▁ , etich 11_1 , ▁etich 12, ▁etich 13, ▁etich 14 , ▁etich 15, ▁etich 16 , ▁etich 17, ▁etich 18 , ▁etich 19 , ▁etich 20 , ▁etichetta 1, ▁etichetta 2, ▁etichetta 3, etichetta 4, ▁etichetta 5, ▁etich 2 1, ▁etich 2 2, ▁etichetta 6, ▁etich 23 , etich 24, etich 2 5, ▁etichetta 7; ▁Panel ▁panel 0, ▁panel 1, ▁panel 2, ▁panel 3, ▁panel 4; ▁GridBagLayout ▁gridbag ▁= ▁new ▁GridBagLayout (); ▁CheckboxGroup ▁checkbox ; ▁Checkbox [] ▁checkboxes ; ▁Button ▁Annulla , ▁Passwd , ▁Conferma , ▁Stagioni ; ▁Definizione Stagionalita ▁ def _ stag ; ▁// ▁per ▁il ▁cambio ▁di ▁password ▁e ▁stagionalita ▁static ▁String ▁new _ passwd ; ▁static ▁char [] ▁new _ stag _ anno _ corr , ▁new _ stag _ anno _ prox ; ▁// ▁per ▁la ▁gerarchia ▁delle ▁finestre ▁SubGestione ▁padre ▁= ▁new ▁SubGestione (); ▁// ▁per ▁fre ga re ▁l ' a scoltatore ▁static ▁Configurazione ▁this _ config ; ▁DataBase ▁db ; ▁boolean ▁first _ start ; ▁p ublic ▁Configurazione Sistema ( Configurazione ▁config , ▁boolean ▁prima _ volta , ▁DataBase ▁archivio ) ▁{ ▁super (" Configurazione ▁di ▁sistema "); ▁this _ config ▁= ▁config ; ▁db ▁= ▁archivio ; ▁new _ passwd ▁= ▁this _ config . getPassword (); ▁new _ stag _ anno _ corr ▁= ▁this _ config . get Stagionalita ( Const . ANN O _ CORRENTE ); ▁new _ stag _ anno _ prox ▁= ▁this _ config . get Stagionalita ( Const . ANN O _ PROSSIMO ); ▁first _ start ▁= ▁prima _ volta ; ▁setupPanel s ( prima _ volta ); ▁init (); ▁pack (); ▁} ▁p ublic ▁void ▁setupPanel s ( boolean ▁prima _ volta ) ▁{ ▁this . setFont ( font _ base ); ▁// cre o ▁le ▁etichette ▁cambio _ L _ E ▁= ▁new ▁Label (" Cambio ▁Li ra ▁ <-> ▁ EURO "); ▁etichetta ▁= ▁new ▁Label (" Licenza : "); ▁etichetta . setFont ( new ▁Font (" Cour ier ", ▁Font . BOLD , ▁12) ); ▁etichetta 1 ▁= ▁new ▁Label (" DATI ▁ DI ▁C ON FI G URA ZIONE "); ▁etichetta 1. setFont ( new ▁Font (" Cour ier ", ▁Font . BOLD , ▁12) ); ▁etichetta 2 ▁= ▁new ▁Label (" Supp le menti ▁dovuto ▁alle ▁ stag ion ion al ita ' "); ▁etichetta 2. setFont ( new ▁Font (" Cour ier ", ▁Font . BOLD , ▁12) ); ▁etichetta 3 ▁= ▁new ▁Label (" Rid u zioni "); ▁etichetta 3. setFont ( new ▁Font (" Cour ier ", ▁Font . BOLD , ▁12) ); ▁etichetta 4 ▁= ▁new ▁Label (" Ristorazione "); ▁etichetta 4. setFont ( new ▁Font (" Cour ier ", ▁Font . BOLD , ▁12) ); ▁etichetta 5 ▁= ▁new ▁Label (" Valuta "); ▁etichetta 5. setFont ( new ▁Font (" Cour ier ", ▁Font . BOLD , ▁12) ); ▁etichetta 6 ▁= ▁new ▁Label (" Cambio ▁di ▁password ▁utente "); ▁etichetta 6. setFont ( new ▁Font (" Cour ier ", ▁Font . BOLD , ▁12) ); ▁etichetta 7 ▁= ▁new ▁Label (" Definizione ▁delle ▁stagionalita ' "); ▁etichetta 7. setFont ( new ▁Font (" Cour ier ", ▁Font . BOLD , ▁12) ); ▁licenza ▁= ▁new ▁TextField ("",3 5); ▁albergo ▁= ▁new ▁TextField ("",2 5); ▁comune _ alb ▁= new ▁TextField ("",3 5); ▁citta _ alb ▁= ▁new ▁TextField ("",2 5); ▁indirizzo _ alb ▁= ▁new ▁TextField ("",3 5); ▁rag _ soc ▁= ▁new ▁TextField ("",3 5); ▁giorni _ blocco ▁= ▁new ▁TextField ("",4 ); ▁sup _ bassissima ▁= ▁new ▁TextField ("", 9 ); ▁sup _ bassa ▁= ▁new ▁TextField ("", 9 ); ▁sup _ media ▁= ▁new ▁TextField ("", 9 ); ▁sup _ alta ▁= ▁new ▁TextField ("", 9 ); ▁sup _ neonato ▁= ▁new ▁TextField ("", 9 ); ▁sup _ letto _ agg ▁= ▁new ▁TextField ("", 9 ); ▁rid _ bambino ▁= ▁new ▁TextField ("",4 ); ▁rid _ ragazzo ▁= ▁new ▁TextField ("",4 ); ▁rid _ comitiva ▁= ▁new ▁TextField ("",4 ); ▁min _ pers _ comitiva ▁= ▁new ▁TextField ("",4 ); ▁num _ max _ stanze ▁= ▁new ▁TextField ("",4 ); ▁num _ max _ stanze . setEditable ( false ); ▁px _ colazione ▁= ▁new ▁TextField ("", 9 ); ▁px _ mezza ▁= ▁new ▁TextField ("", 9 ); ▁px _ intera ▁= ▁new ▁TextField ("", 9 ); ▁coperto ▁= ▁new ▁TextField ("", 9 ); ▁costo _ x _ scatto ▁= ▁new ▁TextField ("", 9 ); ▁password ▁= ▁new ▁TextField ("", 20 ); ▁cambio ▁= ▁new ▁TextField ("", 8 ); ▁// cre o ▁un ▁Checkbox ▁checkbox ▁= ▁new ▁CheckboxGroup (); ▁checkboxes ▁= ▁new ▁Checkbox [2] ; ▁checkboxes [0] ▁= ▁new ▁Checkbox (" ▁Li re ", checkbox , true ); ▁checkboxes [1] ▁= ▁new ▁Checkbox (" ▁ EURO ", checkbox , false ); ▁writeDati Conf (); ▁if ▁( prima _ volta ) ▁licenza . setEditable ( true ); ▁else ▁licenza . setEditable ( false ); ▁licenza . setForeground ( Color . red . da r k er ()); ▁albergo . setForeground ( Color . b lue ); ▁comune _ alb . setForeground ( Color . b lue ); ▁citta _ alb . setForeground ( Color . b lue ); ▁rag _ soc . setForeground ( Color . b lue ); ▁password . setE cho Char ( ' * ' ); ▁etich 1 ▁= ▁new ▁Label (" Dati ▁dell ' albergo "); ▁etich 1. setFont ( new ▁Font (" Cour ier ", ▁Font . BOLD , ▁12) ); ▁etich 2 ▁= ▁new ▁Label (" Nome ▁dell ' albergo : "); ▁etich 3 ▁= ▁new ▁Label (" Indirizzo ▁dell ' albergo : "); ▁indirizzo _ alb . setForeground ( Color . b lue ); ▁etich 4 ▁= ▁new ▁Label (" Comune ▁dell ' albergo : "); ▁etich 5 ▁= ▁new ▁Label (" Citta ' ▁dell ' albergo : "); ▁etich 6 ▁= ▁new ▁Label (" Numero ▁di ▁giorni ▁massimo ▁di ▁blocc aggio ▁di ▁una ▁stanza "); ▁etich 7 ▁= ▁new ▁Label (" Supplemento ▁bas s is ima ▁stagione "); ▁etich 8 ▁= ▁new ▁Label (" Supplemento ▁ bassa ▁stagione "); ▁etich 9 ▁= ▁new ▁Label (" Supplemento ▁media ▁stagione "); ▁etich 10 ▁= ▁new ▁Label (" Supplemento ▁ alta ▁stagione "); ▁etich 11 ▁= ▁new ▁Label (" Supplemento ▁per ▁neonati "); ▁etich 11_1 ▁= ▁new ▁Label (" Supplemento ▁letto ▁aggiuntivo "); ▁etich 12 ▁= ▁new ▁Label (" Riduzione ▁per ▁bambini ▁ % "); ▁etich 13 ▁= ▁new ▁Label (" Riduzione ▁per ▁ ragazz i ▁ % "); ▁etich 14 ▁= ▁new ▁Label (" Riduzione ▁per ▁com i tive ▁ % "); ▁etich 15 ▁= ▁new ▁Label (" Numero ▁minim o ▁di ▁persone ▁per ▁comitiva "); ▁etich 16 ▁= ▁new ▁Label (" Numero ▁di ▁stanze "); ▁etich 17 ▁= ▁new ▁Label (" Supplemento ▁prima ▁ colazione "); ▁etich 18 ▁= ▁new ▁Label (" Supplemento ▁ mezza ▁pensione "); ▁etich 19 ▁= ▁new ▁Label (" Supplemento ▁pensione ▁ completa "); ▁etich 20 ▁= ▁new ▁Label (" Coperto ▁per ▁la ▁ristorazione "); ▁etich 21 ▁= ▁new ▁Label (" Co s to ▁di ▁un o ▁scatto ▁telefonico "); ▁etich 22 ▁= ▁new ▁Label (" Password ▁utente "); ▁etich 23 ▁= ▁new ▁Label (" L i re "); ▁etich 24 ▁= ▁new ▁Label (" Dol la ri "); ▁etich 25 ▁= ▁new ▁Label (" Rag ione ▁sociale "); ▁// cre o ▁i ▁pulsanti ▁Annulla ▁= ▁new ▁Button (" Annulla "); ▁Passwd ▁= ▁new ▁Button (" Cambio ▁di ▁password "); ▁Conferma ▁= ▁new ▁Button (" Conferma "); ▁Stagioni ▁= ▁new ▁Button (" Defini sci ▁ Stagionalita ' "); ▁panel 0 ▁= ▁new ▁Panel (); ▁panel 0. setLayout ( gridbag ); ▁ Utils . constrain ( panel 0, ▁etichetta , ▁0, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 0, ▁licenza , ▁1, ▁0, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 0, ▁etich 1, ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 0, ▁etich 2, ▁0, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 0, ▁albergo , ▁1, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 0, ▁etich 3, ▁2, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 0, ▁indirizzo _ alb , ▁3, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 0, ▁etich 4, ▁0, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 0, ▁comune _ alb , ▁1, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 0, ▁etich 5, ▁2, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 0, ▁citta _ alb , ▁3, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 0, ▁etich 2 5, ▁0, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 0, ▁rag _ soc , ▁1, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁panel 1 ▁= ▁new ▁Panel (); ▁panel 1. setLayout ( gridbag ); ▁ Utils . constrain ( panel 1, ▁etichetta 1, ▁0, ▁0, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 6, ▁0, ▁1, ▁ 5, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁giorni _ blocco , ▁ 5, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 2 1, ▁ 7, ▁1, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁costo _ x _ scatto , ▁ 10, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etichetta 2, ▁0, ▁2, ▁ 4, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etichetta 3, ▁ 5, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etichetta 4, ▁ 8, ▁2, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁// ▁supplementi ▁ Utils . constrain ( panel 1, ▁etich 7, ▁0, ▁3, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁sup _ bassissima , ▁3, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 8, ▁0, ▁ 4, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁sup _ bassa , ▁3, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 9, ▁0, ▁ 5, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁sup _ media , ▁3, ▁ 5, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 10, ▁0, ▁ 6, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁sup _ alta , ▁3, ▁ 6, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 11 , ▁0, ▁ 7, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁sup _ neonato , ▁3, ▁ 7, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 11_1 , ▁0, ▁ 8, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁sup _ letto _ agg , ▁3, ▁ 8, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁// ▁riduzioni ▁ Utils . constrain ( panel 1, ▁etich 12, ▁ 4, ▁3, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁rid _ bambino , ▁ 7, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 13, ▁ 4, ▁ 4, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁rid _ ragazzo , ▁ 7, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 14 , ▁ 4, ▁ 5, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁rid _ comitiva , ▁ 7, ▁ 5, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 15, ▁ 4, ▁ 6, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁min _ pers _ comitiva , ▁ 7, ▁ 6, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁// ▁ristorazione ▁ Utils . constrain ( panel 1, ▁etich 17, ▁ 8, ▁3, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁px _ colazione , ▁1 1, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 18 , ▁ 8, ▁ 4, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁px _ mezza , ▁1 1, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 19 , ▁ 8, ▁ 5, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁px _ intera , ▁1 1, ▁ 5, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 20 , ▁ 8, ▁ 6, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁coperto , ▁1 1, ▁ 6, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁cambio _ L _ E , ▁ 5, ▁ 7, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁cambio , ▁ 7, ▁ 7, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁etich 16 , ▁ 9, ▁ 7, ▁ 4, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁num _ max _ stanze , ▁1 1, ▁ 7, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁panel 2 ▁= ▁new ▁Panel (); ▁panel 2. setLayout ( gridbag ); ▁ Utils . constrain ( panel 2, ▁etichetta 5, ▁0, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁checkboxes [0], ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁checkboxes [1] , ▁0, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁panel 3 ▁= ▁new ▁Panel (); ▁panel 3. setLayout ( gridbag ); ▁ Utils . constrain ( panel 3, ▁etichetta 6, ▁0, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 3, ▁Passwd , ▁1, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 3, ▁etichetta 7, ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 3, ▁Stagioni , ▁1, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁panel 4 ▁= ▁new ▁Panel (); ▁panel 4. setLayout ( gridbag ); ▁ Utils . constrain ( panel 4, ▁Annulla , ▁ 8, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 4, ▁Conferma , ▁ 9, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁this . setLayout ( gridbag ); ▁ Utils . constrain ( this , panel 0, ▁0, ▁0, ▁12, ▁ 6, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , panel 1, ▁0, ▁ 6, ▁12, ▁ 9, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , panel 2, ▁0, ▁ 15, ▁1, ▁3, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , panel 3, ▁1, ▁ 15, ▁1 1, ▁2, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , panel 4, ▁0, ▁1 9, ▁12, ▁1, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁} ▁p ublic ▁void ▁init () ▁{ ▁Annulla . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁dispose (); ▁if ▁(! first _ start ) ▁padre . setEnabled ( true ); ▁else ▁System . e x it (0) ; ▁} ▁} ); ▁Conferma . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁startConferma (); ▁} ▁} ); ▁checkboxes [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( checkboxes [0]. getStat e ()) ▁{ ▁startAvvi so ( Const . LIRE ); ▁} ▁} ▁} ); ▁checkboxes [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( checkboxes [1]. getStat e ()) ▁{ ▁startAvvi so ( Const . EURO ); ▁} ▁} ▁} ); ▁Passwd . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁startC hangeP wd (); ▁} ▁} ); ▁Stagioni . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁set Stagioni (); ▁} ▁} ); ▁} ▁void ▁startAvvi so ( char ▁nuova _ valuta ) ▁{ ▁Frame ▁msg ; ▁if ▁( nuova _ valuta ▁ != ▁this _ config . get Valuta () ▁&& ▁! first _ start ) ▁{ ▁msg ▁= ▁new ▁Avviso Dialog ( this , ▁" Attenzione : ▁il ▁cambio ▁ LI R A <-> EURO ▁effettuato ▁alla ▁conferma ▁modifiche ra ' ▁le ▁ci f re ▁della ▁finestra ▁corrente !" ); ▁} ▁} ▁void ▁startC hangeP wd () ▁{ ▁this . setEnabled ( false ); ▁CambioPassword ▁cambio ▁= ▁new ▁CambioPassword (); ▁cambio . setVisible ( true ); ▁cambio . conf ▁= ▁this ; ▁} ▁void ▁startConferma () ▁{ ▁MessageDialog ▁msg ; ▁int ▁j ; ▁if ▁(! errore ()) ▁{ ▁char ▁vecchia _ valuta ▁= ▁this _ config . get Valuta (); ▁readDati Conf (); ▁this _ config . setPassword ( new _ passwd ); ▁this _ config . set Stagionalita ( new _ stag _ anno _ corr , ▁new _ stag _ anno _ prox ); ▁if ▁( ▁( j ▁= ▁( db . write Configurazione ( this _ config ))) ▁ != ▁DataBase . OK ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" P roblemi ▁con ▁il ▁database : ▁"+ DataBase . str Errore ( j )); ▁} ▁else ▁{ ▁if ▁( ▁vecchia _ valuta ▁ != ▁this _ config . get Valuta () ▁&& ▁! first _ start ) ▁{ ▁j ▁= ▁( Principale . db ) . start Cambio Valuta (); ▁if ▁( j ▁ != ▁DataBase . OK ) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" Errore ▁con ▁il ▁database : ▁"+ DataBase . str Errore ( j )); ▁return ; ▁} ▁this _ config ▁= ▁( Principale . db ) . read Configurazione (); ▁ Principale . config ▁= ▁this _ config ; ▁} ▁if ▁(!( first _ start )) ▁{ ▁padre . pass . p . setTitle ( this _ config . getNomeA lbergo ()); ▁padre . setEnabled ( true ); ▁} ▁else ▁{ ▁Frame ▁p ▁= ▁new ▁ Principale ( this _ config , ▁db ); ▁p . setVisible ( true ); ▁} ▁dispose (); ▁} ▁} ▁} ▁void ▁set Stagioni () ▁{ ▁ def _ stag ▁= ▁new ▁Definizione Stagionalita ( this ); ▁} ▁boolean ▁errore () ▁{ ▁Frame ▁msg ; ▁if ▁( ▁!(( licenza . getText ()). length () ▁< ▁33 ▁) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁La ▁licenza ▁deve ▁essere ▁compos ta ▁da ▁al ▁piu ' ▁32 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( albergo . getText ()). length () ▁< ▁21 ▁) ) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁nome ▁dell ' albergo ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁20 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( comune _ alb . getText ()). length () ▁< ▁33 ▁) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁comune ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁32 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( indirizzo _ alb . getText ()). length () ▁< ▁33 ▁) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁L ' indirizzo ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁32 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( citta _ alb . getText ()). length () ▁< ▁21 ▁) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁La ▁citta ' ▁deve ▁essere ▁compos ta ▁da ▁al ▁piu ' ▁20 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( rag _ soc . getText ()). length () ▁< ▁33 ▁) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁La ▁rag ione ▁sociale ▁deve ▁essere ▁compos ta ▁da ▁al ▁piu ' ▁32 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁! Utils . is Int Pos ( giorni _ blocco . getText ()) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁numero ▁di ▁giorni ▁di ▁ blocco ▁deve ▁essere ▁un ▁numero ▁intero ▁positivo ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁! Utils . is Float Pos ( sup _ bassissima . getText ()) ▁|| ▁! Utils . is Float Pos ( sup _ bassa . getText ()) ▁|| ▁! Utils . is Float Pos ( sup _ media . getText ()) ▁|| ▁! Utils . is Float Pos ( sup _ alta . getText ()) ▁|| ▁! Utils . is Float Pos ( sup _ neonato . getText ()) ▁|| ▁! Utils . is Float Pos ( sup _ letto _ agg . getText ()) ▁|| ▁! Utils . is Float Pos ( px _ colazione . getText ()) ▁|| ▁! Utils . is Float Pos ( px _ mezza . getText ()) ▁|| ▁! Utils . is Float Pos ( px _ intera . getText ()) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁I ▁supplementi ▁devo no ▁essere ▁numeri ▁p o siti vi ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁! Utils . is Int Pos ( rid _ bambino . getText ()) ▁|| ▁! Utils . is Int Pos ( rid _ ragazzo . getText ()) ▁|| ▁! Utils . is Int Pos ( rid _ comitiva . getText ()) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁deve ▁essere ▁un ▁numero ▁intero ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁! Utils . is Int Pos ( min _ pers _ comitiva . getText ()) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁numero ▁di ▁persone ▁comitiva ▁deve ▁essere ▁un ▁numero ▁intero ▁positivo ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁! Utils . is Int Pos ( num _ max _ stanze . getText ()) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁numero ▁di ▁stanze ▁deve ▁essere ▁un ▁numero ▁intero ▁positivo ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁! Utils . is Float Pos ( coperto . getText ()) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁coperto ▁deve ▁essere ▁un ▁numero ▁positivo ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁! Utils . is Float Pos ( costo _ x _ scatto . getText ()) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁costo ▁dell o ▁scatto ▁telefonico ▁deve ▁essere ▁un ▁numero ▁positivo ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁! Utils . is Float Pos ( cambio . getText ()) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁co e fficient e ▁di ▁cambio ▁ LIRE <-> EURO ▁deve ▁essere ▁un ▁numero ▁positivo ▁e ▁divers o ▁da ▁zero ! ▁"); ▁return ▁true ; ▁} ▁else ▁if ▁( ▁!(( Float . valueOf ( cambio . getText ())) . float Value () ▁ > ▁0) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁co e fficient e ▁di ▁cambio ▁ LIRE <-> EURO ▁deve ▁essere ▁un ▁numero ▁positivo ▁e ▁divers o ▁da ▁zero ! ▁"); ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁void ▁readDati Conf () ▁{ ▁this _ config . set Licenza ( licenza . getText ()); ▁this _ config . setNome A lbergo ( albergo . getText ()); ▁this _ config . setComune Alb ( comune _ alb . getText ()); ▁this _ config . setIndirizzo Alb ( indirizzo _ alb . getText ()); ▁this _ config . setCitta Alb ( citta _ alb . getText ()); ▁this _ config . set Rag S oc ( rag _ soc . getText ()); ▁this _ config . set Giorni Blocco ( Integer . parse Int ( giorni _ blocco . getText ())); ▁this _ config . set Supplemento ( ( Float . valueOf ( sup _ bassissima . getText ())) . float Value (), Flag . BASS I SSIMA _ STAGIONE ); ▁this _ config . set Supplemento ( ( Float . valueOf ( sup _ bassa . getText ())) . float Value (), Flag . BASS A _ STAGIONE ); ▁this _ config . set Supplemento ( ( Float . valueOf ( sup _ media . getText ())) . float Value (), Flag . ME DI A _ STAGIONE ); ▁this _ config . set Supplemento ( ( Float . valueOf ( sup _ alta . getText ())) . float Value (), Flag . ALT A _ STAGIONE ); ▁this _ config . setSup Neonato ( ( Float . valueOf ( sup _ neonato . getText ())) . float Value ()); ▁this _ config . setSup Letto Agg ( ( Float . valueOf ( sup _ letto _ agg . getText ())) . float Value ()); ▁this _ config . set Riduzione ( Integer . parse Int ( rid _ bambino . getText ()), Flag . BAMBINO ); ▁this _ config . set Riduzione ( Integer . parse Int ( rid _ ragazzo . getText ()), Flag . RAGAZZO ); ▁this _ config . set Riduzione ( Integer . parse Int ( rid _ comitiva . getText ()), Flag . COM ITIV A ); ▁this _ config . set Min Pers Comit ( Integer . parse Int ( min _ pers _ comitiva . getText ())); ▁this _ config . setNumStanz e ( Integer . parse Int ( num _ max _ stanze . getText ())); ▁this _ config . setPx Col azione ( ( Float . valueOf ( px _ colazione . getText ())) . float Value ()); ▁this _ config . setPx Mezza ( ( Float . valueOf ( px _ mezza . getText ())) . float Value ()); ▁this _ config . setPx Inter a ( ( Float . valueOf ( px _ intera . getText ())) . float Value ()); ▁this _ config . set Coperto ( ( Float . valueOf ( coperto . getText ())) . float Value ()); ▁this _ config . set Co s to X Scatt o ( ( Float . valueOf ( costo _ x _ scatto . getText ())) . float Value ()); ▁this _ config . set Co eff X Cambio ( ( Float . valueOf ( cambio . getText ())) . float Value ()); ▁if ▁( checkboxes [0]. getStat e ()) ▁this _ config . set Valuta ( Const . LIRE ); ▁else ▁this _ config . set Valuta ( Const . EURO ); ▁} ▁void ▁writeDati Conf () ▁{ ▁// String ▁s ▁= ▁new ▁String ( Principale . s im bo l ); ▁licenza . setText (""+ this _ config . get Licenza ()); ▁albergo . setText (""+ this _ config . getNomeA lbergo ()); ▁comune _ alb . setText (""+ this _ config . getComune Alb ()); ▁indirizzo _ alb . setText (""+ this _ config . getIndirizzo Alb ()); ▁citta _ alb . setText (""+ this _ config . getCitta Alb ()); ▁rag _ soc . setText (""+ this _ config . get Rag S oc ()); ▁giorni _ blocco . setText (""+ this _ config . get Giorni Blocco ()); ▁sup _ bassissima . setText (""+ this _ config . get Supplemento ( Flag . BASS I SSIMA _ STAGIONE )); ▁sup _ bassa . setText (""+ this _ config . get Supplemento ( Flag . BASS A _ STAGIONE )); ▁sup _ media . setText (""+ this _ config . get Supplemento ( Flag . ME DI A _ STAGIONE )); ▁sup _ alta . setText (""+ this _ config . get Supplemento ( Flag . ALT A _ STAGIONE )); ▁sup _ neonato . setText (""+ this _ config . getSup Neonato ()); ▁sup _ letto _ agg . setText (""+ this _ config . getSup Letto Agg ()); ▁rid _ bambino . setText (""+ this _ config . get Riduzione ( Flag . BAMBINO )); ▁rid _ ragazzo . setText (""+ this _ config . get Riduzione ( Flag . RAGAZZO )); ▁rid _ comitiva . setText (""+ this _ config . get Riduzione ( Flag . COM ITIV A )); ▁min _ pers _ comitiva . setText (""+ this _ config . get Min Pers Comit ()); ▁num _ max _ stanze . setText (""+ this _ config . getNumStanz e ()); ▁px _ colazione . setText (""+ this _ config . getPx Col azione ()); ▁px _ mezza . setText (""+ this _ config . getPx Mezza ()); ▁px _ intera . setText (""+ this _ config . getPx Inter a ()); ▁coperto . setText (""+ this _ config . get Coperto ()); ▁costo _ x _ scatto . setText (""+ this _ config . getCosto X Scatt o ()); ▁cambio . setText (""+ this _ config . getCo eff X Cambio ()); ▁if ▁( this _ config . get Valuta () ▁== ▁Const . LIRE ) ▁checkbox . setSelected Checkbox ( checkboxes [0] ); ▁else ▁checkbox . setSelected Checkbox ( checkboxes [1] ); ▁} ▁} ▁/ *************** *************** *************** *************** **************** / ▁class ▁CambioPassword ▁ext ends ▁Frame ▁{ ▁TextField ▁testo 1, ▁testo 2, ▁testo 3; ▁Label ▁label 1, ▁label 2, ▁label 3; ▁GridBagLayout ▁grid ▁= ▁new ▁GridBagLayout (); ▁Panel ▁pannello , ▁pannello _ x _ annulla ; ▁Frame ▁conf ▁= ▁new ▁Frame (); ▁Button ▁conferma , ▁cambio , ▁annulla ; ▁MessageDialog ▁dialog ; ▁p ublic ▁CambioPassword () ▁{ ▁super (" Cambio ▁di ▁password "); ▁setupPanel s (); ▁init (); ▁pack (); ▁} ▁void ▁setupPanel s () ▁{ ▁this . setFont ( Configurazione Sistema . font _ base ); ▁// cre o ▁le ▁etichette ▁label 1 ▁= ▁new ▁Label (" Inseri re ▁vecchia ▁password "); ▁label 2 ▁= ▁new ▁Label (" Inseri re ▁nuova ▁password "); ▁label 3 ▁= ▁new ▁Label (" Re inserire ▁la ▁nuova ▁password "); ▁// cre o ▁i ▁text Field ▁testo 1 ▁= ▁new ▁TextField ("", 20 ); ▁testo 2 ▁= ▁new ▁TextField ("", 20 ); ▁testo 1. setE cho Char ( ' * ' ); ▁testo 2. setE cho Char ( ' * ' ); ▁testo 2. setEditable ( false ); ▁conferma ▁= ▁new ▁Button (" Conferma "); ▁cambio ▁= ▁new ▁Button (" Cambio ▁di ▁password "); ▁cambio . setEnabled ( false ); ▁annulla ▁= ▁new ▁Button (" Annulla "); ▁pannello ▁= ▁new ▁Panel (); ▁pannello . setLayout ( grid ); ▁ Utils . constrain ( pannello , ▁label 1, ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( pannello , ▁testo 1, ▁2, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( pannello , ▁label 2, ▁0, ▁1, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( pannello , ▁testo 2, ▁2, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( pannello , ▁conferma , ▁3, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( pannello , ▁cambio , ▁3, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁pannello _ x _ annulla ▁= ▁new ▁Panel (); ▁pannello _ x _ annulla . setLayout ( grid ); ▁ Utils . constrain ( pannello _ x _ annulla , ▁annulla , ▁0, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁this . setLayout ( grid ); ▁ Utils . constrain ( this , pannello , ▁0, ▁0, ▁ 4, ▁2, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , pannello _ x _ annulla , ▁0, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁} ▁void ▁init () ▁{ ▁annulla . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁dispose (); ▁conf . setEnabled ( true ); ▁} ▁} ); ▁conferma . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁g (); ▁} ▁} ); ▁testo 1. a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁g (); ▁} ▁} ); ▁cambio . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁i (); ▁} ▁} ); ▁testo 2. a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁i (); ▁} ▁} ); ▁} ▁void ▁g () ▁{ ▁String ▁tmp ▁= ▁testo 1. getText (); ▁if ( tmp . equals ( Configurazione Sistema . new _ passwd )) ▁{ ▁testo 2. setEditable ( true ); ▁testo 1. setEditable ( false ); ▁cambio . setEnabled ( true ); ▁conferma . setEnabled ( false ); ▁} ▁else ▁{ ▁dialog ▁= ▁new ▁MessageDialog ( this ," La ▁password ▁non ▁e ' ▁corretta "); ▁dialog . setVisible ( true ); ▁testo 1. setText (" "); ▁} ▁} ▁void ▁i () ▁{ ▁String ▁tmp ▁= ▁testo 2. getText (); ▁Messaggio ▁messaggio 1 ▁= ▁new ▁Messaggio ( tmp ); ▁messaggio 1. setVisible ( true ); ▁messaggio 1. c ▁= ▁this ; ▁this . setEnabled ( false ); ▁} ▁} ▁/ *************** *************** *************** *************** **************** / ▁class ▁Messaggio ▁ext ends ▁Frame ▁{ ▁Label ▁msg ; ▁Button ▁OK ; ▁CambioPassword ▁c ▁= ▁new ▁CambioPassword (); ▁Avviso ▁dialog ; ▁GridBagLayout ▁gridbag ▁= ▁new ▁GridBagLayout (); ▁TextField ▁testo 3; ▁Panel ▁pannello ; ▁String ▁p wd _ passata ; ▁p ublic ▁Messaggio ( String ▁text ) ▁{ ▁super (" Messaggio ▁per ▁il ▁cambio ▁di ▁password "); ▁setup (); ▁p wd _ passata ▁= ▁text ; ▁init (); ▁pack (); ▁} ▁void ▁setup () ▁{ ▁this . setFont ( Configurazione Sistema . font _ base ); ▁// cre o ▁un ▁pulsante ▁OK ▁= ▁new ▁Button (" OK "); ▁// cre o ▁un ' etichetta ▁msg ▁= ▁new ▁Label (" Re inserire ▁la ▁nuova ▁password "); ▁// cre o ▁un ▁text Field ▁testo 3 ▁= ▁new ▁TextField ("", 20 ); ▁testo 3. setE cho Char ( ' * ' ); ▁pannello ▁= ▁new ▁Panel (); ▁pannello . setLayout ( gridbag ); ▁ Utils . constrain ( pannello , ▁msg , ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( pannello , ▁testo 3, ▁2, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( pannello , ▁OK , ▁ 4, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁this . setLayout ( gridbag ); ▁ Utils . constrain ( this , ▁pannello , ▁0, ▁0, ▁ 4, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁} ▁p ublic ▁void ▁init () ▁{ ▁OK . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁start OK (); ▁} ▁} ); ▁testo 3. a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁start OK (); ▁} ▁} ); ▁} ▁void ▁start OK () ▁{ ▁if ( ( testo 3. getText ()). equals ( p wd _ passata )) ▁{ ▁Configurazione Sistema . new _ passwd ▁= ▁testo 3. getText (); ▁dialog ▁= ▁new ▁Avviso ( this ," La ▁password ▁verr a ' ▁cambiat a ▁alla ▁conferma "); ▁} ▁else ▁dialog ▁= ▁new ▁Avviso ( this ," La ▁nuova ▁password ▁non ▁e ' ▁stata ▁accettata "); ▁dialog . setVisible ( true ); ▁} ▁} ▁/ *************** *************** *************** *************** **************** / ▁class ▁Avviso ▁ext ends ▁Frame ▁{ ▁Button ▁OK ; ▁Messaggio ▁padre ; ▁p ublic ▁Avviso ( Messaggio ▁parent , ▁String ▁testo ) ▁{ ▁super (" Attenzione "); ▁padre ▁= ▁parent ; ▁padre . setEnabled ( false ); ▁this . setFont ( Configurazione Sistema . font _ titolo ); ▁Panel ▁textPanel ▁= ▁new ▁Panel (); ▁Panel ▁buttonPanel ▁= ▁new ▁Panel (); ▁textPanel . add ( new ▁Label ( testo )); ▁OK ▁= ▁new ▁Button (" OK "); ▁buttonPanel . add ( OK ); ▁add (" Nor th ", textPanel ); ▁add (" Center ", buttonPanel ); ▁init (); ▁pack (); ▁ setVisible ( true ); ▁} ▁p ublic ▁void ▁init () ▁{ ▁OK . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁e sci (); ▁} ▁} ); ▁} ▁void ▁e sci () ▁{ ▁dispose (); ▁padre . dispose (); ▁padre . c . dispose (); ▁padre . c . conf . setEnabled ( true ); ▁} ▁}