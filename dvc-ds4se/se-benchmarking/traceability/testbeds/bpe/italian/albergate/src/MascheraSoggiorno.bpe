▁p ackage ▁interfacce ; ▁import ▁java . awt .* ; ▁import ▁java . awt . event .* ; ▁import ▁modul i .* ; ▁import ▁common . utility .* ; ▁import ▁common . def .* ; ▁import ▁java . util . Date ; ▁p ublic ▁class ▁M ascheraSoggiorno ▁ext ends ▁Frame ▁{ ▁// Dichiar o ▁gli ▁oggett i ▁che ▁utilizz ero ' ▁per ▁costrui re ▁la ▁finestra ▁Label ▁etichetta , ▁etichetta 1, ▁label 1, ▁label 2, ▁label 3, ▁label 4, ▁label 5, ▁label 6, ▁label 7, ▁label 8, ▁label 9, ▁label 10, ▁label 11 , ▁label 12, ▁label 13, ▁label 14 , ▁label 15, ▁label 16 ; ▁TextField ▁testo 1, ▁testo 2, ▁testo 3, ▁testo 4, ▁testo 5, ▁testo 6, ▁testo 7, ▁testo 8, ▁testo 9, ▁testo 10, ▁testo 11 , ▁testo 12, ▁testo 13, ▁testo 14 ; ▁Button ▁Annulla , ▁Conferma ; ▁CheckboxGroup ▁pensione , ▁cliente ; ▁Checkbox [] ▁checkboxes , ▁checkboxes 1; ▁Panel ▁panel 1, ▁panel 2, ▁panel 3; ▁GridBagLayout ▁gridbag = new ▁GridBagLayout (); ▁Ricerca Prenotazione ▁padre ▁= ▁new ▁Ricerca Prenotazione ("",3 ); ▁p ublic ▁M ascheraSoggiorno ( String ▁title , ▁String ▁caption , ▁char ▁pens , ▁char ▁status ) ▁{ ▁super ( title ); ▁padre . setEnabled ( false ); ▁setupPanel s ( caption , ▁pens , ▁status ); ▁init (); ▁pack (); ▁this . setVisible ( true ); ▁} ▁void ▁setupPanel s ( String ▁caption , ▁char ▁pens , ▁char ▁status ) ▁{ ▁this . setFont ( Configurazione Sistema . font _ base ); ▁// Cre o ▁le ▁etichette ▁etichetta = new ▁Label (" Dati ▁del ▁cliente "); ▁etichetta . setFont ( Configurazione Sistema . font _ titolo ); ▁label 1 ▁= ▁new ▁Label (" Stanza ▁numero "); ▁label 2 ▁= ▁new ▁Label (" Cognome "); ▁label 3 ▁= ▁new ▁Label (" Nome "); ▁label 4 ▁= ▁new ▁Label (" Luogo ▁di ▁nascita "); ▁label 5 ▁= ▁new ▁Label (" Data ▁di ▁nascita "); ▁label 6 ▁= ▁new ▁Label (" Documento ▁di ▁identi ta ' "); ▁label 7 ▁= ▁new ▁Label (" Numero ▁telefonico "); ▁label 8 ▁= ▁new ▁Label (" Indirizzo "); ▁label 9 ▁= ▁new ▁Label (" C . A . P "); ▁label 10 ▁= ▁new ▁Label (" Comune ▁di ▁res id enza "); ▁label 11 ▁= ▁new ▁Label (" Citta ' "); ▁label 12 ▁= ▁new ▁Label (" Nazione "); ▁etichetta 1 ▁= ▁new ▁Label (" Dati ▁del ▁soggiorno "); ▁etichetta 1. setFont ( Configurazione Sistema . font _ titolo ); ▁label 13 ▁= ▁new ▁Label (" Data ▁inizio ▁soggiorno "); ▁label 14 ▁= ▁new ▁Label (" Data ▁fine ▁soggiorno "); ▁label 15 ▁= ▁new ▁Label (" Tipo ▁di ▁pensionamento "); ▁label 15. setFont ( Configurazione Sistema . font _ titolo ); ▁label 16 ▁= ▁new ▁Label (" Status ▁cliente "); ▁label 16. setFont ( Configurazione Sistema . font _ titolo ); ▁// Cre o ▁i ▁TextField ▁testo 1 ▁= ▁new ▁TextField ("", ▁4 ); ▁testo 2 ▁= ▁new ▁TextField ("", ▁20 ); ▁testo 3 ▁= ▁new ▁TextField ("", ▁20 ); ▁testo 4 ▁= ▁new ▁TextField ("", ▁32) ; ▁testo 5 ▁= ▁new ▁TextField ("", ▁10 ); ▁testo 6 ▁= ▁new ▁TextField ("", ▁16 ); ▁testo 7 ▁= ▁new ▁TextField ("", ▁16 ); ▁testo 8 ▁= ▁new ▁TextField ("", ▁52) ; ▁testo 9 ▁= ▁new ▁TextField ("", ▁8 ); ▁testo 10 ▁= ▁new ▁TextField ("", ▁32) ; ▁testo 11 ▁= ▁new ▁TextField ("", ▁20 ); ▁testo 12 ▁= ▁new ▁TextField ("", ▁20 ); ▁testo 13 ▁= ▁new ▁TextField ("", ▁10 ); ▁testo 14 ▁= ▁new ▁TextField ("", ▁10 ); ▁// Cre o ▁i ▁botton i ▁Annulla ▁= ▁new ▁Button (" Annulla "); ▁Conferma ▁= ▁new ▁Button ( caption ); ▁// Cre o ▁i ▁Checkbox ▁ad ▁esclus ione ▁pensione ▁= ▁new ▁CheckboxGroup (); ▁checkboxes ▁= ▁new ▁Checkbox [4] ; ▁checkboxes [0] ▁= ▁new ▁Checkbox (" ▁S olo ▁pernottamento ", ▁pensione , ▁false ); ▁checkboxes [1] ▁= ▁new ▁Checkbox (" ▁ Prima ▁ colazione ", ▁pensione , ▁false ); ▁checkboxes [2] ▁= ▁new ▁Checkbox (" ▁ Mezza ▁pensione ", ▁pensione , ▁false ); ▁checkboxes [3] ▁= ▁new ▁Checkbox (" ▁P ensione ▁ completa ", ▁pensione , ▁false ); ▁s witch ▁( pens ) ▁{ ▁case ▁ Flag . SOL O _ PERNOTTAMENTO : ▁checkboxes [0] ▁= ▁new ▁Checkbox (" ▁S olo ▁pernottamento ", ▁pensione , ▁true ); ▁brea k ; ▁case ▁ Flag . SOL O _ COLAZIONE : ▁checkboxes [1] ▁= ▁new ▁Checkbox (" ▁ Prima ▁ colazione ", ▁pensione , ▁true ); ▁brea k ; ▁case ▁ Flag . ME ZZA _ PENSIONE : ▁checkboxes [2] ▁= ▁new ▁Checkbox (" ▁ Mezza ▁pensione ", ▁pensione , ▁true ); ▁brea k ; ▁case ▁ Flag . PENSIONE _ COMPLETA : ▁checkboxes [3] ▁= ▁new ▁Checkbox (" ▁P ensione ▁ completa ", ▁pensione , ▁true ); ▁brea k ; ▁} ▁cliente ▁= ▁new ▁CheckboxGroup (); ▁checkboxes 1 ▁= ▁new ▁Checkbox [4] ; ▁checkboxes 1[0] ▁= ▁new ▁Checkbox (" ▁ Neonato ▁(0 -2 ▁anni ) ", ▁cliente , ▁false ); ▁checkboxes 1[1] ▁= ▁new ▁Checkbox (" ▁B ambino ▁( 3 -12 ▁anni ) ", ▁cliente , ▁false ); ▁checkboxes 1[2] ▁= ▁new ▁Checkbox (" ▁R agazzo ▁(12 - 17 ▁anni ) ", ▁cliente , ▁false ); ▁checkboxes 1[3] ▁= ▁new ▁Checkbox (" ▁Ad ul to ▁( >= 18 ▁anni ) ", ▁cliente , ▁false ); ▁s witch ▁( stat us ) ▁{ ▁case ▁ Flag . NEONATO : ▁checkboxes 1[0] ▁= ▁new ▁Checkbox (" ▁ Neonato ▁(0 -2 ▁anni ) ", ▁cliente , ▁true ); ▁brea k ; ▁case ▁ Flag . BAMBINO : ▁checkboxes 1[1] ▁= ▁new ▁Checkbox (" ▁B ambino ▁( 3 -12 ▁anni ) ", ▁cliente , ▁true ); ▁brea k ; ▁case ▁ Flag . RAGAZZO : ▁checkboxes 1[2] ▁= ▁new ▁Checkbox (" ▁R agazzo ▁(12 - 17 ▁anni ) ", ▁cliente , ▁true ); ▁brea k ; ▁case ▁ Flag . ADULTO : ▁checkboxes 1[3] ▁= ▁new ▁Checkbox (" ▁Ad ul to ▁( >= 18 ▁anni ) ", ▁cliente , ▁true ); ▁brea k ; ▁} ▁// Cre o ▁il ▁pannello ▁in ▁alto ▁contenente ▁i ▁dati ▁del ▁cliente ▁panel 1 ▁= ▁new ▁Panel (); ▁panel 1. setLayout ( gridbag ); ▁ Utils . constrain ( panel 1, ▁etichetta , ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 1, ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo 1, ▁1, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 2, ▁0, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo 2, ▁1, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 3, ▁2, ▁2, ▁1 ▁ , 1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo 3, ▁3, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 4, ▁0, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo 4, ▁1, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 5, ▁2, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo 5, ▁3, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 6, ▁0, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo 6, ▁1, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 7, ▁2, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo 7, ▁3, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 8, ▁0, ▁ 5, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo 8, ▁1, ▁ 5, ▁ 4, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 9, ▁0, ▁ 6, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo 9, ▁1, ▁ 6, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 10, ▁2, ▁ 6, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo 10, ▁3, ▁ 6, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 11 , ▁0, ▁ 7, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo 11 , ▁1, ▁ 7, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 12, ▁2, ▁ 7, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo 12, ▁3, ▁ 7, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁// Cre o ▁il ▁pannello ▁central e ▁con ▁i ▁dati ▁del ▁soggiorno ▁panel 2 ▁= ▁new ▁Panel (); ▁panel 2. setLayout ( gridbag ); ▁ Utils . constrain ( panel 2, ▁etichetta 1, ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁label 13, ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH EAST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁testo 13, ▁1, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁label 14 , ▁2, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH EAST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁testo 14 , ▁3, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁label 15, ▁0, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁checkboxes [0], ▁0, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁checkboxes [1] , ▁0, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁checkboxes [2] , ▁0, ▁ 5, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁checkboxes [3] , ▁0, ▁ 6, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁label 16 , ▁1, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁checkboxes 1[0] , ▁1, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁checkboxes 1[1] , ▁1, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁checkboxes 1[2] , ▁1, ▁ 5, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁checkboxes 1[3] , ▁1, ▁ 6, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁// Cre o ▁il ▁pannello ▁in ▁basso ▁con ▁due ▁pulsanti ▁panel 3 ▁= ▁new ▁Panel (); ▁panel 3. setLayout ( gridbag ); ▁ Utils . constrain ( panel 3, ▁Annulla , ▁0, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . EAST , ▁0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 3, ▁Conferma , ▁1, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁// Attac co ▁i ▁pannelli ▁al ▁frame ▁this . setLayout ( gridbag ); ▁ Utils . constrain ( this , ▁panel 1, ▁0, ▁0, ▁ 4, ▁ 8, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . NORTH , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , panel 2, ▁0, ▁ 8, ▁ 4, ▁ 7, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . CENTER , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , panel 3,0, ▁ 15, ▁ 4, ▁1, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . SOUTH , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁} ▁p ublic ▁void ▁init () ▁{ ▁Annulla . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁dispose (); ▁padre . setEnabled ( true ); ▁} ▁} ); ▁} ▁p ublic ▁Soggiornante ▁readDati Sogg ( Prenotazione ▁pren , ▁int ▁cont ) ▁{ ▁Frame ▁msg ; ▁String ▁data _ inizio , data _ fine ; ▁Date ▁data 1, ▁data 2; ▁Soggiornante ▁sogg ▁= ▁new ▁Soggiornante (); ▁sogg . setNumStanz a ( pren . getNumStanz a ()); ▁sogg . setCognome ( testo 2. getText ()); ▁sogg . setNome ( testo 3. getText ()); ▁sogg . setL uogoNasc ( testo 4. getText ()); ▁sogg . setData Nasc ( DateUtils . convert Date ( testo 5. getText ())); ▁sogg . setNum Doc ( testo 6. getText ()); ▁sogg . setNum Tel ( testo 7. getText ()); ▁sogg . setIndirizzo ( testo 8. getText ()); ▁sogg . setCap ( testo 9. getText ()); ▁sogg . setComune ( testo 10. getText ()); ▁sogg . setCitta ( testo 11. getText ()); ▁sogg . set Nazione ( testo 12. getText ()); ▁sogg . setInizio Sogg ( pren . getInizio Sogg ()); ▁sogg . setFine Sogg ( pren . getFine Sogg ()); ▁sogg . setId Prenotazione ( pren . getId Prenotazione ()); ▁sogg . setId Soggiornante ( con t ); ▁if ▁( checkboxes [0]. getStat e () ▁== ▁true ) ▁sogg . setP ensionamento ( Flag . SOL O _ PERNOTTAMENTO ); ▁else ▁if ▁( checkboxes [1]. getStat e () ▁== ▁true ) ▁sogg . setP ensionamento ( Flag . SOL O _ COLAZIONE ); ▁else ▁if ▁( checkboxes [2]. getStat e () ▁== ▁true ) ▁sogg . setP ensionamento ( Flag . ME ZZA _ PENSIONE ); ▁else ▁if ▁( checkboxes [3]. getStat e () ▁== ▁true ) ▁sogg . setP ensionamento ( Flag . PENSIONE _ COMPLETA ); ▁if ▁( checkboxes 1[0] . getStat e () ▁== ▁true ) ▁sogg . s etStatus ( Flag . NEONATO ); ▁else ▁if ▁( checkboxes 1[1] . getStat e () ▁== ▁true ) ▁sogg . s etStatus ( Flag . BAMBINO ); ▁else ▁if ▁( checkboxes 1[2] . getStat e () ▁== ▁true ) ▁sogg . s etStatus ( Flag . RAGAZZO ); ▁else ▁sogg . s etStatus ( Flag . ADULTO ); ▁return ▁sogg ; ▁} ▁p ublic ▁void ▁writeDati Sogg ( Soggiornante ▁sogg ) ▁{ ▁testo 1. setText ( sogg . getNumStanz a ()); ▁testo 2. setText ( sogg . getCognome ()); ▁testo 3. setText ( sogg . getNome ()); ▁testo 4. setText ( sogg . get L uogoNasc ()); ▁testo 5. setText ( DateUtils . parse Date ( DateUtils . give String Of Date ( sogg . getDataNasc ())) ); ▁testo 6. setText ( sogg . getNum Doc ()); ▁testo 7. setText ( sogg . getNum Tel ()); ▁testo 8. setText ( sogg . getIndirizzo ()); ▁testo 9. setText ( sogg . getCap ()); ▁testo 10. setText ( sogg . getComune ()); ▁testo 11. setText ( sogg . getCitta ()); ▁testo 12. setText ( sogg . get Nazione ()); ▁testo 13. setText ( DateUtils . parse Date ( DateUtils . give String Of Date ( sogg . getInizio Sogg ())) ); ▁testo 14. setText ( DateUtils . parse Date ( DateUtils . give String Of Date ( sogg . getFine Sogg ())) ); ▁} ▁void ▁change Title ( int ▁ parz , ▁int ▁tot ) ▁{ ▁this . setTitle (" Inserimento ▁dei ▁dati ▁del ▁soggiornante ▁( "+ parz +"/"+ tot +" ) "); ▁} ▁void ▁c lean Fields () ▁{ ▁testo 2. setText (" "); ▁testo 3. setText (" "); ▁testo 4. setText (" "); ▁testo 5. setText (" "); ▁testo 6. setText (" "); ▁testo 7. setText (" "); ▁testo 8. setText (" "); ▁testo 9. setText (" "); ▁testo 10. setText (" "); ▁testo 11. setText (" "); ▁testo 12. setText (" "); ▁} ▁void ▁aggiorna Disp ( Soggiornante ▁sogg , ▁char ▁tipo ) ▁{ ▁Disponibilita ▁disp _ da _ cambiare ▁= ▁new ▁Disponibilita (); ▁Lista Disponibilita ▁elenco _ disp ▁= ▁( Principale . db ) . elenco Disponibilita (); ▁if ▁( elenco _ disp ▁== ▁null ) ▁{ ▁Frame ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁P roblemi ▁con ▁il ▁database ▁nella ▁lettura ▁delle ▁disponibilita '! ▁"); ▁return ; ▁} ▁disp _ da _ cambiare ▁= ▁ Utils . get DispOf Room ( elenco _ disp , ▁sogg . getNumStanz a (), ▁true ); ▁disp _ da _ cambiare . set Disponibilita ( sogg . getInizio Sogg (), ▁sogg . getFine Sogg (), ▁tipo , ▁ Flag . ASSEGNATA ) ▁ ; ▁( Principale . db ) . change Disponibilita ( ▁disp _ da _ cambiare . getNumStanz a (), ▁disp _ da _ cambiare . getDispAnno Corr (), ▁disp _ da _ cambiare . getDispAnno Pro x () ▁ ); ▁} ▁boolean ▁errori () ▁{ ▁Frame ▁msg ; ▁String ▁data _ nasc ▁= ▁new ▁String (); ▁// Controllo ▁data ▁di ▁nascita ▁if ▁( ▁( testo 5. getText () . equals ("")) ▁) ▁{ ▁msg ▁= ▁new ▁Avviso Dialog ( this ," ▁Inseri re ▁la ▁data ▁di ▁nascita ! ▁"); ▁return ▁true ; ▁} ▁else ▁data _ nasc ▁= ▁ DateUtils . parse Date ( testo 5. getText ()); ▁if ▁( ▁data _ nasc . equals ( Errore . D ATA _ N ON _ C OR RE TTA )) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁Data ▁ Nascita ▁Err ata ! ▁"); ▁return ▁true ; ▁} ▁else ▁{ ▁if ▁( ▁!( ▁ DateUtils . is Data Right ( data _ nasc )) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," Data ▁ Nascita ▁In sen s ata "); ▁return ▁true ; ▁} ▁} ▁if ▁( ▁!(( testo 2. getText ()). length () ▁<= ▁20) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁cognome ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁20 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( testo 3. getText ()). length () ▁<= ▁20) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁nome ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁20 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( testo 4. getText ()). length () ▁<= ▁32) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁luogo ▁di ▁nascita ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁32 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( testo 6. getText ()). length () ▁<= ▁16) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁documento ▁di ▁identi ta ' ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁16 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( testo 7. getText ()). length () ▁<= ▁16) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁numero ▁telefonico ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁16 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( testo 8. getText ()). length () ▁<= ▁32) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁L ' indirizzo ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁32 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( testo 9. getText ()). length () ▁<= ▁5) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁C . A . P . ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁5 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( testo 10. getText ()). length () ▁<= ▁32) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁comune ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁32 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( testo 11. getText ()). length () ▁<= ▁20) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁La ▁citta ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁20 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!(( testo 12. getText ()). length () ▁<= ▁20) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁La ▁nazione ▁deve ▁essere ▁compos to ▁da ▁al ▁piu ' ▁20 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁}