▁p ackage ▁interfacce ; ▁import ▁java . awt .* ; ▁import ▁java . awt . event .* ; ▁import ▁common . utility .* ; ▁import ▁common . def .* ; ▁import ▁java . util . Date ; ▁import ▁modul i .* ; ▁p ublic ▁class ▁Maschera Prenotazione ▁ext ends ▁Frame ▁{ ▁// Dichiar azioni ▁di ▁variabili ▁Panel ▁panel 1, ▁panel 2, ▁panel 3; ▁Label ▁etichetta 1, ▁label 1, ▁label 2, ▁label 3, ▁label 4, ▁label 5, ▁label 6, ▁label 7, ▁label 8, ▁label 9, ▁label 10, ▁label 11 , ▁label 12, ▁label 13; ▁List ▁lista ; ▁p ublic ▁Button ▁Annulla , ▁Azione , ▁Assegna , ▁Cancella ; ▁TextField ▁testo []; ▁Choice ▁mychoice ; ▁Checkbox [] ▁checkboxes ; ▁Checkbox ▁myCheckbox , ▁myCheckbox 1; ▁CheckboxGroup ▁pensione ; ▁GridBagLayout ▁gridbag ▁= ▁new ▁GridBagLayout (); ▁Frame ▁padre ▁= ▁new ▁Frame (); ▁L istaPrenotazioni ▁L ; ▁Stanza ▁stanza ; ▁int ▁caller ; ▁p ublic ▁Maschera Prenotazione ( Stanza ▁s , ▁String ▁data _ i , ▁String ▁data _ f , ▁String ▁title , ▁String ▁caption , ▁int ▁c , ▁char ▁pens ) ▁{ ▁super ( title ); ▁caller ▁= ▁c ; ▁stanza ▁= ▁s ; ▁setupPanel s ( data _ i , ▁data _ f , ▁caption , ▁pens ); ▁inizializza (); ▁pack (); ▁} ▁void ▁setupPanel s ( String ▁data _ i , ▁String ▁data _ f , ▁String ▁caption , ▁char ▁pens ) ▁{ ▁this . setFont ( Configurazione Sistema . font _ base ); ▁// Cre o ▁dei ▁pulsanti ▁e ▁ne ▁disabilit o ▁due ▁Annulla ▁= ▁new ▁Button (" ▁Fine ▁"); ▁Azione ▁= ▁new ▁Button ( caption ); ▁Assegna ▁= ▁new ▁Button (" ▁Assegna ▁Stanza ▁"); ▁Cancella ▁= ▁new ▁Button (" ▁Cancella ▁prenotazione ▁"); ▁// Cre o ▁le ▁etichette ▁etichetta 1 ▁= ▁new ▁Label ▁ (" Inserimento ▁dei ▁dati ▁della ▁prenotazione : "); ▁etichetta 1. setFont ( Configurazione Sistema . font _ titolo ); ▁label 1 ▁= ▁new ▁Label (" Numero ▁stanza "); ▁label 2 ▁= ▁new ▁Label (" Cognome "); ▁label 3 ▁= ▁new ▁Label (" Nome "); ▁label 4 ▁= ▁new ▁Label (" Numero ▁telefonico "); ▁label 5 ▁= ▁new ▁Label (" Numero ▁persone "); ▁label 6 ▁= ▁new ▁Label (" Data ▁inizio "); ▁label 7 ▁= ▁new ▁Label (" Data ▁fine "); ▁label 8 ▁= ▁new ▁Label (" Caparra ▁ vers ata ▁"+( Principale . config ) . get Valuta ()+"." ); ▁label 9 ▁= ▁new ▁Label (" Richieste ▁p articolari "); ▁label 11 ▁= ▁new ▁Label (" Nome ▁ Agenzia "); ▁label 10 ▁= ▁new ▁Label (" Tipo ▁di ▁pensionamento : "); ▁label 10. setFont ( Configurazione Sistema . font _ titolo ); ▁label 12 ▁= ▁new ▁Label (" Risultat o ▁della ▁ricerca "); ▁label 12. setFont ( Configurazione Sistema . font _ titolo ); ▁label 13 ▁= ▁new ▁Label (" Data ▁di ▁prenotazione "); ▁// Cre o ▁i ▁TextField ▁e ▁ne ▁ rendo ▁alcuni ▁non ▁edit abili ▁testo = new ▁TextField [11] ; ▁testo [0] ▁= ▁new ▁TextField ("", ▁4 ); ▁testo [1] ▁= ▁new ▁TextField ("", ▁20 ); ▁testo [2] ▁= ▁new ▁TextField ("", ▁20 ); ▁testo [3] ▁= ▁new ▁TextField ("", ▁10 ); ▁testo [4] ▁= ▁new ▁TextField ("", ▁12) ; ▁testo [5] ▁= ▁new ▁TextField ("", ▁12) ; ▁testo [6] ▁= ▁new ▁TextField ("", ▁10 ); ▁testo [7] ▁= ▁new ▁TextField ("", ▁20 ); ▁testo [8] ▁= ▁new ▁TextField ("", ▁20 ); ▁testo [8]. setEditable ( false ); ▁testo [9] ▁= ▁new ▁TextField ("", ▁12) ; ▁testo [9]. setEditable ( false ); ▁testo [10] ▁= ▁new ▁TextField ("",3 ); ▁// Cre o ▁un ▁Checkbox ▁ad ▁esclus ione ▁pensione ▁= ▁new ▁CheckboxGroup (); ▁checkboxes ▁= ▁new ▁Checkbox [4] ; ▁checkboxes [0] ▁= ▁new ▁Checkbox (" ▁S olo ▁pernottamento ", ▁pensione , ▁false ); ▁checkboxes [1] ▁= ▁new ▁Checkbox (" ▁ Prima ▁ colazione ", ▁pensione , ▁false ); ▁checkboxes [2] ▁= ▁new ▁Checkbox (" ▁ Mezza ▁pensione ", ▁pensione , ▁false ); ▁checkboxes [3] ▁= ▁new ▁Checkbox (" ▁P ensione ▁ completa ", ▁pensione , ▁false ); ▁s witch ▁( pens ) ▁{ ▁case ▁ Flag . SOL O _ PERNOTTAMENTO : ▁checkboxes [0] ▁= ▁new ▁Checkbox (" ▁S olo ▁pernottamento ", ▁pensione , ▁true ); ▁brea k ; ▁case ▁ Flag . SOL O _ COLAZIONE : ▁checkboxes [1] ▁= ▁new ▁Checkbox (" ▁ Prima ▁ colazione ", ▁pensione , ▁true ); ▁brea k ; ▁case ▁ Flag . ME ZZA _ PENSIONE : ▁checkboxes [2] ▁= ▁new ▁Checkbox (" ▁ Mezza ▁pensione ", ▁pensione , ▁true ); ▁brea k ; ▁case ▁ Flag . PENSIONE _ COMPLETA : ▁checkboxes [3] ▁= ▁new ▁Checkbox (" ▁P ensione ▁ completa ", ▁pensione , ▁true ); ▁brea k ; ▁} ▁// Cre o ▁due ▁Checkbox ▁a ▁se ' ▁ stanti ▁myCheckbox ▁= ▁new ▁Checkbox (" ▁ Letto ▁aggiuntivo ", ▁null , ▁false ); ▁if ▁( stanza ▁ != ▁null ) ▁if ▁( stanza . getDisp Letto Agg () ▁== ▁Const . NO ) ▁myCheckbox . setEnabled ( false ); ▁myCheckbox 1 ▁= ▁new ▁Checkbox (" ▁Prenotazione ▁ tramite ▁agenzia ", ▁null , ▁false ); ▁myCheckbox 1. setEnabled ( false ); ▁// Cre o ▁un ▁Choice ▁if ▁( caller ▁== ▁1) ▁{ ▁mychoice ▁= ▁new ▁Choice (); ▁if ▁( stanza ▁ != ▁null ) ▁for ▁( int ▁i =1; ▁i <= ▁stanza . get Posti Letto (); ▁i ++) ▁mychoice . addItem (""+ i ); ▁else ▁mychoice . addItem (" 1 "); ▁} ▁// Cre o ▁il ▁pannello ▁in ▁alto ▁per ▁inserimento ▁dei ▁dati ▁del ▁cliente ▁panel 1 ▁= ▁new ▁Panel (); ▁panel 1. setLayout ( gridbag ); ▁ Utils . constrain ( panel 1, ▁etichetta 1, ▁0, ▁0, ▁ 4, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 1, ▁label 1, ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo [0], ▁1, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁0. 5, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 13, ▁2, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo [9] , ▁3, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁0. 5, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 2, ▁0, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo [1] , ▁1, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁0. 5, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 3, ▁2, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo [2] , ▁3, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 4, ▁0, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo [3] , ▁1, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 5, ▁2, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁if ▁( caller ▁== ▁1) ▁ Utils . constrain ( panel 1, ▁mychoice , ▁3, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁else ▁ Utils . constrain ( panel 1, ▁testo [10] , ▁3, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 6, ▁0, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo [4] , ▁1, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 7, ▁2, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo [5] , ▁3, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 8, ▁0, ▁ 5, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo [6] , ▁1, ▁ 5, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 9, ▁0, ▁ 6, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo [7] , ▁1, ▁ 6, ▁ 4, ▁1, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁myCheckbox , ▁0, ▁ 7, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁myCheckbox 1, ▁1, ▁ 7, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 11 , ▁2, ▁ 7, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁testo [8] , ▁3, ▁ 7, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 10, ▁0, ▁ 8, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁checkboxes [0], ▁0, ▁ 9, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁checkboxes [1] , ▁0, ▁ 10, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁checkboxes [2] , ▁0, ▁1 1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁checkboxes [3] , ▁0, ▁12, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁// Cre o ▁il ▁pannello ▁in ▁basso ▁con ▁due ▁pulsanti ▁panel 2 ▁= ▁new ▁Panel (); ▁panel 2. setLayout ( gridbag ); ▁ Utils . constrain ( panel 2, ▁Annulla , ▁0, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁Azione , ▁1, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁if ▁( caller ▁== ▁2 ▁) ▁ Utils . constrain ( panel 2, ▁Assegna , ▁2, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁if ▁( caller ▁== ▁5 ▁) ▁ Utils . constrain ( panel 2, ▁Cancella , ▁2, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁// Cre o ▁il ▁pannello ▁con ▁la ▁lista ▁dei ▁risultati ▁della ▁ricerca ▁lista ▁= ▁new ▁List ( 7, false ); ▁lista . setFont ( Configurazione Sistema . font _ allineato ); ▁panel 3 ▁= ▁new ▁Panel (); ▁panel 3. setLayout ( gridbag ); ▁ Utils . constrain ( panel 3, ▁label 12, ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 3, ▁lista , ▁0, ▁1, ▁ 4, ▁3, ▁Grid BagConstraints . BOTH , ▁Grid BagConstraints . CENTER , ▁3. 0, ▁3. 0, ▁0, ▁0, ▁0, ▁0) ; ▁// Attac co ▁i ▁pannelli ▁al ▁frame ▁this . setLayout ( gridbag ); ▁ Utils . constrain ( this , ▁panel 1, ▁0, ▁1, ▁ 4, ▁ 13, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , ▁panel 2, ▁0, ▁14 , ▁ 4, ▁1, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , ▁panel 3, ▁0, ▁ 15, ▁ 4, ▁1, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁panel 3. setVisible ( false ); ▁pack (); ▁} ▁p ublic ▁void ▁inizializza () ▁{ ▁Annulla . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁dispose (); ▁padre . setEnabled ( true ); ▁} ▁} ); ▁} ▁p ublic ▁Prenotazione ▁readDati Pren () ▁{ ▁Prenotazione ▁pren ▁= ▁new ▁Prenotazione (); ▁pren . setNumStanz a ( testo [0]. getText ()); ▁pren . setCognome ( testo [1]. getText ()); ▁pren . setNome ( testo [2]. getText ()); ▁pren . setNum Tel ( testo [3]. getText ()); ▁if ▁( caller ▁== ▁1) ▁pren . setNum Pers ( Integer . parse Int ( mychoice . getSelectedItem ())); ▁// Conversion e ▁String ▁- > ▁Int ▁else ▁pren . setNum Pers ( Integer . parse Int ( testo [10]. getText ())); ▁pren . setInizio Sogg ( DateUtils . convert Date ( testo [4]. getText ())); ▁pren . setFine Sogg ( DateUtils . convert Date ( testo [5]. getText ())); ▁if ▁( ▁( testo [6]. getText () . equals ("")) ▁) ▁pren . set Caparra (0) ; ▁else ▁pren . set Caparra ( ( Float . valueOf ( testo [6]. getText ())) . float Value ()); ▁// ▁Conversion e ▁String ▁- > ▁Float ▁pren . setRich P articolari ( testo [7]. getText ()); ▁if ▁( myCheckbox . getStat e () ▁== ▁true ) ▁pren . setRich Letto Agg ( Const . SI ); ▁if ▁( myCheckbox 1. getStat e () ▁== ▁true ) ▁{ ▁pren . setT ramite Agenzia ( Const . SI ); ▁pren . setNome Agenzia ( testo [8]. getText ()); ▁} ▁if ▁( checkboxes [0]. getStat e () ▁== ▁true ) ▁pren . setP ensionamento ( Flag . SOL O _ PERNOTTAMENTO ); ▁else ▁if ▁( checkboxes [1]. getStat e () ▁== ▁true ) ▁pren . setP ensionamento ( Flag . SOL O _ COLAZIONE ); ▁else ▁if ▁( checkboxes [2]. getStat e () ▁== ▁true ) ▁pren . setP ensionamento ( Flag . ME ZZA _ PENSIONE ); ▁else ▁pren . setP ensionamento ( Flag . PENSIONE _ COMPLETA ); ▁pren . setId Prenotazione ( Principale . config . getId Prenotazione ()); ▁return ▁pren ; ▁} ▁p ublic ▁void ▁writeDati Pren ( Prenotazione ▁pren ) ▁{ ▁myCheckbox . set State ( false ); ▁myCheckbox 1. set State ( false ); ▁testo [8]. setText (" "); ▁testo [0]. setText ( pren . getNumStanz a ()); ▁testo [1]. setText ( pren . getCognome ()); ▁testo [2]. setText ( pren . getNome ()); ▁testo [3]. setText ( pren . getNum Tel ()); ▁testo [4]. setText ( DateUtils . give String Of Date ( pren . getInizio Sogg ())); ▁testo [5]. setText ( DateUtils . give String Of Date ( pren . getFine Sogg ())); ▁testo [6]. setText (""+ pren . get Caparra ()); ▁testo [7]. setText ( pren . getRich P articolari ()); ▁testo [8]. setText ( pren . getNome Agenzia ()); ▁testo [9]. setText ( DateUtils . give String Of Date ( pren . getData Pren ())); ▁if ▁( caller ▁ != ▁1) ▁{ ▁testo [10]. setText (""+ pren . getNum Pers ()); ▁} ▁if ▁( pren . getT ramite Agenzia () ▁== ▁Const . SI ) ▁{ ▁myCheckbox 1. set State ( true ); ▁testo [8]. setText ( pren . getNome Agenzia ()); ▁} ▁} ▁p rot ected ▁boolean ▁errori () ▁{ ▁boolean ▁numeri _ corretti ; ▁Frame ▁msg ; ▁if ▁( caller ▁ != ▁1) ▁{ ▁if ▁( Utils . is Int Pos ( testo [10]. getText ())) ▁{ ▁int ▁num ▁= ▁Integer . parse Int ( testo [10]. getText ()); ▁if ▁( ▁( num ▁ > ▁stanza . get Posti Letto ()) ▁|| ▁( num ▁<= ▁0) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁La ▁stanza ▁non ▁pu o ' ▁con tenere ▁"+ num +" ▁persone ! ▁"); ▁return ▁true ; ▁} ▁} ▁else ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁Inseri re ▁corretta mente ▁il ▁numero ▁di ▁persone ▁"); ▁return ▁true ; ▁} ▁} ▁if ▁(!(( testo [0]. getText ()). length () ▁<= ▁4)) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁Il ▁numero ▁di ▁stanza ▁deve ▁aver e ▁al ▁piu ' ▁4 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁(!(( testo [1]. getText ()). length () ▁<= ▁20)) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁Il ▁cognome ▁deve ▁aver e ▁al ▁piu ' ▁20 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁(!(( testo [2]. getText ()). length () ▁<= ▁20)) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁Il ▁nome ▁deve ▁aver e ▁al ▁piu ' ▁20 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁(!(( testo [3]. getText ()). length () ▁<= ▁16) ) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁Il ▁numero ▁di ▁telefono ▁deve ▁aver e ▁al ▁piu ' ▁16 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ( testo [1]. getText ()). equals ("")) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁Man ca ▁il ▁cognome ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ( testo [2]. getText ()). equals ("")) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁Man ca ▁il ▁nome ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ( testo [3]. getText ()). equals ("")) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁Man ca ▁il ▁numero ▁di ▁telefono ! ▁"); ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁p ublic ▁void ▁c lean Fields () ▁{ ▁testo [0]. setText (" "); ▁testo [1]. setText (" "); ▁testo [2]. setText (" "); ▁testo [3]. setText (" "); ▁testo [4]. setText (" "); ▁testo [5]. setText (" "); ▁testo [6]. setText (" "); ▁testo [7]. setText (" "); ▁testo [8]. setText (" "); ▁} ▁void ▁crea Lista () ▁{ ▁Frame ▁msg ; ▁Prenotazione ▁p ; ▁L ▁= ▁( Principale . db ) . found Prenotazioni ( testo [1]. getText (), testo [2]. getText ()); ▁if ▁( L ▁ != ▁null ) ▁{ ▁if ▁(! L . isEmpty ()) ▁{ ▁if ▁( lista . getItemCount () ▁ > ▁0) ▁lista . removeAll (); ▁panel 3. setVisible ( true ); ▁pack (); ▁for ( int ▁i ▁= ▁1; ▁i <= L . length (); ▁i ++) ▁lista . addItem ( L . get Prenotazione ( i ) . toString ()); ▁} ▁else ▁msg ▁= ▁new ▁Avviso Dialog ( this , ▁" Prenotazione ▁non ▁trovata !" ); ▁} ▁else ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" P roblemi ▁con ▁il ▁DataBase "); ▁} ▁void ▁aggiorna Disp ( Prenotazione ▁pren , ▁char ▁tipo ) ▁{ ▁Disponibilita ▁disp _ da _ cambiare ▁= ▁new ▁Disponibilita (); ▁Lista Disponibilita ▁elenco _ disp ▁= ▁( Principale . db ) . elenco Disponibilita (); ▁if ▁( elenco _ disp ▁== ▁null ) ▁{ ▁Frame ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁P roblemi ▁con ▁il ▁database ▁nella ▁lettura ▁delle ▁disponibilita '! ▁"); ▁return ; ▁} ▁disp _ da _ cambiare ▁= ▁ Utils . get DispOf Room ( elenco _ disp , ▁pren . getNumStanz a (), true ); ▁if ▁( tipo ▁== ▁ Flag . DISPONIBILE ) ▁// cancellazione ▁della ▁prenotazione ▁{ ▁disp _ da _ cambiare . set Disponibilita ( pren . getInizio Sogg (), ▁pren . getFine Sogg (), ▁tipo , ▁ Flag . ASSEGNATA ); ▁disp _ da _ cambiare . set Disponibilita ( pren . getInizio Sogg (), ▁pren . getFine Sogg (), ▁tipo , ▁ Flag . BLOCCATA ); ▁} ▁else ▁{ ▁disp _ da _ cambiare . set Disponibilita ( pren . getInizio Sogg (), ▁pren . getFine Sogg (), ▁tipo , ▁ Flag . DISPONIBILE ); ▁disp _ da _ cambiare . set Disponibilita ( pren . getInizio Sogg (), ▁pren . getFine Sogg (), ▁tipo , ▁ Flag . COMMISSIONATA ); ▁} ▁( Principale . db ) . change Disponibilita ( ▁disp _ da _ cambiare . getNumStanz a (), ▁disp _ da _ cambiare . getDispAnno Corr (), ▁disp _ da _ cambiare . getDispAnno Pro x () ▁ ); ▁} ▁}