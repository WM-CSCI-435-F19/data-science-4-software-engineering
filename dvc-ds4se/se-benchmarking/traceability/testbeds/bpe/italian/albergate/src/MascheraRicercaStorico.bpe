▁p ackage ▁interfacce ; ▁import ▁java . awt .* ; ▁import ▁java . awt . event .* ; ▁import ▁common . utility .* ; ▁import ▁common . def .* ; ▁import ▁modul i . ListaClienti ; ▁import ▁modul i . Cliente ; ▁p ublic ▁class ▁Maschera RicercaStorico ▁ext ends ▁Frame ▁{ ▁Button ▁Annulla , ▁Conferma ; ▁TextField ▁testo []; ▁Label ▁etichetta 1, ▁etichetta 2, ▁etichetta 3, ▁etichetta 4, ▁etichetta 5, ▁label 1, ▁label 2, ▁label 3, ▁label 5; ▁Panel ▁panel []; ▁CheckboxGroup ▁checkbox _ group ; ▁Checkbox [] ▁checkboxes ; ▁GridBagLayout ▁gridbag ▁= new ▁GridBagLayout (); ▁List ▁list _ clienti ; ▁Frame ▁padre ; ▁VediCliente ▁figlio ; ▁ Cliente ▁cliente ; ▁// ▁la ▁seguente ▁variabil e ▁serve ▁per ▁tenere ▁in ▁memoria ▁la ▁lista ▁dei ▁clienti ▁// ▁cercat i ▁nell o ▁storico ▁ListaClienti ▁elenco _ clienti ; ▁p ublic ▁Maschera RicercaStorico ( Frame ▁parent ) ▁{ ▁super (" Ricerca ▁nell o ▁storico "); ▁padre ▁= ▁parent ; ▁padre . setEnabled ( false ); ▁setupPanel s (); ▁pack (); ▁init (); ▁this . setVisible ( true ); ▁} ▁void ▁setupPanel s () ▁{ ▁this . setFont ( Configurazione Sistema . font _ base ); ▁// Cre o ▁i ▁pulsanti ▁Annulla ▁= ▁new ▁Button (" Annulla ▁"); ▁// Annulla . setFont ( new ▁Font (" Cour ier ", ▁Font . PL A IN , ▁12) ); ▁Conferma ▁= ▁new ▁Button (" Conferma "); ▁Conferma . setEnabled ( false ); ▁// Conferma . setFont ( new ▁Font (" Cour ier ", ▁Font . PL A IN , ▁12) ); ▁// Cre o ▁le ▁etichette ▁etichetta 1 ▁= ▁new ▁Label (" Selezionare ▁il ▁tipo ▁di ▁ricerca ▁che ▁si ▁desidera ▁effettuare : "); ▁etichetta 1. setFont ( Configurazione Sistema . font _ titolo ); ▁etichetta 2 ▁= ▁new ▁Label (" Risultat o ▁della ▁ricerca : "); ▁etichetta 2. setFont ( Configurazione Sistema . font _ titolo ); ▁etichetta 3 ▁= ▁new ▁Label (" Ricerca ▁per ▁stanza : "); ▁etichetta 3. setFont ( Configurazione Sistema . font _ titolo ); ▁etichetta 4 ▁= ▁new ▁Label (" Ricerca ▁per ▁nome : "); ▁etichetta 4. setFont ( Configurazione Sistema . font _ titolo ); ▁etichetta 5 ▁= ▁new ▁Label (" Ricerca ▁per ▁data : "); ▁etichetta 5. setFont ( Configurazione Sistema . font _ titolo ); ▁label 1 ▁= ▁new ▁Label (" Stanza ▁numero "); ▁label 2 ▁= ▁new ▁Label (" Cognome "); ▁label 3 ▁= ▁new ▁Label (" Nome "); ▁label 5 ▁= ▁new ▁Label (" Data ▁di ▁soggiorno ▁desiderata "); ▁// Cre o ▁un ▁Checkbox ▁ad ▁esclus ione ▁checkbox _ group ▁= ▁new ▁CheckboxGroup (); ▁checkboxes ▁= ▁new ▁Checkbox [3] ; ▁checkboxes [0] ▁= ▁new ▁Checkbox (" Ricerca ▁per ▁stanza ", checkbox _ group , false ); ▁checkboxes [1] ▁= ▁new ▁Checkbox (" Ricerca ▁per ▁nome ", checkbox _ group , false ); ▁checkboxes [2] ▁= ▁new ▁Checkbox (" Ricerca ▁per ▁data ", checkbox _ group , false ); ▁// Cre o ▁i ▁TextField ▁e ▁li ▁ rendo ▁non ▁edit abili ▁testo ▁= ▁new ▁TextField [4] ; ▁testo [0] ▁= ▁new ▁TextField ("", ▁6 ); ▁testo [1] ▁= ▁new ▁TextField ("", ▁2 5); ▁testo [2] ▁= ▁new ▁TextField ("", ▁2 5); ▁testo [3] ▁= ▁new ▁TextField ("", ▁12) ; ▁for ( int ▁i =0; i < testo . length ; ++ i ) ▁testo [ i ]. setEditable ( false ); ▁// cre o ▁una ▁TextArea ▁list _ clienti ▁= ▁new ▁List (10, ▁false ); ▁panel = new ▁Panel [6] ; ▁for ( int ▁i =0; i < 6; ++ i ) ▁{ ▁panel [ i ]= new ▁Panel (); ▁panel [ i ]. setLayout ( gridbag ); ▁} ▁// Cre o ▁il ▁pannello ▁in ▁alto ▁a ▁s inistra ▁ Utils . constrain ( panel [1] , ▁etichetta 1, ▁0, ▁0, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁ 10, ▁0) ; ▁ Utils . constrain ( panel [1] , ▁checkboxes [0], ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁0) ; ▁ Utils . constrain ( panel [1] , ▁checkboxes [1] , ▁0, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁0) ; ▁ Utils . constrain ( panel [1] , ▁checkboxes [2] , ▁0, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁0) ; ▁// Cre o ▁il ▁pannello ▁ricerca ▁per ▁stanza ▁ Utils . constrain ( panel [2] , ▁etichetta 3, ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁ 10, ▁0) ; ▁ Utils . constrain ( panel [2] , ▁label 1, ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁20 ); ▁ Utils . constrain ( panel [2] , ▁testo [0], ▁1, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁// Cre o ▁il ▁pannello ▁ricerca ▁per ▁nome ▁e ▁cognome ▁ Utils . constrain ( panel [3] , ▁etichetta 4, ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁ 10, ▁0) ; ▁ Utils . constrain ( panel [3] , ▁label 2, ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁20 ); ▁ Utils . constrain ( panel [3] , ▁testo [1] , ▁1, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel [3] , ▁label 3, ▁0, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . SOUTH WEST , ▁ 0.0, ▁ 0.0, ▁20 , ▁ 5, ▁0, ▁20 ); ▁ Utils . constrain ( panel [3] , ▁testo [2] , ▁1, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . SOUTH WEST , ▁1.0, ▁ 0.0, ▁20 , ▁0, ▁0, ▁0) ; ▁// Cre o ▁il ▁p a nn nello ▁ricerca ▁per ▁data ▁ Utils . constrain ( panel [4] , ▁etichetta 5, ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁ 10, ▁0) ; ▁ Utils . constrain ( panel [4] , ▁label 5, ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁20 ); ▁ Utils . constrain ( panel [4] , ▁testo [3] , ▁1, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁ 5); ▁// Cre o ▁il ▁pannello ▁dei ▁pulsanti ▁ Utils . constrain ( panel [0], ▁Annulla , ▁1, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . EAST , ▁0.3 , ▁ 0.0, ▁ 10, ▁0, ▁ 10, ▁ 5); ▁ Utils . constrain ( panel [0], ▁Conferma , ▁3, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁0.3 , ▁ 0.0, ▁ 10, ▁ 5, ▁ 10, ▁0) ; ▁// Cre o ▁il ▁pannello ▁contenente ▁la ▁list _ clienti ▁ Utils . constrain ( panel [5] , ▁etichetta 2, ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁ 10, ▁0) ; ▁ Utils . constrain ( panel [5] , ▁list _ clienti , ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . BOTH , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁1.0, ▁0, ▁ 5, ▁0, ▁20 ); ▁// Attac co ▁i ▁pannelli ▁al ▁frame ▁this . setLayout ( gridbag ); ▁ Utils . constrain ( this , ▁panel [1] , ▁0, ▁0, ▁ 5, ▁ 4, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , ▁panel [2] , ▁0, ▁ 4, ▁ 5, ▁2, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . WEST , ▁1.0, ▁1.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , ▁panel [3] , ▁0, ▁ 6, ▁ 5, ▁3, Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . WEST , ▁1.0, ▁1.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , panel [4] , ▁0, ▁ 9, ▁ 5, ▁2, Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . WEST , ▁1.0, ▁1.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , ▁panel [0], ▁0, ▁1 1, ▁ 5, ▁1, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . SOUTH EAST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , ▁panel [5] , ▁0, ▁12, ▁ 5, ▁ 7, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . WEST , ▁1.0, ▁1.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁} ▁p ublic ▁void ▁init () ▁{ ▁checkboxes [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( checkboxes [0]. getStat e ()) ▁{ ▁if ▁( list _ clienti . getItemCount () ▁ > ▁0) ▁list _ clienti . removeAll (); ▁testo [0]. setEditable ( true ); ▁for ( int ▁i =1; i < =3; ++ i ) ▁testo [ i ]. setEditable ( false ); ▁Conferma . setEnabled ( true ); ▁} ▁} ▁} ); ▁checkboxes [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( checkboxes [1]. getStat e ()) ▁{ ▁if ▁( list _ clienti . getItemCount () ▁ > ▁0) ▁list _ clienti . removeAll (); ▁for ( int ▁i =1; i <3; ++ i ) ▁testo [ i ]. setEditable ( true ); ▁testo [0]. setEditable ( false ); ▁testo [3]. setEditable ( false ); ▁Conferma . setEnabled ( true ); ▁} ▁} ▁} ); ▁checkboxes [2]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( checkboxes [2]. getStat e ()) ▁{ ▁if ▁( list _ clienti . getItemCount () ▁ > ▁0) ▁list _ clienti . removeAll (); ▁testo [3]. setEditable ( true ); ▁for ( int ▁i =0; i <3; ++ i ) ▁testo [ i ]. setEditable ( false ); ▁Conferma . setEnabled ( true ); ▁} ▁} ▁} ); ▁Conferma . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁startConferma (); ▁} ▁} ); ▁Annulla . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁dispose (); ▁padre . setEnabled ( true ); ▁} ▁} ); ▁list _ clienti . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁startVedi Cliente (); ▁} ▁} ); ▁} ▁void ▁startConferma () ▁{ ▁int ▁i ; ▁Frame ▁msg ; ▁Conferma . setEnabled ( false ); ▁if ▁(! errori ()) ▁{ ▁if ( checkboxes [0]. getStat e ()) ▁elenco _ clienti ▁= ▁( Principale . db ) . found Storico ( testo [0]. getText ()); ▁else ▁if ( checkboxes [1]. getStat e ()) ▁elenco _ clienti ▁= ▁( Principale . db ) . found Storico ( testo [1]. getText (), ▁testo [2]. getText ()); ▁else ▁if ( checkboxes [2]. getStat e ()) ▁elenco _ clienti ▁= ▁( Principale . db ) . found Storico ( DateUtils . convert Date ( testo [3]. getText ())); ▁else ▁elenco _ clienti ▁= ▁new ▁ListaClienti (); ▁if ▁( elenco _ clienti ▁ != ▁null ) ▁{ ▁if ▁( list _ clienti . getItemCount () ▁ > ▁0) ▁list _ clienti . removeAll (); ▁for ▁( i ▁= ▁1; ▁i ▁<= ▁elenco _ clienti . length (); ▁i ++) ▁list _ clienti . addItem ( ( elenco _ clienti . get Cliente ( i )). toString ()); ▁if ▁( list _ clienti . getItemCount () ▁== ▁0) ▁msg ▁= ▁new ▁Avviso Dialog ( this , ▁" Trova ta ▁nessuna ▁corrispondenza !" ); ▁} ▁else ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" P roblemi ▁con ▁il ▁database !" ); ▁} ▁else ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" Errore ▁ne i ▁parametri !" ); ▁for ▁( i ▁= ▁0; ▁i < testo . length ; ▁i ++) ▁{ ▁testo [ i ]. setText (" "); ▁testo [ i ]. setEditable ( false ); ▁} ▁for ▁( i ▁= ▁0; ▁i < checkboxes . length ; ▁i ++) ▁checkboxes [ i ]. setEnabled ( true ); ▁} ▁boolean ▁errori () ▁{ ▁if ( checkboxes [0]. getStat e ()) ▁return ▁( ▁( testo [0]. getText ()). length () ▁ > ▁4 ▁ ); ▁else ▁if ( checkboxes [1]. getStat e ()) ▁return ( ▁( testo [1]. getText ()). length () ▁ > ▁20 ▁|| ▁( testo [2]. getText ()). length () ▁ > ▁20 ▁ ); ▁else ▁if ( checkboxes [2]. getStat e ()) ▁return ( ▁! DateUtils . data Corrett a ( testo [3]. getText ()) ▁ ); ▁else ▁return ▁true ; ▁} ▁void ▁startVedi Cliente () ▁{ ▁cliente ▁= ▁elenco _ clienti . get Cliente ( ( list _ clienti . getSelectedIndex es ()) [0] +1 ); ▁figlio ▁= ▁new ▁VediCliente ( this , cliente ); ▁} ▁}