▁p ackage ▁interfacce ; ▁import ▁java . awt .* ; ▁import ▁java . io .* ; ▁import ▁java . awt . event .* ; ▁import ▁common . utility .* ; ▁import ▁common . def .* ; ▁import ▁modul i .* ; ▁import ▁java . util . Date ; ▁import ▁java . util . Properties ; ▁p ublic ▁class ▁Maschera Visualizzazione Conto ▁ext ends ▁Frame ▁{ ▁Button ▁Stampa , OK , Partenza ; ▁TextField ▁testo 1, ▁testo 2, ▁testo 3, ▁testo 4; ▁Label ▁etichetta , ▁label 1, ▁label 2, ▁label 3, ▁label 4; ▁Panel ▁panel 1, ▁panel 2, ▁panel 3; ▁GridBagLayout ▁gridbag ▁= ▁new ▁GridBagLayout (); ▁TextArea ▁text ; ▁Buffered Reader ▁inStream ; ▁int ▁chiusura ; ▁Maschera CalcoloConto ▁conto ▁= ▁new ▁Maschera CalcoloConto ( new ▁Frame ()); ▁p ublic ▁Maschera Visualizzazione Conto ( String ▁t 0, ▁String ▁t 1, ▁String ▁t 2, ▁String ▁t 3, ▁String ▁t 4, ▁int ▁tipo ) ▁{ ▁super (" Visualizzazione ▁del ▁conto "); ▁chiusura ▁= ▁tipo ; ▁setup ( t 0, t 1, t 2, t 3, t 4 ); ▁read Conto (); ▁init (); ▁pack (); ▁} ▁void ▁setup ( String ▁t 0, ▁String ▁t 1, ▁String ▁t 2, ▁String ▁t 3, ▁String ▁t 4) ▁{ ▁for ▁( int ▁i =0; ▁i < conto . testo . length -1; ▁i ++) ▁conto . testo [ i ]. setText (" "); ▁this . setFont ( Configurazione Sistema . font _ base ); ▁etichetta ▁= ▁new ▁Label (" In test azione "); ▁etichetta . setFont ( Configurazione Sistema . font _ titolo ); ▁label 1 ▁= ▁new ▁Label (" Stanza ▁numero "); ▁label 2 ▁= ▁new ▁Label (" Cognome "); ▁label 3 ▁= ▁new ▁Label (" Nome "); ▁label 4 ▁= ▁new ▁Label (" Lista ▁stanze "); ▁Stampa ▁= ▁new ▁Button (" ▁Stampa ▁"); ▁OK ▁= ▁new ▁Button (" ▁Indietro ▁"); ▁Partenza ▁= ▁new ▁Button (" ▁Chiud i ▁conto ▁"); ▁testo 1 ▁= ▁new ▁TextField ("",4 ); ▁testo 2 ▁= ▁new ▁TextField ("", 20 ); ▁testo 3 ▁= ▁new ▁TextField ("", 20 ); ▁testo 4 ▁= ▁new ▁TextField ("", 30 ); ▁testo 1. setText ( t 0 + t 3 ); ▁testo 2. setText ( t 1); ▁testo 3. setText ( t 2 ); ▁testo 4. setText ( t 4 ); ▁testo 1. setEditable ( false ); ▁testo 2. setEditable ( false ); ▁testo 3. setEditable ( false ); ▁testo 4. setEditable ( false ); ▁text ▁= ▁new ▁TextArea (25, 50 ); ▁text . setEditable ( false ); ▁text . setFont ( Configurazione Sistema . font _ allineato ); ▁panel 1 = new ▁Panel (); ▁panel 1. setLayout ( gridbag ); ▁ Utils . constrain ( panel 1, etichetta ,0,0 ,1,1, Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST ,1.0,0.0, 0, 0,5,0 ); ▁ Utils . constrain ( panel 1, label 1,0,1,1, 1, Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST ,0.0,0.0,5, 0,5,0 ); ▁ Utils . constrain ( panel 1, testo 1, 1, 1 ,1,1, Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST ,1.0,0.0, 5, 0,5,0 ); ▁ Utils . constrain ( panel 1, label 2, 0, 2 ,1,1, Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST ,0.0,0.0,5, 0,5,0 ); ▁ Utils . constrain ( panel 1, testo 2, 1, 2 ,1,1, Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST ,1.0,0.0, 5, 0,5,0 ); ▁ Utils . constrain ( panel 1, label 3, 2, 2 ,1,1, Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST ,1.0,0.0, 5, 0,5,0 ); ▁ Utils . constrain ( panel 1, testo 3,3, 2 ,1,1, Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST ,1.0,0.0, 5, 0,5,0 ); ▁ Utils . constrain ( panel 1, label 4, 0, 3 ,1,1, Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST ,1.0,0.0, 5, 0,5,0 ); ▁ Utils . constrain ( panel 1, testo 4,1, 3 ,1,1, Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST ,1.0,0.0, 5, 0,5,0 ); ▁panel 2= new ▁Panel (); ▁panel 2. setLayout ( gridbag ); ▁ Utils . constrain ( panel 2, text ,0,0,4, 4, Grid BagConstraints . BOTH , ▁Grid BagConstraints . NORTH WEST ,1.0,1.0, 5, 0,5,0 ); ▁panel 3 = new ▁Panel (); ▁panel 3. setLayout ( gridbag ); ▁ Utils . constrain ( panel 3, Stampa ,0,0 ,1,1, Grid BagConstraints . NONE , ▁Grid BagConstraints . SOUTH EAST , 0,0.0,5, 5,5,5 ); ▁ Utils . constrain ( panel 3, Partenza , 1,0,1,1, Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , 0,0.0,5, 5,5,5 ); ▁ Utils . constrain ( panel 3, OK , 2 ,0,1,1, Grid BagConstraints . NONE , ▁Grid BagConstraints . SOUTH WEST ,0.0,0.0,5, 5,5,5 ); ▁this . setLayout ( gridbag ); ▁ Utils . constrain ( this , panel 1 ,0,0,4, 3, Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . NORTH WEST ,1.0,0.0, 1 0,10,10,10 ); ▁ Utils . constrain ( this , panel 2 ,0,3, 4, 6, Grid BagConstraints . BOTH , ▁Grid BagConstraints . NORTH WEST ,1.0,1.0, 1 0,10,10,10 ); ▁ Utils . constrain ( this , panel 3,0, 9, 4,1, Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . SOUTH WEST ,1.0,0.0, 1 0,10,10,10 ); ▁} ▁p ublic ▁void ▁init () ▁{ ▁OK . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁dispose (); ▁conto . setEnabled ( true ); ▁} ▁} ); ▁Stampa . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁start Stampa (); ▁} ▁} ); ▁Partenza . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁start ChiudiConto (); ▁} ▁} ); ▁} ▁void ▁read Conto () ▁{ ▁Frame ▁msg ; ▁DataInputStream ▁inStream ; ▁try ▁{ ▁inStream ▁= ▁new ▁DataInputStream ( new ▁FileInputStream (" conto . ab g ") ); ▁} ▁ catch ▁( IOException ▁ex ) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Errore ▁nell ' a pertura ▁del ▁file ▁del ▁conto ! ▁"); ▁return ; ▁} ▁try ▁{ ▁String ▁new Text =" "; ▁String ▁line ; ▁while ( ( line = inStream . read Line ()) != null ) ▁new Text = newText + line +" \ n "; ▁text . setText ( newText ); ▁inStream . close (); ▁} ▁ catch ▁( IOException ▁ex ) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Errore ▁dura nte ▁la ▁lettura ▁del ▁file ▁del ▁conto ! ▁"); ▁} ▁} ▁void ▁start ChiudiConto () ▁{ ▁Frame ▁msg ; ▁AskChiudiConto ▁ask ; ▁Date ▁today ▁= ▁new ▁Date (); ▁Date ▁fine _ effettiva ; ▁if ▁( conto . checkboxes [3]. getStat e ()) ▁fine _ effettiva ▁= ▁conto . fine _ sogg _ anticipato ; ▁else ▁fine _ effettiva ▁= ▁conto . data _ fine _ magg ; ▁if ▁( ▁ Utils . data 1 Min oreDat a 2( ▁fine _ effettiva , ▁today ▁) ▁) ▁ask ▁= ▁new ▁AskChiudiConto ( this ); ▁else ▁{ ▁msg ▁= ▁new ▁Avviso Dialog ( this , ▁" ▁ Non ▁e ' ▁possibile ▁chiudere ▁il ▁conto ▁fin o ▁al ▁giorno ▁della ▁partenza ! ▁"); ▁} ▁} ▁void ▁start Chiusura () ▁{ ▁s witch ▁( chiusura ) ▁{ ▁case ▁1: ▁chiudi Stanza ( testo 1. getText (), ▁conto . date _ inizio [0], ▁conto . date _ fine [0], 1); ▁brea k ; ▁case ▁2: ▁c hiudiSingolo (); ▁brea k ; ▁case ▁3: ▁chiudi C omitiva (); ▁brea k ; ▁} ▁} ▁void ▁chiudi Stanza ( String ▁stanza , ▁Date ▁data _ inizio , ▁Date ▁data _ fine , int ▁caller ) ▁{ ▁long ▁id ; ▁Soggiornante ▁sogg ; ▁L istaSoggiornanti ▁L _ sogg ▁= ▁( Principale . db ) . foundSoggiornant i ( stanza , ▁false ); ▁id ▁= ▁( L _ sogg . get Soggiornante ( 1) ) . getId Prenotazione (); ▁Lista Disponibilita ▁L _ disp ▁= ▁( Principale . db ) . elenco Disponibilita (); ▁Frame ▁msg ; ▁if ▁( L _ disp ▁== ▁null ) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁P roblemi ▁con ▁il ▁database ▁nella ▁lettura ▁delle ▁disponibilita '! ▁"); ▁return ; ▁} ▁// ▁cancellazione ▁della ▁prenotazione ▁( Principale . db ) . del Prenotazione ( id ); ▁// ▁sposta mento ▁nell o ▁storico ▁e ▁cancellazione ▁dei ▁soggiornanti ▁for ( int ▁i ▁= ▁1; ▁i ▁<= ▁L _ sogg . length (); ▁i ++) ▁{ ▁sogg ▁= ▁L _ sogg . get Soggiornante ( i ); ▁if ▁( ▁!( sogg . getCognome ()). equals ("") ▁&& ▁!( sogg . getNome ()). equals ("") ▁&& ▁!( sogg . getIndirizzo ()). equals ("") ▁&& ▁!( sogg . getComune ()). equals ("") ▁&& ▁!( sogg . getCitta ()). equals ("") ▁&& ▁!( sogg . getNum Tel ()). equals ("") ▁&& ▁!( sogg . getCap ()). equals ("") ▁&& ▁!( sogg . getNum Doc ()). equals ("") ▁) ▁{ ▁int ▁j ▁= ▁( Principale . db ) . write Storico ( sogg . to Cliente ()); ▁if ▁( j ▁ != ▁DataBase . OK ) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁P roblemi ▁con ▁il ▁database ▁nella ▁scritt ura ▁nell o ▁storico ! ▁"); ▁return ; ▁} ▁} ▁( Principale . db ) . del Soggiornante ( stanza , sogg . getId Soggiornante ()); ▁} ▁// ▁cancellazione ▁degli ▁addebiti ▁( Principale . db ) . del Addebito ( stanza ); ▁// ▁cancellazione ▁dei ▁supp ▁e ▁rid ▁dai ▁beni / servizi ▁( Principale . db ) . del Supp Rid ( stanza ); ▁// ▁cancellazione ▁delle ▁telefonate ▁( Principale . db ) . del Telefonate ( stanza ); ▁// ▁aggiornamento ▁delle ▁disponibilita : ▁questo ▁devo no ▁essere ▁fatt o ▁affinch e ' ▁// ▁le ▁informazioni ▁riportat e ▁dall a ▁ma chera ▁di ▁visualizzazione ▁delle ▁disponibilita ' ▁// ▁sia ▁co ere nte ▁if ▁( conto . qualcun o _ tramite _ agenzia ) ▁{ ▁ Utils . aggiorna Disp ( L _ disp , ▁stanza , ▁data _ inizio , ▁data _ fine , ▁ Flag . DISPONIBILE , ▁ Flag . OCCUPATA , ▁true ); ▁ Utils . re store Commissioni ( stanza ); ▁} ▁else ▁{ ▁Disponibilita ▁disp ▁= ▁( Principale . db ) . read Disponibilita ( stanza ); ▁if ▁( disp ▁ != ▁null ) ▁{ ▁disp . set Disponibilita ( data _ inizio , ▁data _ fine , ▁ Flag . DISPONIBILE , ▁ Flag . OCCUPATA ); ▁( Principale . db ) . change Disponibilita ( disp . getNumStanz a (), ▁disp . getDispAnno Corr (), ▁disp . getDispAnno Pro x ()); ▁} ▁} ▁if ▁( caller ▁== ▁1) ▁start Stampa (); ▁} ▁void ▁c hiudiSingolo () ▁{ ▁if ▁( conto . checkboxes [3]. getStat e ()) ▁{ ▁( Principale . db ) . anticipa Fine Sogg ( conto . sogg _ x _ conto _ sing . getNumStanz a (), ▁conto . sogg _ x _ conto _ sing . getId Soggiornante (), ▁conto . fine _ sogg _ anticipato ); ▁} ▁( Principale . db ) . re verse P agato ( conto . sogg _ x _ conto _ sing . getNumStanz a (), ▁conto . sogg _ x _ conto _ sing . getId Soggiornante ()); ▁} ▁void ▁chiudi C omitiva () ▁{ ▁for ▁( int ▁i =0; ▁i ▁< ▁conto . L _ st . length ; ▁i ++) ▁chiudi Stanza ( conto . L _ st [ i ], ▁conto . date _ inizio [ i ], ▁conto . date _ fine [ i ], 2 ); ▁start Stampa (); ▁} ▁void ▁start Stampa () ▁{ ▁Properties ▁ prop ▁= ▁new ▁Properties (); ▁Toolkit ▁tk ▁= ▁Toolkit . getDefault Toolkit (); ▁ PrintJob ▁pj ▁= ▁tk . get PrintJob ( this ," Stampa ▁del ▁conto ", prop ); ▁if ▁( p j ▁ != ▁null ) ▁{ ▁ Graphics ▁g ▁= ▁pj . get Graphics (); ▁text . pr int All ( g ); ▁g . dispose (); ▁pj . end (); ▁} ▁} ▁}