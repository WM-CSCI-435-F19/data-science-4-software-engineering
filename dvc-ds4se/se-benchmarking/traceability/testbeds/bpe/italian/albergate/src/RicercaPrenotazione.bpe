▁p ackage ▁interfacce ; ▁import ▁java . awt .* ; ▁import ▁java . awt . event .* ; ▁import ▁common . utility .* ; ▁import ▁common . def .* ; ▁import ▁java . util . Date ; ▁import ▁modul i .* ; ▁p ublic ▁class ▁Ricerca Prenotazione ▁ext ends ▁Frame ▁{ ▁Prenotazione ▁prenotazione ; ▁// Dichiar azioni ▁di ▁variabili ▁Panel ▁panel 1, ▁panel 2, ▁panel 3, ▁panel 4; ▁Label ▁etichetta 1, ▁label 1, ▁label 2, ▁label 3, ▁label 4; ▁List ▁lista ; ▁Button ▁Annulla , ▁Cerca , ▁Scegli , ▁Aggiungi ; ▁TextField ▁t _ nome , ▁t _ cognome ; ▁Checkbox ▁chbx 1, ▁chbx 2, ▁chbx 3; ▁CheckboxGroup ▁filtri ; ▁GridBagLayout ▁gridbag ▁= ▁new ▁GridBagLayout (); ▁Frame ▁padre ▁= ▁new ▁Frame (); ▁L istaPrenotazioni ▁L , ▁L _ visual ; ▁Frame ▁figlio ; ▁int ▁to _ call ; ▁boolean ▁first _ time ▁= ▁true ; ▁p ublic ▁Ricerca Prenotazione ( String ▁ titolo , int ▁k ) ▁{ ▁super ( titolo ); ▁to _ call ▁= ▁k ; ▁setupPanel s (); ▁init (); ▁pack (); ▁} ▁void ▁setupPanel s () ▁{ ▁this . setFont ( Configurazione Sistema . font _ base ); ▁// Cre o ▁dei ▁pulsanti ▁e ▁ne ▁disabilit o ▁due ▁Annulla ▁= ▁new ▁Button (" ▁Fine ▁"); ▁Cerca ▁= ▁new ▁Button (" ▁Cerca ▁"); ▁Scegli ▁= ▁new ▁Button (" ▁Scegli ▁"); ▁Aggiungi ▁= ▁new ▁Button (" ▁Aggiungi ▁a ▁stanza ▁"); ▁Scegli . setEnabled ( false ); ▁Aggiungi . setEnabled ( false ); ▁Cerca . setEnabled ( true ); ▁// Cre o ▁le ▁etichette ▁etichetta 1 ▁= ▁new ▁Label ▁ (" Inseri re ▁il ▁nomi n ativo ▁della ▁prenotazione "); ▁etichetta 1. setFont ( Configurazione Sistema . font _ titolo ); ▁label 1 ▁= ▁new ▁Label (" Cognome "); ▁label 2 ▁= ▁new ▁Label (" Nome "); ▁label 3 ▁= ▁new ▁Label (" Risultat o ▁della ▁ricerca "); ▁label 3. setFont ( Configurazione Sistema . font _ titolo ); ▁label 4 ▁= ▁new ▁Label (" Cerca re ▁le ▁prenotazioni ▁rel e tive ▁a : "); ▁label 4. setFont ( Configurazione Sistema . font _ titolo ); ▁// Cre o ▁i ▁TextField ▁e ▁ne ▁ rendo ▁alcuni ▁non ▁edit abili ▁t _ nome ▁= ▁new ▁TextField ("", ▁20 ); ▁t _ cognome ▁= ▁new ▁TextField ("", ▁20 ); ▁// cre o ▁il ▁pannello ▁con ▁i ▁filtri ▁per ▁la ▁ricerca ▁filtri ▁= ▁new ▁CheckboxGroup (); ▁chbx 1 ▁= ▁new ▁Checkbox (" ▁A r ri vi ▁o d ier n i ", filtri , ▁true ); ▁chbx 2 ▁= ▁new ▁Checkbox (" ▁ Soggiornanti ▁attual i ", filtri , ▁false ); ▁chbx 3 ▁= ▁new ▁Checkbox (" ▁Prenotazioni ▁future ", ▁filtri , false ); ▁// Cre o ▁il ▁pannello ▁in ▁alto ▁per ▁inserimento ▁dei ▁dati ▁del ▁cliente ▁panel 1 ▁= ▁new ▁Panel (); ▁panel 1. setLayout ( gridbag ); ▁ Utils . constrain ( panel 1, ▁etichetta 1, ▁0, ▁0, ▁ 4, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 1, ▁label 1, ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁0. 5, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁t _ cognome , 1, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 2, ▁2, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁0. 5, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁t _ nome , ▁3, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 1, ▁label 4, ▁0, ▁2, ▁ 4, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 1, ▁chbx 1, ▁0, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁0. 5, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁if ▁( to _ call ▁ != ▁2 ▁&& ▁to _ call ▁ != ▁1) ▁ Utils . constrain ( panel 1, ▁chbx 2, ▁0, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁if ▁( to _ call ▁ != ▁3) ▁ Utils . constrain ( panel 1, ▁chbx 3, ▁0, ▁ 5, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁0. 5, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁// Cre o ▁il ▁pannello ▁in ▁basso ▁con ▁due ▁pulsanti ▁panel 2 ▁= ▁new ▁Panel (); ▁panel 2. setLayout ( gridbag ); ▁ Utils . constrain ( panel 2, ▁Annulla , ▁0, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁Cerca , ▁1, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 2, ▁Scegli , ▁2, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁if ▁( to _ call ▁ ==3) ▁ Utils . constrain ( panel 2, ▁Aggiungi , ▁3, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁// Cre o ▁il ▁pannello ▁con ▁la ▁lista ▁dei ▁risultati ▁della ▁ricerca ▁lista ▁= ▁new ▁List (10, false ); ▁lista . setFont ( Configurazione Sistema . font _ allineato ); ▁panel 3 ▁= ▁new ▁Panel (); ▁panel 3. setLayout ( gridbag ); ▁ Utils . constrain ( panel 3, ▁label 3, ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 3, ▁lista , ▁0, ▁1, ▁ 4, ▁3, ▁Grid BagConstraints . BOTH , ▁Grid BagConstraints . CENTER , ▁3. 0, ▁3. 0, ▁0, ▁0, ▁0, ▁0) ; ▁// Attac co ▁i ▁pannelli ▁al ▁frame ▁this . setLayout ( gridbag ); ▁ Utils . constrain ( this , ▁panel 1, ▁0, ▁1, ▁ 4, ▁ 6, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , ▁panel 2, ▁0, ▁14 , ▁ 4, ▁1, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . CENTER , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , ▁panel 3, ▁0, ▁ 15, ▁ 4, ▁1, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁panel 3. setVisible ( false ); ▁pack (); ▁} ▁p ublic ▁void ▁init () ▁{ ▁lista . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁prenotazione ▁= ▁L _ visual . get Prenotazione ( ( lista . getSelectedIndex es ()) [0] +1 ); ▁s witch ▁( to _ call ) ▁{ ▁case ▁1: ▁start Modifica ( prenotazione ); ▁brea k ; ▁case ▁2: ▁start Cancella ( prenotazione ); ▁brea k ; ▁case ▁3: ▁if ▁(! chbx 2. getStat e ()) ▁startIns Soggiornante ( prenotazione ); ▁else ▁start Aggiungi (); ▁brea k ; ▁case ▁4: ▁startVedi Prenotazione ( prenotazione ); ▁brea k ; ▁} ▁} ▁} ); ▁Scegli . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁if ▁(! no Selection ()) ▁{ ▁prenotazione ▁= ▁L _ visual . get Prenotazione ( ( lista . getSelectedIndex es ()) [0] +1 ); ▁s witch ▁( to _ call ) ▁{ ▁case ▁1: ▁start Modifica ( prenotazione ); ▁brea k ; ▁case ▁2: ▁start Cancella ( prenotazione ); ▁brea k ; ▁case ▁3: ▁startIns Soggiornante ( prenotazione ); ▁brea k ; ▁case ▁4: ▁startVedi Prenotazione ( prenotazione ); ▁brea k ; ▁} ▁} ▁} ▁} ); ▁Aggiungi . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁start Aggiungi (); ▁} ▁} ); ▁t _ nome . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁crea Lista (0) ; ▁} ▁} ); ▁t _ cognome . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁crea Lista (0) ; ▁} ▁} ); ▁Cerca . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁crea Lista (0) ; ▁} ▁} ); ▁Annulla . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁dispose (); ▁padre . setEnabled ( true ); ▁} ▁} ); ▁chbx 1. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ▁(! first _ time ) ▁crea Lista (0) ; ▁} ▁} ); ▁chbx 2. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ▁(! first _ time ) ▁crea Lista (0) ; ▁} ▁} ); ▁chbx 3. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ▁(! first _ time ) ▁crea Lista (0) ; ▁} ▁} ); ▁} ▁void ▁start Aggiungi () ▁{ ▁if ▁(! no Selection ()) ▁{ ▁this . setEnabled ( false ); ▁prenotazione ▁= ▁L _ visual . get Prenotazione ( ( lista . getSelectedIndex es ()) [0] +1 ); ▁start Add Soggiornante ( prenotazione ); ▁} ▁} ▁void ▁start Modifica ( Prenotazione ▁pren ) ▁{ ▁this . setEnabled ( false ); ▁Stanza ▁stanza ▁= ▁( Principale . db ) . read Stanza ( pren . getNumStanz a ()); ▁Modifica Prenotazione ▁modify ▁= ▁new ▁Modifica Prenotazione ( pren , ▁stanza , ▁this ); ▁modify . setVisible ( true ); ▁modify . padre ▁= ▁this ; ▁notify Room Block ed ( pren , ▁modify , ▁null ); ▁} ▁void ▁start Cancella ( Prenotazione ▁pren ) ▁{ ▁this . setEnabled ( false ); ▁Stanza ▁stanza ▁= ▁( Principale . db ) . read Stanza ( pren . getNumStanz a ()); ▁Cancella Prenotazione ▁cancel ▁= ▁new ▁Cancella Prenotazione ( pren , ▁stanza , ▁this ); ▁cancel . setVisible ( true ); ▁cancel . padre ▁= ▁this ; ▁} ▁void ▁startVedi Prenotazione ( Prenotazione ▁pren ) ▁{ ▁this . setEnabled ( false ); ▁Stanza ▁stanza ▁= ▁( Principale . db ) . read Stanza ( pren . getNumStanz a ()); ▁ VediPrenotazione ▁visual ▁= ▁new ▁ VediPrenotazione ( pren , ▁stanza , ▁this ); ▁visual . setVisible ( true ); ▁visual . padre ▁= ▁this ; ▁notify Room Block ed ( pren , ▁null , ▁visual ); ▁} ▁void ▁startIns Soggiornante ( Prenotazione ▁pren ) ▁{ ▁Disponibilita ▁disp ; ▁Frame ▁msg ; ▁disp ▁= ▁( Principale . db ) . read Disponibilita ( pren . getNumStanz a ()); ▁if ▁( disp ▁== ▁null ) ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁In cons i st en ze ▁sul ▁database ! ▁"); ▁else ▁{ ▁if ▁( ▁disp . getStatus Giorno ( DateUtils . data To giorni ( pren . getInizio Sogg ()), Const . ANN O _ CORRENTE ) ▁== ▁ Flag . BLOCCATA ▁) ▁msg ▁= ▁new ▁Avviso Dialog ( this ," ▁La ▁stanza ▁"+ pren . getNumStanz a ()+" ▁non ▁e ' ▁assegnata ▁a ▁ tale ▁prenotazione . ▁Modifica re ▁la ▁prenotazione . ▁"); ▁else ▁figlio ▁= ▁new ▁Inserisci Soggiornante ( this , ▁pren ); ▁} ▁} ▁void ▁notify Room Block ed ( Prenotazione ▁pren , ▁Modifica Prenotazione ▁father 1, ▁ VediPrenotazione ▁father 2) ▁{ ▁char ▁flag ; ▁Frame ▁msg ; ▁Lista Disponibilita ▁elenco _ disp ▁= ▁( Principale . db ) . elenco Disponibilita (); ▁if ▁( elenco _ disp ▁== ▁null ) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁P roblemi ▁con ▁il ▁database ▁nella ▁lettura ▁delle ▁disponibilita '! ▁"); ▁return ; ▁} ▁Disponibilita ▁disp ▁= ▁ Utils . get DispOf Room ( elenco _ disp , ▁pren . getNumStanz a (), ▁false ); ▁Costanti ▁cost ▁= ▁new ▁Costanti (); ▁if ▁( ▁((( pren . getInizio Sogg ()). getYear () )+1900 ▁) ▁== ▁cost . getAnno Corr ()) ▁flag ▁= ▁Const . ANN O _ CORRENTE ; ▁else ▁flag ▁= ▁Const . ANN O _ PROSSIMO ; ▁if ▁( father 2 ▁== ▁null ) ▁if ▁( disp . getStatus Giorno ( DateUtils . data To giorni ( pren . getInizio Sogg ()), ▁flag ) ▁== ▁ Flag . BLOCCATA ) ▁msg ▁= ▁new ▁Avviso Dialog ( father 1, " ▁ATT ENZIONE : ▁per ▁questa ▁prenotazione ▁non ▁e ' ▁ancora ▁stata ▁assegnata ▁la ▁stanza !!" ); ▁else ▁( father 1. Assegna ) . setEnabled ( false ); ▁else ▁if ▁( disp . getStatus Giorno ( DateUtils . data To giorni ( pren . getInizio Sogg ()), ▁flag ) ▁== ▁ Flag . BLOCCATA ) ▁msg ▁= ▁new ▁Avviso Dialog ( father 2, " ▁ATT ENZIONE : ▁per ▁questa ▁prenotazione ▁non ▁e ' ▁ancora ▁stata ▁assegnata ▁la ▁stanza !!" ); ▁else ▁( father 2. Assegna ) . setEnabled ( false ); ▁} ▁p ublic ▁void ▁crea Lista ( int ▁back ) ▁{ ▁Frame ▁msg ; ▁Prenotazione ▁p ; ▁Date ▁today ▁= ▁new ▁Date (); ▁L _ visual ▁= ▁new ▁L istaPrenotazioni (); ▁L ▁= ▁( Principale . db ) . found Prenotazioni ( t _ cognome . getText (), ▁t _ nome . getText ()); ▁if ▁( L ▁ != ▁null ) ▁{ ▁if ▁(! L . isEmpty ()) ▁{ ▁if ▁( lista . getItemCount () ▁ > ▁0) ▁lista . removeAll (); ▁for ( int ▁i ▁= ▁1; ▁i ▁<= ▁L . length (); ▁i ++) ▁{ ▁p ▁= ▁L . get Prenotazione ( i ); ▁L istaSoggiornanti ▁L _ sogg ▁= ▁( Principale . db ) . foundSoggiornant i ( p . getId Prenotazione ()); ▁if ▁( chbx 3. getStat e ()) ▁{ ▁if ▁( ▁ Utils . data 1 M aggiore Data 2( ▁p . getInizio Sogg (), ▁today ▁) ▁) ▁{ ▁lista . addItem ( p . toString ()); ▁L _ visual . add Prenotazione ( p ); ▁} ▁} ▁else ▁{ ▁if ▁( chbx 1. getStat e ()) ▁{ ▁if ▁( L _ sogg . isEmpty ()) ▁{ ▁if ▁((( p . getInizio Sogg ()). getDate () ▁== ▁today . getDate ()) ▁&& ▁( ( p . getInizio Sogg ()). getMonth () ▁== ▁today . getMonth ()) ▁&& ▁( ( p . getInizio Sogg ()). getYear () ▁== ▁today . getYear ()) ▁) ▁{ ▁lista . addItem ( p . toString ()); ▁L _ visual . add Prenotazione ( p ); ▁} ▁} ▁} ▁else ▁{ ▁if ▁( ▁!( ▁ Utils . data 1 M aggiore Data 2( ▁p . getInizio Sogg (), ▁today ▁) ▁) ▁&& ▁!( ▁ Utils . data 1 Min oreDat a 2( ▁p . getFine Sogg (), ▁today ) ▁) ▁) ▁{ ▁// controllo ▁che ▁sia ▁un ▁soggiornante ▁gia ▁registrato ▁if ▁(! L _ sogg . isEmpty ()) ▁{ ▁lista . addItem ( p . toString ()); ▁L _ visual . add Prenotazione ( p ); ▁} ▁} ▁} ▁} ▁} ▁if ▁( lista . getItemCount () ▁== ▁0) ▁{ ▁if ▁( back ▁== ▁0) ▁msg ▁= ▁new ▁Avviso Dialog ( this , ▁" ▁Nessun a ▁prenotazione ▁trovata ! ▁"); ▁Scegli . setEnabled ( false ); ▁Aggiungi . setEnabled ( false ); ▁panel 3. setVisible ( false ); ▁pack (); ▁if ▁( to _ call ▁== ▁3) ▁Aggiungi . setEnabled ( false ); ▁} ▁else ▁{ ▁if ▁( chbx 1. getStat e ()) ▁{ ▁Aggiungi . setEnabled ( false ); ▁Scegli . setEnabled ( true ); ▁} ▁if ▁( chbx 2. getStat e ()) ▁{ ▁Aggiungi . setEnabled ( true ); ▁if ▁( to _ call ▁== ▁3) ▁Scegli . setEnabled ( false ); ▁else ▁Scegli . setEnabled ( true ); ▁} ▁if ▁( chbx 3. getStat e ()) ▁{ ▁Scegli . setEnabled ( true ); ▁} ▁panel 3. setVisible ( true ); ▁pack (); ▁} ▁if ▁( first _ time ) ▁first _ time ▁= ▁false ; ▁} ▁else ▁{ ▁if ▁( back ▁== ▁0) ▁msg ▁= ▁new ▁Avviso Dialog ( this , ▁" ▁Prenotazione ▁non ▁trovata ! ▁"); ▁else ▁{ ▁if ▁( back ▁== ▁1) ▁{ ▁if ▁( lista . getItemCount () ▁ > ▁0) ▁lista . removeAll (); ▁panel 3. setVisible ( false ); ▁pack (); ▁} ▁} ▁} ▁} ▁else ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁P roblemi ▁con ▁il ▁database ! ▁"); ▁} ▁boolean ▁no Selection () ▁{ ▁Frame ▁msg ; ▁if ▁( lista . getSelectedIndex () ▁== ▁-1) ▁{ ▁msg ▁= ▁new ▁Avviso Dialog ( this ," ▁ Selezionare ▁una ▁prenotazione ▁dall a ▁lista ▁e ▁ripr eme re ▁il ▁tasto "); ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁void ▁start Add Soggiornante ( Prenotazione ▁pren ) ▁{ ▁L istaSoggiornanti ▁L _ sogg ▁= ▁( Principale . db ) . foundSoggiornant i ( pren . getId Prenotazione ()); ▁if ▁( L _ sogg ▁ != ▁null ) ▁if ▁( L _ sogg . length () ▁ > ▁0) ▁{ ▁Soggiornante ▁sogg ▁= ▁L _ sogg . get Soggiornante ( 1); ▁Stanza ▁room ▁= ▁( Principale . db ) . read Stanza ( sogg . getNumStanz a ()); ▁if ▁( ▁( room . get Posti Letto () ▁ > ▁L _ sogg . length ()) ▁|| ▁( ▁( room . get Posti Letto () ▁== ▁L _ sogg . length ()) ▁&& ▁( room . getDisp Letto Agg () ▁== ▁Const . SI ) ▁) ▁) ▁figlio ▁= ▁new ▁Aggiungi Soggiornante ( this , ▁pren , ▁room , ▁L _ sogg . length ()); ▁else ▁figlio ▁= ▁new ▁Avviso Dialog ( this ," ▁Nessun ▁pos to ▁disponibile ▁nella ▁stanza ▁n . ▁"+ room . getNumStanz a ()); ▁} ▁else ▁figlio ▁= ▁new ▁Avviso Dialog ( this ," ▁La ▁prenotazione ▁non ▁e ' ▁ad empi u ta . ▁Pre mere ▁' Scegli ' ▁per ▁gesti re ▁l ' a rrivo ▁clienti "); ▁else ▁figlio ▁= ▁new ▁MessageDialog ( this ," ▁P roblemi ▁con ▁il ▁database !" ); ▁} ▁}