▁p ackage ▁interfacce ; ▁import ▁java . awt .* ; ▁import ▁java . awt . event .* ; ▁import ▁common . utility .* ; ▁import ▁modul i .* ; ▁import ▁common . def .* ; ▁import ▁common . utility . Utils ; ▁import ▁java . util . Date ; ▁p ublic ▁class ▁Definizione Stagionalita ▁ext ends ▁Frame ▁{ ▁// Dichiar o ▁gli ▁oggett i ▁che ▁mi ▁servi ranno ▁per ▁costrui re ▁la ▁finestra ▁Panel ▁panel 1, ▁panel 2, ▁panel 3, ▁panel 4, ▁panel 5; ▁Label ▁etichetta 1, ▁etichetta 2, ▁etichetta 3, ▁etichetta , ▁etichetta 4; ▁Button ▁Annulla , ▁Conferma , ▁Aggiungi ; ▁TextField ▁data _ inizio , ▁data _ fine ; ▁List ▁list ; ▁GridBagLayout ▁gridbag ▁= ▁new ▁GridBagLayout (); ▁CheckboxGroup ▁checkbox _ group ; ▁Checkbox [] ▁checkboxes ; ▁// ▁variabili ▁locali ▁di ▁supporto ▁char ▁conf _ stag _ corr [] , ▁conf _ stag _ prox []; ▁Configurazione ▁config _ locale ; ▁int ▁anno _ corr , ▁anno _ prox ; ▁// ▁segue ▁la ▁finestra ▁ma d re ▁di ▁questa ▁Frame ▁config ; ▁p ublic ▁Definizione Stagionalita ( Frame ▁parent ) ▁{ ▁super (" Defini sione ▁delle ▁stagionalita ' "); ▁config ▁= ▁parent ; ▁config . setEnabled ( false ); ▁setupPanel s (); ▁init Vector s (); ▁init (); ▁pack (); ▁ setVisible ( true ); ▁} ▁void ▁setupPanel s () ▁{ ▁this . setFont ( Configurazione Sistema . font _ base ); ▁// Cre o ▁i ▁TextField ▁data _ inizio ▁= ▁new ▁TextField ("", ▁12) ; ▁data _ fine ▁= ▁new ▁TextField ("", ▁12) ; ▁// Cre o ▁i ▁pulsanti ▁e ▁ne ▁disabilit o ▁due ▁Annulla ▁= ▁new ▁Button (" Annulla "); ▁Conferma ▁= ▁new ▁Button (" Conferma "); ▁Aggiungi ▁= ▁new ▁Button (" Aggiungi "); ▁Aggiungi . setEnabled ( false ); ▁// Cre o ▁le ▁etichette ▁etichetta = ▁new ▁Label (" Periodo ▁di ▁soggiorno "); ▁etichetta . setFont ( Configurazione Sistema . font _ titolo ); ▁etichetta 1 ▁= ▁new ▁Label (" Data ▁inizio : "); ▁etichetta 2 ▁= ▁new ▁Label (" ▁Data ▁fine : "); ▁etichetta 3 ▁= ▁new ▁Label ▁ (" Pro spett o ▁della ▁di st riduzione ▁delle ▁sta ginali ta ' : "); ▁etichetta 3. setFont ( new ▁Font (" Cour ier ", ▁Font . BOLD , ▁12) ); ▁Label ▁space ▁= ▁new ▁Label (" ▁"); ▁// Cre o ▁la ▁lista ▁list ▁= ▁new ▁List ( 15, false ); ▁// Cre o ▁il ▁pannello ▁in ▁alto ▁panel 1 ▁= ▁new ▁Panel (); ▁panel 1. setLayout ( gridbag ); ▁ Utils . constrain ( panel 1, ▁etichetta , ▁0, ▁0, ▁ 4, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁ 10, ▁0) ; ▁ Utils . constrain ( panel 1, ▁etichetta 1, ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 1, ▁data _ inizio , ▁1, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST ,1.0,0.0, 0,0,0,0 ); ▁// Utils . constrain ( panel 1, ▁space , ▁2, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁// Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 1, ▁etichetta 2, ▁3, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 1, data _ fine , ▁ 4, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 1, ▁space , ▁ 5, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁// Cre o ▁un ▁pannello ▁con ▁due ▁pulsanti ▁panel 2 ▁= ▁new ▁Panel (); ▁panel 2. setLayout ( gridbag ); ▁ Utils . constrain ( panel 2, ▁Aggiungi , ▁0, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁0.3 , ▁ 0.0, ▁0, ▁0, ▁0, ▁10 ); ▁// Cre o ▁un ▁Checkbox ▁ad ▁esclus ione ▁checkbox _ group ▁= ▁new ▁CheckboxGroup (); ▁checkboxes ▁= ▁new ▁Checkbox [5]; ▁checkboxes [0] ▁= ▁new ▁Checkbox (" ▁Al ta ▁stagione ", checkbox _ group , false ); ▁checkboxes [1] ▁= ▁new ▁Checkbox (" ▁ Media ▁stagione ", checkbox _ group , false ); ▁checkboxes [2] ▁= ▁new ▁Checkbox (" ▁Ba s s a ▁stagione ", checkbox _ group , false ); ▁checkboxes [3] ▁= ▁new ▁Checkbox (" ▁Ba s s is s ima ▁stagione ", checkbox _ group , false ); ▁checkboxes [4] ▁= ▁new ▁Checkbox (" ▁ Chiusura ", checkbox _ group , false ); ▁etichetta 4 = ▁new ▁Label (" Stagionalita ' ▁disponibili "); ▁etichetta 4. setFont ( new ▁Font (" Cour ier ", ▁Font . BOLD , ▁12) ); ▁// Cre o ▁il ▁pannello ▁panel 3 ▁= ▁new ▁Panel (); ▁panel 3. setLayout ( gridbag ); ▁ Utils . constrain ( panel 3, ▁etichetta 4, ▁0, ▁1, ▁ 4, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁ 10, ▁0) ; ▁ Utils . constrain ( panel 3, ▁checkboxes [0], ▁0, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁0) ; ▁ Utils . constrain ( panel 3, ▁checkboxes [1] , ▁0, ▁3, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁0) ; ▁ Utils . constrain ( panel 3, ▁checkboxes [2] , ▁0, ▁ 4, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁0) ; ▁ Utils . constrain ( panel 3, ▁checkboxes [3] , ▁0, ▁ 5, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁0) ; ▁ Utils . constrain ( panel 3, ▁checkboxes [4] , ▁0, ▁ 6, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁0) ; ▁// Cre o ▁il ▁pannello ▁contenente ▁la ▁TextArea ▁panel 4 ▁= ▁new ▁Panel (); ▁panel 4. setLayout ( gridbag ); ▁ Utils . constrain ( panel 4, ▁etichetta 3, ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 4, list , ▁0, ▁1, ▁ 4, ▁3, ▁Grid BagConstraints . BOTH , ▁Grid BagConstraints . CENTER , ▁3. 0, ▁3. 0, ▁0, ▁0, ▁0, ▁0) ; ▁// Cre o ▁il ▁pannello ▁in ▁basso ▁con ▁due ▁pulsanti ▁panel 5 ▁= ▁new ▁Panel (); ▁panel 5. setLayout ( gridbag ); ▁ Utils . constrain ( panel 5, ▁Annulla , ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . SOUTH EAST , ▁0.3 , ▁ 0.0, ▁0, ▁0, ▁0, ▁10 ); ▁ Utils . constrain ( panel 5, ▁Conferma , ▁1, ▁1, ▁1, ▁1, Grid BagConstraints . NONE , ▁Grid BagConstraints . SOUTH WEST , ▁0.3 , ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁// Attac co ▁i ▁pannelli ▁al ▁frame ▁this . setLayout ( gridbag ); ▁ Utils . constrain ( this , ▁panel 1, ▁0, ▁0, ▁ 4, ▁2, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 15, ▁ 10, ▁ 10, ▁10 ); ▁ Utils . constrain ( this , ▁panel 3, ▁0, ▁2, ▁ 4, ▁1, Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . NORTH EAST , ▁1.0, ▁ 0.0, ▁ 10, ▁ 10, ▁0, ▁10 ); ▁ Utils . constrain ( this , ▁panel 2, ▁0, ▁ 5, ▁ 4, ▁1, Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . NORTH EAST , ▁1.0, ▁ 0.0, ▁ 10, ▁ 10, ▁0, ▁10 ); ▁ Utils . constrain ( this , ▁panel 4, ▁0, ▁ 6, ▁ 4, ▁3, ▁Grid BagConstraints . BOTH , ▁Grid BagConstraints . CENTER , ▁2.0 , ▁2.0 , ▁ 10, ▁ 10, ▁ 10, ▁10 ); ▁ Utils . constrain ( this , ▁panel 5, ▁0, ▁ 10, ▁ 4, ▁1, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . SOUTH WEST , ▁1.0, ▁1.0, ▁ 10, ▁ 10, ▁ 15, ▁10 ); ▁} ▁// Gestione ▁degli ▁eventi ▁p ublic ▁void ▁init () ▁{ ▁// A scoltatore ▁degli ▁eventi ▁della ▁finestra ▁checkboxes [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ▁( ▁( checkboxes [0]. getStat e ()) ▁&& ▁(!( data _ inizio . getText ()). equals ("")) ▁&& ▁(!( data _ fine . getText ()). equals ("")) ▁) ▁{ ▁Aggiungi . setEnabled ( true ); ▁} ▁} ▁} ); ▁checkboxes [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ▁( ▁( checkboxes [1]. getStat e ()) ▁&& ▁(!( data _ inizio . getText ()). equals ("")) ▁&& ▁(!( data _ fine . getText ()). equals ("")) ▁) ▁{ ▁Aggiungi . setEnabled ( true ); ▁} ▁} ▁} ); ▁checkboxes [2]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ▁( ▁( checkboxes [2]. getStat e ()) ▁&& ▁(!( data _ inizio . getText ()). equals ("")) ▁&& ▁(!( data _ fine . getText ()). equals ("")) ▁) ▁{ ▁Aggiungi . setEnabled ( true ); ▁} ▁} ▁} ); ▁checkboxes [3]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ▁( ▁( checkboxes [3]. getStat e ()) ▁&& ▁(!( data _ inizio . getText ()). equals ("")) ▁&& ▁(!( data _ fine . getText ()). equals ("")) ▁) ▁{ ▁Aggiungi . setEnabled ( true ); ▁} ▁} ▁} ); ▁checkboxes [4]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ▁( ▁( checkboxes [4]. getStat e ()) ▁&& ▁(!( data _ inizio . getText ()). equals ("")) ▁&& ▁(!( data _ fine . getText ()). equals ("")) ▁) ▁{ ▁Aggiungi . setEnabled ( true ); ▁} ▁} ▁} ); ▁/* ▁Nel ▁cas o ▁di ▁annulla mento ▁dell ' operazione ▁ripristin o ▁i ▁vettori ▁* ▁or i ginali ▁della ▁Configurazione ▁*/ ▁Annulla . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁dispose (); ▁config . setEnabled ( true ); ▁} ▁} ); ▁// A scoltatore ▁del ▁pulsante ▁Conferma , ▁se ▁il ▁pulsante ▁viene ▁prem uto ▁si ▁a pre ▁// la ▁finestra ▁riguardant e ▁l ' inserimento ▁della ▁prenotazione ▁Aggiungi . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁start Aggiungi (); ▁} ▁} ); ▁Conferma . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁Configurazione Sistema . new _ stag _ anno _ corr ▁= ▁( config _ locale . getStagAnno Corr ()); ▁Configurazione Sistema . new _ stag _ anno _ prox ▁= ▁( config _ locale . getStagAnno Pro x ()); ▁dispose (); ▁config . setEnabled ( true ); ▁} ▁} ); ▁} ▁void ▁start Aggiungi () ▁{ ▁char ▁flag ; ▁String ▁lista []; ▁if ▁( Utils . date E Periodo Corretti ( this , ▁data _ inizio . getText (), ▁data _ fine . getText ())) ▁{ ▁if ▁( checkboxes [0]. getStat e () ▁== ▁true ) ▁flag ▁= ▁ Flag . ALT A _ STAGIONE ; ▁else ▁if ▁( checkboxes [1]. getStat e () ▁== ▁true ) ▁flag ▁= ▁ Flag . ME DI A _ STAGIONE ; ▁else ▁if ▁( checkboxes [2]. getStat e () ▁== ▁true ) ▁flag ▁= ▁ Flag . BASS A _ STAGIONE ; ▁else ▁if ▁( checkboxes [3]. getStat e () ▁== ▁true ) ▁flag ▁= ▁ Flag . BASS I SSIMA _ STAGIONE ; ▁else ▁flag ▁= ▁ Flag . CHIUSO ; ▁config _ locale . setStagion e ( new ▁Date ( DateUtils . i nvert Date ( DateUtils . parse Date ( data _ inizio . getText ()))) , ▁new ▁Date ( DateUtils . i nvert Date ( DateUtils . parse Date ( data _ fine . getText ()))) , ▁flag ); ▁conf _ stag _ corr ▁= ▁config _ locale . get Stagionalita ( Const . ANN O _ CORRENTE ); ▁conf _ stag _ prox ▁= ▁config _ locale . get Stagionalita ( Const . ANN O _ PROSSIMO ); ▁vis Stagionalita (); ▁data _ inizio . setText (" "); ▁data _ fine . setText (" "); ▁for ▁( int ▁i ▁= ▁0; ▁i < checkboxes . length ; ▁i ++) ▁checkboxes [ i ]. set State ( false ); ▁Aggiungi . setEnabled ( false ); ▁} ▁} ▁/* ▁ Cre o ▁un ▁duplicat o ▁dei ▁vettori ▁delle ▁stagionalita ▁per ▁permette re ▁* ▁l ' annulla mento ▁delle ▁operazioni ▁*/ ▁void ▁init Vector s () ▁{ ▁config _ locale ▁= ▁new ▁Configurazione (); ▁config _ locale . setStagAnno Corr ( Configurazione Sistema . new _ stag _ anno _ corr ); ▁config _ locale . setStagAnno Pro x ( Configurazione Sistema . new _ stag _ anno _ prox ); ▁conf _ stag _ corr ▁= ▁config _ locale . get Stagionalita ( Const . ANN O _ CORRENTE ); ▁conf _ stag _ prox ▁= ▁config _ locale . get Stagionalita ( Const . ANN O _ PROSSIMO ); ▁Costanti ▁cost ▁= ▁new ▁Costanti (); ▁anno _ corr ▁= ▁cost . getAnno Corr (); ▁anno _ prox ▁= ▁cost . getAnno Pro x (); ▁vis Stagionalita (); ▁} ▁void ▁vis Stagionalita () ▁{ ▁String ▁lista [] ▁= ▁report Stagionalita (); ▁if ▁( list . getItemCount () ▁ > ▁0) ▁list . removeAll (); ▁for ▁( int ▁k ▁= ▁0; ▁k < lista . length ; ▁k ++) ▁list . addItem ( lista [ k ]); ▁} ▁String [] ▁report Stagionalita () ▁{ ▁String ▁lista _ loc [] ▁= ▁new ▁String [ 30 ]; ▁int ▁index ▁= ▁0; ▁String ▁str _ aus ; ▁init Lista ( lista _ loc ); ▁// Scan sione ▁dei ▁5 ▁tipi ▁di ▁stagionalita ▁per ▁l ' anno ▁corrente ▁str _ aus ▁= ▁ Utils . scanVector ( Flag . ALT A _ STAGIONE , ▁conf _ stag _ corr , ▁anno _ corr ); ▁if ▁( ▁!( ▁str _ aus . equals ("") ▁) ▁) ▁{ ▁lista _ loc [ index ] ▁= ▁new ▁String (" Period i ▁di ▁ alta ▁stagione ▁per ▁l ' anno ▁"+ anno _ corr ); ▁lista _ loc [ index +1 ] ▁= ▁new ▁String ( str _ aus ); ▁index ▁= ▁index + 3; ▁} ▁str _ aus ▁= ▁ Utils . scanVector ( Flag . ME DI A _ STAGIONE , ▁conf _ stag _ corr , ▁anno _ corr ); ▁if ▁( ▁!( ▁str _ aus . equals ("") ▁) ▁) ▁{ ▁lista _ loc [ index ] ▁= ▁new ▁String (" Period i ▁di ▁media ▁stagione ▁per ▁l ' anno ▁"+ anno _ corr ); ▁lista _ loc [ index +1 ] ▁= ▁new ▁String ( str _ aus ); ▁index ▁= ▁index + 3; ▁} ▁str _ aus ▁= ▁ Utils . scanVector ( Flag . BASS A _ STAGIONE , ▁conf _ stag _ corr , ▁anno _ corr ); ▁if ▁( ▁!( ▁str _ aus . equals ("") ▁) ▁) ▁{ ▁lista _ loc [ index ] ▁= ▁new ▁String (" Period i ▁di ▁ bassa ▁stagione ▁per ▁l ' anno ▁"+ anno _ corr ); ▁lista _ loc [ index +1 ] ▁= ▁new ▁String ( str _ aus ); ▁index ▁= ▁index + 3; ▁} ▁str _ aus ▁= ▁ Utils . scanVector ( Flag . BASS I SSIMA _ STAGIONE , ▁conf _ stag _ corr , ▁anno _ corr ); ▁if ▁( ▁!( ▁str _ aus . equals ("") ▁) ▁) ▁{ ▁lista _ loc [ index ] ▁= ▁new ▁String (" Period i ▁di ▁ bassissima ▁stagione ▁per ▁l ' anno ▁"+ anno _ corr ); ▁lista _ loc [ index +1 ] ▁= ▁new ▁String ( str _ aus ); ▁index ▁= ▁index + 3; ▁} ▁str _ aus ▁= ▁ Utils . scanVector ( Flag . CHIUSO , ▁conf _ stag _ corr , ▁anno _ corr ); ▁if ▁( ▁!( ▁str _ aus . equals ("") ▁) ▁) ▁{ ▁lista _ loc [ index ] ▁= ▁new ▁String (" Period i ▁di ▁chiusura ▁per ▁l ' anno ▁"+ anno _ corr ); ▁lista _ loc [ index +1 ] ▁= ▁new ▁String ( str _ aus ); ▁index ▁= ▁index + 3; ▁} ▁// ▁ Scan sione ▁dei ▁5 ▁tipi ▁di ▁stagionalita ▁per ▁l ' anno ▁seguente ▁str _ aus ▁= ▁ Utils . scanVector ( Flag . ALT A _ STAGIONE , ▁conf _ stag _ prox , ▁anno _ prox ); ▁if ▁( ▁!( ▁str _ aus . equals ("") ▁) ▁) ▁{ ▁lista _ loc [ index ] ▁= ▁new ▁String (" Period i ▁di ▁ alta ▁stagione ▁per ▁l ' anno ▁"+ anno _ prox ); ▁lista _ loc [ index +1 ] ▁= ▁new ▁String ( str _ aus ); ▁index ▁= ▁index + 3; ▁} ▁str _ aus ▁= ▁ Utils . scanVector ( Flag . ME DI A _ STAGIONE , ▁conf _ stag _ prox , ▁anno _ prox ); ▁if ▁( ▁!( ▁str _ aus . equals ("") ▁) ▁) ▁{ ▁lista _ loc [ index ] ▁= ▁new ▁String (" Period i ▁di ▁media ▁stagione ▁per ▁l ' anno ▁"+ anno _ prox ); ▁lista _ loc [ index +1 ] ▁= ▁new ▁String ( str _ aus ); ▁index ▁= ▁index + 3; ▁} ▁str _ aus ▁= ▁ Utils . scanVector ( Flag . BASS A _ STAGIONE , ▁conf _ stag _ prox , ▁anno _ prox ); ▁if ▁( ▁!( ▁str _ aus . equals ("") ▁) ▁) ▁{ ▁lista _ loc [ index ] ▁= ▁new ▁String (" Period i ▁di ▁ bassa ▁stagione ▁per ▁l ' anno ▁"+ anno _ prox ); ▁lista _ loc [ index +1 ] ▁= ▁new ▁String ( str _ aus ); ▁index ▁= ▁index + 3; ▁} ▁str _ aus ▁= ▁ Utils . scanVector ( Flag . BASS I SSIMA _ STAGIONE , ▁conf _ stag _ prox , ▁anno _ prox ); ▁if ▁( ▁!( ▁str _ aus . equals ("") ▁) ▁) ▁{ ▁lista _ loc [ index ] ▁= ▁new ▁String (" Period i ▁di ▁ bassissima ▁stagione ▁per ▁l ' anno ▁"+ anno _ prox ); ▁lista _ loc [ index +1 ] ▁= ▁new ▁String ( str _ aus ); ▁index ▁= ▁index + 3; ▁} ▁str _ aus ▁= ▁ Utils . scanVector ( Flag . CHIUSO , ▁conf _ stag _ prox , ▁anno _ prox ); ▁if ▁( ▁!( ▁str _ aus . equals ("") ▁) ▁) ▁{ ▁lista _ loc [ index ] ▁= ▁new ▁String (" Period i ▁di ▁chiusura ▁per ▁l ' anno ▁"+ anno _ prox ); ▁lista _ loc [ index +1 ] ▁= ▁new ▁String ( str _ aus ); ▁index ▁= ▁index + 3; ▁} ▁return ▁lista _ loc ; ▁} ▁void ▁init Lista ( String ▁lista []) ▁{ ▁for ▁( int ▁k ▁= ▁0; ▁k ▁< ▁lista . length ; ▁k ++) ▁lista [ k ] ▁= ▁new ▁String (" "); ▁} ▁}