▁p ackage ▁interfacce ; ▁import ▁java . awt .* ; ▁import ▁java . awt . event .* ; ▁import ▁common . utility .* ; ▁import ▁modul i . BeneServizio ; ▁import ▁modul i . ListaBeniServizi ; ▁p ublic ▁class ▁Maschera BeneServizio ▁ext ends ▁Frame ▁{ ▁// Dichiar azioni ▁di ▁oggett i ▁che ▁ci ▁servi ranno ▁per ▁defini re ▁la ▁finestra ▁p rot ected ▁Label ▁label , ▁label 1, ▁label 2, ▁label 3, ▁label 4, ▁label 5, ▁label 6, ▁label 7, ▁label 8, ▁label 9, ▁label 12, ▁label 13; ▁p rot ected ▁TextField ▁testo 3, ▁testo 4; ▁p rot ected ▁Panel ▁panel [] , ▁buttons ; ▁p rot ected ▁Button ▁annulla , ▁conferma ; ▁p rot ected ▁CheckboxGroup ▁tipi , ▁bar , ▁ristorante , ▁servizi , ▁bevande , ▁cibi , ▁antipasti , ▁primi , ▁secondi , ▁contorni ; ▁p rot ected ▁Checkbox [] ▁prima _ scelta , ▁scelta _ bar , ▁scelta _ piatto , ▁scelta _ servizio , ▁scelta _ bevanda , ▁scelta _ cibo , ▁scelta _ antipasto , ▁scelta _ primo , ▁scelta _ secondo , ▁scelta _ contorno ; ▁p rot ected ▁GridLayout ▁grid ▁= ▁new ▁GridLayout (4,1) ; ▁p rot ected ▁GridLayout ▁grid 1 ▁= ▁new ▁GridLayout ( 7, 1); ▁p rot ected ▁GridBagLayout ▁gridbag ▁= ▁new ▁GridBagLayout (); ▁// ▁i ▁seguenti ▁due ▁campi ▁sono ▁condi vis i ▁da ▁cancellazione ▁e ▁modifica ▁p rot ected ▁List ▁elenco ▁= ▁new ▁List ( 3, ▁false ); ▁p rot ected ▁ ListaBeniServizi ▁L ; ▁// ▁il ▁seguente ▁attribut o ▁e ' ▁necessari o ▁per ▁la ▁gerarchia ▁delle ▁finestre ▁Frame ▁padre ▁= ▁new ▁Frame (); ▁// ▁i ▁seguenti ▁gestisc ono ▁la ▁form azione ▁dei ▁primi ▁tre ▁caratteri ▁del ▁co d _ extra ▁int ▁ level ▁= ▁ -1; ▁char ▁codice [] ▁= ▁new ▁char [3] ; ▁p ublic ▁Maschera BeneServizio ( String ▁title ) ▁{ ▁super ( title ); ▁setup (); ▁init (); ▁setSize (350, 600 ); ▁} ▁void ▁setup () ▁{ ▁this . setFont ( Configurazione Sistema . font _ base ); ▁elenco . setFont ( Configurazione Sistema . font _ allineato ); ▁// Cre o ▁i ▁pannelli ▁panel ▁= ▁new ▁Panel [ 13 ]; ▁for ( int ▁i =0; i <10; ++ i ) ▁{ ▁panel [ i ] ▁= ▁new ▁Panel (); ▁panel [ i ]. setLayout ( grid 1); ▁panel [ i ]. setVisible ( false ); ▁} ▁for ( int ▁i = 10 ; ▁i <13; ▁++ i ) ▁{ ▁panel [ i ] ▁= ▁new ▁Panel (); ▁panel [ i ]. setVisible ( false ); ▁} ▁// Cre o ▁il ▁pannello ▁in ▁alto ▁label ▁= ▁new ▁Label (" Tip i "); ▁label . setFont ( Configurazione Sistema . font _ titolo ); ▁tipi ▁= ▁new ▁CheckboxGroup (); ▁prima _ scelta ▁= ▁new ▁Checkbox [5]; ▁// ▁mi ▁serve ▁piu ' ▁lung o ▁per ▁l ' aggiungi ▁prima _ scelta [0] ▁= ▁new ▁Checkbox (" BAR ", ▁tipi , ▁false ); ▁prima _ scelta [1] ▁= ▁new ▁Checkbox (" RISTORANTE ", ▁tipi , ▁false ); ▁prima _ scelta [2] ▁= ▁new ▁Checkbox (" SERVIZI ", ▁tipi , ▁false ); ▁prima _ scelta [3] ▁= ▁new ▁Checkbox (" SUPPLEMENTI ", ▁tipi , ▁false ); ▁prima _ scelta [4] ▁= ▁new ▁Checkbox (" RIDUZIONI ", ▁tipi , ▁false ); ▁panel [0]. add ( label ); ▁panel [0]. add ( prima _ scelta [0] ); ▁panel [0]. add ( prima _ scelta [1] ); ▁panel [0]. add ( prima _ scelta [2] ); ▁panel [0]. setVisible ( true ); ▁// Attac co ▁il ▁pannello ▁in ▁alto ▁al ▁frame ▁this . setLayout ( grid ); ▁this . add ( panel [0] ); ▁// Cre o ▁il ▁pannello ▁del ▁bar ▁label 1 ▁= ▁new ▁Label (" Bar "); ▁label 1. setFont ( Configurazione Sistema . font _ titolo ); ▁bar ▁= ▁new ▁CheckboxGroup (); ▁scelta _ bar ▁= ▁new ▁Checkbox [2] ; ▁scelta _ bar [0] ▁= ▁new ▁Checkbox (" Bevande ", ▁bar , ▁false ); ▁scelta _ bar [1] ▁= ▁new ▁Checkbox (" C ibi ", ▁bar , ▁false ); ▁panel [1]. add ( label 1); ▁panel [1]. add ( scelta _ bar [0] ); ▁panel [1]. add ( scelta _ bar [1] ); ▁// Cre o ▁il ▁pannello ▁dal ▁ristorante ▁label 2 ▁= ▁new ▁Label (" Ristorante "); ▁label 2. setFont ( Configurazione Sistema . font _ titolo ); ▁ristorante ▁= ▁new ▁CheckboxGroup (); ▁scelta _ piatto ▁= ▁new ▁Checkbox [6] ; ▁scelta _ piatto [0] ▁= ▁new ▁Checkbox (" A ntipasti ", ▁ristorante , ▁false ); ▁scelta _ piatto [1] ▁= ▁new ▁Checkbox (" Prim i ", ▁ristorante , ▁false ); ▁scelta _ piatto [2] ▁= ▁new ▁Checkbox (" Second i ", ▁ristorante , ▁false ); ▁scelta _ piatto [3] ▁= ▁new ▁Checkbox (" Conto rn i ", ▁ristorante , ▁false ); ▁scelta _ piatto [4] ▁= ▁new ▁Checkbox (" Des sert ", ▁ristorante , ▁false ); ▁scelta _ piatto [5] ▁= ▁new ▁Checkbox (" Frutta ", ▁ristorante , ▁false ); ▁panel [2]. add ( label 2 ); ▁panel [2]. add ( scelta _ piatto [0] ); ▁panel [2]. add ( scelta _ piatto [1] ); ▁panel [2]. add ( scelta _ piatto [2] ); ▁panel [2]. add ( scelta _ piatto [3] ); ▁panel [2]. add ( scelta _ piatto [4] ); ▁panel [2]. add ( scelta _ piatto [5] ); ▁label 3 ▁= ▁new ▁Label (" Servizi "); ▁label 3. setFont ( Configurazione Sistema . font _ titolo ); ▁servizi ▁= ▁new ▁CheckboxGroup (); ▁scelta _ servizio ▁= ▁new ▁Checkbox [2] ; ▁scelta _ servizio [0] ▁= ▁new ▁Checkbox (" R i cre ativi ", ▁servizi , ▁false ); ▁scelta _ servizio [1] ▁= ▁new ▁Checkbox (" Al tro ", ▁servizi , ▁false ); ▁panel [3]. add ( label 3 ); ▁panel [3]. add ( scelta _ servizio [0] ); ▁panel [3]. add ( scelta _ servizio [1] ); ▁label 4 ▁= ▁new ▁Label (" Bevande "); ▁label 4. setFont ( Configurazione Sistema . font _ titolo ); ▁bevande ▁= ▁new ▁CheckboxGroup (); ▁scelta _ bevanda ▁= ▁new ▁Checkbox [3] ; ▁scelta _ bevanda [0] ▁= ▁new ▁Checkbox (" C a ffe tte ri a ", ▁bevande , ▁false ); ▁scelta _ bevanda [1] ▁= ▁new ▁Checkbox (" An al co lic i ", ▁bevande , ▁false ); ▁scelta _ bevanda [2] ▁= ▁new ▁Checkbox (" Al co lic i ", ▁bevande , ▁false ); ▁panel [4]. add ( label 4 ); ▁panel [4]. add ( scelta _ bevanda [0] ); ▁panel [4]. add ( scelta _ bevanda [1] ); ▁panel [4]. add ( scelta _ bevanda [2] ); ▁// Cre o ▁il ▁pannello ▁dei ▁cibi ▁label 5 ▁= ▁new ▁Label (" C ibi "); ▁label 5. setFont ( Configurazione Sistema . font _ titolo ); ▁cibi ▁= ▁new ▁CheckboxGroup (); ▁scelta _ cibo ▁= ▁new ▁Checkbox [3] ; ▁scelta _ cibo [0] ▁= ▁new ▁Checkbox (" Dol ci ", ▁cibi , ▁false ); ▁scelta _ cibo [1]= ▁new ▁Checkbox (" S a lati ", ▁cibi , ▁false ); ▁panel [5]. add ( label 5); ▁panel [5]. add ( scelta _ cibo [0] ); ▁panel [5]. add ( scelta _ cibo [1] ); ▁// Cre o ▁il ▁pannello ▁degli ▁antipasti ▁label 6 ▁= ▁new ▁Label (" A ntipasti "); ▁label 6. setFont ( Configurazione Sistema . font _ titolo ); ▁antipasti ▁= ▁new ▁CheckboxGroup (); ▁scelta _ antipasto ▁= ▁new ▁Checkbox [3] ; ▁scelta _ antipasto [0] ▁= ▁new ▁Checkbox (" Fre dd i ", ▁antipasti , ▁false ); ▁scelta _ antipasto [1] ▁= ▁new ▁Checkbox (" C al di ", ▁antipasti , ▁false ); ▁panel [6]. add ( label 6 ); ▁panel [6]. add ( scelta _ antipasto [0] ); ▁panel [6]. add ( scelta _ antipasto [1] ); ▁// Cre o ▁il ▁pannello ▁dei ▁primi ▁label 7 = new ▁Label (" Prim i "); ▁label 7. setFont ( Configurazione Sistema . font _ titolo ); ▁primi = new ▁CheckboxGroup (); ▁scelta _ primo = new ▁Checkbox [3] ; ▁scelta _ primo [0] = new ▁Checkbox (" S o li di ", primi , false ); ▁scelta _ primo [1]= new ▁Checkbox (" L i qui di ", primi , false ); ▁panel [7]. add ( label 7 ); ▁panel [7]. add ( scelta _ primo [0] ); ▁panel [7]. add ( scelta _ primo [1] ); ▁// Cre o ▁il ▁pannello ▁dei ▁secondi ▁label 8 = new ▁Label (" Second i "); ▁label 8. setFont ( Configurazione Sistema . font _ titolo ); ▁secondi = new ▁CheckboxGroup (); ▁scelta _ secondo = new ▁Checkbox [3] ; ▁scelta _ secondo [0] = new ▁Checkbox (" Carne ", secondi , false ); ▁scelta _ secondo [1]= new ▁Checkbox (" P e sce ", secondi , false ); ▁panel [8]. add ( label 8 ); ▁panel [8]. add ( scelta _ secondo [0] ); ▁panel [8]. add ( scelta _ secondo [1] ); ▁// Cre o ▁il ▁pannello ▁dei ▁contorni ▁label 9 ▁= ▁new ▁Label (" Conto rn i "); ▁label 9. setFont ( Configurazione Sistema . font _ titolo ); ▁contorni ▁= ▁new ▁CheckboxGroup (); ▁scelta _ contorno ▁= ▁new ▁Checkbox [3] ; ▁scelta _ contorno [0] ▁= ▁new ▁Checkbox (" Verd ura ▁co tta ", ▁contorni , ▁false ); ▁scelta _ contorno [1] ▁= ▁new ▁Checkbox (" Verd ura ▁c ru da ", ▁contorni , ▁false ); ▁scelta _ contorno [2] ▁= ▁new ▁Checkbox (" Form aggio ", ▁contorni , ▁false ); ▁panel [9]. add ( label 9 ); ▁panel [9]. add ( scelta _ contorno [0] ); ▁panel [9]. add ( scelta _ contorno [1] ); ▁panel [9]. add ( scelta _ contorno [2] ); ▁// Cre o ▁il ▁pannello ▁ BAR - Bevande ▁panel [10]. setLayout ( gridbag ); ▁label 12 ▁= ▁new ▁Label (" Nome ▁del ▁bene "); ▁label 13 ▁= ▁new ▁Label (" Prezzo ▁del ▁bene ▁"+( Principale . config ) . get Valuta ()+"." ); ▁testo 3 ▁= ▁new ▁TextField ("",4 0) ; ▁testo 4 ▁= ▁new ▁TextField ("", 10 ); ▁annulla ▁= ▁new ▁Button (" Annulla "); ▁conferma ▁= ▁new ▁Button (" Conferma "); ▁ Utils . constrain ( panel [10] , ▁label 12, ▁0, ▁0, ▁1, ▁1, Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁ 5, ▁ 5, ▁0) ; ▁ Utils . constrain ( panel [10] , ▁testo 3, ▁1, ▁0, ▁ 4, ▁1, Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁ 5, ▁0) ; ▁ Utils . constrain ( panel [10] , ▁label 13, ▁0, ▁1, ▁1, ▁1, Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁ 0.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁0) ; ▁ Utils . constrain ( panel [10] , ▁testo 4, ▁1, ▁1, ▁1, ▁1, Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁0) ; ▁ Utils . constrain ( panel [10] , ▁annulla , ▁1, ▁2, ▁1, ▁1, Grid BagConstraints . NONE , ▁Grid BagConstraints . EAST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁0, ▁ 5); ▁ Utils . constrain ( panel [10] , ▁conferma , ▁2, ▁2, ▁1, ▁1, Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁0, ▁ 5); ▁} ▁p ublic ▁void ▁init () ▁{ ▁prima _ scelta [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( prima _ scelta [0]. getStat e ()) ▁{ ▁inComune ABC ( scelta _ bar , ▁1, ▁BeneServizio . BAR ); ▁} ▁} ▁} ); ▁prima _ scelta [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( prima _ scelta [1]. getStat e ()) ▁{ ▁inComune ABC ( scelta _ piatto , ▁2, ▁BeneServizio . RISTORANTE ); ▁} ▁} ▁} ); ▁prima _ scelta [2]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( prima _ scelta [2]. getStat e ()) ▁{ ▁inComune ABC ( scelta _ servizio , ▁3, ▁BeneServizio . SERVIZI ); ▁} ▁} ▁} ); ▁scelta _ bar [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ bar [0]. getStat e ()) ▁{ ▁inComune GH ( scelta _ bevanda , ▁ 4, ▁BeneServizio . BE V AND E ); ▁} ▁} ▁} ); ▁scelta _ bar [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ bar [1]. getStat e ()) ▁{ ▁inComune GH ( scelta _ cibo , ▁ 5, ▁BeneServizio . CI BI ); ▁} ▁} ▁} ); ▁scelta _ piatto [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ piatto [0]. getStat e ()) ▁{ ▁inComune I LMN ( scelta _ antipasto , ▁ 6, ▁BeneServizio . ANTI P A ST I ); ▁} ▁} ▁} ); ▁scelta _ piatto [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ piatto [1]. getStat e ()) ▁{ ▁inComune I LMN ( scelta _ primo , ▁ 7, ▁BeneServizio . PR IMI ); ▁} ▁} ▁} ); ▁scelta _ piatto [2]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ piatto [2]. getStat e ()) ▁{ ▁inComune I LMN ( scelta _ secondo , ▁ 8, ▁BeneServizio . SECOND I ); ▁} ▁} ▁} ); ▁scelta _ piatto [3]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ piatto [3]. getStat e ()) ▁{ ▁inComune I LMN ( scelta _ contorno , ▁ 9, ▁BeneServizio . CONT OR N I ); ▁} ▁} ▁} ); ▁annulla . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁dispose (); ▁padre . setEnabled ( true ); ▁} ▁} ); ▁} ▁// ▁init ▁void ▁inComune ABC ( Checkbox [] ▁scelt e , ▁int ▁numero _ pannello , ▁char ▁c ) ▁{ ▁ level ▁= ▁0; ▁for ( int ▁i =1; i <13; ++ i ) ▁{ ▁if ( panel [ i ]. isVisible ()) ▁remove ( panel [ i ]); ▁} ▁this . add ( panel [ numero _ pannello ]); ▁panel [ numero _ pannello ]. setVisible ( true ); ▁ setVisible ( true ); ▁codice ▁= ▁compos e Code ( level , ▁c ); ▁} ▁void ▁inComune GH ( Checkbox [] ▁scelt e , ▁int ▁numero _ pannello , ▁char ▁c ) ▁{ ▁ level ▁= ▁1; ▁for ( int ▁i = 2; i <13; ++ i ) ▁{ ▁if ( panel [ i ]. isVisible ()) ▁remove ( panel [ i ]); ▁} ▁this . add ( panel [ numero _ pannello ]); ▁panel [ numero _ pannello ]. setVisible ( true ); ▁ setVisible ( true ); ▁codice ▁= ▁compos e Code ( level , ▁c ); ▁} ▁void ▁inComune I LMN ( Checkbox [] ▁scelt e , ▁int ▁numero _ pannello , ▁char ▁c ) ▁{ ▁ level ▁= ▁1; ▁if ▁( panel [1]. isVisible ()) ▁remove ( panel [1] ); ▁for ▁( int ▁i ▁= ▁3; ▁i ▁< ▁13 ; ▁i ++) ▁if ▁( panel [ i ]. isVisible ()) ▁remove ( panel [ i ]); ▁this . add ( panel [ numero _ pannello ]); ▁panel [ numero _ pannello ]. setVisible ( true ); ▁ setVisible ( true ); ▁codice ▁= ▁compos e Code ( level , ▁c ); ▁} ▁boolean ▁errore () ▁{ ▁Frame ▁msg ; ▁if ▁( ▁!(( testo 3. getText ()). length () ▁< ▁33 ▁) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁La ▁descrizione ▁del ▁bene ▁o ▁servizio ▁deve ▁essere ▁di ▁al ▁piu ' ▁32 ▁caratteri ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁( testo 3. getText ()). equals ("") ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Man ca ▁la ▁descrizione ▁del ▁bene ▁o ▁servizio ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁( testo 4. getText ()). equals ("") ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Man ca ▁il ▁prezzo ▁del ▁bene ▁o ▁servizio ! ▁"); ▁return ▁true ; ▁} ▁if ▁( ▁!( Utils . is Float Pos ( testo 4. getText ())) ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁Il ▁prezzo ▁deve ▁essere ▁un ▁numero ▁positivo ! ▁"); ▁return ▁true ; ▁} ▁return ▁false ; ▁} ▁char [] ▁compos e Code ( int ▁index , ▁char ▁tipo ) ▁{ ▁codice [ index ] ▁= ▁tipo ; ▁for ▁( ▁int ▁i ▁= ▁index +1; ▁i ▁< ▁3; ▁++ i ) ▁codice [ i ] ▁= ▁' ▁' ; ▁return ▁codice ; ▁} ▁char [] ▁complete Code () ▁{ ▁if ▁( codice [1] ▁== ▁' ▁' ) ▁codice [1] ▁= ▁' 0 ' ; ▁if ▁( codice [2] ▁== ▁' ▁' ) ▁codice [2] ▁= ▁' 0 ' ; ▁return ▁codice ; ▁} ▁void ▁o () ▁{ ▁if ▁( panel [10]. isVisible ()) ▁// ▁necessari o ▁nella ▁finestra ▁di ▁modifica ▁remove ( panel [10] ); ▁if ▁( panel [12]. isVisible ()) ▁// ▁necessari o ▁nella ▁finestra ▁di ▁cancellazione ▁remove ( panel [12] ); ▁inComune OP (); ▁} ▁void ▁p () ▁// ▁ Frutta ▁o ▁de s sert ▁{ ▁if ( panel [1]. isVisible ()) ▁remove ( panel [1] ); ▁for ( int ▁i =3; i <13; ++ i ) ▁{ ▁if ( panel [ i ]. isVisible ()) ▁remove ( panel [ i ]); ▁} ▁inComune OP (); ▁} ▁void ▁inComune OP () ▁{ ▁complete Code (); ▁if ▁( elenco . getItemCount () ▁ > ▁0) ▁// per ▁ev itare ▁warning ▁elenco . removeAll (); ▁crea Lista (); ▁this . add ( panel [11] ); ▁panel [11] . setVisible ( true ); ▁ setVisible ( true ); ▁} ▁void ▁crea Lista () ▁{ ▁int ▁i =1; ▁BeneServizio ▁b ; ▁L ▁= ▁( Principale . db ) . elenco BeniServizi ( new ▁String ( codice )); ▁if ▁( L ▁ != ▁null ) ▁{ ▁while ▁( i ▁<= ▁L . length ()) ▁{ ▁b ▁= ▁L . get BeneServizio ( i ); ▁elenco . addItem ( b . toString ()); ▁i ++ ; ▁} ▁} ▁} ▁}