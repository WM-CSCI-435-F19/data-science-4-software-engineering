▁p ackage ▁interfacce ; ▁import ▁java . awt .* ; ▁import ▁java . awt . event .* ; ▁import ▁common . utility .* ; ▁import ▁common . def .* ; ▁import ▁modul i . Lista Disponibilita ; ▁import ▁modul i . Disponibilita ; ▁import ▁modul i . Lista Commissionamenti ; ▁import ▁modul i . Commissionamento ; ▁p ublic ▁class ▁Maschera Disponibilita ▁ext ends ▁Frame ▁{ ▁Button ▁Indietro , ▁Visualizza ; ▁TextField ▁testo ; ▁Label ▁etichetta 1, ▁etichetta 2, ▁etichetta 3, ▁label 3, ▁label 5, ▁label 1; ▁Panel ▁panel []; ▁CheckboxGroup ▁checkbox _ group ; ▁Checkbox [] ▁checkboxes ; ▁GridBagLayout ▁gridbag ▁= ▁new ▁GridBagLayout (); ▁List ▁lista _ disp ; ▁Frame ▁padre ; ▁Costanti ▁cost ; ▁int ▁anno _ corr , ▁anno _ prox ; ▁String ▁agenzia ; ▁Lista Disponibilita ▁L ; ▁p ublic ▁Maschera Disponibilita ( Frame ▁parent , ▁String ▁nome _ ag ) ▁{ ▁super (" Disponibilita ▁delle ▁stanze "); ▁padre ▁= ▁parent ; ▁agenzia ▁= ▁new ▁String ( nome _ ag ); ▁padre . setEnabled ( false ); ▁setupPanel s (); ▁pack (); ▁init (); ▁this . setVisible ( true ); ▁} ▁void ▁setupPanel s () ▁{ ▁this . setFont ( Configurazione Sistema . font _ base ); ▁// Cre o ▁i ▁pulsanti ▁Indietro ▁= ▁new ▁Button (" ▁Indietro ▁"); ▁// Annulla . setFont ( new ▁Font (" Cour ier ", ▁Font . PL A IN , ▁12) ); ▁Visualizza ▁= ▁new ▁Button (" Visualizza ▁disponibilita "); ▁Visualizza . setEnabled ( false ); ▁// Conferma . setFont ( new ▁Font (" Cour ier ", ▁Font . PL A IN , ▁12) ); ▁// Cre o ▁le ▁etichette ▁etichetta 1 ▁= ▁new ▁Label (" Selezionare ▁il ▁tipo ▁di ▁ricerca ▁che ▁si ▁desidera ▁effettuare : "); ▁etichetta 1. setFont ( Configurazione Sistema . font _ titolo ); ▁etichetta 2 ▁= ▁new ▁Label (" Risultat o ▁della ▁ricerca : "); ▁etichetta 2. setFont ( Configurazione Sistema . font _ titolo ); ▁etichetta 3 ▁= ▁new ▁Label (" Ricerca ▁per ▁stanza : "); ▁etichetta 3. setFont ( Configurazione Sistema . font _ titolo ); ▁label 1 ▁= ▁new ▁Label (" Stanza ▁numero "); ▁// Cre o ▁un ▁Checkbox ▁ad ▁esclus ione ▁checkbox _ group ▁= ▁new ▁CheckboxGroup (); ▁checkboxes ▁= ▁new ▁Checkbox [2] ; ▁checkboxes [0] ▁= ▁new ▁Checkbox (" ▁Ricerca ▁per ▁stanza ", checkbox _ group , false ); ▁checkboxes [1] ▁= ▁new ▁Checkbox (" ▁Ricerca ▁su ▁tutt e ▁le ▁stanze ", checkbox _ group , false ); ▁// Cre o ▁il ▁TextField ▁e ▁lo ▁ rendo ▁non ▁edit abili ▁testo ▁= ▁new ▁TextField ("", ▁4 ); ▁testo . setEditable ( false ); ▁// cre o ▁una ▁Lista ▁lista _ disp ▁= ▁new ▁List (10, ▁false ); ▁panel = new ▁Panel [5]; ▁for ( int ▁i =0; i < panel . length ; ++ i ) ▁{ ▁panel [ i ]= new ▁Panel (); ▁panel [ i ]. setLayout ( gridbag ); ▁} ▁// Cre o ▁il ▁pannello ▁in ▁alto ▁a ▁s inistra ▁ Utils . constrain ( panel [1] , ▁etichetta 1, ▁0, ▁0, ▁3, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁ 10, ▁0) ; ▁ Utils . constrain ( panel [1] , ▁checkboxes [0], ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁0) ; ▁ Utils . constrain ( panel [1] , ▁checkboxes [1] , ▁0, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁0) ; ▁// Cre o ▁il ▁pannello ▁ricerca ▁per ▁stanza ▁ Utils . constrain ( panel [2] , ▁etichetta 3, ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁ 10, ▁0) ; ▁ Utils . constrain ( panel [2] , ▁label 1, ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁ 5, ▁0, ▁20 ); ▁ Utils . constrain ( panel [2] , ▁testo , ▁1, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁// Cre o ▁il ▁pannello ▁dei ▁pulsanti ▁ Utils . constrain ( panel [0], ▁Indietro , ▁1, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . EAST , ▁0.3 , ▁ 0.0, ▁ 10, ▁0, ▁ 10, ▁ 5); ▁ Utils . constrain ( panel [0], ▁Visualizza , ▁3, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁0.3 , ▁ 0.0, ▁ 10, ▁ 5, ▁ 10, ▁0) ; ▁// Cre o ▁il ▁pannello ▁contenente ▁la ▁list _ soggiornanti ▁ Utils . constrain ( panel [4] , ▁etichetta 2, ▁0, ▁0, ▁2, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁0, ▁0, ▁ 10, ▁0) ; ▁ Utils . constrain ( panel [4] , ▁lista _ disp , ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . BOTH , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁1.0, ▁0, ▁ 5, ▁0, ▁20 ); ▁// Attac co ▁i ▁pannelli ▁al ▁frame ▁this . setLayout ( gridbag ); ▁ Utils . constrain ( this , ▁panel [1] , ▁0, ▁0, ▁ 5, ▁ 4, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . NORTH WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , ▁panel [2] , ▁0, ▁ 4, ▁ 5, ▁2, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . WEST , ▁1.0, ▁1.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , ▁panel [0], ▁0, ▁ 6, ▁ 5, ▁1, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . SOUTH EAST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , ▁panel [4] , ▁0, ▁ 7, ▁ 5, ▁ 7, ▁Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . WEST , ▁1.0, ▁1.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁} ▁p ublic ▁void ▁init () ▁{ ▁cost ▁= ▁new ▁Costanti (); ▁anno _ corr ▁= ▁cost . getAnno Corr (); ▁anno _ prox ▁= ▁cost . getAnno Pro x (); ▁checkboxes [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁testo . setEditable ( true ); ▁Visualizza . setEnabled ( true ); ▁if ▁( lista _ disp . getItemCount () ▁ > ▁0) ▁lista _ disp . removeAll (); ▁} ▁} ); ▁checkboxes [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁testo . setEditable ( false ); ▁testo . setText (" "); ▁Visualizza . setEnabled ( true ); ▁if ▁( lista _ disp . getItemCount () ▁ > ▁0) ▁lista _ disp . removeAll (); ▁} ▁} ); ▁Visualizza . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁Disponibilita ▁disp ▁= ▁new ▁Disponibilita (); ▁String ▁str ▁= ▁new ▁String (" "); ▁// Tra m uto ▁temporanea mente ▁tutti ▁i ▁ commissionamenti ▁di ▁una ▁certa ▁agenzia ▁// in ▁disponibilita ▁Lista Disponibilita ▁L _ disp ▁= ▁( Principale . db ) . elenco Disponibilita (); ▁if ▁(! agenzia . equals ("")) ▁{ ▁Lista Commissionamenti ▁L _ comm ▁= ▁( Principale . db ) . found Commissionamenti ( agenzia ); ▁ Commissionamento ▁comm ; ▁for ▁( int ▁i ▁= ▁1; ▁i ▁<= ▁L _ comm . length (); ▁i ++) ▁{ ▁comm ▁= ▁L _ comm . get Commissionamento ( i ); ▁disp ▁= ▁ Utils . get DispOf Room ( L _ disp , comm . getNumStanz a (), true ); ▁disp . set Disponibilita ( comm . getInizio Comm (), comm . getFine Comm (), Flag . DISPONIBILE , ▁ Flag . COMMISSIONATA ); ▁L _ disp . add Disponibilita ( disp ); ▁} ▁str ▁= ▁new ▁String (" ▁-- - ▁commissioni ▁"+ agenzia ); ▁} ▁if ▁( L _ disp . length () ▁ > ▁0) ▁lista _ disp . addItem (" TAB E L L A ▁DELL E ▁ DISPONIBIL ITA ' "+ str ); ▁if ▁( checkboxes [0]. getStat e ()) ▁showDispOf Room ( L _ disp , testo . getText ()); ▁else ▁showDispOf Ho tel ( L _ disp ); ▁} ▁} ); ▁Indietro . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁dispose (); ▁padre . setEnabled ( true ); ▁} ▁} ); ▁} ▁void ▁showDispOf Room ( Lista Disponibilita ▁L , ▁String ▁room ) ▁{ ▁Frame ▁msg ; ▁Disponibilita ▁disp ; ▁String ▁ aus ; ▁if ▁( room . equals ("")) ▁msg ▁= ▁new ▁MessageDialog ( this ," Inseri re ▁il ▁numero ▁della ▁stanza ▁per ▁la ▁ricerca ▁delle ▁su e ▁disp o i bili ta "); ▁else ▁{ ▁disp ▁= ▁ Utils . get DispOf Room ( L , ▁room , ▁false ); ▁if ▁( disp ▁== ▁null ) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," La ▁stanza ▁inserita ▁e ' ▁inesistente !" ); ▁if ▁( lista _ disp . getItemCount () ▁ > ▁0) ▁lista _ disp . removeAll (); ▁} ▁else ▁{ ▁lista _ disp . addItem (" "); ▁lista _ disp . addItem (" Disponibilita ' ▁stanza ▁n . ▁"+ room +" ▁per ▁l ' anno ▁"+ anno _ corr ); ▁ aus ▁= ▁new ▁String ( Utils . scanVector For Disp ( disp . getDispAnno Corr (), ▁anno _ corr , ▁( Principale . config ) . getStagAnno Corr ())); ▁if ▁( aus . equals ("")) ▁lista _ disp . addItem (" NESS UN A ▁ DISPONIBIL ITA ' "); ▁else ▁lista _ disp . addItem ( aus ); ▁lista _ disp . addItem (" "); ▁lista _ disp . addItem (" Disponibilita ' ▁stanza ▁n . ▁"+ room +" ▁per ▁l ' anno ▁"+ anno _ prox ); ▁ aus ▁= ▁new ▁String ( Utils . scanVector For Disp ( disp . getDispAnno Pro x (), ▁anno _ prox , ▁( Principale . config ) . getStagAnno Pro x ())); ▁if ▁( aus . equals ("")) ▁lista _ disp . addItem (" NESS UN A ▁ DISPONIBIL ITA ' "); ▁else ▁lista _ disp . addItem ( aus ); ▁} ▁} ▁} ▁void ▁showDispOf Ho tel ( Lista Disponibilita ▁L ) ▁{ ▁Frame ▁msg ; ▁if ▁( L . length () ▁== ▁0) ▁msg ▁= ▁new ▁Avviso Dialog ( this ," Nessun a ▁stanza ▁trovata !" ); ▁else ▁for ▁( int ▁i ▁= ▁1; ▁i ▁<= ▁L . length (); ▁i ++) ▁showDispOf Room ( L , ▁( L . get Disponibilita ( i )). getNumStanz a ()); ▁} ▁}