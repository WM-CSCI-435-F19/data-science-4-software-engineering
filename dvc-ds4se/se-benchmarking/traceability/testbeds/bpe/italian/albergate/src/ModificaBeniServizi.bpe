▁p ackage ▁interfacce ; ▁import ▁java . awt .* ; ▁import ▁java . awt . event .* ; ▁import ▁common . utility .* ; ▁import ▁modul i . BeneServizio ; ▁import ▁modul i . DataBase ; ▁import ▁modul i . ListaBeniServizi ; ▁p ublic ▁class ▁Modifica BeniServizi ▁ext ends ▁Maschera BeneServizio ▁{ ▁BeneServizio ▁extra ▁= ▁null ; ▁Label ▁elenco _ extra 1, ▁elenco _ extra 2; ▁Button ▁annulla 3; ▁p ublic ▁Modifica BeniServizi () ▁{ ▁super (" Modifica ▁dei ▁dati ▁di ▁un ▁bene ▁o ▁servizio "); ▁setup Pannello (); ▁initialize (); ▁} ▁void ▁setup Pannello () ▁{ ▁panel [11] . setLayout ( gridbag ); ▁elenco _ extra 1 ▁= ▁new ▁Label (" Sceglie re ▁il ▁bene ▁o ▁servizio , ▁appartenen te "); ▁elenco _ extra 2 ▁= ▁new ▁Label (" alla ▁categori a ▁selezionata , ▁da ▁modificare "); ▁elenco ▁= ▁new ▁List ( 3, ▁false ); ▁annulla 3 ▁= ▁new ▁Button (" ▁Fine ▁"); ▁ Utils . constrain ( panel [11] , ▁elenco _ extra 1, ▁0, ▁0, ▁ 5, ▁1, Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel [11] , ▁elenco _ extra 2, ▁0, ▁1, ▁ 5, ▁1, Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁ 5, ▁0) ; ▁ Utils . constrain ( panel [11] , ▁elenco , ▁0, ▁2, ▁ 5, ▁1, Grid BagConstraints . HORIZONTAL , ▁Grid BagConstraints . CENTER , ▁1.0, ▁ 0.0, ▁0, ▁ 5, ▁ 5, ▁0) ; ▁ Utils . constrain ( panel [11] , ▁annulla 3, ▁2, ▁3, ▁1, ▁1, Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁} ▁p ublic ▁void ▁initialize () ▁{ ▁scelta _ piatto [4]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ piatto [4]. getStat e ()) ▁{ ▁ level ▁= ▁1; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . DES SERT ); ▁p (); ▁} ▁} ▁} ); ▁scelta _ piatto [5]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ piatto [5]. getStat e ()) ▁{ ▁ level ▁= ▁1; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . FR UT TA ); ▁p (); ▁} ▁} ▁} ); ▁scelta _ servizio [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ servizio [0]. getStat e ()) ▁{ ▁ level ▁= ▁1; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . RIC RE A TIVI ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ servizio [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ servizio [1]. getStat e ()) ▁{ ▁ level ▁= ▁1; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . ALT RO ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ bevanda [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ bevanda [0]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . CA FF ETT ERI A ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ bevanda [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ bevanda [1]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . A NAL COL ICI ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ bevanda [2]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ bevanda [2]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . AL COL ICI ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ cibo [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ cibo [0]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . DO L CI ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ cibo [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ cibo [1]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . SA L ATI ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ antipasto [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ antipasto [0]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . F RED DI ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ antipasto [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ antipasto [1]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . CAL DI ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ primo [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ primo [0]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . SOL IDI ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ primo [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ primo [1]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . LI QU IDI ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ secondo [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ secondo [0]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . C ARN E ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ secondo [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ secondo [1]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . P ESC E ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ contorno [0]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ contorno [0]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . VER D URA _ C OTTA ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ contorno [1]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ contorno [1]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . VER D URA _ CR UD A ); ▁o (); ▁} ▁} ▁} ); ▁scelta _ contorno [2]. add ItemListener ( new ▁ ItemListener () ▁{ ▁p ublic ▁void ▁item S tateChanged ( ItemEvent ▁e ) ▁{ ▁if ( scelta _ contorno [2]. getStat e ()) ▁{ ▁ level ▁= ▁2 ; ▁codice ▁= ▁compos e Code ( level , ▁BeneServizio . FORMA G GIO ); ▁o (); ▁} ▁} ▁} ); ▁conferma . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁startConferma (); ▁} ▁} ); ▁annulla 3. a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁dispose (); ▁padre . setEnabled ( true ); ▁} ▁} ); ▁elenco . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁bene Seleziona to (); ▁} ▁} ); ▁} ▁// ▁init ▁void ▁startConferma () ▁{ ▁int ▁id ; ▁MessageDialog ▁msg ; ▁if ▁(! errore ()) ▁{ ▁Float ▁px ▁= ▁Float . valueOf ( testo 4. getText ()); ▁int ▁j ; ▁if ▁( ( j ▁= ▁( Principale . db ) . change BeneServizio ( extra . get Cod Extra (), ▁testo 3. getText (), ▁px . float Value ())) ▁== ▁DataBase . OK ) ▁{ ▁for ( int ▁i =1; i <13; ++ i ) ▁if ( panel [ i ]. isVisible ()) ▁remove ( panel [ i ]); ▁panel [0]. setVisible ( true ); ▁} ▁else ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" P roblemi ▁con ▁il ▁data ▁base : ▁"+ DataBase . str Errore ( j )); ▁} ▁} ▁void ▁bene Seleziona to () ▁{ ▁extra ▁= ▁L . get BeneServizio ( ( elenco . getSelectedIndex es ()) [0] +1 ); ▁remove ( panel [11] ); ▁this . add ( panel [10] ); ▁testo 3. setText ( extra . getDescrizione ()); ▁testo 4. setText ( extra . getP xUnit ario ()+" "); ▁panel [10]. setVisible ( true ); ▁ setVisible ( true ); ▁} ▁}