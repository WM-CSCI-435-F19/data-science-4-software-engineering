▁p ackage ▁interfacce ; ▁import ▁java . awt .* ; ▁import ▁java . awt . event .* ; ▁import ▁common . utility .* ; ▁import ▁common . def .* ; ▁import ▁modul i .* ; ▁p ublic ▁class ▁ MascheraAddebiti ▁ext ends ▁Maschera PerAddebitare ▁{ ▁// ▁variabili ▁per ▁il ▁tra va so ▁del ▁database ▁in ▁memoria ▁String ▁stanza _ prec ▁= ▁new ▁String (" "); ▁// ▁oggett i ▁per ▁la ▁costru zione ▁della ▁finestra ▁Label ▁etich 1, ▁etich 2, ▁etich 3; ▁TextField ▁num _ stanza ; ▁p ublic ▁ MascheraAddebiti ( Frame ▁parent ) ▁{ ▁super (" Addebito ▁spes e ▁e ▁servizi ▁extra ", ▁" Conferma ▁l ' addebito "); ▁padre ▁= ▁parent ; ▁padre . setEnabled ( false ); ▁iniz Extra (); ▁setupPanel lo (); ▁inizializza (); ▁pack (); ▁ setVisible ( true ); ▁} ▁// ▁Tr ava so ▁dati ▁degli ▁extra ▁nell e ▁strutt ure ▁dati ▁ apposit e ▁void ▁iniz Extra () ▁{ ▁MessageDialog ▁msg ; ▁elenco _ extra ▁= ▁( Principale . db ) . elenco Senza Supp Rid (); ▁if ▁( elenco _ extra ▁ != ▁null ) ▁{ ▁if ▁( extra . getItemCount () ▁ > ▁0) ▁extra . removeAll (); ▁int ▁i =1; ▁while ▁( i ▁<= ▁elenco _ extra . length ()) ▁{ ▁extra . addItem ( ▁( elenco _ extra . get BeneServizio ( i )). toString () ▁ ); ▁i ++ ; ▁} ▁} ▁} ▁// ▁Crea zione ▁della ▁finestra ▁void ▁setupPanel lo () ▁{ ▁num _ stanza ▁= ▁new ▁TextField ("", ▁4 ); ▁num _ stanza . setEditable ( true ); ▁// ▁cre o ▁le ▁label ▁etich 1 ▁= ▁new ▁Label (" Gestione ▁degli ▁addebiti ▁"); ▁etich 1. setFont ( Configurazione Sistema . font _ titolo ); ▁etich 2 ▁= ▁new ▁Label (" Sceglie re ▁l ' extra ▁da ▁ addebitare ▁"); ▁etich 3 ▁= ▁new ▁Label (" Add e b itare ▁alla ▁stanza ▁numero ▁"); ▁// ▁cre o ▁pannello ▁di ▁s inistra ▁this . remove ( panel 1); ▁panel 1 ▁= ▁new ▁Panel (); ▁panel 1. setLayout ( gridbag ); ▁ Utils . constrain ( panel 1, ▁etich 1, ▁0, ▁0, ▁ 6, ▁1 ); ▁ Utils . constrain ( panel 1, ▁etich 2, ▁0, ▁1, ▁ 6, ▁1, ▁ 10, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 1, ▁extra , ▁0, ▁2, ▁ 6, ▁ 4, ▁Grid BagConstraints . BOTH , ▁Grid BagConstraints . WEST , ▁1.0, ▁1.0, ▁0, ▁20 , ▁0, ▁20 ); ▁this . remove ( panel 4 ); ▁panel 4 ▁= ▁new ▁Panel (); ▁panel 4. setLayout ( gridbag ); ▁ Utils . constrain ( panel 4, ▁etich 3, ▁0, ▁0, ▁1, ▁1, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( panel 4, ▁num _ stanza , ▁1, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . WEST , ▁1.0, ▁ 0.0, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁// ▁aggiung o ▁i ▁pannelli ▁ appen a ▁crea ti ▁al ▁resto ▁ Utils . constrain ( this , ▁panel 1, ▁0, ▁0, ▁1, ▁1, ▁Grid BagConstraints . VERTICAL , ▁Grid BagConstraints . WEST , ▁0. 5, ▁0. 5, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁ Utils . constrain ( this , ▁panel 4, ▁0, ▁2, ▁1, ▁1, ▁Grid BagConstraints . VERTICAL , ▁Grid BagConstraints . WEST , ▁0. 5, ▁0. 5, ▁ 5, ▁ 5, ▁ 5, ▁ 5); ▁} ▁// ▁Per ▁la ▁gestione ▁degli ▁eventi ▁della ▁finestra ▁void ▁inizializza () ▁{ ▁conferma . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁ scrivi Su DB ( num _ stanza . getText ()); ▁dispose (); ▁padre . setEnabled ( true ); ▁} ▁} ); ▁addebita . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁if ▁(! errore ()) ▁{ ▁addebito ▁= ▁true ; ▁aggiorna Addebiti (); ▁} ▁} ▁} ); ▁deaddebita . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁if ▁(! errore ()) ▁{ ▁addebito ▁= ▁false ; ▁aggiorna Addebiti (); ▁} ▁} ▁} ); ▁num _ stanza . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁if ▁(! errore ()) ▁{ ▁addebito ▁= ▁true ; ▁aggiorna Addebiti (); ▁} ▁} ▁} ); ▁extra . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁if ▁(! errore ()) ▁{ ▁addebito ▁= ▁true ; ▁aggiorna Addebiti (); ▁} ▁} ▁} ); ▁} ▁// ▁Ritorna ▁false ▁se ▁si ▁sta ' ▁cerca ndo ▁di ▁ addebitare ▁un ▁extra ▁in ▁// ▁man ca nza ▁dei ▁dati ▁necessari ▁per ▁l ' addebito : ▁num _ stanza ▁e ▁extra . ▁boolean ▁errore () ▁{ ▁if ▁( ( num _ stanza . getText ()). equals ("") ▁&& ▁( extra . getSelectedIndex () ▁== ▁-1) ) ▁{ ▁MessageDialog ▁p ▁= ▁new ▁MessageDialog ( this , ▁" Man ca ▁stanza ▁e ▁selezione !" ); ▁return ▁true ; ▁} ▁else ▁if ▁( ( num _ stanza . getText ()). equals ("")) ▁{ ▁MessageDialog ▁p ▁= ▁new ▁MessageDialog ( this , ▁" Man ca ▁stanza !" ); ▁return ▁true ; ▁} ▁else ▁if ▁( extra . getSelectedIndex () ▁== ▁-1) ▁{ ▁MessageDialog ▁p ▁= ▁new ▁MessageDialog ( this , ▁" Man ca ▁selezione !" ); ▁return ▁true ; ▁} ▁else ▁if ▁( ▁( num _ stanza . getText ()). length () ▁ > ▁4 ▁) ▁{ ▁MessageDialog ▁p ▁= ▁new ▁MessageDialog ( this , ▁" Errore ▁nel ▁numero ▁di ▁stanza !" ); ▁return ▁true ; ▁} ▁else ▁return ▁false ; ▁} ▁void ▁annulla Addebiti Stanza Prec () ▁{ ▁stanza _ prec ▁= ▁new ▁String ( num _ stanza . getText ()); ▁aggiornaA video (); ▁} ▁// ▁Aggiorna ▁il ▁panel 2, ▁che ▁e ' ▁quell o ▁di ▁informazion e ▁su gli ▁addebiti ▁// ▁di ▁una ▁data ▁stanza , ▁in ▁mod o ▁che ▁conteng a ▁le ▁informazioni ▁// ▁aggiornat e ▁su gli ▁addebiti . ▁void ▁aggiorna Addebiti () ▁{ ▁if ▁( ▁!( stanza _ prec . equals ( num _ stanza . getText ())) ▁) ▁Altr aStanza (); ▁else ▁aggiornaA video (); ▁} ▁boolean ▁there Is Modifiche () ▁{ ▁boolean ▁modifiche ▁= ▁false ; ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁quantita _ mod . length ; ▁i ++) ▁modifiche ▁= ▁modifiche ▁|| ▁( quantita _ mod [ i ] ▁ != ▁0) ; ▁return ▁modifiche ; ▁} ▁// ▁Re iniz zi al izza ▁l ' array ▁degli ▁addebiti ▁in ▁quanto ▁si ▁cambia ▁stanza ▁// ▁e ▁chiede ▁se ▁gli ▁addebiti ▁fatt i ▁alla ▁stanza ▁precedente ▁v anno ▁// ▁conferma ti ▁o ▁meno . ▁void ▁Altr aStanza () ▁{ ▁Frame ▁msg ; ▁FinModifiche ▁p ; ▁if ▁( ▁( Principale . db ) . read Stanza ( num _ stanza . getText ()) ▁ != ▁null ▁) ▁{ ▁L istaSoggiornanti ▁L ; ▁if ▁( ▁( L ▁= ▁( Principale . db ) . foundSoggiornant i ( num _ stanza . getText (), ▁false ) ▁) ▁ != ▁null ▁) ▁{ ▁if ▁(! L . isEmpty ()) ▁{ ▁if ▁(! stanza _ prec . equals ("") ▁&& ▁there Is Modifiche ()) ▁{ ▁p ▁= ▁new ▁FinModifiche ( this , ▁" Attenzione : ▁cambio ▁di ▁stanza !" ); ▁} ▁else ▁{ ▁ri scrivi Elenco Addebiti (); ▁annulla Addebiti Stanza Prec (); ▁} ▁} ▁else ▁{ ▁msg ▁= ▁new ▁Avviso Dialog ( this , ▁" Nessun ▁soggiornante ▁occupa ▁la ▁stanza !" ); ▁num _ stanza . setText ( stanza _ prec ); ▁} ▁} ▁else ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" P roblemi ▁con ▁il ▁database : ▁errore . "); ▁} ▁} ▁else ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" Stanza ▁inesistente !" ); ▁num _ stanza . setText ( stanza _ prec ); ▁} ▁} ▁void ▁ri scrivi Elenco Addebiti () ▁{ ▁MessageDialog ▁msg ; ▁elenco _ addebiti ▁= ▁( Principale . db ) . found Addebiti ( num _ stanza . getText ()); ▁elenco _ extra _ addebitati ▁= ▁new ▁ ListaBeniServizi (); ▁if ▁( elenco _ addebiti ▁ != ▁null ) ▁{ ▁// ▁inizializz o ▁l ' array ▁delle ▁modifiche ▁e ▁degli ▁extra ▁addebitati ▁quantita _ mod ▁= ▁new ▁int [ elenco _ addebiti . length () ]; ▁BeneServizio ▁extra ; ▁for ▁( int ▁i =0; ▁i < quantita _ mod . length ; ▁i ++) ▁{ ▁quantita _ mod [ i ] ▁= ▁0; ▁extra ▁= ▁( Principale . db ) . read BeneServizio ( ▁( elenco _ addebiti . get Addebito ( i +1)) . get Cod Extra () ▁ ); ▁if ▁( extra ▁== ▁null ) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" Un o ▁degli ▁extra ▁addebitati ▁non ▁e ' ▁stato ▁trovato !" ); ▁extra ▁= ▁new ▁BeneServizio ( ▁( elenco _ addebiti . get Addebito ( i +1)) . get Cod Extra (), ▁" S conosc i uto ", ▁0 ▁ ); ▁} ▁elenco _ extra _ addebitati . add BeneServizio ( ▁extra ▁ ); ▁} ▁} ▁else ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" Errore ▁nel ▁database !" ); ▁} ▁int ▁pos Extra In Addebiti ( BeneServizio ▁b ) ▁{ ▁for ▁( int ▁i ▁= ▁1; ▁i ▁<= ▁elenco _ addebiti . length (); ▁i ++) ▁if ▁( ▁( ( elenco _ addebiti . get Addebito ( i )). get Cod Extra ()). equals ( b . get Cod Extra ()) ▁) ▁return ▁i ; ▁return ▁ -1; ▁} ▁void ▁aggiornaA video () ▁{ ▁Frame ▁msg ; ▁int ▁supp []; ▁BeneServizio ▁extra _ scelto ▁= ▁elenco _ extra . get BeneServizio ( ▁extra . getSelectedIndex () ▁+ ▁1 ▁ ); ▁int ▁pos ; ▁if ▁( ( pos ▁= ▁pos Extra In Addebiti ( extra _ scelto )) ▁< ▁0 ▁&& ▁addebito ) ▁{ ▁Addebito ▁a ▁= ▁new ▁Addebito ( num _ stanza . getText (), ▁extra _ scelto . get Cod Extra (), ▁0, ▁0) ; ▁elenco _ addebiti . add Addebito ( ▁a ▁ ); ▁elenco _ extra _ addebitati . add BeneServizio ( ▁extra _ scelto ▁ ); ▁// ▁all ung o ▁l ' array ▁delle ▁quantita ' ▁modificate ▁supp ▁= ▁new ▁int [ elenco _ addebiti . length () ]; ▁for ▁( int ▁i ▁= ▁0; ▁i < quantita _ mod . length ; ▁i ++) ▁supp [ i ] ▁= ▁quantita _ mod [ i ]; ▁supp [ supp . length ▁- ▁1] ▁= ▁1; ▁quantita _ mod ▁= ▁supp ; ▁pos ▁= ▁quantita _ mod . length ; ▁extra _ add . setText ( extra . getSelectedItem ()); ▁continu a Aggiornamento (); ▁} ▁else ▁{ ▁if ▁( pos ▁< ▁0) ▁{ ▁// ▁sto ▁cerca ndo ▁di ▁to glie re ▁da ▁un ▁addebito ▁inesistente ▁msg ▁= ▁new ▁Avviso Dialog ( this , ▁" Sta i ▁cerca ndo ▁di ▁to glie re ▁da ▁un ▁addebito ▁ orma i ▁inesistente !" ); ▁} ▁else ▁{ ▁// ▁aggiorn o ▁ tale ▁array ▁per ▁con tenere ▁l ' addebito ▁ appen a ▁effettuato ▁if ▁( addebito ) ▁{ ▁quantita _ mod [ pos ▁- ▁1] ++ ; ▁extra _ add . setText ( extra . getSelectedItem ()); ▁continu a Aggiornamento (); ▁} ▁else ▁if ▁( ▁( quantita _ mod [ pos ▁- ▁1]+ ( elenco _ addebiti . get Addebito ( pos )). get Quantita ()) ▁ > ▁0) ▁{ ▁quantita _ mod [ pos ▁- ▁1] -- ; ▁extra _ add . setText ( extra . getSelectedItem ()); ▁continu a Aggiornamento (); ▁} ▁else ▁msg ▁= ▁new ▁Avviso Dialog ( this , ▁" Sta i ▁cerca ndo ▁di ▁to glie re ▁da ▁un ▁addebito ▁ orma i ▁inesistente !" ); ▁} ▁} ▁} ▁void ▁continu a Aggiornamento () ▁{ ▁int ▁i ▁= ▁1; ▁BeneServizio ▁e ; ▁float ▁conto ▁= ▁0; ▁if ▁( addebiti . getItemCount () ▁ > ▁0) ▁addebiti . removeAll (); ▁while ▁( ▁i ▁<= ▁elenco _ addebiti . length () ▁) ▁{ ▁if ▁( ▁( ( elenco _ addebiti . get Addebito ( i )). get Quantita () ▁+ ▁quantita _ mod [ i -1] ) ▁ > ▁0 ▁) ▁{ ▁e ▁= ▁elenco _ extra _ addebitati . get BeneServizio ( i ); ▁if ▁( ▁Integer . parse Int ( e . get Cod Extra ()) ▁>= ▁ 40000000 ▁&& ▁Integer . parse Int ( e . get Cod Extra ()) ▁< ▁ 50000000 ) ▁addebiti . addItem (" S ▁"+ Utils . completa Stringa ( e . getDescrizione (), ▁32) +" ▁"+( Principale . config ) . get Valuta ()+"."+ ( elenco _ addebiti . get Addebito ( i )). getTot Addebito ()); ▁else ▁if ▁( ▁Integer . parse Int ( e . get Cod Extra ()) ▁>= ▁ 50000000 ) ▁addebiti . addItem (" R ▁"+ Utils . completa Stringa ( e . getDescrizione (), ▁32) +" ▁"+( Principale . config ) . get Valuta ()+"."+ ( elenco _ addebiti . get Addebito ( i )). getTot Addebito ()); ▁else ▁addebiti . addItem ( Utils . completa Stringa ( e . getDescrizione (), ▁ 10)+ ▁ Utils . completa Stringa (" ▁ x ▁"+( elenco _ addebiti . get Addebito ( i )). get Quantita (), ▁5 )+" ▁+ ( "+ quantita _ mod [ i -1]+" ) "); ▁conto ▁= ▁conto ▁+ ▁( elenco _ addebiti . get Addebito ( i )). getTot Addebito () ▁+ ▁quantita _ mod [ i -1] * e . getP xUnit ario (); ▁} ▁i ++ ; ▁} ▁totale . setText ( ( Principale . config ) . get Valuta ()+"."+ conto ); ▁} ▁void ▁ scrivi Su DB ( String ▁stanza ) ▁{ ▁for ▁( int ▁i ▁= ▁1; ▁i ▁<= ▁elenco _ addebiti . length (); ▁i ++) ▁{ ▁if ▁( quantita _ mod [ i -1] ▁ != ▁0) ▁{ ▁if ▁( ▁( quantita _ mod [ i ▁- ▁1]+ ( elenco _ addebiti . get Addebito ( i )). get Quantita ()) ▁ > ▁0) ▁{ ▁int ▁j ▁= ▁( Principale . db ) . add Addebito ( stanza , ▁( elenco _ addebiti . get Addebito ( i )). get Cod Extra (), ▁quantita _ mod [ i -1] ▁ ); ▁if ▁( j ▁< ▁0) ▁DataBase . vis Errore ( j ); ▁} ▁else ▁{ ▁int ▁j ▁= ▁( Principale . db ) . del Addebito ( stanza , ▁( elenco _ addebiti . get Addebito ( i )). get Cod Extra () ▁ ); ▁if ▁( j ▁< ▁0) ▁DataBase . vis Errore ( j ); ▁} ▁} ▁} ▁} ▁} ▁/ *************** *************** *************** *************** **************** / ▁class ▁FinModifiche ▁ext ends ▁Frame ▁{ ▁Button ▁ok , ▁annulla ; ▁Label ▁msg ▁= ▁new ▁Label (" Si ▁vogli ono ▁salva re ▁le ▁modifiche ▁degli ▁addebiti ▁della ▁stanza ▁precedente ? "); ▁GridBagLayout ▁gridbag ▁= ▁new ▁GridBagLayout (); ▁String ▁ titolo ; ▁ MascheraAddebiti ▁padre ▁= ▁null ; ▁p ublic ▁FinModifiche ( MascheraAddebiti ▁parent , ▁String ▁title ) ▁{ ▁super ( title ); ▁padre ▁= ▁parent ; ▁padre . setEnabled ( false ); ▁ titolo ▁= ▁new ▁String ( title ); ▁this . setLayout ( gridbag ); ▁ok ▁= ▁new ▁Button (" Salva ▁le ▁modifiche "); ▁annulla ▁= ▁new ▁Button (" Annulla ▁le ▁modifiche "); ▁ Utils . constrain ( this , ▁msg , ▁0, ▁0, ▁ 5, ▁2, ▁Grid BagConstraints . BOTH , ▁Grid BagConstraints . CENTER , ▁1.0, ▁1.0, ▁20 , ▁20 , ▁20 , ▁20 ); ▁ Utils . constrain ( this , ▁annulla , ▁1, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁1.0, ▁1.0, ▁20 , ▁20 , ▁20 , ▁20 ); ▁ Utils . constrain ( this , ▁ok , ▁3, ▁2, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁1.0, ▁1.0, ▁20 , ▁20 , ▁20 , ▁20 ); ▁this . pack (); ▁init (); ▁ setVisible ( true ); ▁} ▁p ublic ▁void ▁init () ▁{ ▁ok . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁padre . scrivi Su DB ( padre . stanza _ prec ); ▁inComune (); ▁} ▁} ); ▁annulla . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁inComune (); ▁} ▁} ); ▁} ▁void ▁inComune () ▁{ ▁padre . ri scrivi Elenco Addebiti (); ▁padre . annulla Addebiti Stanza Prec (); ▁padre . setEnabled ( true ); ▁dispose (); ▁} ▁}