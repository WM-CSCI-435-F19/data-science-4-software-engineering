▁p ackage ▁interfacce ; ▁import ▁java . awt .* ; ▁import ▁java . awt . event .* ; ▁import ▁java . util . Date ; ▁import ▁common . def .* ; ▁import ▁common . utility . Utils ; ▁import ▁common . utility . DateUtils ; ▁import ▁modul i .* ; ▁p ublic ▁class ▁MascheraCambio ▁ext ends ▁Frame ▁{ ▁TextField ▁stanza 1, ▁stanza 2; ▁Button ▁Annulla , ▁Conferma , ▁Ricerca ; ▁Label ▁etichetta 1, ▁etichetta 2; ▁Panel ▁panel 1, ▁panel 2; ▁GridBagLayout ▁gridbag ▁= ▁new ▁GridBagLayout (); ▁Prenotazione ▁p ; ▁Frame ▁padre ; ▁Maschera RicercaStanza ▁figlio ; ▁p ublic ▁MascheraCambio ( Frame ▁parent ) ▁{ ▁super (" Cambio ▁di ▁stanza "); ▁padre ▁= ▁parent ; ▁padre . setEnabled ( false ); ▁setup (); ▁init (); ▁pack (); ▁this . setVisible ( true ); ▁} ▁void ▁setup () ▁{ ▁this . setFont ( Configurazione Sistema . font _ base ); ▁stanza 1 ▁= ▁new ▁TextField ("", ▁4 ); ▁stanza 2 ▁= ▁new ▁TextField ("", ▁4 ); ▁stanza 2. setEditable ( false ); ▁etichetta 1 ▁= ▁new ▁Label (" Stanza ▁attuale "); ▁etichetta 2 ▁= ▁new ▁Label (" ▁Nuova ▁stanza "); ▁Annulla ▁= ▁new ▁Button (" ▁Annulla ▁"); ▁Ricerca ▁= ▁new ▁Button (" ▁Ricerca ▁"); ▁Conferma ▁= ▁new ▁Button (" Conferma "); ▁Conferma . setEnabled ( false ); ▁panel 1 ▁= ▁new ▁Panel (); ▁panel 1. setLayout ( gridbag ); ▁ Utils . constrain ( panel 1, ▁etichetta 1, ▁0, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 1, ▁stanza 1, ▁1, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 1, ▁etichetta 2, ▁2, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 1, ▁stanza 2, ▁3, ▁0, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . NORTH WEST , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁panel 2 ▁= ▁new ▁Panel (); ▁panel 2. setLayout ( gridbag ); ▁ Utils . constrain ( panel 2, ▁Annulla , ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 2, ▁Ricerca , ▁1, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁ Utils . constrain ( panel 2, ▁Conferma , ▁2, ▁1, ▁1, ▁1, ▁Grid BagConstraints . NONE , ▁Grid BagConstraints . CENTER , ▁ 0.0, ▁ 0.0, ▁0, ▁0, ▁0, ▁0) ; ▁this . setLayout ( gridbag ); ▁ Utils . constrain ( this , ▁panel 1, ▁0, ▁0, ▁1, ▁1, ▁Grid BagConstraints . BOTH , ▁Grid BagConstraints . WEST , ▁1.0, ▁1.0, ▁ 10, ▁ 10, ▁ 10, ▁10 ); ▁ Utils . constrain ( this , ▁panel 2, ▁0, ▁1, ▁1, ▁1, ▁Grid BagConstraints . BOTH , ▁Grid BagConstraints . EAST , ▁1.0, ▁1.0, ▁ 10, ▁ 10, ▁ 10, ▁10 ); ▁} ▁p ublic ▁void ▁init () ▁{ ▁Annulla . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁dispose (); ▁padre . setEnabled ( true ); ▁} ▁} ); ▁Conferma . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁startConferma (); ▁} ▁} ); ▁Ricerca . a ddActionListener ( new ▁ActionListener () ▁{ ▁p ublic ▁void ▁actionPerformed ( ActionEvent ▁e ) ▁{ ▁if ▁( no Error s ()) ▁{ ▁// stanza 1. setEditable ( false ); ▁start Ricerca (); ▁} ▁} ▁} ); ▁} ▁void ▁startConferma () ▁{ ▁Frame ▁msg ; ▁Lista Disponibilita ▁elenco _ disp ▁= ▁( Principale . db ) . elenco Disponibilita (); ▁if ▁( elenco _ disp ▁== ▁null ) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁P roblemi ▁con ▁il ▁database ▁nella ▁lettura ▁delle ▁disponibilita '! ▁"); ▁return ; ▁} ▁else ▁{ ▁if ▁( ctrl Posti ()) ▁{ ▁int ▁ris ; ▁if ▁( ▁( ris ▁= ▁( Principale . db ) . changeStanza Soggiornanti ( stanza 1. getText (), ▁stanza 2. getText ())) ▁ > ▁0 ▁) ▁{ ▁if ▁( ▁( ris ▁= ▁( Principale . db ) . changeStanza Addebiti ( stanza 1. getText (), ▁stanza 2. getText ())) ▁< ▁0 ▁) ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" P roblemi ▁con ▁il ▁database : ▁"+ DataBase . str Errore ( ris )); ▁if ▁( ▁( ris ▁= ▁( Principale . db ) . changeStanza Telefonate ( stanza 1. getText (), ▁stanza 2. getText ())) ▁< ▁0 ▁) ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" P roblemi ▁con ▁il ▁database : ▁"+ DataBase . str Errore ( ris )); ▁ Utils . aggiorna Disp ( elenco _ disp , stanza 1. getText (), p . getInizio Sogg (), p . getFine Sogg (), Flag . DISPONIBILE , Flag . OCCUPATA , true ); ▁ Utils . aggiorna Disp ( elenco _ disp , stanza 2. getText (), p . getInizio Sogg (), p . getFine Sogg (), Flag . OCCUPATA , Flag . DISPONIBILE , true ); ▁ Utils . aggiorna Disp ( elenco _ disp , stanza 2. getText (), p . getInizio Sogg (), p . getFine Sogg (), Flag . OCCUPATA , Flag . COMMISSIONATA , true ); ▁ Utils . aggiorna Disp ( elenco _ disp , stanza 2. getText (), p . getInizio Sogg (), p . getFine Sogg (), Flag . OCCUPATA , Flag . DISPONIBILE , true ); ▁ Utils . aggiorna Disp ( elenco _ disp , stanza 2. getText (), p . getInizio Sogg (), p . getFine Sogg (), Flag . OCCUPATA , Flag . COMMISSIONATA , true ); ▁if ▁( p . getT ramite Agenzia () ▁== ▁Const . SI ) ▁{ ▁ Utils . re store Commissioni ( stanza 1. getText ()); ▁} ▁msg ▁= ▁new ▁Avviso Dialog ( this ," La ▁stanza ▁e ' ▁stata ▁cambiat a ▁e ▁tutti ▁i ▁dati ▁riferit i ▁ad ▁essa ▁aggiornati "); ▁Conferma . setEnabled ( false ); ▁} ▁else ▁if ▁( ▁( ris ▁ != ▁0) ▁&& ▁(!( ris ▁== ▁DataBase . D ONT _ E X IST S _ STANZA ) ▁) ▁) ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" P roblemi ▁con ▁il ▁database : ▁"+ DataBase . str Errore ( ris )); ▁} ▁} ▁} ▁boolean ▁ctrl Posti () ▁{ ▁Frame ▁msg ; ▁L istaSoggiornanti ▁L _ sogg ▁= ▁( Principale . db ) . foundSoggiornant i ( stanza 1. getText (), false ); ▁Stanza ▁room 2 ▁= ▁( Principale . db ) . read Stanza ( stanza 2. getText ()); ▁if ▁( ▁!( room 2 ▁== null ) ▁&& ▁!( L _ sogg ▁== ▁null )) ▁if ▁( L _ sogg . length () ▁ > ▁conta Posti ( room 2 )) ▁{ ▁msg ▁= ▁new ▁Avviso Dialog ( this ," La ▁stanza ▁scelta ▁e ' ▁tr oppo ▁pic cola ▁per ▁"+ L _ sogg . length ()+" ▁persone "); ▁return ▁false ; ▁} ▁else ▁return ▁true ; ▁else ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁P roblemi ▁con ▁il ▁database ! ▁"); ▁return ▁false ; ▁} ▁} ▁int ▁conta Posti ( Stanza ▁s ) ▁{ ▁int ▁c ▁= ▁s . get Posti Letto (); ▁if ▁( s . getDisp Letto Agg () ▁== ▁Const . SI ) ▁c ++ ; ▁return ▁c ; ▁} ▁void ▁start Ricerca () ▁{ ▁this . setEnabled ( false ); ▁figlio ▁= ▁new ▁Maschera RicercaStanza (" Ricerca ▁di ▁stanze ▁disponibili ▁per ▁cambio ▁stanza ",3 ); ▁Soggiornante ▁sogg ▁= ▁( Principale . db ) . read Soggiornante ( stanza 1. getText (), 1); ▁p ▁= ▁( Principale . db ) . read Prenotazione ( sogg . getId Prenotazione ()); ▁if ▁( ▁!( p ▁== ▁null )) ▁{ ▁figlio . data _ inizio . setText ( DateUtils . parse Date ( DateUtils . give String Of Date ( new ▁Date ())) ); ▁figlio . data _ inizio . setEditable ( false ); ▁figlio . data _ fine . setText ( DateUtils . parse Date ( DateUtils . give String Of Date ( p . getFine Sogg ())) ); ▁figlio . save _ date ▁= ▁p . getFine Sogg (); ▁if ▁( p . getT ramite Agenzia () ▁== ▁Const . SI ) ▁{ ▁figlio . con _ ag . set State ( true ); ▁figlio . con _ ag . setEnabled ( false ); ▁figlio . nome _ ag . setText ( p . getNome Agenzia ()); ▁figlio . nome _ ag . setEditable ( false ); ▁} ▁figlio . setVisible ( true ); ▁figlio . father ▁= ▁this ; ▁} ▁} ▁boolean ▁no Error s () ▁{ ▁Frame ▁msg ; ▁Disponibilita ▁disp ▁= ▁new ▁Disponibilita (); ▁Lista Disponibilita ▁elenco _ disp ▁= ▁( Principale . db ) . elenco Disponibilita (); ▁if ▁( elenco _ disp ▁== ▁null ) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this , ▁" ▁P roblemi ▁con ▁il ▁database ▁nella ▁lettura ▁delle ▁disponibilita '! ▁"); ▁return ▁false ; ▁} ▁if ▁( ( stanza 1. getText () . equals ("")) ▁) ▁{ ▁msg ▁= ▁new ▁Avviso Dialog ( this ," ▁Inseri re ▁il ▁numero ▁della ▁stanza ▁da ▁cambiare ! ▁"); ▁return ▁false ; ▁} ▁else ▁{ ▁if ( ▁( Principale . db ) . read Stanza ( stanza 1. getText ()) ▁== ▁null ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁La ▁stanza ▁inserita ▁e ' ▁inesistente ! ▁"); ▁return ▁false ; ▁} ▁else ▁{ ▁disp ▁= ▁ Utils . get DispOf Room ( elenco _ disp , ▁stanza 1. getText (), ▁true ); ▁if ▁( disp ▁ != ▁null ) ▁{ ▁if ▁( ▁disp . getStatus Giorno ( DateUtils . data To giorni ( new ▁Date ()), Const . ANN O _ CORRENTE ) ▁ != ▁ Flag . OCCUPATA ▁) ▁{ ▁msg ▁= ▁new ▁MessageDialog ( this ," ▁La ▁stanza ▁inserita ▁non ▁e ' ▁attual mente ▁occupata ! ▁"); ▁return ▁false ; ▁} ▁} ▁} ▁} ▁return ▁true ; ▁} ▁}