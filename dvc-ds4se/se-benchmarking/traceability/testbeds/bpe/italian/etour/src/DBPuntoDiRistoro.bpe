▁ ï»¿ p ackage ▁unisa . gps . etour . repository ; ▁import ▁ Java . sql . Connection ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . sql . Statement ; ▁import ▁java . sql . Time ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . Date ; ▁import ▁unisa . gps . etour . bean . Bean PuntoDiRistoro ; ▁import ▁unisa . gps . etour . bean . BeanTag ; ▁import ▁unisa . gps . etour . util . Punto 3 D ; ▁/ ▁** ▁* ▁Class ▁that ▁implements ▁the ▁interface ▁of ▁Refreshment ▁* ▁* ▁@ ▁Auth or ▁J os eph ▁Mart one ▁* ▁@ ▁Version ▁0.1 ▁ 2007 ▁eTour ▁Pro ject ▁- ▁C opy right ▁by ▁SE ▁@ ▁ SA ▁Lab ▁DMI ▁University ▁* ▁Of ▁Salerno ▁* ▁/ ▁p ublic ▁class ▁ DBPuntoDiRistoro ▁implements ▁I DBPuntoDiRistoro ▁( ▁/ ▁/ ▁ Empty ▁constructor ▁p ublic ▁ DBPuntoDiRistoro ▁() ▁( ▁) ▁p ublic ▁boolean ▁cancella PuntoDiRistoro ▁( int ▁p IdPuntoDiRistoro ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁cancellation ▁String ▁query ▁= ▁" DE LE TE ▁FR OM ▁puntodiristoro ▁W HER E ▁Id ▁=" ▁+ ▁P IdPuntoDiRistoro ; ▁/ ▁/ ▁You ▁run ▁the ▁query ▁Cancellation ▁int ▁i ▁= ▁stat . executeUpdate ▁( query ); ▁/ ▁/ ▁ This ▁returns ▁the ▁back up ▁return ▁( i ▁== ▁1 ); ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁of ▁clos ing ▁the ▁Statement ▁and ▁the ▁/ ▁/ ▁Connect ▁finally ▁( ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁boolean ▁inserisci PuntoDiRistoro ▁( Bean PuntoDiRistoro ▁pPuntoDiRistoro ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Create ▁the ▁organiz ation ▁of ▁the ▁Opening ▁and ▁ Closing ▁java . sql . Time ▁orarioApertura ▁= ▁new ▁Time ▁( pPuntoDiRistoro ▁ . ▁get OrarioApertura ▁() . ▁getTime ▁()); ▁java . sql . Time ▁orarioChiusura ▁= ▁new ▁Time ▁( pPuntoDiRistoro ▁ . ▁get OrarioChiusura ▁() . ▁getTime ▁()); ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁for ▁the ▁insertion ▁of ▁a ▁refreshment ▁String ▁query ▁= ▁" INSER T ▁I NTO ▁puntodiristoro ▁( Name ," ▁+ ▁" Description , ▁ Tel e phone , ▁Latitude , ▁Longitude ," ▁+ ▁" Al t itu d e , ▁OrarioApertura , ▁OrarioChiusura , ▁GiornoChiusura " ▁+ ▁" T own , ▁city , ▁street , ▁postcode , ▁Province , ▁MediaVoti , ▁NumeroVoti " ▁+ ▁" PartitaIva ) ▁VALUES ▁( ▁'" ▁+ ▁pPuntoDiRistoro . getNome ▁() ▁PPuntoDiRistoro . getDescrizione ▁+ ▁"','" ▁+ ▁() ▁+ ▁"','" ▁PPuntoDiRistoro . getTelefono ▁+ ▁() ▁+ ▁" ▁'," ▁PPuntoDiRistoro . get Posizione ▁+ ▁() . ▁Get Latitudine ▁() ▁+ ▁"" ▁PPuntoDiRistoro . get Posizione ▁+ ▁() . ▁Get Longitudine ▁() ▁+ ▁"" ▁PPuntoDiRistoro . get Posizione ▁+ ▁() . ▁Get Altitudine ▁() ▁+ ▁" ▁'" ▁OrarioApertura . toString ▁+ ▁() ▁+ ▁"','" ▁OrarioChiusura . toString ▁+ ▁() ▁+ ▁"','" ▁PPuntoDiRistoro . get GiornoChiusura ▁+ ▁() ▁+ ▁"','" ▁PPuntoDiRistoro . getLocalita ▁+ ▁() ▁+ ▁"','" ▁PPuntoDiRistoro . getCitta ▁+ ▁() ▁+ ▁"','" ▁PPuntoDiRistoro . get Via ▁+ ▁() ▁+ ▁"','" ▁PPuntoDiRistoro . getCap ▁+ ▁() ▁+ ▁"','" ▁PPuntoDiRistoro . get Provincia ▁+ ▁() ▁+ ▁" ▁'," ▁PPuntoDiRistoro . get MediaVoti ▁+ ▁() ▁+ ▁"" ▁PPuntoDiRistoro . get NumeroVoti ▁+ ▁() ▁+ ▁" ▁'" ▁PPuntoDiRistoro . get PartitaIva ▁+ ▁() ▁+ ▁" ' ); "; ▁/ ▁/ ▁You ▁run ▁the ▁insert ▁query ▁int ▁i ▁= ▁stat . executeUpdate ▁( query ); ▁return ▁( i ▁== ▁1 ); ▁) ▁/ ▁/ ▁Is ▁al way s ▁d one ▁and ▁take s ▁ care ▁of ▁clos ing ▁the ▁statement , ▁and ▁/ ▁/ ▁Connect ▁finally ▁( ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁boolean ▁modifica PuntoDiRistoro ▁( Bean PuntoDiRistoro ▁pPuntoDiRistoro ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Create ▁the ▁organiz ation ▁of ▁the ▁Opening ▁and ▁ Closing ▁java . sql . Time ▁orarioApertura ▁= ▁new ▁Time ▁( pPuntoDiRistoro ▁ . ▁get OrarioApertura ▁() . ▁getTime ▁()); ▁java . sql . Time ▁orarioChiusura ▁= ▁new ▁Time ▁( pPuntoDiRistoro ▁ . ▁get OrarioChiusura ▁() . ▁getTime ▁()); ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁for ▁amendment ▁String ▁query ▁= ▁" UP DATE ▁puntodiristoro ▁SE T " ▁+ ▁" Name ▁= ▁'" ▁PPuntoDiRistoro . getNome ▁+ ▁() ▁+ ▁" ▁', ▁Description ▁='" ▁PPuntoDiRistoro . getDescrizione ▁+ ▁() ▁+ ▁" ▁', ▁Phone ▁='" ▁PPuntoDiRistoro . getTelefono ▁+ ▁() ▁+ ▁" ▁', ▁Latitude ▁=" ▁PPuntoDiRistoro . get Posizione ▁+ ▁() . ▁Get Latitudine ▁() ▁+ ▁" Longitude ▁=" ▁PPuntoDiRistoro . get Posizione ▁+ ▁() . ▁Get Longitudine ▁() ▁+ ▁" , ▁H eight ▁=" ▁PPuntoDiRistoro . get Posizione ▁+ ▁() . ▁Get Altitudine ▁() ▁+ ▁" , ▁OrarioApertura ▁= ▁'" ▁+ ▁orarioApertura . toString ▁() ▁+ ▁" ▁', ▁OrarioChiusura ▁='" ▁+ ▁orarioChiusura . toString ▁() ▁+ ▁" ▁', ▁GiornoChiusura ▁='" ▁PPuntoDiRistoro . get GiornoChiusura ▁+ ▁() ▁+ ▁" ▁', ▁Location ▁='" ▁PPuntoDiRistoro . getLocalita ▁+ ▁() ▁+ ▁" ▁', ▁City ▁='" ▁PPuntoDiRistoro . getCitta ▁+ ▁() ▁+ ▁" ▁', ▁ Via ▁='" ▁PPuntoDiRistoro . get Via ▁+ ▁() ▁+ ▁" ▁', ▁postcode ▁='" ▁PPuntoDiRistoro . getCap ▁+ ▁() ▁+ ▁" ▁', ▁State ▁='" ▁PPuntoDiRistoro . get Provincia ▁+ ▁() ▁+ ▁" ▁', ▁MediaVoti ▁=" ▁PPuntoDiRistoro . get MediaVoti ▁+ ▁() ▁+ ▁" , ▁NumeroVoti ▁=" ▁PPuntoDiRistoro . get NumeroVoti ▁+ ▁() ▁+ ▁" , ▁party ▁= ▁'" ▁PPuntoDiRistoro . get PartitaIva ▁+ ▁() ▁+ ▁" ▁' W HER E ▁Id ▁=" ▁+ ▁PPuntoDiRistoro . getId ▁(); ▁/ ▁/ ▁You ▁run ▁the ▁query ▁for ▁Change ▁int ▁i ▁= ▁stat . executeUpdate ▁( query ); ▁/ ▁/ ▁ This ▁returns ▁the ▁back up ▁return ▁( i ▁== ▁1 ); ▁) ▁/ ▁/ ▁Is ▁al way s ▁d one ▁and ▁take s ▁ care ▁of ▁clos ing ▁the ▁Statement ▁and ▁the ▁/ ▁/ ▁Connect ▁finally ▁( ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁int ▁ottieniNumero ElementiRicerca ▁( String ▁pKeyword , ▁ArrayList ▁< BeanTag > ▁pTags , ▁Punto 3 D ▁pPosizione , ▁double ▁ pDistanzaMassima ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁results ▁ResultSet ▁result ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁to ▁get ▁the ▁number ▁of ▁pages ▁String ▁query ▁= ▁" "; ▁if ▁( pTags . size ▁() ▁== ▁0) ▁( ▁/ ▁/ ▁Query ▁with out ▁the ▁control ▁tag ▁query ▁= ▁" SELECT ▁count ▁( number ) ▁FR OM ▁( SELECT ▁count ▁( puntodiristoro . Id ) ▁ AS ▁number " ▁+ ▁" FR OM ▁puntodiristoro " ▁+ ▁" W HER E ▁( puntodiristoro . Nome ▁LIKE ▁' % " ▁+ ▁PKeyword ▁+ ▁" % ▁' OR ▁puntodiristoro . Descrizione ▁LIKE ' % " ▁+ ▁PKeyword ▁+ ▁' % ' ) ▁" ▁+ ▁" AND ▁distance ▁( puntodiristoro . Latitudine , ▁puntodiristoro . Longitudine " ▁+ ▁PPosizione . get Latitudine ▁() ▁+ ▁"" ▁+ ▁PPosizione . get Longitudine ▁() ▁+ ▁" ) ▁< " ▁+ ▁ PDistanzaMassima ▁+ ▁" GROU P ▁B Y ▁puntodiristoro . Id " ▁+ ▁" ORD ER ▁B Y ▁count ▁( puntodiristoro . Id ) ▁DESC ) ▁ AS ▁table "; ▁) ▁else ▁( ▁/ ▁/ ▁Query ▁with ▁tags ▁query ▁= ▁" SELECT ▁count ▁( number ) ▁FR OM ▁( SELECT ▁count ▁( puntodiristoro . Id ) ▁ AS ▁number " ▁+ ▁" FR OM ▁puntodiristoro " ▁+ ▁" JOIN ▁( appartenenzapr ▁JOIN ▁tag ▁ ON ▁ IdTag ▁= ▁Id )" ▁+ ▁" ON ▁puntodiristoro . Id ▁= ▁ appartenenzapr . IdPuntoDiRistoro " ▁+ ▁" W HER E ▁( puntodiristoro . Nome ▁LIKE ▁' % " ▁+ ▁PKeyword ▁+ ▁" % ▁' OR ▁puntodiristoro . Descrizione ▁LIKE ' % " ▁+ ▁PKeyword ▁+ ▁' % ' ) ▁ AND ▁( tag . Nome ▁= ▁' ▁"+ ▁pTags . get ▁(0) . ▁Get Name ▁(); ▁if ▁( pTags . size ▁() > ▁= ▁2) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁PTags . get ▁+ ▁(1) . ▁Get Name ▁(); ▁) ▁if ▁( pTags . size ▁() > ▁= ▁3) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁+ ▁PTags . get ▁(2) . ▁Get Name ▁(); ▁) ▁if ▁( pTags . size ▁() > ▁= ▁4) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁+ ▁PTags . get ▁(3) . ▁Get Name ▁(); ▁) ▁if ▁( pTags . size ▁() > ▁= ▁5) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁+ ▁PTags . get ▁(4) . ▁Get Name ▁(); ▁) ▁query ▁= ▁query ▁+ ▁" ▁ ')" ▁+ ▁" AND ▁distance ▁( puntodiristoro . Latitudine , ▁puntodiristoro . Longitudine " ▁PPosizione . get Latitudine ▁+ ▁() ▁+ ▁"" ▁PPosizione . get Longitudine ▁+ ▁() ▁+ ▁" ) ▁< " ▁ PDistanzaMassima ▁+ ▁+ ▁" GROU P ▁B Y ▁puntodiristoro . Id " ▁+ ▁" ORD ER ▁B Y ▁count ▁( puntodiristoro . Id ) ▁DESC ) ▁ AS ▁table "; ▁) ▁/ ▁/ ▁You ▁run ▁the ▁query ▁result ▁= ▁stat . executeQuery ▁( query ); ▁/ ▁/ ▁It ▁returns ▁the ▁value ▁of ▁count ▁() ▁that ▁contain s ▁the ▁number ▁of ▁/ ▁/ ▁T uple ▁int ▁i ▁= ▁0; ▁if ▁( result . next ▁()) ▁( ▁i ▁= ▁result . getInt ▁( 1); ▁) ▁return ▁i ; ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁to ▁close ▁the ▁Result , ▁the ▁Statement ▁/ ▁/ ▁And ▁Connection ▁finally ▁( ▁if ▁( result ! ▁= ▁null ) ▁( ▁result . close ▁(); ▁) ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁int ▁ottieni NumeroElementi RicercaAvanzata ▁( int ▁pIdTurista , ▁PKeyword ▁String , ▁ArrayList ▁< BeanTag > ▁pTags , ▁Punto 3 D ▁pPosizione , ▁double ▁ pDistanzaMassima ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁results ▁ResultSet ▁result ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁to ▁get ▁the ▁number ▁of ▁pages ▁of ▁advanced ▁String ▁query ▁= ▁" "; ▁if ▁( pTags . size ▁() ▁== ▁0) ▁( ▁/ ▁/ ▁Query ▁with out ▁the ▁control ▁tag ▁query ▁= ▁" SELECT ▁count ▁( number ) ▁FR OM ▁( SELECT ▁count ▁( puntodiristoro . Id ) ▁ AS ▁number " ▁+ ▁" FR OM ▁( puntodiristoro ▁L EF T ▁JOIN " ▁+ ▁" ( SELECT ▁ IdPuntoDiRistoro " ▁+ ▁" FR OM ▁associazionepr , ▁ (" ▁+ ▁" SELECT ▁ IdPreferenz eDiRicerca " ▁+ ▁" FR OM ▁rating " ▁+ ▁" W HER E ▁IdTurista ▁=" ▁+ ▁PIdTurista ▁+ ▁" ) ▁ AS ▁pref " ▁+ ▁" W HER E ▁associazionepr . IdPreferenz eDiRicerca ▁= ▁pref . IdPreferenz eDiRicerca )" ▁+ ▁Preferences ▁ AS ▁ ON ▁puntodiristoro . Id ▁preferenze . IdPuntoDiRistoro ▁= ) ▁" ▁+ ▁" W HER E ▁( puntodiristoro . Nome ▁LIKE ▁' % " ▁+ ▁PKeyword ▁+ ▁" % ▁' OR ▁puntodiristoro . Descrizione ▁LIKE ' % " ▁+ ▁PKeyword ▁+ ▁' % ' ) ▁" ▁+ ▁" AND ▁distance ▁( puntodiristoro . Latitudine , ▁puntodiristoro . Longitudine " ▁+ ▁PPosizione . get Latitudine ▁() ▁+ ▁"" ▁+ ▁PPosizione . get Longitudine ▁() ▁+ ▁" ) ▁< " ▁+ ▁ PDistanzaMassima ▁+ ▁" GROU P ▁B Y ▁puntodiristoro . Id " ▁+ ▁" ORD ER ▁B Y ▁count ▁( puntodiristoro . Id ) ▁DESC ) ▁ AS ▁table "; ▁) ▁else ▁( ▁/ ▁/ ▁Query ▁with ▁tags ▁query ▁= ▁" SELECT ▁count ▁( number ) ▁FR OM ▁( SELECT ▁count ▁( puntodiristoro . Id ) ▁ AS ▁number " ▁+ ▁" FR OM ▁( puntodiristoro ▁L EF T ▁JOIN " ▁+ ▁" ( SELECT ▁ IdPuntoDiRistoro " ▁+ ▁" FR OM ▁associazionepr , ▁ (" ▁+ ▁" SELECT ▁ IdPreferenz eDiRicerca " ▁+ ▁" FR OM ▁rating " ▁+ ▁" W HER E ▁IdTurista ▁=" ▁+ ▁PIdTurista ▁+ ▁" ) ▁ AS ▁pref " ▁+ ▁" W HER E ▁associazionepr . IdPreferenz eDiRicerca ▁= ▁pref . IdPreferenz eDiRicerca )" ▁+ ▁Preferences ▁ AS ▁ ON ▁puntodiristoro . Id ▁preferenze . IdPuntoDiRistoro ▁= ) ▁" ▁+ ▁" JOIN ▁( appartenenzapr ▁JOIN ▁tag ▁ ON ▁ IdTag ▁= ▁Id )" ▁+ ▁" ON ▁puntodiristoro . Id ▁= ▁ appartenenzapr . IdPuntoDiRistoro " ▁+ ▁" W HER E ▁( puntodiristoro . Nome ▁LIKE ▁' % " ▁+ ▁PKeyword ▁+ ▁" % ▁' OR ▁puntodiristoro . Descrizione ▁LIKE ' % " ▁+ ▁PKeyword ▁+ ▁' % ' ) ▁ AND ▁( tag . Nome ▁= ▁' ▁"+ ▁pTags . get ▁(0) . ▁Get Name ▁(); ▁if ▁( pTags . size ▁() > ▁= ▁2) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁PTags . get ▁+ ▁(1) . ▁Get Name ▁(); ▁) ▁if ▁( pTags . size ▁() > ▁= ▁3) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁+ ▁PTags . get ▁(2) . ▁Get Name ▁(); ▁) ▁if ▁( pTags . size ▁() > ▁= ▁4) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁+ ▁PTags . get ▁(3) . ▁Get Name ▁(); ▁) ▁if ▁( pTags . size ▁() > ▁= ▁5) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁+ ▁PTags . get ▁(4) . ▁Get Name ▁(); ▁) ▁query ▁= ▁query ▁+ ▁" ▁ ')" ▁+ ▁" AND ▁distance ▁( puntodiristoro . Latitudine , ▁puntodiristoro . Longitudine " ▁PPosizione . get Latitudine ▁+ ▁() ▁+ ▁"" ▁PPosizione . get Longitudine ▁+ ▁() ▁+ ▁" ) ▁< " ▁ PDistanzaMassima ▁+ ▁+ ▁" GROU P ▁B Y ▁puntodiristoro . Id " ▁+ ▁" ORD ER ▁B Y ▁count ▁( puntodiristoro . Id ) ▁DESC ) ▁ AS ▁table "; ▁) ▁/ ▁/ ▁You ▁run ▁the ▁query ▁result ▁= ▁stat . executeQuery ▁( query ); ▁/ ▁/ ▁It ▁returns ▁the ▁value ▁of ▁count ▁() ▁that ▁contain s ▁the ▁number ▁of ▁/ ▁/ ▁T uple ▁int ▁i ▁= ▁0; ▁if ▁( result . next ▁()) ▁( ▁i ▁= ▁result . getInt ▁( 1); ▁) ▁return ▁i ; ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁to ▁close ▁the ▁Result , ▁the ▁Statement ▁/ ▁/ ▁And ▁Connection ▁finally ▁( ▁if ▁( result ! ▁= ▁null ) ▁( ▁result . close ▁(); ▁) ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁Bean PuntoDiRistoro ▁ottieni PuntoDiRistoro ▁( int ▁pid ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁results ▁ResultSet ▁result ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁String ▁query ▁= ▁" SELECT ▁* ▁FR OM ▁puntodiristoro ▁W HER E ▁Id ▁=" ▁+ ▁pid ; ▁/ ▁/ ▁You ▁run ▁the ▁query ▁result ▁= ▁stat . executeQuery ▁( query ); ▁if ▁( result . next ▁()) ▁( ▁/ ▁/ ▁We ▁create ▁the ▁objects ▁to ▁be ▁returned ▁Punto 3 D ▁point ▁= ▁new ▁Punto 3 D ▁( result . get Double ▁( ▁" Latitude ") ▁result . get Double ▁( ▁" Longitude "), ▁result ▁ . ▁get Double ▁( ▁" Ele vation ") ); ▁Date ▁orarioApertura ▁= ▁new ▁Date ▁( result . getTime ▁( OrarioApertura ▁" ) ▁ . ▁getTime ▁()); ▁Date ▁orarioChiusura ▁= ▁new ▁Date ▁( result . getTime ▁( OrarioChiusura ▁" ) ▁ . ▁getTime ▁()); ▁/ ▁/ ▁ This ▁ generate s ▁the ▁ resting ▁spot ▁of ▁bean ▁Bean PuntoDiRistoro ▁ puntoTemp ▁= ▁new ▁Bean PuntoDiRistoro ▁( result ▁ . ▁ getInt ▁( ▁" Id "), ▁result . getInt ▁( ▁" NumeroVoti "), ▁result ▁ . ▁get Double ▁( ▁" MediaVoti "), ▁result . getString ▁( ▁" Name ") ▁result . getString ▁( ▁" Description "), ▁result ▁ . ▁ getString ▁( ▁" Phone "), ▁result ▁ . ▁ getString ▁( ▁" Location "), ▁result ▁ . ▁ getString ▁( ▁" City "), ▁result . getString ▁( ▁" Way "), ▁result . getString ▁( ▁" Cap "), ▁result . getString ▁( ▁" Province "), ▁result . getString ▁( ▁" PartitaIva "), ▁point , ▁orarioApertura , ▁orarioChiusura , ▁result . getString ▁( ▁" GiornoChiusura ") ); ▁/ ▁/ ▁It ▁returns ▁the ▁refreshment ▁ puntoTemp ▁return ; ▁) ▁else ▁( ▁return ▁null ; ▁) ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁to ▁close ▁the ▁Result , ▁the ▁Statement ▁/ ▁/ ▁And ▁Connection ▁finally ▁( ▁if ▁( result ! ▁= ▁null ) ▁( ▁result . close ▁(); ▁) ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁ArrayList ▁< Bean PuntoDiRistoro > ▁search ▁( String ▁pKeyword , ▁ArrayList ▁< BeanTag > ▁pTags , ▁int ▁pNumeroPagina , ▁int ▁p NumeroElementi PerPagina , ▁Punto 3 D ▁pPosizione , ▁double ▁ pDistanzaMassima ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁results ▁ResultSet ▁result ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁for ▁search ▁String ▁query ▁= ▁" "; ▁if ▁( pTags . size ▁() ▁== ▁0) ▁( ▁/ ▁/ ▁Query ▁with out ▁the ▁control ▁tag ▁query ▁= ▁" SELECT ▁* " ▁+ ▁" FR OM ▁puntodiristoro " ▁+ ▁" W HER E ▁( puntodiristoro . Nome ▁LIKE ▁' % " ▁+ ▁PKeyword ▁+ ▁" % ▁' OR ▁puntodiristoro . Descrizione ▁LIKE ' % " ▁+ ▁PKeyword ▁+ ▁' % ' ) ▁" ▁+ ▁" AND ▁distance ▁( puntodiristoro . Latitudine , ▁puntodiristoro . Longitudine " ▁PPosizione . get Latitudine ▁+ ▁() ▁+ ▁"" ▁PPosizione . get Longitudine ▁+ ▁() ▁+ ▁" ) ▁< " ▁ PDistanzaMassima ▁+ ▁+ ▁" GROU P ▁B Y ▁puntodiristoro . Id " ▁+ ▁" ORD ER ▁B Y ▁count ▁( puntodiristoro . Id ) ▁DESC ▁ LIMI T " ▁+ ▁( P NumeroPagina ▁* ▁p NumeroElementi PerPagina ) ▁+ ▁"" ▁+ ▁P NumeroElementi PerPagina ; ▁) ▁else ▁( ▁/ ▁/ ▁Query ▁with ▁tags ▁query ▁= ▁" SELECT ▁* " ▁+ ▁" FR OM ▁puntodiristoro " ▁+ ▁" JOIN ▁( appartenenzapr ▁JOIN ▁tag ▁ ON ▁ IdTag ▁= ▁Id )" ▁+ ▁" ON ▁puntodiristoro . Id ▁= ▁ appartenenzapr . IdPuntoDiRistoro " ▁+ ▁" W HER E ▁( puntodiristoro . Nome ▁LIKE ▁' % " ▁+ ▁pKeyword ▁+ ▁" % ▁' OR ▁puntodiristoro . Descrizione ▁LIKE ' % " ▁+ ▁pKeyword ▁+ ▁' % ' ) ▁ AND ▁( tag . Nome ▁= ▁' ▁"+ ▁pTags . get ▁(0) . ▁Get Name ▁(); ▁if ▁( pTags . size ▁() > ▁= ▁2) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁PTags . get ▁+ ▁(1) . ▁Get Name ▁(); ▁) ▁if ▁( pTags . size ▁() > ▁= ▁3) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁+ ▁PTags . get ▁(2) . ▁Get Name ▁(); ▁) ▁if ▁( pTags . size ▁() > ▁= ▁4) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁+ ▁PTags . get ▁(3) . ▁Get Name ▁(); ▁) ▁if ▁( pTags . size ▁() > ▁= ▁5) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁+ ▁PTags . get ▁(4) . ▁Get Name ▁(); ▁) ▁query ▁= ▁query ▁+ ▁" ▁ ')" ▁+ ▁" AND ▁distance ▁( puntodiristoro . Latitudine , ▁puntodiristoro . Longitudine " ▁PPosizione . get Latitudine ▁+ ▁() ▁+ ▁"" ▁PPosizione . get Longitudine ▁+ ▁() ▁+ ▁" ) ▁< " ▁ PDistanzaMassima ▁+ ▁+ ▁" GROU P ▁B Y ▁puntodiristoro . Id " ▁+ ▁" ORD ER ▁B Y ▁count ▁( puntodiristoro . Id ) ▁DESC ▁ LIMI T " ▁+ ▁( P NumeroPagina ▁* ▁p NumeroElementi PerPagina ) ▁+ ▁"" ▁+ ▁P NumeroElementi PerPagina ; ▁) ▁/ ▁/ ▁You ▁run ▁the ▁query ▁result ▁= ▁stat . executeQuery ▁( query ); ▁/ ▁/ ▁List ▁that ▁will ▁contain ▁the ▁Bean PuntoDiRistoro ▁< Bean PuntoDiRistoro > ▁ArrayList ▁list ▁= ▁new ▁ArrayList ▁< Bean PuntoDiRistoro > ▁(); ▁while ▁( result . next ▁()) ▁( ▁/ ▁/ ▁We ▁create ▁the ▁objects ▁to ▁be ▁returned ▁Punto 3 D ▁point ▁= ▁new ▁Punto 3 D ▁( result . get Double ▁( ▁" Latitude ") ▁result . get Double ▁( ▁" Longitude "), ▁result ▁ . ▁get Double ▁( ▁" Ele vation ") ); ▁Date ▁orarioApertura ▁= ▁new ▁Date ▁( result . getTime ▁( OrarioApertura ▁" ) ▁ . ▁getTime ▁()); ▁Date ▁orarioChiusura ▁= ▁new ▁Date ▁( result . getTime ▁( OrarioChiusura ▁" ) ▁ . ▁getTime ▁()); ▁/ ▁/ ▁Buil d ▁the ▁refreshment ▁Bean PuntoDiRistoro ▁ puntoTemp ▁= ▁new ▁Bean PuntoDiRistoro ▁( result ▁ . ▁ getInt ▁( ▁" Id "), ▁result . getInt ▁( ▁" NumeroVoti "), ▁result ▁ . ▁get Double ▁( ▁" MediaVoti "), ▁result . getString ▁( ▁" Name ") ▁result . getString ▁( ▁" Description "), ▁result ▁ . ▁ getString ▁( ▁" Phone "), ▁result ▁ . ▁ getString ▁( ▁" Location "), ▁result ▁ . ▁ getString ▁( ▁" City "), ▁result . getString ▁( ▁" Way "), ▁result . getString ▁( ▁" Cap "), ▁result . getString ▁( ▁" Province "), ▁result . getString ▁( ▁" PartitaIva "), ▁point , ▁orarioApertura , ▁orarioChiusura , ▁result . getString ▁( ▁" GiornoChiusura ") ); ▁/ ▁/ ▁Insert ▁the ▁bean ▁in ▁the ▁list ▁lista . add ▁( puntoTemp ); ▁) ▁/ ▁/ ▁It ▁returns ▁the ▁list ▁return ▁list ; ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁to ▁close ▁the ▁Result , ▁the ▁Statement ▁/ ▁/ ▁And ▁Connection ▁finally ▁( ▁if ▁( result ! ▁= ▁null ) ▁( ▁result . close ▁(); ▁) ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁< Bean PuntoDiRistoro > ▁ricerca Avanzata ▁p ublic ▁ArrayList ▁( int ▁pIdTurista , ▁PKeyword ▁String , ▁ArrayList ▁< BeanTag > ▁pTags , ▁int ▁pNumeroPagina , ▁int ▁p NumeroElementi PerPagina , ▁Punto 3 D ▁pPosizione , ▁double ▁ pDistanzaMassima ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁results ▁ResultSet ▁result ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁for ▁advanced ▁search ▁String ▁query ▁= ▁" "; ▁if ▁( pTags . size ▁() ▁== ▁0) ▁( ▁/ ▁/ ▁Query ▁with out ▁tags ▁query ▁= ▁" SELECT ▁* " ▁+ ▁" FR OM ▁( puntodiristoro ▁L EF T ▁JOIN " ▁+ ▁" ( SELECT ▁ IdPuntoDiRistoro " ▁+ ▁" FR OM ▁associazionepr , ▁ (" ▁+ ▁" SELECT ▁ IdPreferenz eDiRicerca " ▁+ ▁" FR OM ▁rating " ▁+ ▁" W HER E ▁IdTurista ▁=" ▁+ ▁PIdTurista ▁+ ▁" ) ▁ CI ▁pref " ▁+ ▁" W HER E ▁associazionepr . IdPreferenz eDiRicerca ▁= ▁pref . IdPreferenz eDiRicerca )" ▁+ ▁Preferences ▁ AS ▁ ON ▁puntodiristoro . Id ▁preferenze . IdPuntoDiRistoro ▁= ) ▁" ▁+ ▁" W HER E ▁( puntodiristoro . Nome ▁LIKE ▁' % " ▁+ ▁PKeyword ▁+ ▁" % ▁' OR ▁puntodiristoro . Descrizione ▁LIKE ' % " ▁+ ▁PKeyword ▁+ ▁" % ')" ▁+ ▁" AND ▁distance ▁( puntodiristoro . Latitudine , ▁puntodiristoro . Longitudine " ▁PPosizione . get Latitudine ▁+ ▁() ▁+ ▁"" ▁PPosizione . get Longitudine ▁+ ▁() ▁+ ▁" ) ▁< " ▁ PDistanzaMassima ▁+ ▁+ ▁" GROU P ▁B Y ▁puntodiristoro . Id " ▁+ ▁" ORD ER ▁B Y ▁count ▁( puntodiristoro . Id ) ▁DESC ▁ LIMI T " ▁+ ▁( P NumeroPagina ▁* ▁p NumeroElementi PerPagina ) ▁+ ▁"" ▁+ ▁P NumeroElementi PerPagina ; ▁) ▁else ▁( ▁/ ▁/ ▁Query ▁with ▁tags ▁query ▁= ▁" SELECT ▁* " ▁+ ▁" FR OM ▁( puntodiristoro ▁L EF T ▁JOIN " ▁+ ▁" ( SELECT ▁ IdPuntoDiRistoro " ▁+ ▁" FR OM ▁associazionepr , ▁ (" ▁+ ▁" SELECT ▁ IdPreferenz eDiRicerca " ▁+ ▁" FR OM ▁rating " ▁+ ▁" W HER E ▁IdTurista ▁=" ▁+ ▁PIdTurista ▁+ ▁" ) ▁ AS ▁pref " ▁+ ▁" W HER E ▁associazionepr . IdPreferenz eDiRicerca ▁= ▁pref . IdPreferenz eDiRicerca )" ▁+ ▁Preferences ▁ AS ▁ ON ▁puntodiristoro . Id ▁preferenze . IdPuntoDiRistoro ▁= ) ▁" ▁+ ▁" JOIN ▁( appartenenzapr ▁JOIN ▁tag ▁ ON ▁ IdTag ▁= ▁Id )" ▁+ ▁" ON ▁puntodiristoro . Id ▁= ▁ appartenenzapr . IdPuntoDiRistoro " ▁+ ▁" W HER E ▁( puntodiristoro . Nome ▁LIKE ▁' % " ▁+ ▁pKeyword ▁+ ▁" % ▁' OR ▁puntodiristoro . Descrizione ▁LIKE ' % " ▁+ ▁pKeyword ▁+ ▁' % ' ) ▁ AND ▁( tag . Nome ▁= ▁' ▁"+ ▁pTags . get ▁(0) . ▁Get Name ▁(); ▁if ▁( pTags . size ▁() > ▁= ▁2) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁PTags . get ▁+ ▁(1) . ▁Get Name ▁(); ▁) ▁if ▁( pTags . size ▁() > ▁= ▁3) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁+ ▁PTags . get ▁(2) . ▁Get Name ▁(); ▁) ▁if ▁( pTags . size ▁() > ▁= ▁4) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁+ ▁PTags . get ▁(3) . ▁Get Name ▁(); ▁) ▁if ▁( pTags . size ▁() > ▁= ▁5) ▁( ▁query ▁= ▁query ▁+ ▁" ▁' OR ▁tag . Nome ▁='" ▁+ ▁PTags . get ▁(4) . ▁Get Name ▁(); ▁) ▁query ▁= ▁query ▁+ ▁" ▁ ')" ▁+ ▁" AND ▁distance ▁( puntodiristoro . Latitudine , ▁puntodiristoro . Longitudine " ▁PPosizione . get Latitudine ▁+ ▁() ▁+ ▁"" ▁PPosizione . get Longitudine ▁+ ▁() ▁+ ▁" ) ▁< " ▁ PDistanzaMassima ▁+ ▁+ ▁" GROU P ▁B Y ▁puntodiristoro . Id " ▁+ ▁" ORD ER ▁B Y ▁count ▁( puntodiristoro . Id ) ▁DESC ▁ LIMI T " ▁+ ▁( P NumeroPagina ▁* ▁p NumeroElementi PerPagina ) ▁+ ▁"" ▁+ ▁P NumeroElementi PerPagina ; ▁) ▁/ ▁/ ▁You ▁run ▁the ▁query ▁result ▁= ▁stat . executeQuery ▁( query ); ▁< Bean PuntoDiRistoro > ▁ArrayList ▁list ▁= ▁new ▁ArrayList ▁< Bean PuntoDiRistoro > ▁(); ▁while ▁( result . next ▁()) ▁( ▁/ ▁/ ▁We ▁create ▁the ▁objects ▁to ▁be ▁returned ▁Punto 3 D ▁point ▁= ▁new ▁Punto 3 D ▁( result . get Double ▁( ▁" Latitude ") ▁result . get Double ▁( ▁" Longitude "), ▁result ▁ . ▁get Double ▁( ▁" Ele vation ") ); ▁Date ▁orarioApertura ▁= ▁new ▁Date ▁( result . getTime ▁( OrarioApertura ▁" ) ▁ . ▁getTime ▁()); ▁Date ▁orarioChiusura ▁= ▁new ▁Date ▁( result . getTime ▁( OrarioChiusura ▁" ) ▁ . ▁getTime ▁()); ▁/ ▁/ ▁ This ▁creates ▁the ▁cultural ▁Bean PuntoDiRistoro ▁ beneTemp ▁= ▁new ▁Bean PuntoDiRistoro ▁( result ▁ . ▁ getInt ▁( ▁" Id "), ▁result . getInt ▁( ▁" NumeroVoti "), ▁result ▁ . ▁get Double ▁( ▁" MediaVoti "), ▁result . getString ▁( ▁" Name ") ▁result . getString ▁( ▁" Description "), ▁result ▁ . ▁ getString ▁( ▁" Phone "), ▁result ▁ . ▁ getString ▁( ▁" Location "), ▁result ▁ . ▁ getString ▁( ▁" City "), ▁result . getString ▁( ▁" Way "), ▁result . getString ▁( ▁" Cap "), ▁result . getString ▁( ▁" Province "), ▁result . getString ▁( ▁" PartitaIva "), ▁point , ▁orarioApertura , ▁orarioChiusura , ▁result . getString ▁( ▁" GiornoChiusura ") ); ▁/ ▁/ ▁Insert ▁the ▁bean ▁in ▁the ▁list ▁lista . add ▁( beneTemp ); ▁) ▁/ ▁/ ▁It ▁returns ▁the ▁list ▁return ▁list ; ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁to ▁close ▁the ▁Result , ▁the ▁Statement ▁/ ▁/ ▁And ▁Connection ▁finally ▁( ▁if ▁( result ! ▁= ▁null ) ▁( ▁result . close ▁(); ▁) ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁< Bean PuntoDiRistoro > ▁ottieniLista PR ▁p ublic ▁ArrayList ▁() ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁results ▁ResultSet ▁result ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁for ▁a ▁list ▁of ▁all ▁the ▁refreshment ▁String ▁query ▁= ▁" SELECT ▁* ▁FR OM ▁puntodiristoro "; ▁/ ▁/ ▁You ▁run ▁the ▁query ▁result ▁= ▁stat . executeQuery ▁( query ); ▁/ ▁/ ▁List ▁that ▁will ▁contain ▁the ▁Bean PuntoDiRistoro ▁< Bean PuntoDiRistoro > ▁ArrayList ▁list ▁= ▁new ▁ArrayList ▁< Bean PuntoDiRistoro > ▁(); ▁while ▁( result . next ▁()) ▁( ▁/ ▁/ ▁We ▁create ▁the ▁objects ▁to ▁be ▁returned ▁Punto 3 D ▁point ▁= ▁new ▁Punto 3 D ▁( result . get Double ▁( ▁" Latitude ") ▁result . get Double ▁( ▁" Longitude "), ▁result ▁ . ▁get Double ▁( ▁" Ele vation ") ); ▁Date ▁orarioApertura ▁= ▁new ▁Date ▁( result . getTime ▁( OrarioApertura ▁" ) ▁ . ▁getTime ▁()); ▁Date ▁orarioChiusura ▁= ▁new ▁Date ▁( result . getTime ▁( OrarioChiusura ▁" ) ▁ . ▁getTime ▁()); ▁/ ▁/ ▁Buil d ▁the ▁refreshment ▁Bean PuntoDiRistoro ▁ puntoTemp ▁= ▁new ▁Bean PuntoDiRistoro ▁( result ▁ . ▁ getInt ▁( ▁" Id "), ▁result . getInt ▁( ▁" NumeroVoti "), ▁result ▁ . ▁get Double ▁( ▁" MediaVoti "), ▁result . getString ▁( ▁" Name ") ▁result . getString ▁( ▁" Description "), ▁result ▁ . ▁ getString ▁( ▁" Phone "), ▁result ▁ . ▁ getString ▁( ▁" Location "), ▁result ▁ . ▁ getString ▁( ▁" City "), ▁result . getString ▁( ▁" Way "), ▁result . getString ▁( ▁" Cap "), ▁result . getString ▁( ▁" Province "), ▁result . getString ▁( ▁" PartitaIva "), ▁point , ▁orarioApertura , ▁orarioChiusura , ▁result . getString ▁( ▁" GiornoChiusura ") ); ▁/ ▁/ ▁Insert ▁the ▁bean ▁in ▁the ▁list ▁lista . add ▁( puntoTemp ); ▁) ▁/ ▁/ ▁It ▁returns ▁the ▁list ▁return ▁list ; ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁to ▁close ▁the ▁Result , ▁the ▁Statement ▁/ ▁/ ▁And ▁Connection ▁finally ▁( ▁if ▁( result ! ▁= ▁null ) ▁( ▁result . close ▁(); ▁) ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁)