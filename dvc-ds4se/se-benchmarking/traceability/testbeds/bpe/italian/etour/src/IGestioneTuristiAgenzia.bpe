▁ ï»¿ p ackage ▁unisa . gps . etour . control . Gestione UtentiRegistrati ; ▁import ▁java . rmi . RemoteException ; ▁import ▁java . util . ArrayList ; ▁import ▁unisa . gps . etour . bean . BeanTurista ; ▁import ▁unisa . gps . etour . bean . BeanVisitaBC ; ▁import ▁unisa . gps . etour . bean . BeanVisitaPR ; ▁/ ▁** ▁* ▁Interface ▁for ▁handl ing ▁tourists ▁from ▁the ▁side ▁of ▁the ▁transaction ▁Agency ▁* ▁* ▁@ ▁Auth or ▁J os eph ▁Mo relli ▁* ▁@ ▁Version ▁0.1 ▁ 2007 ▁eTour ▁Pro ject ▁- ▁C opy right ▁by ▁SE ▁@ ▁ SA ▁Lab ▁DMI ▁University ▁* ▁Of ▁Salerno ▁* ▁/ ▁p ublic ▁interface ▁IGestione TuristiAgenzia ▁ext ends ▁IGestione TuristaComune ▁( ▁/ ▁** ▁* ▁Method ▁for ▁the ▁cancellation ▁of ▁a ▁tourist ▁from ▁the ▁Database ▁* ▁* ▁@ ▁Param ▁pIdTurista ▁Identifie r ▁Tourist ▁delete ▁* ▁@ ▁Return ▁Boolean : ▁true ▁if ▁the ▁operation ▁is ▁successful , ▁false ▁otherwise ▁* ▁@ ▁Throw s ▁RemoteException ▁Exception ▁Remote ▁* ▁/ ▁p ublic ▁boolean ▁delete ▁( int ▁pIdTurista ) ▁throws ▁RemoteException ; ▁/ ▁** ▁* ▁Method ▁to ▁activate ▁a ▁registered ▁tourists ▁* ▁* ▁@ ▁Param ▁pIdTurista ▁ID ▁to ▁activate ▁the ▁Tourist ▁* ▁@ ▁Return ▁Boolean : ▁true ▁if ▁the ▁operation ▁is ▁successful , ▁false ▁otherwise ▁* ▁@ ▁Throw s ▁RemoteException ▁Exception ▁Remote ▁* ▁/ ▁p ublic ▁boolean ▁attivaTurista ▁( int ▁pIdTurista ) ▁throws ▁RemoteException ; ▁/ ▁** ▁* ▁Method ▁to ▁disable ▁an ▁active ▁tourists ▁* ▁* ▁@ ▁Param ▁to ▁disable ▁pIdTurista ▁Identifie r ▁Tourist ▁* ▁@ ▁Return ▁Boolean : ▁true ▁if ▁the ▁operation ▁is ▁successful , ▁false ▁otherwise ▁* ▁@ ▁Throw s ▁RemoteException ▁Exception ▁Remote ▁* ▁/ ▁p ublic ▁boolean ▁ disattivaTurista ▁( int ▁pIdTurista ) ▁throws ▁RemoteException ; ▁/ ▁** ▁* ▁Method ▁to ▁obtain ▁a ▁collection ▁of ▁Tourists ▁* ▁* ▁@ ▁Return ▁ArrayList ▁of ▁BeanTurista ▁* ▁@ ▁Throw s ▁RemoteException ▁Exception ▁Remote ▁* ▁/ ▁< BeanTurista > ▁ottieniTuristi ▁p ublic ▁ArrayList ▁() ▁throws ▁RemoteException ; ▁/ ▁** ▁* ▁Method ▁to ▁obtain ▁a ▁collection ▁of ▁active ▁tourists ▁or ▁not ▁* ▁* ▁@ ▁Param ▁boolean ▁statoAccount ▁Tourists ▁can ▁choose ▁* ▁On ▁whether ▁* ▁@ ▁Return ▁ArrayList ▁of ▁BeanTurista ▁* ▁@ ▁Throw s ▁RemoteException ▁Exception ▁Remote ▁* ▁/ ▁p ublic ▁ArrayList ▁< BeanTurista > ▁ottieniTuristi ▁( boolean ▁statoAccount ) ▁throws ▁RemoteException ; ▁/ ▁** ▁* ▁Method ▁to ▁get ▁all ▁the ▁feedback ▁issued ▁by ▁a ▁tourist ▁for ▁the ▁points ▁* ▁Refreshments ▁* ▁* ▁@ ▁Param ▁pIdTurista ▁ID ▁to ▁pick ▁up ▁the ▁tourists ▁in ▁* ▁Feedback ▁* ▁@ ▁Return ▁ArrayList ▁containing ▁all ▁the ▁beans ▁Feedback ▁released ▁* ▁@ ▁Throw s ▁RemoteException ▁Exception ▁Remote ▁* ▁/ ▁< BeanVisitaPR > ▁o ttieniFeedbackPR ▁p ublic ▁ArrayList ▁( int ▁pIdTurista ) ▁throws ▁RemoteException ; ▁/ ▁** ▁* ▁Method ▁to ▁get ▁all ▁the ▁feedback ▁issued ▁by ▁a ▁tourist ▁for ▁Heritage ▁* ▁Cultural ▁* ▁* ▁@ ▁Param ▁pIdTurista ▁ID ▁to ▁pick ▁up ▁the ▁tourists ▁in ▁* ▁Feedback ▁* ▁@ ▁Return ▁ArrayList ▁containing ▁all ▁the ▁beans ▁Feedback ▁released ▁* ▁@ ▁Throw s ▁RemoteException ▁Exception ▁Remote ▁* ▁/ ▁< BeanVisitaBC > ▁o ttieniFeedbackBC ▁p ublic ▁ArrayList ▁( int ▁pIdTurista ) ▁throws ▁RemoteException ; ▁)