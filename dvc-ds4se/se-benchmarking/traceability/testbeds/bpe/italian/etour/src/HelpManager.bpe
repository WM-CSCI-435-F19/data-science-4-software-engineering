▁p ackage ▁unisa . gps . etour . gui ; ▁import ▁java . awt . event . MouseAdapter ; ▁import ▁java . awt . event . MouseEvent ; ▁import ▁java . io . ▁* ; ▁import ▁java . util . HashMap ; ▁import ▁java . util . Scanner ; ▁import ▁java . util . StringTokenizer ; ▁import ▁java . ne t . UR ISyntaxException ; ▁import ▁java x . swing . JComponent ; ▁import ▁java x . swing . text . JTextComponent ; ▁/ ▁** ▁* ▁ This ▁class ▁realiz es ▁the ▁me ch an is m ▁of ▁sen sitive ▁help ▁* ▁Con text . ▁* ▁* ▁@ ▁Version ▁0.2 ▁* ▁@ ▁Auth or ▁M ario ▁G allo ▁* ▁* ▁ © ▁ 2007 ▁eTour ▁Pro ject ▁- ▁C opy right ▁by ▁DMI ▁SE ▁@ ▁ SA ▁Lab ▁-- ▁* ▁University ▁of ▁Salerno ▁* ▁/ ▁p ublic ▁class ▁ext ends ▁ HelpManager ▁ MouseAdapter ▁( ▁priv ate ▁ HashMap ▁< String , String > ▁dictionary ; ▁Pr ivate ▁JTextComponent ▁destina tion ; ▁priv ate ▁String ▁previousMessage ; ▁/ ▁** ▁< p > ▁* ▁The ▁constructor ▁creates ▁a ▁new ▁instance ▁of ▁the ▁class ▁for ▁the ▁* ▁Manag ing ▁the ▁online ▁help ▁files ▁from ▁contentente ▁* ▁The ▁guide ▁it self ▁and ▁the ▁component ▁in ▁which ▁it ▁appear . ▁</ ▁P > ▁* ▁P Percorso ▁* ▁@ ▁ param ▁String ▁- ▁the ▁path ▁of ▁the ▁help ▁file . ▁* ▁@ ▁Param ▁pComponent ▁JTextComponent ▁- ▁the ▁component ▁in ▁which ▁to ▁display ▁* ▁D ri v ing . ▁* ▁@ ▁Throw s ▁File N otFoundException ▁- ▁if ▁the ▁help ▁file ▁is ▁not ▁specified ▁* ▁Found . ▁* ▁* ▁/ ▁p ublic ▁ HelpManager ▁( String ▁ pPercorso , ▁JTextComponent ▁pComponent ) ▁throws ▁File N otFoundException ▁( ▁< String , String > ▁dictionary ▁= ▁new ▁ HashMap ▁(); ▁ ta r get ▁= ▁pComponent ; ▁File ▁ afil ▁= ▁null ; ▁TR Y ▁( ▁ afil ▁= ▁new ▁File ▁( getClass ▁() . ▁getRe source ▁( pPercorso . ) ▁to ur ▁()); ▁) ▁ catch ▁( e x ▁ UR ISyntaxException ) ▁( ▁ex . printStackTrace ▁(); ▁) ▁ Scanner ▁scan ▁= ▁new ▁ Scanner ▁( new ▁Buffered Reader ▁( new ▁ FileReader ▁( afil ))); ▁ StringTokenizer ▁tokenizer ; ▁while ▁( scann ing . hasNext ▁()) ▁( ▁tokenizer ▁= ▁new ▁ StringTokenizer ▁( scann ing . next Line ▁(), " ## "); ▁ dizion ario . put ▁( tokenizer . next Token ▁(), ▁tokenizer . next Token ▁()); ▁) ▁scann ing . close ▁(); ▁) ▁/ ▁** ▁* ▁ This ▁method ▁handle s ▁the ▁event ▁whe n ▁the ▁point er ▁should ▁* ▁Mouse ▁enter s ▁the ▁component . ▁* ▁* ▁@ ▁Param ▁pM ouseEnteredEvent ▁ MouseEvent ▁- ▁The ▁event ▁g enerated ▁by ▁the ▁mouse . ▁* ▁* ▁/ ▁p ublic ▁void ▁m ouseEntered ▁( MouseEvent ▁pM ouseEnteredEvent ) ▁( ▁previousMessage ▁= ▁destina zione . getText ▁(); ▁JComponent ▁component ▁= ▁( JComponent ) ▁pM ouseEnteredEvent . getComponent ▁(); ▁String ▁help ▁= ▁ dizion ario . get ▁( component e . getName ▁()); ▁destina zione . setText ▁( help ); ▁destina zione . repaint ▁(); ▁) ▁/ ▁** ▁* ▁* ▁ This ▁method ▁handle s ▁the ▁event ▁whe n ▁the ▁point er ▁should ▁* ▁Mouse ▁go es ▁out ▁of ▁a ▁component . ▁* ▁* ▁@ ▁Param ▁p MouseExitedEvent ▁ MouseEvent ▁- ▁The ▁event ▁g enerated ▁by ▁the ▁mouse . ▁* ▁* ▁/ ▁p ublic ▁void ▁m ouseEntered ▁( MouseEvent ▁p MouseExitedEvent ) ▁( ▁destina zione . setText ▁( previousMessage ); ▁destina zione . repaint ▁(); ▁) ▁)