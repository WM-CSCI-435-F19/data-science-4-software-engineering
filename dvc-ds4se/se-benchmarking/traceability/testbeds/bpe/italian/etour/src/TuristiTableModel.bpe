▁ ï»¿ / ▁* ▁* ▁T uristiTableModel . java ▁* ▁* ▁1.0 ▁* ▁* ▁27 / 05/ 2007 ▁* ▁* ▁ 2007 ▁eTour ▁Pro ject ▁- ▁C opy right ▁by ▁SE ▁@ ▁ SA ▁Lab ▁- ▁DMI ▁University ▁of ▁Salerno ▁* ▁/ ▁p ackage ▁unisa . gps . etour . gui . operatoreagenzia . tables ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . Date ; ▁import ▁java . util . Vector ; ▁import ▁java x . swing . table . Abs tractTableModel ; ▁import ▁unisa . gps . etour . bean . BeanTurista ; ▁/ ▁** ▁* ▁< b > ▁T uristiTableModel ▁</ ▁b > ▁* ▁< p > ▁Act s ▁as ▁a ▁ container ▁of ▁data ▁from ▁the ▁tourists ▁who ▁have ▁* ▁Be ▁displayed ▁in ▁a ▁JTable . ▁</ ▁P > ▁* ▁@ ▁Se e ▁java x . swing . table . Abs tractTableModel ▁* ▁@ ▁Se e ▁java x . swing . JTable ▁* ▁@ ▁Se e ▁unisa . gps . etour . bean . BeanTurista ▁* ▁@ ▁Version ▁1.0 ▁* ▁@ ▁Auth or ▁M ario ▁G allo ▁* ▁/ ▁p ublic ▁class ▁ext ends ▁T uristiTableModel ▁Abs tractTableModel ▁( ▁priv ate ▁static ▁final ▁String ▁[] ▁headers ▁= ▁( ▁" Status ", ▁" Name ", ▁" Name ", ▁" E - Mail ", ▁" Phone ", ▁" Date ▁of ▁Birth ", ▁" City ▁of ▁Birth ", ▁" Address ", ▁" City ", ▁" C PC ", ▁" test ", ▁" Save "); ▁priv ate ▁static ▁final ▁Class ▁[] ▁( columnClasses ▁= ▁Boolean . class , ▁String . class , ▁String . class , ▁String . class , ▁String . class , ▁Date . class , ▁String . class , ▁String . class , ▁String . class , ▁String . class , ▁String . class , ▁Date . class ); ▁< Object [] > ▁priv ate ▁Vector ▁data ; ▁/ ▁** ▁* ▁Default ▁Constructor . ▁We ▁on ly ▁provide ▁the ▁temp late ▁with out ▁load ing ▁* ▁No ▁data ▁in ▁it . ▁* ▁* ▁/ ▁p ublic ▁T uristiTableModel ▁() ▁( ▁< Object [] > ▁data ▁= ▁new ▁Vector ▁(); ▁) ▁/ ▁** ▁* ▁Create ▁a ▁model ▁of ▁the ▁table ▁and ▁load s ▁the ▁data ▁provided ▁through ▁an ▁array ▁of ▁Bean BeneCulturale . ▁* ▁* ▁@ ▁Param ▁pTuristi ▁java . util . ArrayList ▁< BeanTurista > ▁- ▁an ▁ArrayList ▁of ▁BeanTurista . ▁* ▁* ▁/ ▁p ublic ▁T uristiTableModel ▁( ArrayList ▁< BeanTurista > ▁pTuristi ) ▁( ▁this ▁(); ▁if ▁( null ▁== ▁pTuristi ) ▁( ▁return ; ▁) ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< pTuristi . size ▁(); ▁i ▁+ ▁+) ▁( ▁insert Turista ▁( pTuristi . get ▁( i )); ▁) ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁number ▁of ▁columns ▁provided ▁by ▁the ▁model . ▁* ▁* ▁@ ▁Return ▁int ▁- ▁the ▁number ▁of ▁columns . ▁* ▁* ▁/ ▁p ublic ▁int ▁getColumn Count ▁() ▁( ▁headers . length ▁return ; ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁number ▁of ▁rows ▁currently ▁in ▁the ▁model . ▁* ▁* ▁@ ▁Return ▁int ▁- ▁the ▁number ▁of ▁rows . ▁* ▁* ▁/ ▁p ublic ▁int ▁Get Row Count ▁() ▁( ▁data . size ▁return ▁(); ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁column ▁name ▁from ▁the ▁index ▁provided . ▁* ▁* ▁@ ▁Return ▁String ▁- ▁the ▁name ▁of ▁the ▁column . ▁* ▁@ ▁Exception ▁ Illegal A rgumentException ▁- ▁if ▁the ▁column ▁index ▁is ▁not ▁provided ▁* ▁In ▁the ▁model . ▁* ▁* ▁/ ▁p ublic ▁String ▁getColumn Name ▁( int ▁pColumn ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( pColumn > ▁= ▁getColumn Count ▁() ▁| ▁| ▁pColumn ▁<0) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁column ▁index ▁is ▁not ▁provided ▁in ▁the ▁model . "); ▁) ▁return ▁headers ▁[ pColumn ]; ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁object ▁in ▁the ▁model ▁to ▁the ▁row ▁and ▁column ▁provided . ▁* ▁* ▁@ ▁Param ▁pRow ▁- ▁the ▁line ▁number . ▁* ▁@ ▁Param ▁pColumn ▁- ▁the ▁column ▁number . ▁* ▁@ ▁Return ▁Object ▁- ▁the ▁object ▁contain ed ▁in ▁the ▁selected ▁cell . ▁* ▁@ ▁Exception ▁ Illegal A rgumentException ▁- ▁if ▁the ▁index ▁or ▁the ▁row ▁or ▁column ▁not ▁provided ▁* ▁Are ▁present ▁in ▁the ▁model . ▁* ▁* ▁/ ▁p ublic ▁Object ▁get ValueAt ▁( pRow ▁int , ▁int ▁pColumn ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( pRow > ▁= ▁Get Row Count ▁() ▁| ▁| ▁pRow ▁<0) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁row ▁index ▁is ▁not ▁provided ▁in ▁the ▁model . "); ▁) ▁if ▁( pColumn > ▁= ▁getColumn Count ▁() ▁| ▁| ▁pColumn ▁<0) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁column ▁index ▁is ▁not ▁provided ▁in ▁the ▁model . "); ▁) ▁return ▁data . get ▁( pRow ) ▁[ pColumn ]; ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁class ▁of ▁objects ▁in ▁the ▁column ▁of ▁which ▁is ▁provided ▁in ▁the ▁index . ▁* ▁* ▁@ ▁Param ▁pColumn ▁- ▁the ▁column ▁number . ▁* ▁@ ▁Return ▁Class ▁- ▁the ▁class ▁of ▁objects ▁of ▁the ▁selected ▁column . ▁* ▁@ ▁Exception ▁ Illegal A rgumentException ▁- ▁if ▁the ▁index ▁column ▁do es ▁not ▁pro ▁* ▁In ▁the ▁model . ▁* ▁* ▁/ ▁p ublic ▁class ▁getColumn Class ▁( int ▁pColumn ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( pColumn > ▁= ▁getColumn Count ▁() ▁| ▁| ▁pColumn ▁<0) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁column ▁index ▁is ▁not ▁provided ▁in ▁the ▁model . "); ▁) ▁return ▁columnClasses ▁[ pColumn ]; ▁) ▁/ ▁** ▁* ▁Return s ▁whether ▁the ▁selected ▁cell ▁editable . ▁* ▁* ▁@ ▁Return ▁boolean ▁- ▁true ▁if ▁the ▁cell ▁editable ▁* ▁False ▁otherwise ▁* ▁@ ▁Param ▁pRow ▁- ▁the ▁line ▁number . ▁* ▁@ ▁Param ▁pColumn ▁- ▁the ▁column ▁number . ▁* ▁@ ▁Exception ▁ Illegal A rgumentException ▁- ▁if ▁the ▁index ▁or ▁the ▁row ▁or ▁column ▁are ▁not ▁provided ▁* ▁In ▁the ▁model . ▁* ▁* ▁/ ▁p ublic ▁boolean ▁is Cell Editable ▁( pRow ▁int , ▁int ▁pColumn ) ▁throws ▁ Illegal A rgumentException ▁( ▁return ▁false ; ▁) ▁/ ▁** ▁* ▁The ▁method ▁is ▁in herit ed ▁by ▁the ▁TableModel ▁not ▁setValueAt ▁* ▁ N e ces s ary ▁be cause ▁not ▁provided ▁for ▁the ▁possibilit y ▁of ▁amend ing ▁a ▁* ▁Si ngle ▁cell . ▁* ▁* ▁@ ▁D eprecat ed ▁* ▁/ ▁p ublic ▁void ▁setValueAt ▁( Object ▁value , ▁int ▁row , ▁int ▁col ) ▁( ▁) ▁/ ▁** ▁* ▁Enable s ▁or ▁disable s ▁the ▁tourist ▁in ▁the ▁selected ▁row . ▁* ▁* ▁@ ▁Param ▁int ▁pRow ▁- ▁the ▁selected ▁row . ▁* ▁@ ▁Return ▁int ▁- ▁the ▁id ▁of ▁the ▁tourist ▁on ▁/ ▁off . ▁* ▁* ▁/ ▁p ublic ▁int ▁attivaTurista ▁( int ▁pRow ) ▁throws ▁ Illegal A rgumentException ▁( ▁data . get ▁( pRow ) ▁[0] ▁= ▁( isAttiva to ▁( pRow )) ? ▁false : ▁true ; ▁fir eTable Data Changed ▁(); ▁return ▁getID ▁( pRow ); ▁) ▁/ ▁** ▁* ▁De term ine s ▁if ▁a ▁visit or ▁to ▁the ▁selected ▁row ▁is ▁ enabled ▁or ▁disabled . ▁* ▁* ▁@ ▁Param ▁int ▁pRow ▁- ▁the ▁selected ▁row . ▁* ▁@ ▁Return ▁< ul > ▁< li > ▁< i > ▁true ▁</ ▁i > ▁- ▁ enabled ▁</ ▁li > ▁* ▁< li > ▁< i > ▁False ▁</ ▁i > ▁- ▁disabled ▁</ ▁li > ▁</ ▁ul > ▁* ▁/ ▁p ublic ▁boolean ▁isAttiva to ▁( int ▁pRow ) ▁throws ▁ Illegal A rgumentException ▁( ▁return ▁( Boolean ) ▁get ValueAt ▁( pRow , ▁0) ; ▁) ▁/ ▁** ▁* ▁* ▁ Enter ▁data ▁for ▁a ▁tourist ▁in ▁the ▁model ▁s ince ▁its ▁Bean . ▁* ▁* ▁@ ▁Param ▁pTurista ▁Bean T uri s a ▁- ▁the ▁bean ▁that ▁contain s ▁the ▁data ▁of ▁the ▁tourist . ▁* ▁* ▁/ ▁p ublic ▁void ▁insert Turista ▁( BeanTurista ▁pTurista ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( null ▁== ▁pTurista ) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁bean ▁provided ▁can ▁not ▁be ▁null . "); ▁) ▁Object ▁[] ▁aRow ▁= ▁new ▁Object ▁[ 13 ]; ▁aRow ▁[0] ▁= ▁pTurista . isAttiva ▁(); ▁aRow ▁[1] ▁= ▁pTurista . getNome ▁(); ▁aRow ▁[2] ▁= ▁pTurista . getCognome ▁(); ▁aRow ▁[3] ▁= ▁pTurista . get Email ▁(); ▁aRow ▁[4] ▁= ▁pTurista . getTelefono ▁(); ▁aRow ▁[5] ▁= ▁pTurista . get DataNascita ▁(); ▁aRow ▁[6] ▁= ▁pTurista . get CittaNascita ▁(); ▁aRow ▁ [7] ▁= ▁pTurista . get Via ▁(); ▁aRow ▁[8] ▁= ▁pTurista . get CittaResidenza ▁(); ▁aRow ▁ [9] ▁= ▁pTurista . getCap ▁(); ▁aRow ▁[10] ▁= ▁pTurista . get Provincia ▁(); ▁aRow ▁[11] ▁= ▁pTurista . getData Registrazione ▁(); ▁aRow ▁[12] ▁= ▁pTurista . getId ▁(); ▁data . add ▁( aRow ); ▁) ▁/ ▁** ▁* ▁* ▁Update ▁the ▁information ▁of ▁the ▁tourist ▁in ▁the ▁model ▁( if ▁any ) ▁* ▁With ▁the ▁bean ▁supplied ▁input . ▁* ▁* ▁@ ▁Param ▁pTurista ▁BeanTurista ▁- ▁the ▁bean ▁that ▁contain s ▁the ▁data ▁of ▁the ▁tourist . ▁* ▁* ▁/ ▁p ublic ▁void ▁update Turista ▁( BeanTurista ▁pTurista ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( null ▁== ▁pTurista ) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁bean ▁provided ▁can ▁not ▁be ▁null . "); ▁) ▁int ▁i ; ▁for ▁( i ▁= ▁0; ▁i ▁< data . size ▁() ▁i ▁+ ▁+) ▁( ▁int ▁id ▁= ▁( Integer ) ▁data . get ▁( i ) ▁[12] ; ▁if ▁( id ▁== ▁pTurista . getId ▁()) ▁( ▁brea k ; ▁) ▁) ▁if ▁( i ! ▁data . size ▁= ▁()) ▁/ ▁/ ▁Found ▁( ▁Object ▁[] ▁aRow ▁= ▁new ▁Object ▁[ 13 ]; ▁aRow ▁[0] ▁= ▁pTurista . isAttiva ▁(); ▁aRow ▁[1] ▁= ▁pTurista . getNome ▁(); ▁aRow ▁[2] ▁= ▁pTurista . getCognome ▁(); ▁aRow ▁[3] ▁= ▁pTurista . get Email ▁(); ▁aRow ▁[4] ▁= ▁pTurista . getTelefono ▁(); ▁aRow ▁[5] ▁= ▁pTurista . get DataNascita ▁(); ▁aRow ▁[6] ▁= ▁pTurista . get CittaNascita ▁(); ▁aRow ▁ [7] ▁= ▁pTurista . get Via ▁(); ▁aRow ▁[8] ▁= ▁pTurista . get CittaResidenza ▁(); ▁aRow ▁ [9] ▁= ▁pTurista . getCap ▁(); ▁aRow ▁[10] ▁= ▁pTurista . get Provincia ▁(); ▁aRow ▁[11] ▁= ▁pTurista . getData Registrazione ▁(); ▁aRow ▁[12] ▁= ▁pTurista . getId ▁(); ▁data . set ▁( i , ▁aRow ); ▁fir eTable Data Changed ▁(); ▁) ▁) ▁/ ▁** ▁* ▁* ▁Return s ▁the ▁id ▁of ▁the ▁visit or ▁whose ▁data ▁are ▁displayed ▁in ▁row ▁* ▁Provide d ▁input . ▁* ▁* ▁@ ▁Param ▁pRow ▁- ▁the ▁line ▁number . ▁* ▁@ ▁Return ▁- ▁the ▁id ▁of ▁the ▁tourist . ▁* ▁@ ▁Exception ▁ Illegal A rgumentException ▁- ▁if ▁the ▁row ▁index ▁do es ▁not ▁pro ▁* ▁In ▁the ▁model . ▁* ▁/ ▁p ublic ▁int ▁getID ▁( int ▁pRow ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( pRow > ▁= ▁Get Row Count ▁() ▁| ▁| ▁pRow ▁<0) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁row ▁index ▁is ▁not ▁provided ▁in ▁the ▁model . "); ▁) ▁return ▁( Integer ) ▁data . get ▁( pRow ) ▁[12] ; ▁) ▁/ ▁** ▁* ▁* ▁Return s ▁the ▁id ▁of ▁the ▁tourist ▁at ▁the ▁line ▁number ▁provided ▁as ▁input ▁and ▁remove s ▁it ▁from ▁the ▁model . ▁* ▁* ▁@ ▁Param ▁pRow ▁- ▁the ▁line ▁number . ▁* ▁@ ▁Return ▁- ▁the ▁id ▁of ▁the ▁tourist . ▁* ▁@ ▁Exception ▁ Illegal A rgumentException ▁- ▁if ▁the ▁row ▁index ▁do es ▁not ▁pro ▁* ▁In ▁the ▁model . ▁* ▁* ▁/ ▁p ublic ▁int ▁remove Turista ▁( int ▁pRow ) ▁throws ▁ Illegal A rgumentException ▁( ▁int ▁id ▁= ▁getID ▁( pRow ); ▁data . remove ▁( pRow ); ▁return ▁id ; ▁) ▁)