▁ ï»¿ / ▁* ▁* ▁Feedback TableModel . java ▁* ▁* ▁1.0 ▁* ▁* ▁21 / 05/ 2007 ▁* ▁* ▁ 2007 ▁eTour ▁Pro ject ▁- ▁C opy right ▁by ▁SE ▁@ ▁ SA ▁Lab ▁- ▁DMI ▁University ▁of ▁Salerno ▁* ▁/ ▁p ackage ▁unisa . gps . etour . gui . operatoreagenzia . tables ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . Date ; ▁import ▁java . util . HashMap ; ▁import ▁java . util . Iterator ; ▁table ▁ .* ; ▁import ▁unisa . gps . etour . bean . BeanVisitaBC ; ▁import ▁unisa . gps . etour . bean . BeanVisitaPR ; ▁/ ▁** ▁* ▁< b > ▁Feedback TableModel ▁</ ▁b > ▁* ▁< p > ▁' Contain er ▁model ▁of ▁data ▁for ▁feedback ▁received ▁* ▁To ▁be ▁a ▁cultural ▁or ▁a ▁refreshment . ▁</ ▁P > ▁* ▁* ▁@ ▁Se e ▁java x . swing . table . Abs tractTableModel ▁* ▁@ ▁Se e ▁unisa . gps . etour . bean . BeanVisitaBC ▁* ▁@ ▁Se e ▁unisa . gps . etour . bean . BeanVisitaPR ▁* ▁@ ▁Version ▁1.0 ▁* ▁@ ▁Auth or ▁M ario ▁G allo ▁* ▁* ▁/ ▁p ublic ▁class ▁ext ends ▁Fe edBackTableModel ▁Abs tractTableModel ▁( ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁1 L ; ▁priv ate ▁static ▁final ▁String ▁[] ▁headers ▁= ▁( ▁" rating ", ▁" Comment ", ▁" Release ▁Date ", ▁" I ssued ▁by "); ▁priv ate ▁static ▁final ▁Class ▁[] ▁( columnClasses ▁= ▁Integer . class , ▁String . class , ▁Date . class , ▁String . class ); ▁< Object [] > ▁priv ate ▁ArrayList ▁data ; ▁/ ▁** ▁* ▁Default ▁Constructor . ▁We ▁on ly ▁provide ▁the ▁model ▁but ▁not ▁* ▁Load s ▁no ▁data ▁in ▁it . ▁* ▁* ▁/ ▁p ublic ▁Fe edBackTableModel ▁() ▁( ▁< Object [] > ▁data ▁= ▁new ▁ArrayList ▁(); ▁) ▁/ ▁** ▁* ▁Constructor ▁that ▁take s ▁as ▁input ▁an ▁ArrayList ▁of ▁BeanVisitaBC ▁or ▁* ▁BeanVisitaPR ▁and ▁copi es ▁of ▁the ▁data ▁within ▁the ▁model ▁* ▁Prepar ing ▁for ▁display . ▁* ▁* ▁@ ▁Param ▁PVIS ▁java . util . ArrayList ▁- ▁the ▁ArrayList ▁of ▁bean . ▁* ▁/ ▁p ublic ▁Fe edBackTableModel ▁( HashMap ▁< ? , ▁String > ▁pDatiFeedback ) ▁( ▁this ▁(); ▁if ▁( pDatiFeedback ▁== ▁null ▁| ▁| ▁pDatiFeedback . size ▁() ▁== ▁0) ▁( ▁return ; ▁) ▁Iterator ▁< ? > ▁Iter ▁= ▁pDatiFeedback . key Set ▁() . ▁Iterator ▁(); ▁while ▁( itera . hasNext ▁()) ▁( ▁Object ▁current ▁= ▁ itera . next ▁(); ▁if ▁( current ▁instance of ▁BeanVisitaBC ) ▁( ▁insert VisitaBC ▁( ( BeanVisitaBC ) ▁current ▁pDatiFeedback . get ▁( current )); ▁) ▁else ▁if ▁( current ▁instance of ▁BeanVisitaPR ) ▁( ▁insert VisitaPR ▁( ( BeanVisitaPR ) ▁current ▁pDatiFeedback . get ▁( current )); ▁) ▁) ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁number ▁of ▁columns ▁provided ▁by ▁the ▁model . ▁* ▁* ▁@ ▁Return ▁int ▁- ▁the ▁number ▁of ▁columns . ▁* ▁* ▁/ ▁p ublic ▁int ▁getColumn Count ▁() ▁( ▁headers . length ▁return ; ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁number ▁of ▁rows ▁currently ▁in ▁the ▁model . ▁* ▁* ▁@ ▁Return ▁int ▁- ▁the ▁number ▁of ▁rows . ▁* ▁* ▁/ ▁p ublic ▁int ▁Get Row Count ▁() ▁( ▁data . size ▁return ▁(); ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁column ▁name ▁from ▁the ▁index ▁provided . ▁* ▁* ▁@ ▁Return ▁String ▁- ▁the ▁name ▁of ▁the ▁column . ▁* ▁@ ▁Exception ▁ Illegal A rgumentException ▁- ▁if ▁the ▁column ▁index ▁is ▁not ▁provided ▁* ▁In ▁the ▁model . ▁* ▁* ▁/ ▁p ublic ▁String ▁getColumn Name ▁( int ▁pColumn ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( pColumn > ▁= ▁getColumn Count ▁() ▁| ▁| ▁pColumn ▁<0) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁column ▁index ▁is ▁not ▁provided ▁in ▁the ▁model . "); ▁) ▁return ▁headers ▁[ pColumn ]; ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁object ▁in ▁the ▁model ▁to ▁the ▁row ▁and ▁column ▁provided . ▁* ▁* ▁@ ▁Param ▁pRow ▁- ▁the ▁line ▁number . ▁* ▁@ ▁Param ▁pColumn ▁- ▁the ▁column ▁number . ▁* ▁@ ▁Return ▁Object ▁- ▁the ▁object ▁contain ed ▁in ▁the ▁selected ▁cell . ▁* ▁@ ▁Exception ▁ Illegal A rgumentException ▁- ▁if ▁the ▁index ▁or ▁the ▁row ▁or ▁column ▁not ▁provided ▁* ▁Are ▁present ▁in ▁the ▁model . ▁* ▁* ▁/ ▁p ublic ▁Object ▁get ValueAt ▁( pRow ▁int , ▁int ▁pColumn ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( pRow > ▁= ▁Get Row Count ▁() ▁| ▁| ▁pRow ▁<0) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁row ▁index ▁is ▁not ▁provided ▁in ▁the ▁model . "); ▁) ▁if ▁( pColumn > ▁= ▁getColumn Count ▁() ▁| ▁| ▁pColumn ▁<0) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁column ▁index ▁is ▁not ▁provided ▁in ▁the ▁model . "); ▁) ▁return ▁data . get ▁( pRow ) ▁[ pColumn ]; ▁) ▁/ ▁** ▁* ▁Return s ▁the ▁class ▁of ▁objects ▁in ▁the ▁column ▁of ▁which ▁is ▁provided ▁in ▁the ▁index . ▁* ▁* ▁@ ▁Param ▁pColumn ▁- ▁the ▁column ▁number . ▁* ▁@ ▁Return ▁Class ▁- ▁the ▁class ▁of ▁objects ▁of ▁the ▁selected ▁column . ▁* ▁@ ▁Exception ▁ Illegal A rgumentException ▁- ▁if ▁the ▁index ▁column ▁do es ▁not ▁pro ▁* ▁In ▁the ▁model . ▁* ▁* ▁/ ▁p ublic ▁class ▁getColumn Class ▁( int ▁pColumn ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( pColumn > ▁= ▁getColumn Count ▁() ▁| ▁| ▁pColumn ▁<0) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁column ▁index ▁is ▁not ▁provided ▁in ▁the ▁model . "); ▁) ▁return ▁columnClasses ▁[ pColumn ]; ▁) ▁/ ▁** ▁* ▁Return s ▁whether ▁the ▁selected ▁cell ▁editable . ▁* ▁* ▁@ ▁Return ▁boolean ▁- ▁true ▁if ▁the ▁cell ▁editable ▁* ▁False ▁otherwise ▁* ▁@ ▁Param ▁pRow ▁- ▁the ▁line ▁number . ▁* ▁@ ▁Param ▁pColumn ▁- ▁the ▁column ▁number . ▁* ▁@ ▁Exception ▁ Illegal A rgumentException ▁- ▁if ▁the ▁index ▁or ▁the ▁row ▁or ▁column ▁are ▁not ▁provided ▁* ▁In ▁the ▁model . ▁* ▁* ▁/ ▁p ublic ▁boolean ▁is Cell Editable ▁( pRow ▁int , ▁int ▁pColumn ) ▁throws ▁ Illegal A rgumentException ▁( ▁return ▁false ; ▁) ▁/ ▁** ▁* ▁The ▁method ▁is ▁in herit ed ▁by ▁setValueAt ▁TableModel ▁do es ▁not ▁need ▁to ▁SitoTableModel ▁* ▁Be cause ▁it ▁provided ▁the ▁possibilit y ▁to ▁change ▁a ▁si ngle ▁cell . ▁* ▁@ ▁D eprecat ed ▁* ▁* ▁/ ▁p ublic ▁void ▁setValueAt ▁( Object ▁value , ▁int ▁row , ▁int ▁col ) ▁( ▁) ▁/ ▁** ▁* ▁* ▁ Enter ▁data ▁on ▁the ▁feedback ▁received ▁from ▁a ▁cultural ▁* ▁In ▁the ▁model ▁from ▁Bean . ▁* ▁* ▁@ ▁Param ▁BeanVisitaBC ▁PBC ▁- ▁the ▁bean ▁that ▁contain s ▁the ▁feedback ▁from ▁* ▁Cultural . ▁* ▁@ ▁Throw s ▁ Illegal A rgumentException ▁- ▁if ▁the ▁parameters ▁supplied ▁input ▁not ▁* ▁Are ▁valid . ▁* ▁* ▁/ ▁p ublic ▁void ▁insert VisitaBC ▁( BeanVisitaBC ▁pVisitaBC , ▁String ▁pUsername ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( pVisitaBC ▁== ▁null ▁| ▁| ▁pUsername ▁== ▁null ▁| ▁| ▁pUsername . equals ▁("")) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" invalid ▁parameters ▁supplied ▁input . "); ▁) ▁Object ▁[] ▁aRow ▁= ▁new ▁Object ▁[6] ; ▁aRow ▁[0] ▁= ▁pVisitaBC . get Voto ▁(); ▁aRow ▁[1] ▁= ▁pVisitaBC . get Commento ▁(); ▁aRow ▁[2] ▁= ▁pVisitaBC . get DataVisita ▁(); ▁aRow ▁[3] ▁= ▁pUsername ; ▁aRow ▁[4] ▁= ▁pVisitaBC . getId BeneCulturale ▁(); ▁aRow ▁[5] ▁= ▁pVisitaBC . get IdTurista ▁(); ▁data . add ▁( aRow ); ▁) ▁/ ▁** ▁* ▁* ▁ Enter ▁data ▁on ▁the ▁feedback ▁received ▁from ▁a ▁refreshment ▁* ▁In ▁the ▁model ▁from ▁Bean . ▁* ▁* ▁@ ▁Param ▁BeanVisitaPR ▁PBC ▁- ▁the ▁bean ▁that ▁contain s ▁the ▁feedback ▁from ▁* ▁Refreshment . ▁* ▁@ ▁Throw s ▁ Illegal A rgumentException ▁- ▁if ▁the ▁parameters ▁supplied ▁input ▁not ▁* ▁Are ▁valid . ▁* ▁* ▁/ ▁p ublic ▁void ▁insert VisitaPR ▁( BeanVisitaPR ▁pVisitaPR , ▁String ▁pUsername ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( pVisitaPR ▁== ▁null ▁| ▁| ▁pUsername ▁== ▁null ▁| ▁| ▁pUsername . equals ▁("")) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" invalid ▁parameters ▁supplied ▁input . "); ▁) ▁Object ▁[] ▁aRow ▁= ▁new ▁Object ▁[6] ; ▁aRow ▁[0] ▁= ▁pVisitaPR . get Voto ▁(); ▁aRow ▁[1] ▁= ▁pVisitaPR . get Commento ▁(); ▁aRow ▁[2] ▁= ▁pVisitaPR . get DataVisita ▁(); ▁aRow ▁[3] ▁= ▁pUsername ; ▁aRow ▁[4] ▁= ▁pVisitaPR . get IdPuntoDiRistoro ▁(); ▁aRow ▁[5] ▁= ▁pVisitaPR . get IdTurista ▁(); ▁data . add ▁( aRow ); ▁) ▁/ ▁** ▁* ▁* ▁Update s ▁the ▁comment ▁feedback ▁contain ed ▁in ▁the ▁table ▁row ▁selected . ▁* ▁P NuovoCommento ▁* ▁@ ▁ param ▁String ▁- ▁the ▁new ▁comment . ▁* ▁@ ▁Param ▁pRow ▁- ▁the ▁row ▁to ▁update . ▁* ▁@ ▁Throw s ▁ Illegal A rgumentException ▁- ▁if ▁< ul > ▁< li > ▁the ▁row ▁index ▁is ▁not ▁present ▁in ▁the ▁model . ▁* ▁< li > ▁New ▁comment ▁supplied ▁input ▁is ▁zero . ▁</ ▁U l > ▁* ▁/ ▁p ublic ▁void ▁ modificaCommento ▁( pNuovoCommento ▁String , ▁int ▁pRow ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( pRow > ▁= ▁Get Row Count ▁() ▁| ▁| ▁pRow ▁<0) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁row ▁index ▁is ▁not ▁provided ▁in ▁the ▁model . "); ▁) ▁if ▁( null ▁== ▁pNuovoCommento ) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁new ▁comment ▁can ▁not ▁be ▁null . "); ▁) ▁data . get ▁( pRow ) ▁[1] ▁= ▁pNuovoCommento ; ▁fir eTable Data Changed ▁(); ▁) ▁/ ▁** ▁* ▁* ▁Return s ▁the ▁id ▁of ▁the ▁row ▁receive ▁feedback ▁provided ▁on ▁input . ▁* ▁* ▁@ ▁Param ▁pRow ▁int ▁- ▁the ▁row ▁number . ▁* ▁@ ▁Return ▁int ▁[] ▁- ▁the ▁id ▁of ▁the ▁feedback . ▁* ▁@ ▁Throw s ▁ Illegal A rgumentException ▁- ▁if ▁the ▁row ▁index ▁do es ▁not ▁pro ▁* ▁In ▁the ▁model . ▁* ▁/ ▁p ublic ▁int ▁[] ▁getID Feedback ▁( int ▁pRow ) ▁throws ▁ Illegal A rgumentException ▁( ▁if ▁( pRow > ▁= ▁Get Row Count ▁() ▁| ▁| ▁pRow ▁<0) ▁( ▁throw ▁new ▁ Illegal A rgumentException ▁( ▁" The ▁row ▁index ▁is ▁not ▁provided ▁in ▁the ▁model . "); ▁) ▁int ▁[] ▁ids ▁= ▁new ▁int ▁[2] ; ▁ids ▁[0] ▁= ▁( Integer ) ▁data . get ▁( pRow ) ▁[4] ; ▁ids ▁[1] ▁= ▁( Integer ) ▁data . get ▁( pRow ) ▁[5] ; ▁return ▁ids ; ▁) ▁/ ▁** ▁* ▁* ▁Return s ▁the ▁id ▁of ▁feedback ▁to ▁line ▁number ▁provided ▁as ▁input ▁and ▁remove s ▁it ▁from ▁the ▁model . ▁* ▁* ▁@ ▁Param ▁pRow ▁int ▁- ▁the ▁row ▁number . ▁* ▁@ ▁Return ▁int ▁[] ▁- ▁the ▁id ▁of ▁the ▁feedback . ▁* ▁@ ▁Exception ▁ Illegal A rgumentException ▁- ▁if ▁the ▁row ▁index ▁do es ▁not ▁pro ▁* ▁In ▁the ▁model . ▁* ▁* ▁/ ▁p ublic ▁int ▁[] ▁remove Feedback ▁( int ▁pRow ) ▁throws ▁ Illegal A rgumentException ▁( ▁int ▁[] ▁ids ▁= ▁getID Feedback ▁( pRow ); ▁data . remove ▁( pRow ); ▁return ▁ids ; ▁) ▁)