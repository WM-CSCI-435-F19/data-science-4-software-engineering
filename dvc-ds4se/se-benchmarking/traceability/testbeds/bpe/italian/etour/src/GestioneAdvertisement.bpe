▁ ï»¿ / ▁** ▁* ▁Class ▁that ▁implements ▁the ▁general ▁* ▁Management ▁dell ' advertisement . ▁* ▁* ▁@ ▁Auth or ▁F abio ▁P all adin o ▁* ▁@ ▁Version ▁0.1 ▁* ▁* ▁ 2007 ▁eTour ▁Pro ject ▁- ▁C opy right ▁by ▁SE ▁@ ▁ SA ▁Lab ▁DMI ▁University ▁of ▁Salerno ▁* ▁/ ▁p ackage ▁unisa . gps . etour . control . Gestione Advertisement ; ▁import ▁java . awt . image . BufferedImage ; ▁import ▁java . io . File ; ▁import ▁java . io . IOException ; ▁import ▁java . rmi . RemoteException ; ▁import ▁java . rmi . server . Uni castRemoteObject ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . ArrayList ; ▁import ▁java . util . HashMap ; ▁import ▁java x . image io . ImageIO ; ▁import ▁java x . swing . ImageIcon ; ▁import ▁unisa . gps . etour . bean . BeanBanner ; ▁import ▁unisa . gps . etour . bean . BeanConvenzione ; ▁import ▁unisa . gps . etour . repository . DBBanner ; ▁/ ▁/ ▁import ▁unisa . gps . etour . control . Gestione Advertisement . test . stubs ▁ .* ; ▁import ▁unisa . gps . etour . repository . DBConvenzione ; ▁import ▁unisa . gps . etour . repository . IDBBanner ; ▁import ▁unisa . gps . etour . repository . IDBConvenzione ; ▁import ▁unisa . gps . etour . util . ControlloDati ; ▁import ▁unisa . gps . etour . util . CostantiGlobali ; ▁import ▁unisa . gps . etour . util . MessaggiErrore ; ▁Gestione Advertisement ▁Uni castRemoteObject ▁p ublic ▁class ▁ext ends ▁implements ▁IGestione Advertisement ▁( ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁1 L ; ▁/ ▁** ▁An ▁object ▁that ▁handle s ▁operations ▁on ▁the ▁banner ▁* ▁/ ▁Pr ivate ▁IDBBanner ▁dbBanner ; ▁/ ▁** ▁* ▁Constructor , ▁instantiate s ▁an ▁object ▁of ▁type ▁DBBanner ▁that ▁* ▁Contain s ▁methods ▁that ▁perform ▁operations ▁on ▁data ▁* ▁Entity ▁banner . ▁* ▁* ▁@ ▁Throw s ▁RemoteException ▁* ▁/ ▁p ublic ▁Gestione Advertisement ▁() ▁throws ▁RemoteException ▁( ▁super ▁(); ▁dbBanner ▁= ▁new ▁DBBanner ▁(); ▁) ▁/ ▁** ▁* ▁Delete ▁a ▁banner ▁and ▁the ▁image ▁associated ▁with ▁the ▁system . ▁* ▁* ▁@ ▁Param ▁id ▁of ▁the ▁banner ▁to ▁remove ▁pBannerID ▁* ▁@ ▁Throw s ▁RemoteException ▁* ▁/ ▁p ublic ▁boolean ▁cancella Banner ▁( int ▁pIdBanner ) ▁throws ▁RemoteException ▁( ▁/ ▁* ▁Bean ▁containing ▁the ▁data ▁of ▁the ▁banner ▁* ▁/ ▁BeanBanner ▁banner ; ▁TR Y ▁( ▁/ ▁* ▁Load ▁the ▁banner ▁and ▁check ▁the ▁data ▁* ▁/ ▁banner ▁= ▁dbBanner . ottieniBanner Da ID ▁( pIdBanner ); ▁if ▁(! ▁ControlloDati . check BeanBanner ▁( banner )) ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ DATI ); ▁) ▁/ ▁* ▁Remove ▁the ▁image ▁associated ▁with ▁the ▁banner ▁* ▁/ ▁Image ▁file ▁= ▁new ▁File ▁( banner . get PercorsoFile ▁()); ▁immagine . delete ▁(); ▁/ ▁* ▁Clear ▁the ▁who le ▁bean ▁banner ▁* ▁/ ▁return ▁( dbBanner . cancella Banner ▁( pIdBanner )); ▁) ▁ catch ▁( SQLException ▁e ) ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ CONNE SSION E _ DBMS ); ▁) ▁) ▁/ ▁** ▁* ▁Method ▁to ▁change ▁the ▁image ▁associated ▁with ▁the ▁banner : ▁* ▁Delete ▁the ▁ old ▁image ▁and ▁store s ▁the ▁new ▁* ▁E n jo y ▁the ▁same ▁path ▁as ▁the ▁ old ▁image . ▁* ▁* ▁@ ▁Param ▁id ▁pBannerID ▁banner ▁* ▁@ ▁Param ▁pImmagine ▁ImageIcon ▁object ▁containing ▁the ▁new ▁image ▁of ▁the ▁banner ▁* ▁@ ▁Return ▁returns ▁true ▁if ▁the ▁operation ▁is ▁successful ▁* ▁/ ▁p ublic ▁boolean ▁modifica Banner ▁( int ▁pBannerID , ▁Image l con ▁pImmagine ) ▁throws ▁RemoteException ▁( ▁TR Y ▁( ▁/ ▁* ▁Perform s ▁a ▁check ▁on ▁the ▁image ▁of ▁the ▁banner ▁* ▁/ ▁if ▁(! ▁ControlloDati . check Immagine ▁( pImmagine )) ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ DATI ); ▁) ▁/ ▁* ▁Load ▁the ▁icon ▁image ▁* ▁/ ▁BufferedImage ▁ buffImg ▁= ▁( BufferedImage ) ▁pImmagine . getImage ▁(); ▁/ ▁* ▁Load ▁the ▁data ▁of ▁the ▁banner ▁* ▁/ ▁BeanBanner ▁banner ▁= ▁dbBanner . ottieniBanner Da ID ▁( pBannerID ); ▁/ ▁* ▁Check ▁the ▁banner ▁on ▁the ▁data ▁uploaded ▁* ▁/ ▁if ▁(! ▁ControlloDati . check BeanBanner ▁( banner )) ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ DATI ); ▁) ▁/ ▁* ▁Re write ▁the ▁image ▁file ▁and ▁returns ▁the ▁result ▁of ▁the ▁operation ▁* ▁/ ▁Imgfile ▁file ▁= ▁new ▁File ▁( banner . get PercorsoFile ▁()); ▁return ▁( ImageIO . write ▁( buffImg , ▁" j pg ", ▁Imgfile )); ▁) ▁ catch ▁( SQLException ▁e ) ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ CONNE SSION E _ DBMS ); ▁) ▁ catch ▁( Exception ▁e ) ▁( ▁if ▁( e ▁instance of ▁RemoteException ) ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ DATI ); ▁) ▁else ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ FILE ); ▁) ▁) ▁) ▁/ ▁** ▁* ▁Return s ▁a ▁list ▁of ▁banners ▁for ▁a ▁refreshment . ▁* ▁Use ▁the ▁method ▁( @ ▁link ) ▁DBBanner . ottieniBanner ▁* ▁* ▁@ ▁Param ▁ID ▁p PuntoDiRistoroID ▁refreshment ▁* ▁@ ▁Throw s ▁RemoteException ▁* ▁/ ▁< BeanBanner , ImageIcon > ▁ottieniBanner sDa ID ▁p ublic ▁ HashMap ▁( int ▁p IdPuntoDiRistoro ) ▁throws ▁RemoteException ▁( ▁/ ▁* ▁Create ▁a ▁ HashMap ▁that ▁will ▁hold ▁the ▁banner ▁and ▁associated ▁images ▁* ▁/ ▁< BeanBanner , ImageIcon > ▁To Return ▁ HashMap ▁< BeanBanner , ▁ImageIcon > ▁= ▁new ▁ HashMap ▁(); ▁TR Y ▁( ▁/ ▁* ▁Get ▁the ▁list ▁of ▁banners ▁for ▁a ▁refreshment ▁point ▁* ▁/ ▁ArrayList ▁< BeanBanner > ▁listaBanner ▁= ▁dbBanner . ottieniBanner ▁( p IdPuntoDiRistoro ); ▁/ ▁* ▁For ▁each ▁banner ▁valid ▁list ▁* ▁/ ▁for ▁( BeanBanner ▁banner : ▁listaBanner ) ▁( ▁/ ▁* ▁I f ▁the ▁banner ▁is ▁a ▁valid ▁char ge ▁in ▁the ▁ HashMap ▁with ▁the ▁image ▁file ▁* ▁/ ▁if ▁( ControlloDati . check BeanBanner ▁( banner )) ▁( ▁/ ▁* ▁Create ▁the ▁image ▁file ▁* ▁/ ▁F ileImmagine ▁file ▁= ▁new ▁File ▁( banner . get PercorsoFile ▁()); ▁/ ▁* ▁Create ▁an ▁object ▁ImageIcon ▁from ▁the ▁image ▁file ▁* ▁/ ▁ImageIcon ▁icon ▁= ▁new ▁ImageIcon ▁( ImageIO . read ▁( f ileImmagine )); ▁/ ▁* ▁Add ▁the ▁banner ▁and ▁the ▁image ▁all ' HashMap ▁* ▁/ ▁toReturn . put ▁( banner , ▁icon ); ▁) ▁) ▁toReturn ▁return ; ▁) ▁ catch ▁( SQLException ▁e ) ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ CONNE SSION E _ DBMS ); ▁) ▁ catch ▁( Exception ▁e ) ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ FILE ); ▁) ▁ catch ▁( Exception ▁e ) ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ SCONOSCIUTO ); ▁) ▁) ▁/ ▁** ▁* ▁Create ▁and ▁insert ▁a ▁new ▁banner , ▁mak ing ▁ sure ▁the ▁num . ▁maximum ▁* ▁Banner ▁displayed ▁for ▁a ▁refreshment ▁point ▁is ▁* ▁Al read y ▁be en ▁rea ched ▁in ▁this ▁case ▁throws ▁an ▁exception ▁to ▁the ▁call ing ▁method . ▁* ▁* ▁@ ▁Param ▁Id ▁pID PuntoDiRistoro ▁of ▁refreshment ▁* ▁@ ▁Param ▁pImmagineBanner ▁ImageIcon ▁object ▁containing ▁the ▁banner ▁image ▁* ▁@ ▁Return ▁Return s ▁true ▁if ▁the ▁insertion ▁has ▁be en ▁successful . ▁* ▁@ ▁Exception ▁RemoteException ▁* ▁/ ▁p ublic ▁boolean ▁inserisci Banner ▁( int ▁p IdPuntoDiRistoro , ▁Image l con ▁pImmagineBanner ) ▁throws ▁RemoteException ▁( ▁TR Y ▁( ▁/ ▁* ▁Perform s ▁a ▁check ▁on ▁the ▁image ▁* ▁/ ▁if ▁(! ▁ControlloDati . check Immagine ▁( pImmagineBanner )) ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ DATI ); ▁) ▁/ ▁* ▁Create ▁an ▁object ▁that ▁handle s ▁the ▁conventions ▁* ▁/ ▁IDBConvenzione ▁dbConvenzione ▁= ▁new ▁ DBConvenzione ▁(); ▁/ ▁* ▁Load ▁the ▁data ▁of ▁the ▁convention ▁of ▁a ▁refreshment ▁point ▁* ▁/ ▁BeanConvenzione ▁Convention ▁dbConvenzione . ottieni Conve zioneAttiva ▁= ▁( p IdPuntoDiRistoro ); ▁/ ▁* ▁Get ▁the ▁number ▁of ▁banners ▁displayed ▁by ▁the ▁Convention ▁Ma s s s i mo ▁* ▁/ ▁int ▁maxBanner ▁= ▁convenzione . get MaxBanner ▁(); ▁/ ▁* ▁Load ▁the ▁list ▁of ▁banners ▁for ▁a ▁refreshment ▁and ▁store s ▁the ▁number ▁* ▁/ ▁int ▁num Banner ▁= ▁( dbBanner . ottieniBanner ▁( p IdPuntoDiRistoro )). ▁ size ▁(); ▁/ ▁* ▁Check ▁that ▁the ▁maximum ▁number ▁of ▁banners ▁is ▁not ▁rea ched ▁* ▁/ ▁if ▁(! ▁( num Banner ▁< maxBanner )) ▁( ▁throw ▁new ▁Exception ▁( MessaggiErrore . ERRORE _ NUM _ BANNER ); ▁) ▁/ ▁* ▁Create ▁a ▁blank ▁banner ▁* ▁/ ▁Banner ▁BeanBanner ▁= ▁new ▁BeanBanner ▁(); ▁/ ▁* ▁Create ▁a ▁unique ▁file ▁name ▁* ▁/ ▁String ▁path ▁= ▁CostantiGlobali . SER VER _ IMAGE _ PATH ▁+ ▁p IdPuntoDiRistoro ; ▁int ▁i ▁= ▁0; ▁File Im g ▁file ▁= ▁new ▁File ▁( path ▁+ ▁" _ " ▁+ ▁i ▁+ ▁" . ▁J pg "); ▁while ▁( fileImg . exists ▁()) ▁( ▁i ▁+ ▁+ ; ▁fileImg ▁= ▁new ▁File ▁( path ▁+ ▁" _ " ▁+ ▁i ▁+ ▁" . ▁j pg "); ▁) ▁/ ▁* ▁Stor es ▁the ▁image ▁in ▁the ▁file ▁system ▁* ▁/ ▁BufferedImage ▁im ▁= ▁( BufferedImage ) ▁pImmagineBanner . getImage ▁(); ▁if ▁(! ▁ ImageIO . write ▁( im , ▁" j pg ", ▁fileImg )) ▁( ▁/ ▁* ▁W ri te ▁fail ed ▁* ▁/ ▁throw ▁new ▁ IOException ▁(); ▁) ▁/ ▁* ▁Load s ▁the ▁data ▁in ▁the ▁banner ▁* ▁/ ▁banner . set IdPuntoDiRistoro ▁( p IdPuntoDiRistoro ); ▁banner . set PercorsoFile ▁( fileImg . get Path ▁()); ▁/ ▁* ▁Insert ▁the ▁banner ▁in ▁the ▁database ▁* ▁/ ▁return ▁( dbBanner . inserisci Banner ▁( banner )); ▁) ▁ catch ▁( SQLException ▁e ) ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ CONNE SSION E _ DBMS ); ▁) ▁ catch ▁( Exception ▁e ) ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ FILE ); ▁) ▁ catch ▁( Exception ▁e ) ▁( ▁if ▁( e . getMessage ▁() . ▁ equals ▁( MessaggiErrore . ERRORE _ NUM _ BANNER )) ▁( ▁/ ▁* ▁Has ▁be en ▁rea ched ▁on ▁mo st ▁of ▁banner ▁inserted ▁num ▁* ▁/ ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ NUM _ BANNER ); ▁) ▁else ▁( ▁throw ▁new ▁RemoteException ▁( MessaggiErrore . ERRORE _ SCONOSCIUTO ); ▁) ▁) ▁) ▁)