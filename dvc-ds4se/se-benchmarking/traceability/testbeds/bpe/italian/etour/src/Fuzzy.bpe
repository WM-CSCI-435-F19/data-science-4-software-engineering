▁ ï»¿ p ackage ▁unisa . gps . etour . control . f uzzy ; ▁import ▁java . io . File ; ▁import ▁java . io . FileInputStream ; ▁import ▁java . io . File N otFoundException ; ▁import ▁java . io . FileOutputStream ; ▁import ▁java . io . FileReader ; ▁import ▁java . io . IOException ; ▁import ▁java . io . Object InputStream ; ▁import ▁java . io . Object OutputStream ; ▁import ▁java . rmi . RemoteException ; ▁import ▁java . util . Enumeration ; ▁import ▁java . util . Hashtable ; ▁import ▁java . util . Scanner ; ▁p ublic ▁class ▁F uzzy ▁( ▁/ ▁** ▁* ▁Class ▁that ▁implements ▁the ▁methods ▁ used ▁to ▁calculate ▁the ▁F uzzy ▁* ▁Category ▁of ▁membership ▁of ▁a ▁refreshment ▁or ▁a ▁cultural ▁property . ▁* ▁/ ▁/ ▁** ▁* ▁Method ▁for ▁calculat ing ▁the ▁relevance ▁of ▁a ▁term . ▁* ▁* ▁@ ▁Param ▁distance : ▁Contain s ▁the ▁distance ▁of ▁the ▁term ▁from ▁category ▁* ▁A nalyzed ▁* ▁@ ▁Param ▁pMaxDist : ▁Contain s ▁di s ta za ▁maximum ▁of ▁all ▁terms ▁in ▁all ▁* ▁Categories . ▁* ▁@ ▁Return ▁Return s ▁the ▁relevance ▁of ▁the ▁term ▁in ▁the ▁category . ▁* ▁/ ▁priv ate ▁static ▁float ▁relevance ▁( float ▁distance , ▁float ▁pMaxDist ) ▁( ▁return ▁( distance ▁/ ▁pMaxDist ); ▁) ▁/ ▁** ▁* ▁Method ▁for ▁calculat ing ▁the ▁distance ▁b etween ▁a ▁term ▁and ▁a ▁category ▁* ▁* ▁@ ▁Param ▁pTermine : ▁Contain s ▁the ▁period ▁analyzed ▁* ▁@ ▁Param ▁pTotTermini : ▁Table s ▁of ▁the ▁total ▁frequency ▁of ▁terms . ▁* ▁@ ▁Param ▁frequenzaTesto : ▁Table ▁of ▁the ▁terms ▁of ▁the ▁text ▁analyzed . ▁* ▁@ ▁Param ▁pCategoria : ▁Category ▁analyzed . ▁* ▁@ ▁Return ▁Return s ▁the ▁distance ▁of ▁the ▁term ▁pTermine ▁by ▁category ▁* ▁P Categoria ▁* ▁/ ▁priv ate ▁static ▁float ▁distance ▁( String ▁pTermine , ▁ Hashtable ▁< string , ▁float [] > ▁pTotTermini , ▁float ▁frequenzaTesto , ▁Category ▁pCategoria ) ▁( ▁/ ▁/ ▁The ▁first ▁variable ▁track s ▁the ▁frequency ▁of ▁a ▁term ▁/ ▁/ ▁Re la ting ▁to ▁a ▁category ▁/ ▁/ ▁The ▁second ▁keeps ▁track ▁of ▁fra quenza ▁a ▁de ad line ▁for ▁all ▁/ ▁/ ▁Categories ▁float ▁[] ▁frequenza Categoria ▁= ▁new ▁float ▁[3] , ▁frequenza Totale ▁= ▁new ▁float ▁[3] ; ▁if ▁( pCategoria . esiste Termine ▁( pTermine )) ▁/ ▁/ ▁if ▁the ▁term ▁is ▁/ ▁/ ▁In ▁category ▁( ▁/ ▁/ ▁It s ▁frequency ▁in ▁this ▁category ▁is ▁equal ▁to ▁the ▁frequency ▁/ ▁/ ▁Knowledge Base ▁/ ▁/ ▁Mo re ▁frequency ▁in ▁the ▁search ▁text ▁frequenza Categoria ▁= ▁pCategoria . getVal ▁( pTermine ); ▁frequenza Categoria ▁[0] ▁+ ▁= ▁frequenzaTesto ; ▁) ▁else ▁( ▁/ ▁/ ▁Otherwise ▁it ▁is ▁equal ▁to ▁the ▁frequency ▁of ▁the ▁term ▁in ▁the ▁text ▁/ ▁/ ▁A nalyzed ▁frequenza Categoria ▁[0] ▁= ▁frequenzaTesto ; ▁) ▁if ▁( pTotTermini . get ▁( pTermine ) ! ▁= ▁null ) ▁/ ▁/ ▁if ▁the ▁term ▁exists ▁in ▁/ ▁/ ▁Table ▁of ▁the ▁total ▁time ▁frequenza Totale ▁= ▁pTotTermini . get ▁( pTermine ) ▁/ ▁/ ▁Get ▁the ▁value ▁frequenza Totale ▁[0] ▁+ ▁= ▁frequenzaTesto , ▁/ ▁/ ▁the ▁total ▁frequency ▁is ▁given ▁/ ▁/ ▁F requency ▁in ▁the ▁text ▁/ ▁/ ▁An al izza t p ▁/ ▁/ ▁P lus ▁any ▁frequency ▁stored ▁in ▁memor y ▁in ▁the ▁table ▁/ ▁/ ▁Total ▁time ▁return ▁( frequenza Categoria ▁[0] ▁/ ▁frequenza Totale ▁[0 ▁ ]); // ▁distance ▁is ▁/ ▁/ ▁Equal ▁to ▁/ ▁/ ▁F requency ▁in ▁/ ▁/ ▁Category ▁/ ▁/ ▁The ▁total ▁frequency ▁Fratto ▁) ▁/ ▁** ▁* ▁Method ▁for ▁calculat ing ▁the ▁distance ▁of ▁a ▁term ▁from ▁one ▁category . ▁* ▁Use d ▁for ▁training ▁* ▁* ▁@ ▁Param ▁pTermine ▁period ▁to ▁analyze ▁* ▁@ ▁Param ▁pCategoria ▁category ▁from ▁which ▁you ▁must ▁calculate ▁the ▁distance ▁* ▁@ ▁Param ▁table ▁pTotTermini ▁total ▁time ▁* ▁@ ▁Return ▁Return s ▁the ▁distance ▁of ▁a ▁term ▁from ▁one ▁category ▁* ▁/ ▁priv ate ▁static ▁float ▁distance ▁( String ▁pTermine , ▁star ▁pCategoria , ▁ Hashtable ▁< string , ▁float [] > ▁pTotTermini ) ▁( ▁return ▁( ( pCategoria . getVal ▁( pTermine )) ▁[0] ▁/ ▁( pTotTermini . get ▁( pTermine )) ▁[0] ); ▁) ▁/ ▁** ▁* ▁Implement ation ▁of ▁a ▁function ▁T - Norm ▁* ▁* ▁@ ▁Param ▁a ▁first ▁value ▁* ▁@ ▁Param ▁b ▁the ▁second ▁value ▁* ▁@ ▁Return ▁returns ▁the ▁value ▁calculat ed ▁us ing ▁a ▁function ▁T - Norm ▁* ▁/ ▁priv ate ▁static ▁float ▁ tNorm ▁( float ▁a , ▁float ▁b ) ▁( ▁return ▁( ( a ▁* ▁b ) ▁/ ▁( ( 2 ▁- ▁( ( a ▁+ ▁b ) ▁- ▁( a ▁* ▁b ▁) ) ))); ▁/ ▁/ ▁Return ▁Ma th . min ▁( a , ▁b ); ▁/ ▁/ ▁Return ▁a ▁* ▁b ; ▁/ ▁/ ▁Return ▁Ma th . max ▁(0, ▁a ▁+ ▁b - 1); ▁) ▁/ ▁** ▁* ▁Implement ation ▁of ▁a ▁function ▁S - Norm ▁* ▁* ▁@ ▁Param ▁a ▁first ▁value ▁* ▁@ ▁Param ▁b ▁the ▁second ▁value ▁* ▁@ ▁Return ▁returns ▁the ▁value ▁calculat ed ▁us ing ▁a ▁function ▁S - Norm ▁* ▁/ ▁priv ate ▁static ▁float ▁s Norm ▁( float ▁a , ▁float ▁b ) ▁( ▁return ▁( ( a ▁+ ▁b ) ▁/ ▁( 1 ▁+ ▁a ▁* ▁b )); ▁/ ▁/ ▁Return ▁Ma th . max ▁( a , ▁b ); ▁/ ▁/ ▁Return ▁( a ▁+ ▁b - ( a ▁* ▁b )); ▁/ ▁/ ▁Return ▁Ma th . min ▁( 1. 1 ▁+ ▁b ); ▁) ▁/ ▁** ▁* ▁Calculat ion ▁of ▁similarity ▁b etween ▁a ▁category ▁and ▁a ▁given ▁text ▁input ▁* ▁* ▁@ ▁Param ▁table ▁pTermini ▁ wo rd ed . ▁It ▁must ▁contain ▁to ▁* ▁P gni ▁term ▁values ▁of ▁import ance ▁and ▁belonging ▁situa ted ▁in ▁Vector ▁float ▁* ▁in ▁positions ▁1 ▁and ▁2. ▁* ▁@ ▁Return ▁returns ▁a ▁numeri c ▁value ▁that ▁indicate s ▁the ▁similarity ▁of ▁a ▁* ▁Text ▁with ▁the ▁category ▁on ▁which ▁one ▁has ▁calculat ed ▁the ▁values ▁of ▁Import ance ▁and ▁belonging ▁* ▁* ▁/ ▁priv ate ▁static ▁float ▁similarity ▁( Hashtable ▁< string , ▁float [] > ▁pTermini ) ▁( ▁float ▁sum ▁= ▁0, ▁/ ▁/ ▁return ▁value ▁for ▁( float ▁[] ▁val : ▁pTermini . value s ▁()) // ▁for ▁all ▁elements ▁of ▁/ ▁/ ▁Table ▁( ▁sum ▁+ ▁= ▁( tNorm ▁( val ▁[1] , ▁val ▁[0]) ) ▁/ ▁( s Norm ▁( val ▁[1] , ▁val ▁[0 ▁ ] ));// ▁performs ▁/ ▁/ ▁S um ▁of ▁the ▁values ▁given ▁by ▁the ▁di vision ▁of ▁function ▁T - Norm ▁/ ▁/ ▁With ▁the ▁function ▁S - Norm ▁made ▁/ ▁/ ▁ Between ▁relevance ▁and ▁belonging ▁) ▁return ▁sum ; ▁) ▁/ ▁** ▁* ▁Method ▁for ▁the ▁calculat ion ▁of ▁membership ▁of ▁a ▁text ▁to ▁a ▁category ▁* ▁* ▁@ ▁Param ▁val ▁indicate s ▁the ▁similarity ▁of ▁a ▁text ▁with ▁a ▁category ▁* ▁@ ▁Param ▁maxSimilarity ▁indicate s ▁the ▁maximum ▁similarity ▁found ▁* ▁@ ▁Return ▁resti uisce ▁a ▁value ▁in ▁the ▁interval ▁[ 0, 1] ▁that ▁indicate s ▁the ▁degree ▁of ▁* ▁Membership ▁of ▁the ▁text ▁to ▁the ▁category ▁ x ▁* ▁/ ▁priv ate ▁static ▁float ▁membership ▁( float ▁val , ▁float ▁maxSimilarity ) ▁( ▁return ▁( val ▁/ ▁maxSimilarity ); ▁) ▁/ ▁** ▁* ▁Method ▁to ▁delete ▁a ▁ten se ▁special ▁characters ▁and ▁to ▁ br ing ▁* ▁All ▁up per ca se ▁to ▁lowercase ▁* ▁* ▁@ ▁Param ▁string ▁pStr ▁t ransform ▁* ▁@ ▁Return ▁resti uisce ▁the ▁text ▁to ▁lowercase ▁characters ▁and ▁no ▁special ▁* ▁/ ▁priv ate ▁static ▁String ▁replace And Lower ▁( String ▁pStr ) ▁( ▁pStr ▁pStr . to Lower Case ▁= ▁(); ▁p str ▁= ▁pStr . replace ▁( ", ", ▁" "); ▁p str ▁= ▁pStr . replace ▁ (" . ", ▁" "); ▁pStr ▁pStr . replace ▁ (" !" , ▁= ▁" "); ▁pStr ▁pStr . replace ▁ (" ? ", ▁= ▁" "); ▁pStr ▁pStr . replace ▁ (" ' ", ▁= ▁" "); ▁pStr ▁return ; ▁) ▁/ ▁** ▁* ▁Method ▁of ▁retriev ing ▁the ▁category ▁you ▁be long ▁to ▁a ▁text ▁* ▁* ▁@ ▁Param ▁pDescrizione ▁text ▁to ▁analyze ▁Re stu ▁* ▁@ ▁return ▁a ▁string ▁indicat ing ▁the ▁category ▁* ▁@ ▁Throw s ▁RemoteException ▁* ▁/ ▁p ublic ▁static ▁String ▁calcola Categoria ▁( String ▁pDescrizione ) ▁throws ▁RemoteException ▁( ▁if ▁( ( pDescrizione ▁== ▁null ) ▁| ▁| ▁( pDescrizione . equals ▁("")) ) ▁return ▁" N ULL "; ▁String ▁text ▁= ▁pDescrizione ; ▁/ ▁/ ▁Table ▁of ▁terms ▁associated ▁with ▁the ▁text ▁port ion . ▁W ill ▁contain ▁/ ▁/ ▁ Values ▁of ▁frequency , ▁rileva m za , ▁membership ▁for ▁each ▁term ▁ Hashtable ▁< string , ▁float [] > ▁datiTesto ▁< string , ▁float [] > ▁= ▁new ▁ Hashtable ▁(); ▁/ ▁/ ▁Table ▁of ▁categories , ▁each ▁category ▁will ▁contain ▁the ▁value ▁of ▁/ ▁/ ▁Sim il ar ity ▁and ▁belonging ▁Text ▁ Hashtable ▁< string , ▁float [] > ▁testoCategoria ▁< string , ▁float [] > ▁= ▁new ▁ Hashtable ▁(); ▁replace And Lower ▁text ▁= ▁( text ) ▁/ ▁/ ▁delete ▁characters ▁and ▁spa e ci a li ▁/ ▁/ ▁Return s ▁the ▁text ▁by ▁replacing ▁/ ▁/ ▁ Upper ca se ▁with ▁lowercase ▁String ▁[] ▁testoSplit ▁= ▁testo . split ▁( ▁" "); ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< testoSplit . length ▁i ▁+ ▁+) ▁( / ▁/ ▁For ▁each ▁end ▁of ▁the ▁text ▁float ▁[] ▁toPut ▁= ▁new ▁float ▁[3] , ▁/ ▁/ ▁value ▁to ▁assign ▁to ▁the ▁string ▁/ ▁/ ▁In ▁the ▁has h ▁table ▁float ▁[] ▁valT mp ▁/ ▁/ ▁tempora ry ▁variable ▁containing ▁the ▁values ▁/ ▁/ ▁Associated ▁with ▁the ▁string ▁if ▁it ▁al read y ▁exists ▁in ▁the ▁has h ▁table ▁/ ▁/ ▁I f ▁the ▁string ▁is ▁present ▁in ▁the ▁table ▁pick s ▁up ▁the ▁values ▁/ ▁/ ▁And ▁an ▁in crea se ▁in ▁s a v ing ▁them ▁in ▁to ▁put ▁/ ▁/ ▁Otherwise ▁initialize ▁the ▁new ▁string ▁with ▁frequency ▁= ▁1 ▁if ▁( testoSplit ▁[ i ]. ▁ length ▁() ▁<= ▁3) ▁/ ▁/ ▁delete ▁un defined ▁terms ▁/ ▁/ ▁As ▁important , ▁the ▁inter ▁... ▁continue ; ▁if ▁( exists ▁( testoSplit ▁[ i ], ▁datiTesto )) ▁/ ▁/ ▁if ▁the ▁time ▁analyzed ▁/ ▁/ ▁Is ▁present ▁in ▁tebella ▁the ▁terms ▁of ▁the ▁analyzed ▁text ▁( ▁/ ▁/ ▁We ▁get ▁the ▁value ▁of ▁frequency ▁in ▁the ▁table ▁and ▁there ▁/ ▁/ ▁Add s ▁one ▁valT mp ▁= ▁datiTesto . get ▁( testoSplit ▁[ i ]); ▁toPut ▁[0] ▁= ▁valT mp ▁[0] ; ▁toPut ▁[0] ▁+ ▁= ▁( float ) ▁1 ▁/ ▁testoSplit . length ; ▁) ▁else ▁( ▁toPut ▁[0] ▁= ▁( float ) ▁1 ▁/ ▁testoSplit . length ; ▁/ ▁/ ▁Otherwise ▁initialize ▁the ▁value ▁of ▁frequency ▁to ▁a ▁/ ▁/ ▁Fratto , ▁the ▁total ▁number ▁of ▁terms ▁( relativ e ▁frequency ) ▁) ▁/ ▁/ ▁Insert ▁the ▁new ▁entry ▁in ▁the ▁table ▁/ ▁/ ▁System . out . println ▁( toPut ▁[0] ); ▁datiTesto . put ▁( testoSplit ▁[ i ], ▁toPut ); ▁) ▁/ ▁/ ▁You ▁try ▁to ▁open ▁the ▁k nowledge ▁base ▁ElencoCategorie ▁list ; ▁TR Y ▁( ▁apri Elenco ▁list ▁= ▁(); ▁) ▁ catch ▁( Class N otFoundException ▁e ) ▁/ ▁/ ▁error ▁open ing ▁file ▁ kb . sbt ▁( ▁throw ▁new ▁RemoteException ▁( ▁" The ▁k nowledge ▁base ▁is ▁m issing ▁or ▁co rrupt "); ▁) ▁ catch ▁( Exception ▁e ) ▁( ▁throw ▁new ▁RemoteException ▁( ▁" The ▁k nowledge ▁base ▁is ▁m issing ▁or ▁co rrupt "); ▁) ▁/ ▁/ ▁Is ▁take n ▁from ▁the ▁base ▁of ▁k nowledge ▁to ▁the ▁table ▁of ▁total ▁time ▁< string , ▁Float [] > ▁totTermini ▁= ▁elenco . get TotTermini ▁ Hashtable ▁(); ▁float ▁maxSimilarity ▁= ▁- 1, ▁/ ▁/ ▁hold s ▁the ▁value ▁of ▁maximum ▁similarity ▁for ▁( String ▁CategoryName : ▁elenco . Categorie ▁()) ▁( / ▁/ ▁For ▁all ▁the ▁categories ▁in ▁the ▁k nowledge ▁base ▁float ▁[] ▁toPut ▁= ▁new ▁float ▁[3] , ▁/ ▁/ ▁value ▁to ▁assign ▁to ▁the ▁string ▁/ ▁/ ▁In ▁the ▁has h ▁table ▁for ▁( Enumeration ▁< String > ▁datiTesto . key s ▁val ▁= ▁(); ▁val ▁ . ▁ hasMore Element s ▁(); ) ▁( / ▁/ ▁For ▁all ▁elements ▁of ▁the ▁table ▁of ▁the ▁terms ▁of ▁the ▁text ▁String ▁term ▁= ▁val . next Element ▁(); ▁/ ▁/ ▁We ▁get ▁the ▁value ▁of ▁a ▁term ▁float ▁[] ▁tmp ▁= ▁datiTesto . get ▁( term ); ▁/ ▁/ ▁Calculat e ▁range ▁and ▁bearing ▁tmp ▁[1] ▁= ▁distance ▁( term ▁totTermini , ▁tmp ▁ [0], ▁list ▁ . ▁get Categoria ▁( CategoryName )); ▁tmp ▁[2] ▁= ▁import ance ▁( tmp ▁[1] , ▁elenco . get MaxDist ▁()); ▁datiTesto . put ▁( term , ▁tmp ); ▁) ▁/ ▁/ ▁We ▁calculate ▁the ▁similarity ▁On ce ▁the ▁an a ly s is ▁/ ▁/ ▁All ▁the ▁terms ▁in ▁a ▁category ▁toPut ▁[0] ▁= ▁similarity ▁( datiTesto ); ▁testoCategoria . put ▁( CategoryName , ▁toPut ); ▁if ▁( maxSimilarity ▁< toPut ▁[0]) ▁/ ▁/ ▁we ▁update ▁the ▁value ▁of ▁maximum ▁/ ▁/ ▁I f ▁necessary ▁similarity ▁( ▁maxSimilarity ▁= ▁toPut ▁[0] ; ▁) ▁) ▁for ▁( String ▁CategoryName : ▁elenco . Categorie ▁()) ▁( / ▁/ ▁For ▁each ▁category ▁/ ▁/ ▁We ▁get ▁the ▁value ▁of ▁similarity ▁of ▁the ▁text ▁with ▁the ▁category ▁/ ▁/ ▁A nalyzed ▁float ▁[] ▁tmp ▁= ▁testoCategoria . get ▁( CategoryName ); ▁tmp ▁[1] ▁= ▁membership ▁( tmp ▁ [0], ▁maxSimilarity ) , ▁/ ▁/ ▁we ▁calculate ▁/ ▁/ ▁Membership ▁/ ▁/ ▁Text ▁to ▁the ▁similarity ▁testoCategoria . put ▁( CategoryName , ▁tmp ) , ▁/ ▁/ ▁save ▁e very th ing ▁in ▁/ ▁/ ▁Category ▁table ▁) ▁return ▁max A ppartenenza ▁( testo Categoria ) ▁/ ▁/ ▁returns ▁the ▁name ▁output ▁/ ▁/ ▁Category ▁/ ▁/ ▁With ▁the ▁maximum ▁degree ▁of ▁membership ▁) ▁/ ▁** ▁* ▁Method ▁to ▁find ▁the ▁category ▁with ▁which ▁the ▁text ▁has ▁the ▁h igh est ▁degree ▁of ▁* ▁Membership ▁* ▁* ▁@ ▁Param ▁pTestoCategoria ▁table ▁of ▁categories ▁to ▁the ▁text ▁Resti uisce ▁* ▁@ ▁return ▁a ▁string ▁indicat ing ▁the ▁name ▁of ▁the ▁category ▁with ▁which ▁* ▁The ▁text ▁has ▁the ▁h igh est ▁degree ▁of ▁membership ▁* ▁/ ▁priv ate ▁static ▁String ▁max A ppartenenza ▁( ▁ Hashtable ▁< string , ▁float [] > ▁pTestoCategoria ) ▁( ▁To Return ▁String ▁= ▁null , ▁/ ▁/ ▁return ▁value ▁float ▁max ▁= ▁- 1, ▁/ ▁/ ▁M aximum ▁value ▁of ▁membership ▁for ▁( Enumeration ▁< String > ▁pTestoCategoria . key s ▁elm ▁= ▁(); ▁elm ▁ . ▁ hasMore Element s ▁(); ) ▁( / ▁/ ▁For ▁all ▁categories ▁of ▁the ▁table ▁of ▁categories ▁of ▁text ▁String ▁category ▁= ▁elm . next Element ▁(); ▁/ ▁/ ▁ Values ▁are ▁take n ▁of ▁similarity ▁and ▁belonging ▁associated ▁with ▁/ ▁/ ▁Category ▁float ▁[] ▁tmp ▁= ▁pTestoCategoria . get ▁( category ); ▁if ▁( tmp ▁[1] > ▁max ) ▁( / ▁/ ▁I f ▁the ▁degree ▁of ▁membership ▁affi li ation ▁just ▁uploaded ▁/ ▁/ ▁Is ▁great er ▁th an ▁the ▁previous ▁update ▁data ▁max ▁and ▁toReturn ▁toReturn ▁= ▁category ; ▁max ▁= ▁tmp ▁[1] ; ▁) ▁) ▁toReturn ▁return ; ▁) ▁/ ▁** ▁* ▁Method ▁ used ▁to ▁check ▁whether ▁a ▁term ▁is ▁presente d ▁in ▁table ▁* ▁The ▁terms ▁of ▁the ▁text ▁* ▁* ▁@ ▁Param ▁pStr ▁period ▁to ▁analyze ▁* ▁@ ▁Param ▁pTable ▁tables ▁in ▁terms ▁of ▁the ▁text ▁* ▁@ ▁Return ▁returns ▁true ▁if ▁the ▁term ▁exists ▁false ▁otherwise ▁* ▁/ ▁priv ate ▁static ▁boolean ▁exists ▁( String ▁pStr , ▁ Hashtable ▁< string , ▁float [] > ▁pTable ) ▁( ▁TR Y ▁( ▁if ▁( pTable . get ▁( pStr ) ! ▁= ▁null ) ▁return ▁true ; ▁) ▁ catch ▁( Null PointerException ▁e ) ▁( ▁return ▁false ; ▁) ▁return ▁false ; ▁) ▁/ ▁** ▁* ▁Method ▁ used ▁to ▁retrieve ▁the ▁k nowledge ▁base ▁* ▁Resti uisce ▁* ▁@ ▁return ▁an ▁object ▁represent ing ▁the ▁type ▁ElencoCategorie ▁* ▁Knowledge Base ▁* ▁@ ▁Throw s ▁ IOException ▁* ▁@ ▁Throw s ▁Class N otFoundException ▁* ▁/ ▁priv ate ▁static ▁ElencoCategorie ▁apri Elenco ▁() ▁throws ▁ IOException , ▁Class N otFoundException ▁( ▁ KBase ▁file ▁= ▁new ▁File ▁( ▁" kb . sbt ▁"); // ▁you ▁open ▁the ▁file ▁ kb . sbt ▁FileInputStream ▁ kBaseStream ▁= ▁new ▁FileInputStream ▁( KBase ) ▁/ ▁/ ▁creates ▁/ ▁/ ▁A ▁stream ▁with ▁the ▁file ▁Object InputStream ▁kBaseObj ▁= ▁new ▁Object InputStream ▁( kBaseStream ) , ▁/ ▁/ ▁si ▁/ ▁/ ▁Create ▁a ▁stream ▁object ▁with ▁the ▁file ▁ElencoCategorie ▁toReturn ; ▁toReturn ▁= ▁( ElencoCategorie ) ▁kBaseObj . read Object ▁(); ▁/ ▁/ ▁Object ▁is ▁extract ed ▁and ▁saved ▁in ▁the ▁file ▁returned ▁in ▁output ▁toReturn ▁return ; ▁) ▁/ ▁** ▁* ▁Method ▁ used ▁to ▁create ▁the ▁file . ▁Use d ▁in ▁training ▁* ▁* ▁@ ▁Param ▁path ▁string ▁indicat ing ▁the ▁path ▁in ▁which ▁to ▁create ▁the ▁file ▁* ▁@ ▁Return ▁returns ▁an ▁Object OutputStream ▁to ▁the ▁file ▁create d ▁* ▁@ ▁Throw s ▁ IOException ▁* ▁/ ▁priv ate ▁static ▁Object OutputStream ▁Create File ▁( String ▁path ) ▁throws ▁ IOException ▁( ▁Object OutputStream ▁toReturn ; ▁File ▁ f ▁= ▁new ▁File ▁( path ) ▁/ ▁/ ▁file ▁is ▁create d ▁if ▁( f . exists ▁()) ▁ f . delete ▁(); ▁ FileOutputStream ▁ f out ▁= ▁new ▁ FileOutputStream ▁( path ); ▁toReturn ▁= ▁new ▁Object OutputStream ▁( f O ut ) , ▁/ ▁/ ▁create ▁the ▁stream ▁toReturn ▁return ; ▁) ▁/ ▁** ▁* ▁Method ▁ used ▁to ▁create ▁the ▁k nowledge ▁base ▁* ▁* ▁@ ▁Throw s ▁RemoteException ▁* ▁/ ▁p ublic ▁static ▁void ▁training ▁() ▁throws ▁RemoteException ▁( ▁String ▁[] ▁e lencoCategorie ▁= ▁new ▁String ▁[4] ▁/ ▁/ ▁array ▁contenente i ▁name s ▁/ ▁/ ▁Of ▁categri e ▁be ▁analyzed ▁/ ▁/ ▁Knowledge ▁base ▁ElencoCategorie ▁list ▁= ▁new ▁ElencoCategorie ▁(); ▁Object OutputStream ▁elencoOut ; ▁TR Y ▁( ▁/ ▁/ ▁Tr y ▁to ▁create ▁the ▁file ▁elencoOut ▁= ▁Create File ▁( ▁" kb . sbt "); ▁) ▁ catch ▁( Exception ▁e ) ▁( ▁throw ▁new ▁RemoteException ▁( ▁" Error ▁creating ▁file ▁ kb . sbt "); ▁) ▁e lencoCategorie ▁[0] ▁= ▁" a rt "; ▁e lencoCategorie ▁[1] ▁= ▁" c ine ma "; ▁e lencoCategorie ▁[2] ▁= ▁" s port "; ▁/ ▁/ ▁ElencoCategorie ▁[3 ▁ ] =" "; ▁for ▁( int ▁i ▁= ▁0; ▁i ▁ <3; ▁the ▁ ++) // ▁for ▁each ▁category ▁( ▁/ ▁/ ▁Create ▁a ▁new ▁object ▁of ▁type ▁Category , ▁which ▁will ▁contain ▁all ▁/ ▁/ ▁Category ▁data ▁to ▁be ▁analyzed ▁T oPutCat ▁category ▁= ▁new ▁Category ▁( e lencoCategorie ▁[ i ]); ▁/ ▁/ ▁I f ▁the ▁inclusion ▁of ▁the ▁category ▁in ▁the ▁table ▁of ▁categories ▁/ ▁/ ▁Not ▁successful ▁/ ▁/ ▁We ▁throw ▁an ▁exception ▁if ▁(! ▁elenco . add Categoria ▁( e lencoCategorie ▁[ i ], ▁t oPutCat )) ▁( ▁throw ▁new ▁RemoteException ▁( ▁" Error ▁creating ▁data ▁of ▁category " ▁+ ▁ElencoCategorie ▁[ i ]); ▁) ▁/ ▁/ ▁You ▁try ▁to ▁read ▁from ▁the ▁fold er ▁containing ▁the ▁ ly ric s ▁of ▁a ▁/ ▁/ ▁Category ▁/ ▁/ ▁100 ▁sample ▁test ▁for ▁( Integer ▁j ▁= ▁new ▁Integer ▁(1) , ▁j ▁<= ▁100; ▁j ▁+ ▁+) ▁( ▁/ ▁/ ▁ Path ▁of ▁the ▁fold er ▁categri a ▁String ▁path ▁= ▁" kb ▁/ " ▁+ ▁e lencoCategorie ▁[ i ] ▁+ ▁"/ " ▁+ ▁j . To String ▁(); ▁/ ▁/ ▁Tr y ▁to ▁read ▁the ▁file ▁i th ▁ FileReader ▁testoReader ; ▁TR Y ▁( ▁testoReader ▁= ▁new ▁ FileReader ▁( path ); ▁) ▁ catch ▁( File N otFoundException ▁e ) ▁( ▁/ ▁/ ▁I f ▁the ▁file ▁do es ▁not ▁exist ▁it ▁continue s ▁execut ion ▁from ▁/ ▁/ ▁File ▁i ▁+ 1 ▁/ ▁/ ▁System . out . println ▁( ▁" Error ▁on ▁file " ▁+ ▁path ); ▁continue ; ▁) ▁TestoScanner ▁scann er ▁= ▁new ▁ Scanner ▁( testoReader ); ▁while ▁( testo Scanner . hasNext Line ▁()) ▁( ▁/ ▁/ ▁Re ad ▁the ▁text ▁file ▁line ▁by ▁line ▁TestoScanner . next Line ▁txt ▁= ▁String ▁(); ▁txt ▁= ▁replace And Lower ▁( txt ); ▁String ▁[] ▁toIterate ▁= ▁txt . split ▁( ▁" "); ▁for ▁( int ▁k ▁= ▁0 ▁k ▁< toIterate . length ▁k ▁+ ▁+) ▁( / ▁/ ▁For ▁each ▁end ▁of ▁the ▁line ▁if ▁( toIterate ▁[ k ]. ▁ length ▁() ▁<= ▁3) ▁/ ▁/ ▁remove ▁the ▁effect ▁/ ▁/ ▁Un defined ▁terms ▁/ ▁/ ▁Re levant ▁continue ; ▁float ▁[] ▁valTerm , ▁valTotTerm ; ▁/ ▁/ ▁I f ▁the ▁term ▁is ▁present ▁in ▁the ▁table ▁of ▁terms ▁/ ▁/ ▁The ▁class ▁analyzed ▁if ▁( elenco . get Categoria ▁( e lencoCategorie ▁[ i ]) ▁ . ▁esiste Termine ▁( toIterate ▁[ k ])) ▁( ▁/ ▁/ ▁It s ▁frequency ▁is ▁equal ▁to ▁the ▁value ▁stored ▁in ▁/ ▁/ ▁Table ▁p lus ▁one ▁fra tto ▁the ▁total ▁number ▁of ▁/ ▁/ ▁Term s ▁of ▁the ▁text ▁valTerm ▁= ▁elenco . get Categoria ▁( e lencoCategorie ▁[ i ]) ▁ . ▁get val ▁( toIterate ▁[ k ]); ▁valTerm ▁[0] ▁+ ▁= ▁( float ) ▁1 ▁/ ▁toIterate . length ; ▁valTotTerm ▁= ▁elenco . get Termine ▁( toIterate ▁[ k ]); ▁valTotTerm ▁[0] ▁+ ▁= ▁( float ) ▁1 ▁/ ▁toIterate . length ; ▁) ▁else ▁( ▁/ ▁/ ▁otherwise ▁it ▁is ▁equal ▁to ▁one ▁fra tto ▁the ▁total ▁number ▁of ▁ wo rd s ▁of ▁text ▁valTerm ▁= ▁new ▁float ▁[3] ; ▁valTotTerm ▁= ▁new ▁float ▁[1] ; ▁valTerm ▁[0] ▁= ▁( float ) ▁1 ▁/ ▁toIterate . length ; ▁valTotTerm ▁[0] ▁= ▁( float ) ▁1 ▁/ ▁toIterate . length ; ▁) ▁/ ▁/ ▁save ▁the ▁values ▁calculat ed ▁in ▁the ▁table ▁of ▁terms ▁of ▁the ▁category ▁analyzed ▁elenco . set Termine ▁( toIterate ▁[ k ], ▁valTotTerm ); ▁elenco . get Categoria ▁( e lencoCategorie ▁[ i ]) . ▁add Termine ▁( ▁toIterate ▁[ k ], ▁valTerm ); ▁if ▁( elenco . get MaxDist ▁() ▁< valTotTerm ▁[0]) ▁elenco . set MaxDist ▁( valTotTerm ▁[0] ); ▁) ▁) ▁) ▁) ▁for ▁( String ▁CategoryName : ▁elenco . Categorie ▁()) ▁( / ▁/ ▁for ▁each ▁category ▁/ ▁/ ▁is ▁pref lus h ed ▁the ▁table ▁of ▁terms ▁ Hashtable ▁elenco . get Categoria ▁< string , ▁float [] > ▁ terminiCategoria ▁= ▁( ▁CategoryName ) . ▁getTermin i ▁(); ▁/ ▁/ ▁all ▁the ▁terms ▁are ▁analyzed ▁in ▁the ▁table ▁of ▁loaded ▁terms ▁for ▁( Enumeration ▁enumTerm ▁< String > ▁ terminiCategoria . key s ▁= ▁(); ▁enumTerm ▁ . ▁ hasMore Element s ▁(); ) ▁( ▁/ ▁/ ▁is ▁ eff at tu ato ▁calculat ing ▁bearing ▁and ▁distance ▁String ▁term ▁= ▁enumTerm . next Element ▁(); ▁float ▁[] ▁val ▁= ▁ terminiCategoria . get ▁( term ); ▁val ▁[1] ▁= ▁distance ▁( term ▁elenco . get Categoria ▁( CategoryName ) ▁elenco . get TotTermini ▁()); ▁val ▁[2] ▁= ▁import ance ▁( val ▁[1] , ▁elenco . get MaxDist ▁()); ▁) ▁/ ▁/ ▁data ▁is ▁stored ▁in ▁the ▁table ▁of ▁the ▁terms ▁of ▁the ▁class ▁elenco . get Categoria ▁( CategoryName ) . ▁setTermin i ▁( terminiCategoria ); ▁) ▁TR Y ▁( / ▁/ ▁writ ing ▁the ▁results ▁of ▁operations ▁on ▁files ▁elencoOut . write Object ▁( list ); ▁) ▁ catch ▁( Exception ▁e ) ▁( ▁throw ▁new ▁RemoteException ▁( ▁" Error ▁writ ing ▁file "); ▁) ▁) ▁)