▁ ï»¿ p ackage ▁unisa . gps . etour . repository ; ▁import ▁ Java . sql . Connection ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . sql . Statement ; ▁import ▁java . util . ArrayList ; ▁import ▁unisa . gps . etour . bean . BeanPreferenz aDiRicerca ; ▁/ ▁** ▁* ▁Class ▁that ▁implements ▁the ▁interface ▁Pre ferenzeDiRicerca ▁* ▁* ▁@ ▁Auth or ▁J os eph ▁Mart one ▁* ▁@ ▁Version ▁0.1 ▁ 2007 ▁eTour ▁Pro ject ▁- ▁C opy right ▁by ▁SE ▁@ ▁ SA ▁Lab ▁DMI ▁University ▁* ▁Of ▁Salerno ▁* ▁/ ▁p ublic ▁class ▁DBPreferenze DiRicerca ▁implements ▁IDBPreferenze DiRicerca ▁( ▁/ ▁/ ▁ Empty ▁constructor ▁p ublic ▁DBPreferenze DiRicerca ▁() ▁( ▁) ▁p ublic ▁boolean ▁cancella Preferenz aDiRicerca ▁( int ▁pIdPreferenza ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁cancellation ▁String ▁query ▁= ▁" DE LE TE ▁FR OM ▁pre ferenzediricerca ▁W HER E ▁Id ▁=" ▁+ ▁PIdPreferenza ; ▁/ ▁/ ▁You ▁run ▁the ▁query ▁Cancellation ▁int ▁i ▁= ▁stat . executeUpdate ▁( query ); ▁/ ▁/ ▁ This ▁returns ▁the ▁back up ▁return ▁( i ▁== ▁1 ); ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁of ▁clos ing ▁the ▁Statement ▁and ▁the ▁/ ▁/ ▁Connect ▁finally ▁( ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁boolean ▁cancella Preferenz aDiRicerca BC ▁( int ▁ pIdBeneCulturale , ▁pIdPreferenza DiRicerca ▁int ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁cancellation ▁String ▁query ▁= ▁" DE LE TE ▁FR OM ▁associazionebc ▁W HER E ▁ IdPreferenz eDiRicerca ▁=" ▁+ ▁PIdPreferenza DiRicerca ▁+ ▁" AND ▁IdBeneCulturale ▁=" ▁+ ▁ PIdBeneCulturale ; ▁/ ▁/ ▁You ▁run ▁the ▁query ▁Cancellation ▁int ▁i ▁= ▁stat . executeUpdate ▁( query ); ▁/ ▁/ ▁ This ▁returns ▁the ▁back up ▁return ▁( i ▁== ▁1 ); ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁of ▁clos ing ▁the ▁Statement ▁and ▁the ▁/ ▁/ ▁Connect ▁finally ▁( ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁boolean ▁cancella Preferenz aDiRicerca PR ▁( int ▁p IdPuntoDiRistoro , ▁pIdPreferenza ▁int ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁cancellation ▁String ▁query ▁= ▁" DE LE TE ▁FR OM ▁associazionepr ▁W HER E ▁ IdPreferenz eDiRicerca ▁=" ▁+ ▁PIdPreferenza ▁+ ▁" AND ▁ IdPuntoDiRistoro ▁=" ▁+ ▁P IdPuntoDiRistoro ; ▁/ ▁/ ▁You ▁run ▁the ▁query ▁Cancellation ▁int ▁i ▁= ▁stat . executeUpdate ▁( query ); ▁/ ▁/ ▁ This ▁returns ▁the ▁back up ▁return ▁( i ▁== ▁1 ); ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁of ▁clos ing ▁the ▁Statement ▁and ▁the ▁/ ▁/ ▁Connect ▁finally ▁( ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁boolean ▁cancella Preferenz aDiRicerca Turista ▁( int ▁pIdTurista , ▁pIdPreferenza ▁int ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁cancellation ▁String ▁query ▁= ▁" DE LE TE ▁FR OM ▁rating ▁W HER E ▁IdTurista ▁=" ▁PIdTurista ▁+ ▁+ ▁" AND ▁ IdPreferenz eDiRicerca ▁=" ▁+ ▁PIdPreferenza ; ▁/ ▁/ ▁You ▁run ▁the ▁query ▁Cancellation ▁int ▁i ▁= ▁stat . executeUpdate ▁( query ); ▁/ ▁/ ▁ This ▁returns ▁the ▁back up ▁return ▁( i ▁== ▁1 ); ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁of ▁clos ing ▁the ▁Statement ▁and ▁the ▁/ ▁/ ▁Connect ▁finally ▁( ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁boolean ▁in serisciPreferenz aDiRicercaDel BC ▁( int ▁ pIdBeneCulturale , ▁pIdPreferenza DiRicerca ▁int ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁for ▁the ▁insertion ▁String ▁query ▁= ▁" INSER T ▁I NTO ▁associazionebc ▁( IdPreferenz eDiRicerca , ▁IdBeneCulturale ) ▁VALUES ▁ (" ▁PIdPreferenza DiRicerca ▁+ ▁+ ▁"," ▁+ ▁ pIdBeneCulturale ▁+ ▁")" ; ▁/ ▁/ ▁You ▁run ▁the ▁insert ▁query ▁int ▁i ▁= ▁stat . executeUpdate ▁( query ); ▁/ ▁/ ▁ This ▁returns ▁the ▁back up ▁return ▁( i ▁== ▁1 ); ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁of ▁clos ing ▁the ▁Statement ▁and ▁the ▁/ ▁/ ▁Connect ▁finally ▁( ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁boolean ▁in serisciPreferenz aDiRicerca ▁( ▁BeanPreferenz aDiRicerca ▁pPreferenza ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁for ▁the ▁insertion ▁String ▁query ▁= ▁" INSER T ▁I NTO ▁pre ferenzediricerca ▁( Id , ▁Name ) ▁VALUES ▁ (" ▁PPreferenza . getId ▁+ ▁() ▁+ ▁" ▁'" ▁+ ▁pPreferenza . getNome ▁() ▁+ ▁"') "; ▁/ ▁/ ▁You ▁run ▁the ▁insert ▁query ▁int ▁i ▁= ▁stat . executeUpdate ▁( query ); ▁/ ▁/ ▁ This ▁returns ▁the ▁back up ▁return ▁( i ▁== ▁1 ); ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁of ▁clos ing ▁the ▁Statement ▁and ▁the ▁/ ▁/ ▁Connect ▁finally ▁( ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁boolean ▁in serisciPreferenz aDiRicercaDel PR ▁( int ▁p IdPuntoDiRistoro , ▁pIdPreferenza DiRicerca ▁int ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁for ▁the ▁insertion ▁String ▁query ▁= ▁" INSER T ▁I NTO ▁associazionepr ▁( IdPreferenz eDiRicerca , ▁ IdPuntoDiRistoro ) ▁VALUES ▁ (" ▁PIdPreferenza DiRicerca ▁+ ▁+ ▁"," ▁+ ▁p IdPuntoDiRistoro ▁+ ▁")" ; ▁/ ▁/ ▁You ▁run ▁the ▁insert ▁query ▁int ▁i ▁= ▁stat . executeUpdate ▁( query ); ▁/ ▁/ ▁ This ▁returns ▁the ▁back up ▁return ▁( i ▁== ▁1 ); ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁of ▁clos ing ▁the ▁Statement ▁and ▁the ▁/ ▁/ ▁Connect ▁finally ▁( ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁boolean ▁in serisciPreferenz aDiRicercaDel Turista ▁( int ▁pIdTurista , ▁pIdPreferenza DiRicerca ▁int ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁for ▁the ▁insertion ▁String ▁query ▁= ▁" INSER T ▁I NTO ▁rating ▁( IdTurista , ▁ IdPreferenz eDiRicerca ) ▁VALUES ▁ (" ▁PIdTurista ▁+ ▁+ ▁"," ▁+ ▁pIdPreferenza DiRicerca ▁+ ▁")" ; ▁/ ▁/ ▁You ▁run ▁the ▁insert ▁query ▁int ▁i ▁= ▁stat . executeUpdate ▁( query ); ▁/ ▁/ ▁ This ▁returns ▁the ▁back up ▁return ▁( i ▁== ▁1 ); ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁of ▁clos ing ▁the ▁Statement ▁and ▁the ▁/ ▁/ ▁Connect ▁finally ▁( ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁ArrayList ▁< BeanPreferenz aDiRicerca > ▁ ottieniPreferenz eDiRicercaDel BC ▁( ▁ pIdBeneCulturale ▁int ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁results ▁ResultSet ▁result ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁to ▁extract ▁the ▁list ▁of ▁search ▁preferences ▁/ ▁/ ▁A ▁cultural ▁String ▁query ▁= ▁" SELECT ▁* ▁FR OM ▁associazionebc , ▁pre ferenzediricerca ▁W HER E ▁IdBeneCulturale ▁=" ▁+ ▁ PIdBeneCulturale ▁+ ▁" AND ▁ IdPreferenz eDiRicerca ▁pre ferenzediricerca . Id ▁= "; ▁/ ▁/ ▁The ▁query ▁is ▁execut ed ▁result ▁= ▁stat . executeQuery ▁( query ); ▁/ ▁/ ▁List ▁that ▁will ▁contain ▁the ▁BeanPreferenz aDiRicerca ▁< BeanPreferenz aDiRicerca > ▁ArrayList ▁list ▁= ▁new ▁ArrayList ▁< BeanPreferenz aDiRicerca > ▁(); ▁/ ▁/ ▁We ▁extract ▁the ▁results ▁from ▁the ▁result ▁set ▁and ▁move s ▁in ▁/ ▁/ ▁List ▁/ ▁/ ▁To ▁be ▁returned ▁while ▁( result . next ▁()) ▁( ▁/ ▁/ ▁Add ▁to ▁the ▁list ▁BeanPreferenz aDiRicerca ▁lista . add ▁( new ▁BeanPreferenz aDiRicerca ▁( result . getInt ▁( ▁" Id ") ▁result . getString ▁( ▁" Name ▁ "))); ▁) ▁return ▁list ; ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁to ▁close ▁the ▁Result , ▁the ▁Statement ▁/ ▁/ ▁And ▁Connection ▁finally ▁( ▁if ▁( result ! ▁= ▁null ) ▁( ▁result . close ▁(); ▁) ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁ArrayList ▁< BeanPreferenz aDiRicerca > ▁ ottieniPreferenz eDiRicercaDel PR ▁( ▁p IdPuntoDiRistoro ▁int ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁results ▁ResultSet ▁result ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁to ▁extract ▁the ▁list ▁of ▁search ▁preferences ▁/ ▁/ ▁A ▁refreshment ▁String ▁query ▁= ▁" SELECT ▁* ▁FR OM ▁associazionepr , ▁pre ferenzediricerca ▁W HER E ▁ IdPuntoDiRistoro ▁=" ▁+ ▁P IdPuntoDiRistoro ▁+ ▁" AND ▁ IdPreferenz eDiRicerca ▁pre ferenzediricerca . Id ▁= "; ▁/ ▁/ ▁The ▁query ▁is ▁execut ed ▁result ▁= ▁stat . executeQuery ▁( query ); ▁/ ▁/ ▁List ▁that ▁will ▁contain ▁the ▁BeanPreferenz aDiRicerca ▁< BeanPreferenz aDiRicerca > ▁ArrayList ▁list ▁= ▁new ▁ArrayList ▁< BeanPreferenz aDiRicerca > ▁(); ▁/ ▁/ ▁We ▁extract ▁the ▁results ▁from ▁the ▁result ▁set ▁and ▁move s ▁in ▁/ ▁/ ▁List ▁/ ▁/ ▁To ▁be ▁returned ▁while ▁( result . next ▁()) ▁( ▁/ ▁/ ▁Add ▁to ▁the ▁list ▁BeanPreferenz aDiRicerca ▁lista . add ▁( new ▁BeanPreferenz aDiRicerca ▁( result . getInt ▁( ▁" Id ") ▁result . getString ▁( ▁" Name ▁ "))); ▁) ▁return ▁list ; ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁to ▁close ▁the ▁Result , ▁the ▁Statement ▁/ ▁/ ▁And ▁Connection ▁finally ▁( ▁if ▁( result ! ▁= ▁null ) ▁( ▁result . close ▁(); ▁) ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁p ublic ▁ArrayList ▁< BeanPreferenz aDiRicerca > ▁ ottieniPreferenz eDiRicercaDel Turista ▁( ▁pIdTurista ▁int ) ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁results ▁ResultSet ▁result ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁to ▁extract ▁the ▁list ▁of ▁search ▁preferences ▁/ ▁/ ▁A ▁Turista ▁String ▁query ▁= ▁" SELECT ▁* ▁FR OM ▁lik ing ▁pre ferenzediricerca ▁W HER E ▁IdTurista ▁=" ▁+ ▁PIdTurista ▁+ ▁" AND ▁ IdPreferenz eDiRicerca ▁pre ferenzediricerca . Id ▁= "; ▁/ ▁/ ▁The ▁query ▁is ▁execut ed ▁result ▁= ▁stat . executeQuery ▁( query ); ▁/ ▁/ ▁List ▁that ▁will ▁contain ▁the ▁BeanPreferenz aDiRicerca ▁< BeanPreferenz aDiRicerca > ▁ArrayList ▁list ▁= ▁new ▁ArrayList ▁< BeanPreferenz aDiRicerca > ▁(); ▁/ ▁/ ▁We ▁extract ▁the ▁results ▁from ▁the ▁result ▁set ▁and ▁move s ▁in ▁/ ▁/ ▁List ▁/ ▁/ ▁To ▁be ▁returned ▁while ▁( result . next ▁()) ▁( ▁/ ▁/ ▁Add ▁to ▁the ▁list ▁BeanPreferenz aDiRicerca ▁lista . add ▁( new ▁BeanPreferenz aDiRicerca ▁( result . getInt ▁( ▁" Id ") ▁result . getString ▁( ▁" Name ▁ "))); ▁) ▁return ▁list ; ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁to ▁close ▁the ▁Result , ▁the ▁Statement ▁/ ▁/ ▁And ▁Connection ▁finally ▁( ▁if ▁( result ! ▁= ▁null ) ▁( ▁result . close ▁(); ▁) ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁< BeanPreferenz aDiRicerca > ▁ ottieniPreferenz eDiRicerca ▁p ublic ▁ArrayList ▁() ▁throws ▁SQLException ▁( ▁/ ▁/ ▁Variable s ▁for ▁database ▁connection ▁Connection ▁conn ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁Statement ▁stat ▁= ▁null ; ▁/ ▁/ ▁Variable ▁for ▁the ▁query ▁results ▁ResultSet ▁result ▁= ▁null ; ▁TR Y ▁( ▁/ ▁/ ▁Get ▁the ▁connection ▁D BConnessionePool . ottieni Connessione ▁conn ▁= ▁(); ▁/ ▁/ ▁Create ▁the ▁Statement ▁stat ▁= ▁conn . createStatement ▁(); ▁/ ▁/ ▁Query ▁to ▁extract ▁the ▁list ▁of ▁search ▁preferences ▁/ ▁/ ▁A ▁Turista ▁String ▁query ▁= ▁" SELECT ▁* ▁FR OM ▁pre ferenzediricerca "; ▁/ ▁/ ▁The ▁query ▁is ▁execut ed ▁result ▁= ▁stat . executeQuery ▁( query ); ▁/ ▁/ ▁List ▁that ▁will ▁contain ▁the ▁BeanPreferenz aDiRicerca ▁< BeanPreferenz aDiRicerca > ▁ArrayList ▁list ▁= ▁new ▁ArrayList ▁< BeanPreferenz aDiRicerca > ▁(); ▁/ ▁/ ▁We ▁extract ▁the ▁results ▁from ▁the ▁result ▁set ▁and ▁move s ▁in ▁/ ▁/ ▁List ▁/ ▁/ ▁To ▁be ▁returned ▁while ▁( result . next ▁()) ▁( ▁/ ▁/ ▁Add ▁to ▁the ▁list ▁BeanPreferenz aDiRicerca ▁lista . add ▁( new ▁BeanPreferenz aDiRicerca ▁( result . getInt ▁( ▁" Id ") ▁result . getString ▁( ▁" Name ▁ "))); ▁) ▁/ ▁/ ▁Return ▁the ▁list ▁of ▁search ▁preferences ▁in ▁the ▁DB ▁return ▁list ; ▁) ▁/ ▁/ ▁Al way s ▁run s ▁and ▁take s ▁ care ▁to ▁close ▁the ▁Result , ▁the ▁Statement ▁/ ▁/ ▁And ▁Connection ▁finally ▁( ▁if ▁( result ! ▁= ▁null ) ▁( ▁result . close ▁(); ▁) ▁if ▁( stat ▁= ▁null ) ▁( ▁stat . close ▁(); ▁) ▁if ▁( conn ! ▁= ▁null ) ▁( ▁D BConnessionePool . rilascia Connessione ▁( conn ); ▁) ▁) ▁) ▁)