▁p ackage ▁smos . storage ; ▁import ▁smos . bean . Teaching ; ▁import ▁smos . bean . UserListItem ; ▁import ▁smos . bean . Votes ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . exception . Mandatory FieldException ; ▁import ▁smos . storage . connect ionManagement . DBConnection ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁smos . utility . Utility ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Collection ; ▁import ▁java . util . Vector ; ▁import ▁java . sql . Connection ; ▁/** ▁* ▁* ▁Classe ▁manager ▁dei ▁voti . ▁* ▁* ▁@ author ▁Lu igi ▁Co langelo ▁* ▁@ version ▁1.0 ▁* ▁* ▁2009 ▁  ▁C opy right ▁by ▁SMOS ▁*/ ▁p ublic ▁class ▁ManagerVotes ▁{ ▁priv ate ▁static ▁ManagerVotes ▁instance ; ▁/** ▁* ▁Il ▁nome ▁della ▁tabella ▁dei ▁voti . ▁*/ ▁p ublic ▁static ▁final ▁String ▁ TAB LE _ VOTES ▁= ▁" votes "; ▁/** ▁* ▁Il ▁c ostruttore ▁della ▁classe . ▁*/ ▁p ublic ▁ManagerVotes () ▁{ ▁super (); ▁} ▁/** ▁* ▁Ritorna ▁la ▁sola ▁i stanza ▁del ▁voto ▁esistente . ▁* ▁* ▁@ return ▁Ritorna ▁l ' istanza ▁della ▁classe . ▁*/ ▁p ublic ▁static ▁sy nch ron ized ▁ManagerVotes ▁get Instance () ▁{ ▁if ▁( instance ▁== ▁null ) ▁{ ▁instance ▁= ▁new ▁ManagerVotes (); ▁} ▁return ▁instance ; ▁} ▁/** ▁* ▁Verifica ▁l ' esistenza ▁di ▁voto ▁nel ▁database . ▁* ▁* ▁@ param ▁pVotes ▁* ▁il ▁voto ▁da ▁controllare . ▁* ▁@ return ▁Ritorna ▁true ▁se ▁esiste ▁il ▁voto ▁passato ▁come ▁parametro , ▁* ▁false ▁altrimenti . ▁* ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Connection Exception ▁*/ ▁p ublic ▁sy nch ron ized ▁boolean ▁exists ( Votes ▁pVotes ) ▁throws ▁ Mandatory FieldException , ▁Connection Exception , ▁SQLException ▁{ ▁boolean ▁result ▁= ▁false ; ▁Connection ▁connect ▁= ▁null ; ▁if ▁( pVotes . getId _ votes () ▁== ▁0) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁l ' id . "); ▁try ▁{ ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁String ▁sql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" ▁W HER E ▁id _ votes ▁= ▁" ▁+ ▁Utility . is Null ( pVotes . getId _ votes ()); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( tRs . next ()) ▁result ▁= ▁true ; ▁return ▁result ; ▁} ▁finally ▁{ ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Inserisc e ▁un ▁nuovo ▁voto ▁nella ▁tabella ▁Votes . ▁* ▁* ▁@ param ▁pVotes ▁* ▁il ▁voto ▁da ▁inserire . ▁* ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁void ▁insert ( Votes ▁pVotes ) ▁throws ▁ Mandatory FieldException , ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁Invalid ValueException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Prepar iamo ▁la ▁stringa ▁ Sql ▁String ▁sql ▁= ▁" INSER T ▁I NTO ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" ▁( id _ user , ▁id _ teaching , ▁written , ▁oral , ▁laboratory , ▁ AccademicYear , ▁turn ) ▁" ▁+ ▁" VALUES ▁ (" ▁+ ▁Utility . is Null ( pVotes . getId _ user ()) ▁+ ", ▁" ▁+ ▁Utility . is Null ( pVotes . getTeaching ()) ▁+ ", ▁" ▁+ ▁Utility . is Null ( pVotes . get Written ()) ▁+ ", ▁" ▁+ ▁Utility . is Null ( pVotes . get Oral ()) ▁+ ", ▁" ▁+ ▁Utility . is Null ( pVotes . get Laboratory ()) ▁+ ", ▁" ▁+ ▁Utility . is Null ( pVotes . get AccademicYear ()) ▁+ ", ▁" ▁+ ▁Utility . is Null ( pVotes . get Turn ())+ ▁" ▁) "; ▁Utility . execute Operation ( connect , ▁sql ); ▁pVotes . setId _ votes ( Utility . getMax Value (" id _ votes ", ▁ManagerVotes . TAB LE _ VOTES )); ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Aggiorna ▁un ▁voto ▁presente ▁nella ▁tabella ▁votes . ▁* ▁* ▁@ param ▁pVotes ▁* ▁Un ▁voto ▁da ▁modificare ▁* ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁ Mandatory FieldException ▁*/ ▁p ublic ▁sy nch ron ized ▁void ▁update ( Votes ▁pVotes ) ▁throws ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁ Mandatory FieldException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁if ▁( pVotes . getId _ votes () ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException ( ▁" Im possibile ▁trova re ▁il ▁voto !" ); ▁if ▁( pVotes . getId _ user () ▁<= ▁0) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁l ' user ▁del ▁voto "); ▁if ▁( pVotes . getTeaching () ▁<= ▁0) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁l ' insegnamento ▁del ▁voto "); ▁if ▁( pVotes . get AccademicYear () ▁<= ▁0) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁l ' anno ▁accademico "); ▁if ▁( pVotes . get Turn () ▁< ▁0) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁il ▁semestre ▁"); ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" UP DATE ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" ▁SE T " ▁+ ▁" ▁id _ user ▁= ▁" ▁+ ▁Utility . is Null ( pVotes . getId _ user ())+ "," +" ▁id _ teaching = ▁" ▁+ ▁Utility . is Null ( pVotes . getTeaching ())+ "," +" ▁written = ▁" ▁+ ▁Utility . is Null ( pVotes . get Written ())+ "," +" ▁oral = ▁" ▁+ ▁Utility . is Null ( pVotes . get Oral ())+ "," +" ▁laboratory = ▁" ▁+ ▁Utility . is Null ( pVotes . get Laboratory ())+ "," +" ▁accademicYear = ▁" ▁+ ▁Utility . is Null ( pVotes . get AccademicYear ())+ "," +" ▁turn =" ▁+ ▁Utility . is Null ( pVotes . get Turn ()) ▁+ ▁" ▁W HER E ▁id _ votes ▁= ▁" ▁+ ▁Utility . is Null ( pVotes . getId _ votes ()); ▁// ▁effettua ▁una ▁nuova ▁connessione ▁e ▁invia ▁la ▁query ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁Utility . execute Operation ( connect , ▁sql ); ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Verifica ▁se ▁un o ▁studente ▁passato ▁come ▁parametro ▁ha ▁un ▁voto ▁assegnato ▁nell ' insegnamento ▁passato ▁* ▁come ▁parametro ▁nell ' anno ▁passato ▁come ▁parametro ▁e ▁nel ▁quadrimestre ▁passato ▁come ▁parametro ▁* ▁* ▁* ▁@ param ▁pTeaching ▁* ▁L ' insegnamento ▁da ▁controllare . ▁* ▁@ param ▁p UserListItem ▁* ▁Lo ▁studente ▁da ▁controllare ▁* ▁* ▁@ return ▁Ritorna ▁l ' id ▁del ▁voto ▁-1 ▁altrimenti ▁* ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁int ▁getId Votes ( Teaching ▁pTeaching , ▁int ▁academicYear , ▁int ▁turn , ▁UserListItem ▁pUser ) ▁throws ▁SQLException , ▁Entity N otFoundException , ▁Connection Exception , ▁Invalid ValueException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁int ▁result ▁= ▁ -1; ▁Votes ▁v ▁= ▁null ; ▁if ▁( pTeaching . getId () ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" Specifi care ▁l ' insegnamento "); ▁if ▁( pUser . getId () ▁<= 0 ▁) ▁throw ▁new ▁Entity N otFoundException (" Specifi care ▁l ' utente "); ▁try ▁{ ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Prepar ima o ▁la ▁stringa ▁sql ▁String ▁sql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" ▁W HER E ▁id _ teaching ▁= ▁" ▁+ ▁Utility . is Null ( pTeaching . getId ()) ▁+ ▁" ▁ AND ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" . AccademicYear = ▁" ▁+ ▁Utility . is Null ( academicYear ) ▁+ ▁" ▁ AND ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" . turn = ▁" ▁+ ▁Utility . is Null ( turn ) ▁+ ▁" ▁ AND ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" . id _ user = ▁" ▁+ ▁Utility . is Null ( pUser . getId ()); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁database ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ( )){ ▁v ▁= ▁this . loadRecord From Rs ( pRs ); ▁result ▁= v . getId _ votes (); ▁} ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia mo ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Elimina ▁un ▁voto ▁dall a ▁tabella ▁votes . ▁* ▁* ▁@ param ▁pVotes ▁* ▁Il ▁voto ▁da ▁eliminare . ▁* ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁Invalid ValueException ▁* ▁*/ ▁p ublic ▁sy nch ron ized ▁void ▁delete ( Votes ▁pVotes ) ▁throws ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁ Mandatory FieldException , ▁Invalid ValueException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ▁ManagerTeaching . get Instance () . teaching On DeleteC a scade ( pTeaching ); ▁connect ▁= ▁DBConnection . getConnection (); ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" DE LE TE ▁FR OM ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" ▁W HER E ▁id _ votes ▁= ▁" ▁+ ▁Utility . is Null ( pVotes . getId _ votes ()); ▁Utility . execute Operation ( connect , ▁sql ); ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' id ▁dell ' insegnamento ▁corrispondente ▁all ' id ▁del ▁voto ▁passato ▁come ▁* ▁parametro . ▁* ▁* ▁@ param ▁pId ▁* ▁L ' id ▁del ▁voto . ▁* ▁@ return ▁Ritorna ▁l ' id ▁dell ' ▁insegnamento . ▁* ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁*/ ▁/** ▁* ▁Ritorna ▁l ' insegnamento ▁corrispondente ▁all ' id ▁passato ▁come ▁parametro . ▁* ▁* ▁@ param ▁pId ▁* ▁L ' id ▁dell ' insegnamento . ▁* ▁@ return ▁Ritorna ▁l ' insegnamento ▁associato ▁all ' id ▁passato ▁come ▁parametro . ▁* ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁Votes ▁getVotes ById ( int ▁pId ) ▁throws ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁Invalid ValueException ▁{ ▁Votes ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁if ▁( pId ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException ( ▁" Im possibile ▁trova re ▁il ▁voto !" ); ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" ▁W HER E ▁id _ votes ▁= ▁" ▁+ ▁Utility . is Null ( pId ); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁this . loadRecord From Rs ( pRs ); ▁else ▁throw ▁new ▁Entity N otFoundException ( ▁" Im possibile ▁trova re ▁l ' insegnamento !" ); ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁p ublic ▁sy nch ron ized ▁String ▁getTeachingId By Votes Id ( int ▁pId ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException ▁{ ▁String ▁result ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ▁Se ▁non ▁e ' ▁stato ▁fornito ▁l ' id ▁restitui amo ▁un ▁codice ▁di ▁errore ▁if ▁( pId ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException ( ▁" Im possibile ▁trova re ▁il ▁voto !" ); ▁/* ▁* ▁Prepar iamo ▁la ▁stringa ▁SQL ▁per ▁recuperare ▁le ▁informazioni ▁* ▁corrispondent i ▁all ' id ▁dell ' insegnamento ▁passato ▁come ▁parametro ▁*/ ▁String ▁tSql ▁= ▁" SELECT ▁id _ teaching ▁FR OM ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" ▁W HER E ▁id _ votes ▁= ▁" ▁+ ▁Utility . is Null ( pId ); ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁tSql ); ▁if ▁( tRs . next ()) ▁result ▁= ▁tRs . getString (" id _ teaching "); ▁else ▁throw ▁new ▁Entity N otFoundException ( ▁" Im possibile ▁trova re ▁il ▁voto !" ); ▁return ▁result ; ▁} ▁finally ▁{ ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' insi eme ▁di ▁tutti ▁i ▁voti ▁presenti ▁nel ▁database . ▁* ▁* ▁@ return ▁Ritorna ▁una ▁collection ▁di ▁voti . ▁* ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁* ▁@ throws ▁Entity N otFoundException ▁*/ ▁p ublic ▁sy nch ron ized ▁Collection < Votes > ▁getVotes () ▁throws ▁Connection Exception , ▁SQLException , ▁Invalid ValueException , ▁Entity N otFoundException ▁{ ▁Collection < Votes > ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" ▁ ORD ER ▁B Y ▁id _ votes "; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁this . loadRecord sFrom Rs ( pRs ); ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' insi eme ▁dei ▁voti ▁associati ▁all ' utente ▁corrispondente ▁* ▁all ' id ▁passato ▁come ▁ param entro . ▁* ▁* ▁@ param ▁pId ▁* ▁L ' id ▁dell ' utente . ▁* ▁@ return ▁Ritorna ▁una ▁collection ▁di ▁voti . ▁* ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁Collection < Votes > ▁ getVotesByUserId ( int ▁pId ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException ▁{ ▁Collection < Votes > ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁if ▁( pId ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" specifica re ▁l ' utente "); ▁try ▁{ ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" SELECT ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" .* ▁FR OM ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" ▁W HER E ▁ (" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" . id _ user ▁= ▁" ▁+ ▁Utility . is Null ( pId ) ▁+ ▁")" ▁+ ▁" ▁ ORD ER ▁B Y ▁id _ user "; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁this . loadRecord sFrom Rs ( pRs ); ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' insi eme ▁dei ▁voti ▁associati ▁all ' utente ▁corrispondente ▁* ▁all ' id ▁passato ▁come ▁ param entro . ▁* ▁* ▁@ param ▁pId ▁* ▁L ' id ▁dell ' utente . ▁* ▁@ return ▁Ritorna ▁una ▁collection ▁di ▁voti . ▁* ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁Collection < Votes > ▁ getVotesByUserId Year Turn ( int ▁pId , int ▁p Year , ▁int ▁pTurn ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException ▁{ ▁Collection < Votes > ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁if ▁( pId ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" specifica re ▁l ' utente "); ▁try ▁{ ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" SELECT ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" .* ▁FR OM ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" ▁W HER E ▁ (" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" . id _ user ▁= ▁" ▁+ ▁Utility . is Null ( pId )+" ▁ AND ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" . accademicYear ▁= ▁" ▁+ ▁Utility . is Null ( pYear )+" ▁ AND ▁" ▁+ ManagerVotes . TAB LE _ VOTES ▁+ ▁" . turn ▁= ▁" ▁+ ▁Utility . is Null ( pTurn )+ ▁")" ▁+ ▁" ▁ ORD ER ▁B Y ▁id _ user "; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁this . loadRecord sFrom Rs ( pRs ); ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁p ublic ▁sy nch ron ized ▁void ▁delete VotesByUserId Year Turn ( int ▁pId , int ▁p Year , ▁int ▁pTurn ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁if ▁( pId ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" specifica re ▁l ' utente "); ▁try ▁{ ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" DE LE TE ▁"+ ▁ManagerVotes . TAB LE _ VOTES +" ▁FR OM ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" ▁W HER E ▁ (" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" . id _ user =" ▁+ ▁Utility . is Null ( pId )+" ▁ AND ▁" ▁+ ▁ManagerVotes . TAB LE _ VOTES ▁+ ▁" . AccademicYear =" ▁+ ▁Utility . is Null ( pYear )+" ▁ AND ▁" ▁+ ManagerVotes . TAB LE _ VOTES ▁+ ▁" . turn =" ▁+ ▁Utility . is Null ( pTurn )+ ▁")" ; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁Utility . execute Operation ( connect , ▁sql ); ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Con sente ▁la ▁lettura ▁di ▁un ▁record ▁dal ▁ResultSet . ▁* ▁* ▁@ param ▁pRs ▁* ▁Il ▁risultato ▁della ▁query . ▁* ▁@ return ▁Ritorna ▁il ▁voto ▁letto . ▁* ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁priv ate ▁Votes ▁loadRecord From Rs ( ResultSet ▁pRs ) ▁throws ▁SQLException , ▁Invalid ValueException ▁{ ▁Votes ▁votes ▁= ▁new ▁Votes (); ▁votes . setId _ votes ( pRs . getInt ( (" id _ votes "))); ▁votes . setId _ user ( pRs . getInt (" id _ user ") ); ▁votes . set Teaching ( pRs . getInt (" id _ teaching ") ); ▁votes . set Written ( pRs . getInt (" written ") ); ▁votes . set Oral ( pRs . getInt (" oral ") ); ▁votes . set Laboratory ( pRs . getInt (" laboratory ") ); ▁votes . set AccademicYear ( pRs . getInt (" AccademicYear ") ); ▁votes . set Turn ( pRs . getInt (" turn ") ); ▁return ▁votes ; ▁} ▁/** ▁* ▁Con sente ▁la ▁lettura ▁dei ▁record ▁dal ▁ResultSet . ▁* ▁* ▁@ param ▁pRs ▁* ▁Il ▁risultato ▁della ▁query . ▁* ▁@ return ▁Ritorna ▁la ▁collection ▁di ▁insegnamenti ▁lett i . ▁* ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁priv ate ▁Collection < Votes > ▁loadRecord sFrom Rs ( ResultSet ▁pRs ) ▁throws ▁SQLException , ▁Invalid ValueException ▁{ ▁Collection < Votes > ▁result ▁= ▁new ▁Vector < Votes >(); ▁do ▁{ ▁result . add ( loadRecord From Rs ( pRs )); ▁} ▁while ▁( pRs . next ()); ▁return ▁result ; ▁} ▁}