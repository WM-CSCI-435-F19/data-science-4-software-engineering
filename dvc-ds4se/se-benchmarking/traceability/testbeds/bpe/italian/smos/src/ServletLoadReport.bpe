▁p ackage ▁smos . application . report Management ; ▁import ▁smos . Environment ; ▁import ▁smos . bean . Classroom ; ▁import ▁smos . bean . Teaching ; ▁import ▁smos . bean . User ; ▁import ▁smos . bean . UserListItem ; ▁import ▁smos . bean . Votes ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . storage . ManagerTeaching ; ▁import ▁smos . storage . ManagerUser ; ▁import ▁smos . storage . ManagerVotes ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁java . io . IOException ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Collection ; ▁import ▁java x . s ervlet . http . HttpServlet ; ▁import ▁java x . s ervlet . http . HttpServlet Request ; ▁import ▁java x . s ervlet . http . HttpServlet Response ; ▁import ▁java x . s ervlet . http . HttpSession ; ▁/** ▁* ▁Servlet ▁ utilizzata ▁per ▁carica re ▁la ▁ Pagella ▁di ▁un o ▁studente . ▁* ▁* ▁@ author ▁Giu lio ▁D ' Amora . ▁* ▁@ version ▁1.0 ▁* ▁* ▁2009 ▁  ▁C opy right ▁by ▁SMOS ▁*/ ▁p ublic ▁class ▁ServletLoad Report ▁ext ends ▁HttpServlet ▁{ ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁-1 04 5906 65 757 34 24 217 L ; ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doGet ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doGet ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁String ▁gotoPage ▁= ▁"./ report sManagement / update Report . jsp "; ▁String ▁errorMessage ▁= ▁" "; ▁ HttpSession ▁session ▁= ▁pRequest . get Session (); ▁Collection < Votes > ▁votesList ▁= ▁null ; ▁Collection < Teaching > ▁teachingList ▁= ▁null ; ▁ManagerVotes ▁managerVotes ▁= ▁ManagerVotes . get Instance (); ▁ManagerUser ▁managerUser ▁= ▁ManagerUser . get Instance (); ▁ManagerTeaching ▁managerTeaching ▁= ▁ManagerTeaching . get Instance (); ▁User ▁loggedUser ▁= ▁( User ) ▁session . get Attribute (" loggedUser "); ▁try ▁{ ▁if ▁( loggedUser ▁== ▁null ) ▁{ ▁pResponse . se ndRe direct ( "./ index . htm "); ▁return ; ▁} ▁if ▁(! managerUser . isAdministrator ( loggedUser )) ▁{ ▁errorMessage ▁= ▁" L ' Utente ▁collegat o ▁non ▁ha ▁accesso ▁alla ▁funzionalit a '! "; ▁gotoPage ▁= ▁"./ error . jsp "; ▁} ▁Classroom ▁classroom ▁= ▁( Classroom ) ▁session . get Attribute (" classroom "); ▁// ▁Lista ▁teaching ▁teachingList ▁= ▁managerTeaching . getTeachingsBy Classroom Id ( classroom ▁ . get IdAddress ()); ▁Integer ▁year ▁= ▁( Integer ) ▁session . get Attribute (" selected Year "); ▁// ▁Qu adrimestre ▁int ▁turn ▁= ▁( Integer ) ▁session . get Attribute (" q "); ▁UserListItem ▁student ▁= ▁( UserListItem ) ▁session ▁ . get Attribute (" student "); ▁// ▁Lista ▁ Voti ▁votesList ▁= ▁managerVotes . getVotesByUserId Year Turn ( student . getId (), ▁year , ▁turn ); ▁session . set Attribute (" teachingList ", ▁teachingList ); ▁session . set Attribute (" votesList ", ▁votesList ); ▁// ▁p rovare ▁i ▁dati ▁pResponse . se ndRe direct ( gotoPage ); ▁return ; ▁} ▁ catch ▁( SQLException ▁sqlException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁sqlException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁sqlException . printStackTrace (); ▁} ▁ catch ▁( Entity N otFoundException ▁entit yN otFoundException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁entit yN otFoundException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁entit yN otFoundException . printStackTrace (); ▁} ▁ catch ▁( Connection Exception ▁connection Exception ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁connection Exception . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁connection Exception . printStackTrace (); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁ catch ▁( Invalid ValueException ▁invalid ValueException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁invalid ValueException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁invalid ValueException . printStackTrace (); ▁} ▁pRequest . get Session () . set Attribute (" errorMessage ", ▁errorMessage ); ▁try ▁{ ▁pResponse . se ndRe direct ( gotoPage ); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁} ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doPost ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doPost ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁this . doGet ( pRequest , ▁pResponse ); ▁} ▁}