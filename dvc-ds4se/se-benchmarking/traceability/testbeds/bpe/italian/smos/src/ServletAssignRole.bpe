▁p ackage ▁smos . application . userManagement ; ▁import ▁smos . Environment ; ▁import ▁smos . bean . Role ; ▁import ▁smos . bean . User ; ▁import ▁smos . bean . UserListItem ; ▁import ▁smos . exception . Delete ManagerException ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . storage . ManagerUser ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁java . io . IOException ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Collection ; ▁import ▁java . util . Iterator ; ▁import ▁java . util . Vector ; ▁import ▁java x . s ervlet . http . HttpServlet ; ▁import ▁java x . s ervlet . http . HttpServlet Request ; ▁import ▁java x . s ervlet . http . HttpServlet Response ; ▁import ▁java x . s ervlet . http . HttpSession ; ▁/** ▁* ▁Servlet ▁ utilizzata ▁per ▁assegnar e ▁un o ▁o ▁piu ▁ruoli ▁ad ▁un ▁utente . ▁* ▁* ▁@ author ▁Napoli ta no ▁Vincen zo . ▁* ▁*/ ▁p ublic ▁class ▁ServletAssign Role ▁ext ends ▁HttpServlet ▁{ ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁ 5373 301 954 07 9872 83 L ; ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doGet ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doGet ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁String ▁gotoPage ▁= ▁" s howUserList "; ▁String ▁errorMessage ▁= ▁" "; ▁ HttpSession ▁session ▁= ▁pRequest . get Session (); ▁Collection < UserListItem > ▁administrators ▁= ▁new ▁Vector < UserListItem >(); ▁Iterator < UserListItem > ▁itAdmin ▁= ▁null ; ▁ManagerUser ▁managerUser ▁= ▁ManagerUser . get Instance (); ▁User ▁loggedUser ▁= ▁( User ) ▁session . get Attribute (" loggedUser "); ▁// ▁Verifica ▁che ▁l ' utente ▁abbia ▁effettuato ▁il ▁login ▁try ▁{ ▁if ▁( loggedUser ▁== ▁null ) ▁{ ▁pResponse . se ndRe direct ( "./ index . htm "); ▁return ; ▁} ▁if ▁((! managerUser . isAdministrator ( loggedUser ))) ▁{ ▁errorMessage ▁= ▁" L ' Utente ▁collegat o ▁non ▁ha ▁accesso ▁alla ▁" ▁+ ▁" funzionalit a '! "; ▁gotoPage ▁= ▁"./ error . jsp "; ▁} ▁User ▁user ▁= ▁( User ) ▁session . get Attribute (" user "); ▁administrators ▁= ▁managerUser . get Administrator s (); ▁itAdmin ▁= ▁administrators . iterator (); ▁itAdmin . next (); ▁String [] ▁selectedRoles ▁= ▁pRequest . getParameter Values (" selectedRoles "); ▁String [] ▁unselectedRoles ▁= ▁pRequest . getParameter Values (" unselectedRoles "); ▁if ▁( selectedRoles ▁ != ▁null ) ▁{ ▁int ▁selectedlength ▁= ▁selectedRoles . length ; ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁selectedlength ; ▁i ++) ▁{ ▁int ▁role ▁= ▁Integer . valueOf ( selectedRoles [ i ]); ▁/* ▁* ▁controll iamo ▁se ▁il ▁ruol o ▁che ▁st iamo ▁assegna ndo ▁e ' ▁* ▁quell o ▁di ▁docente */ ▁/* if ▁( ( role ▁== ▁Role . TEACHER ) ▁&& ▁(! managerUser . isTeacher ( user ) )){ ▁gotoPage ="./ load Year For Teachings "; ▁} */ ▁/* ▁* ▁controll iamo ▁se ▁il ▁ruol o ▁che ▁st iamo ▁assegna ndo ▁e ' ▁* ▁quell o ▁di ▁studente */ ▁/* if ▁( ( role ▁== ▁Role . STUDENT ) ▁&& ▁(! managerUser . isStudent ( user ) )){ ▁gotoPage ="./ s howUserList "; ▁} ▁*/ ▁/* ▁* ▁controll iamo ▁se ▁il ▁ruol o ▁che ▁st iamo ▁assegna ndo ▁e ' ▁* ▁quell o ▁di ▁genitore */ ▁/* if ( ( role == Role . PARENT ) && ▁(! managerUser . isParent ( user ) )){ ▁gotoPage ="./ persist e ntDataManagement / userManagement / show Student Parent Form . jsp "; ▁} */ ▁managerUser . assign Role ( user , ▁role ); ▁} ▁} ▁if ▁( unselectedRoles ▁ != ▁null ) ▁{ ▁int ▁ unselectedlength ▁= ▁unselectedRoles . length ; ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁ unselectedlength ; ▁i ++) ▁{ ▁int ▁role ▁= ▁Integer . valueOf ( unselectedRoles [ i ]); ▁if ▁( ( managerUser . isAdministrator ( user ))&&( ! itAdmin . hasNext ( ))&&( role == Role . ADMIN )) ▁{ ▁throw ▁new ▁Delete ManagerException ▁ (" Im possibile ▁modificare ▁il ▁ruol o ▁dell ' utente , ▁e ' ▁l ' unico ▁Amministratore ▁del ▁sistema ! ▁Crea re ▁un ▁nuovo ▁Amministratore ▁e ▁riprovare !" ); ▁} ▁managerUser . remove Role ( user , ▁role ); ▁} ▁} ▁session . set Attribute (" user ", ▁user ); ▁} ▁ catch ▁( Number FormatException ▁number FormatException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁number FormatException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁number FormatException . printStackTrace (); ▁} ▁ catch ▁( Entity N otFoundException ▁entit yN otFoundException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁entit yN otFoundException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁entit yN otFoundException . printStackTrace (); ▁} ▁ catch ▁( SQLException ▁SQLException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁SQLException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁SQLException . printStackTrace (); ▁} ▁ catch ▁( Connection Exception ▁connection Exception ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁connection Exception . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁connection Exception . printStackTrace (); ▁} ▁ catch ▁( Invalid ValueException ▁invalid ValueException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁invalid ValueException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁invalid ValueException . printStackTrace (); ▁} ▁ catch ▁( Delete ManagerException ▁delete ManagerException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁delete ManagerException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁delete ManagerException . printStackTrace (); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁session . set Attribute (" errorMessage ", ▁errorMessage ); ▁try ▁{ ▁pResponse . se ndRe direct ( gotoPage ); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁} ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doPost ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doPost ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁this . doGet ( pRequest , ▁pResponse ); ▁} ▁}