▁p ackage ▁smos . application . re gisterManagement ; ▁import ▁java . io . IOException ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Collection ; ▁import ▁java . util . Date ; ▁import ▁java . util . Iterator ; ▁import ▁java x . s ervlet . http . HttpServlet ; ▁import ▁java x . s ervlet . http . HttpServlet Request ; ▁import ▁java x . s ervlet . http . HttpServlet Response ; ▁import ▁java x . s ervlet . http . HttpSession ; ▁import ▁smos . Environment ; ▁import ▁smos . bean . Absence ; ▁import ▁smos . bean . Classroom ; ▁import ▁smos . bean . Delay ; ▁import ▁smos . bean . RegisterLine ; ▁import ▁smos . bean . User ; ▁import ▁smos . bean . UserListItem ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . exception . Mandatory FieldException ; ▁import ▁smos . storage . ManagerRegister ; ▁import ▁smos . storage . ManagerUser ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁smos . utility . Utility ; ▁p ublic ▁class ▁ServletUpdate Register ▁ext ends ▁HttpServlet ▁{ ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁5 9 66 29 83189 13 522 686 L ; ▁p rot ected ▁void ▁doGet ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁String ▁gotoPage ▁= ▁"./ re gisterManagement / s howClassroomList . jsp "; ▁String ▁errorMessage ▁= ▁" "; ▁ HttpSession ▁session ▁= ▁pRequest . get Session (); ▁// Variabil e ▁boolean a ▁ utilizzata ▁per ▁verificar e ▁se ▁lo ▁studente ▁ha ▁o ▁meno ▁un ' assenza ▁boolean ▁flag ▁= ▁false ; ▁// Collection ▁ utilizzata ▁per ▁la ▁memor izzazione ▁del ▁registro ▁di ▁una ▁particolare ▁data ▁Collection < RegisterLine > ▁register ▁= ▁null ; ▁// Iterator e ▁necessari o ▁a ▁s corr ere ▁la ▁collection ▁Iterator ▁itRegister ▁= ▁null ; ▁// Variabil e ▁temporanea ▁necessaria ▁a ▁le gge re ▁le ▁informazioni ▁dall a ▁collection ▁RegisterLine ▁tmpRegisterLine ▁= ▁null ; ▁// Variabil e ▁temporanea ▁necessaria ▁a ▁le gge re ▁le ▁informazioni ▁dall a ▁collection ▁UserListItem ▁student ▁= ▁null ; ▁// Variabil e ▁temporanea ▁necessaria ▁all ' inserimento ▁delle ▁nuove ▁assenze ▁Absence ▁tmpAbsence ▁= ▁null ; ▁// Variabil e ▁temporanea ▁necessaria ▁all ' inserimento ▁di ▁nuov i ▁ritardi ▁Delay ▁tmpDelay ▁= ▁null ; ▁// Class i ▁manager ▁necessari e ▁all ' elaborazione ▁ManagerUser ▁managerUser ▁= ▁ManagerUser . get Instance (); ▁ManagerRegister ▁managerRegister ▁= ▁ManagerRegister . get Instance (); ▁// Variabil i ▁necessari e ▁per ▁la ▁memor izzazione ▁dei ▁dati ▁pro ven i enti ▁dall a ▁request ▁String [] ▁absence s ▁= ▁null ; ▁// M emorizza ▁gli ▁alunni ▁assenti ▁String [] ▁ delays ▁= ▁null ; ▁// M emorizza ▁gli ▁alunni ▁ritardatari ▁// Recuper o ▁l ' utente ▁loggato ▁dall a ▁session e ▁User ▁loggedUser ▁= ▁( User ) ▁session . get Attribute (" loggedUser "); ▁// Verific o ▁che ▁l ' utente ▁loggato ▁abbia ▁i ▁per messi ▁necessari ▁try ▁{ ▁if ▁( loggedUser ▁== ▁null ) ▁{ ▁pResponse . se ndRe direct ( "./ index . htm "); ▁return ; ▁} ▁if ▁(! managerUser . isAdministrator ( loggedUser )) ▁{ ▁errorMessage ▁= ▁" L ' Utente ▁collegat o ▁non ▁ha ▁accesso ▁alla ▁" ▁+ ▁" funzionalit a '! "; ▁gotoPage ▁= ▁"./ error . jsp "; ▁return ; ▁} ▁// Recuper o ▁i ▁parametri ▁dall a ▁pRequest ▁Date ▁date ▁= ▁Utility . String 2 Date ( pRequest . getParameter (" date ") ); ▁absence s ▁= ▁pRequest . getParameter Values (" absences "); ▁ delays ▁= ▁pRequest . getParameter Values (" delays "); ▁// Recuper o ▁l ' oggetto ▁classroom ▁dall a ▁session ▁Classroom ▁classroom ▁= ▁( ( Classroom ) ▁session . get Attribute (" classroom ") ); ▁/* In vo co ▁il ▁metodo ▁della ▁managerRegister ▁per ▁recuperare ▁dal ▁db ▁le ▁informazioni ▁* ▁inerent i ▁il ▁registro ▁di ▁una ▁classe ▁ad ▁una ▁particolare ▁data ▁( Assenze , ▁Ritardi ) ▁*/ ▁register ▁= ▁managerRegister . get Register ByClass IDA ndDate ( classroom . getId Classroom (), date ); ▁if ▁( register ▁ != ▁null ){ ▁itRegister ▁= ▁register . iterator (); ▁} ▁if ▁( itRegister ▁ != ▁null ){ ▁while ( itRegister . hasNext ( )){ ▁tmpRegisterLine ▁= ▁( RegisterLine ) ▁itRegister . next (); ▁// Recuper o ▁lo ▁studente ▁cui ▁la ▁register ▁line ▁si ▁riferisc e ▁student ▁= ▁tmpRegisterLine . getStudent (); ▁// Verific o ▁se ▁per ▁lo ▁studente ▁e ' ▁stata ▁inserita ▁o ▁meno ▁un ' assenza ▁if ▁( absences ▁ != ▁null ){ ▁for ▁( int ▁i =0; ▁i < absences . length ; ▁i ++) { ▁if ▁( Integer . valueOf ( absences [ i ]) ▁== ▁student . getId ( )){ ▁flag ▁= ▁true ; ▁if ▁(! managerRegister . has Absence ( tmpRegisterLine )){ ▁tmpAbsence ▁= ▁new ▁Absence (); ▁tmpAbsence . s etAcademicYear ( classroom . getAcademicYear ()); ▁tmpAbsence . set DateAbsence ( date ); ▁tmpAbsence . set IdJustify (0) ; ▁tmpAbsence . set IdUser ( student . getId ()); ▁managerRegister . insert Absence ( tmpAbsence ); ▁} ▁} ▁} ▁if ▁(! flag ){ ▁if ▁( managerRegister . has Absence ( tmpRegisterLine )){ ▁managerRegister . deleteAbsence ( tmpRegisterLine . getAbsence ()); ▁} ▁} ▁} ▁else ▁{ ▁if ▁( managerRegister . has Absence ( tmpRegisterLine )){ ▁managerRegister . deleteAbsence ( tmpRegisterLine . getAbsence ()); ▁} ▁} ▁flag ▁= ▁false ; ▁// Verific o ▁se ▁per ▁lo ▁studente ▁e ' ▁stata ▁inserito ▁o ▁meno ▁un ▁ritardo ▁if ▁( delays ▁ != ▁null ){ ▁for ▁( int ▁i =0; ▁i < delays . length ; ▁i ++) { ▁if ▁( Integer . valueOf ( delays [ i ]) ▁== ▁student . getId ( )){ ▁flag ▁= ▁true ; ▁if ▁(! managerRegister . has Delay ( tmpRegisterLine )){ ▁tmpDelay ▁= ▁new ▁Delay (); ▁tmpDelay . s etAcademicYear ( classroom . getAcademicYear ()); ▁tmpDelay . set DateDelay ( date ); ▁tmpDelay . set IdUser ( student . getId ()); ▁tmpDelay . set TimeDelay ( pRequest . getParameter (" hour _ " ▁+ ▁student . getId ())); ▁managerRegister . insert Delay ( tmpDelay ); ▁} ▁else ▁{ ▁tmpDelay ▁= ▁tmpRegisterLine . getDelay (); ▁tmpDelay . set TimeDelay ( pRequest . getParameter (" hour _ " ▁+ ▁student . getId ())); ▁managerRegister . updateDelay ( tmpDelay ); ▁} ▁} ▁} ▁if ▁(! flag ){ ▁if ▁( managerRegister . has Delay ( tmpRegisterLine )){ ▁managerRegister . deleteDelay ( tmpRegisterLine . getDelay ()); ▁} ▁} ▁} ▁else ▁{ ▁if ▁( managerRegister . has Delay ( tmpRegisterLine )){ ▁managerRegister . deleteDelay ( tmpRegisterLine . getDelay ()); ▁} ▁} ▁flag ▁= ▁false ; ▁} ▁} ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁ catch ▁( SQLException ▁sqlException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁sqlException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁sqlException . printStackTrace (); ▁} ▁ catch ▁( Entity N otFoundException ▁entit yN otFoundException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁entit yN otFoundException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁entit yN otFoundException . printStackTrace (); ▁} ▁ catch ▁( Connection Exception ▁connection Exception ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁connection Exception . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁connection Exception . printStackTrace (); ▁} ▁ catch ▁( Invalid ValueException ▁e ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁e . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁e . printStackTrace (); ▁} ▁ catch ▁( Mandatory FieldException ▁e ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁e . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁e . printStackTrace (); ▁} ▁session . set Attribute (" errorMessage ", ▁errorMessage ); ▁try ▁{ ▁pResponse . se ndRe direct ( gotoPage ); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁} ▁p rot ected ▁void ▁doPost ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁this . doGet ( pRequest , ▁pResponse ); ▁} ▁}