▁p ackage ▁smos . application . report Management ; ▁import ▁smos . Environment ; ▁import ▁smos . bean . Classroom ; ▁import ▁smos . bean . Teaching ; ▁import ▁smos . bean . User ; ▁import ▁smos . bean . UserListItem ; ▁import ▁smos . bean . Votes ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . exception . Mandatory FieldException ; ▁import ▁smos . storage . ManagerTeaching ; ▁import ▁smos . storage . ManagerUser ; ▁import ▁smos . storage . ManagerVotes ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁java . io . IOException ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Collection ; ▁import ▁java . util . Iterator ; ▁import ▁java x . s ervlet . http . HttpServlet ; ▁import ▁java x . s ervlet . http . HttpServlet Request ; ▁import ▁java x . s ervlet . http . HttpServlet Response ; ▁import ▁java x . s ervlet . http . HttpSession ; ▁/** ▁* ▁Servlet ▁ utilizzata ▁per ▁aggiorna re ▁la ▁pagella ▁di ▁un o ▁studente . ▁* ▁* ▁@ author ▁Giu lio ▁D ' Amora . ▁* ▁@ version ▁1.0 ▁* ▁* ▁2009 ▁  ▁C opy right ▁by ▁SMOS ▁*/ ▁p ublic ▁class ▁ServletUpdate Report ▁ext ends ▁HttpServlet ▁{ ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁-1 04 5906 65 757 34 24 217 L ; ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doGet ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doGet ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁String ▁gotoPage ▁= ▁"./ showReports "; ▁String ▁errorMessage ▁= ▁" "; ▁ HttpSession ▁session ▁= ▁pRequest . get Session (); ▁Collection < Teaching > ▁teachingList ▁= ▁null ; ▁ManagerVotes ▁managerVotes ▁= ▁ManagerVotes . get Instance (); ▁ManagerUser ▁managerUser ▁= ▁ManagerUser . get Instance (); ▁ManagerTeaching ▁managerTeaching ▁= ▁ManagerTeaching . get Instance (); ▁User ▁loggedUser ▁= ▁( User ) ▁session . get Attribute (" loggedUser "); ▁try ▁{ ▁if ▁( loggedUser ▁== ▁null ) ▁{ ▁pResponse . se ndRe direct ( "./ index . htm "); ▁return ; ▁} ▁if ▁(! managerUser . isAdministrator ( loggedUser )) ▁{ ▁errorMessage ▁= ▁" L ' Utente ▁collegat o ▁non ▁ha ▁accesso ▁alla ▁funzionalit a '! "; ▁gotoPage ▁= ▁"./ error . jsp "; ▁} ▁Classroom ▁classroom ▁= ▁( Classroom ) ▁session . get Attribute (" classroom "); ▁// ▁Lista ▁teaching ▁teachingList ▁= ▁managerTeaching . getTeachingsBy Classroom Id ( classroom ▁ . get IdAddress ()); ▁Iterator < Teaching > ▁itTeaching ▁= ▁teachingList . iterator (); ▁Integer ▁year ▁= ▁( Integer ) ▁session . get Attribute (" selected Year "); ▁UserListItem ▁student ▁= ▁( UserListItem ) ▁session ▁ . get Attribute (" student "); ▁// ▁Qu adrimestre ▁int ▁turn ▁= ▁( Integer ) ▁session . get Attribute (" q "); ▁Teaching ▁teachingTemp ▁= ▁null ; ▁int ▁idTemp ; ▁String ▁write , ▁oral , ▁lab ; ▁gotoPage ▁+= ▁" ? student =" ▁+ ▁student . getId () ▁+ ▁ "& q =" ▁+ ▁turn ; ▁while ▁( itTeaching . hasNext ()) ▁{ ▁teachingTemp ▁= ▁itTeaching . next (); ▁idTemp ▁= ▁teachingTemp . getId (); ▁write ▁= ▁" scritto _ " ▁+ ▁idTemp ; ▁oral ▁= ▁" orale _ " ▁+ ▁idTemp ; ▁lab ▁= ▁" laboratorio _ " ▁+ ▁idTemp ; ▁write ▁= ▁pRequest . getParameter ( write ); ▁oral ▁= ▁pRequest . getParameter ( oral ); ▁lab ▁= ▁pRequest . getParameter ( lab ); ▁Votes ▁newVotes ▁= ▁new ▁Votes (); ▁// ▁SE ▁il ▁voto ▁non ▁esiste ▁dob b iamo ▁crear lo ▁int ▁ idVoto ▁= ▁managerVotes . getId Votes ( teachingTemp , ▁year , ▁turn , ▁student ); ▁int ▁writeInt =0, ▁oralInt =0, labInt =0; ▁if ( write !="" ) ▁writeInt ▁= ▁Integer . valueOf ( write ); ▁if ( oral !="" ) ▁oralInt ▁= ▁Integer . valueOf ( oral ); ▁if ( lab !="" ) ▁ labInt ▁= ▁Integer . valueOf ( lab ); ▁if ▁( idVoto ▁<= ▁0) ▁{ ▁if ▁( writeInt ▁ != ▁0 ▁|| ▁oralInt ▁ != ▁0 ▁|| ▁ labInt ▁ != ▁0) ▁{ ▁newVotes . set AccademicYear ( year ); ▁newVotes . setId _ user ( student . getId ()); ▁newVotes . set Laboratory ( labInt ); ▁newVotes . set Oral ( oralInt ); ▁newVotes . set Teaching ( idTemp ); ▁newVotes . set Turn ( turn ); ▁newVotes . set Written ( writeInt ); ▁managerVotes . insert ( newVotes ); ▁} ▁} ▁// ▁Se ▁il ▁voto ▁esiste ▁dob b iamo ▁aggiornar lo ▁else ▁{ ▁if ▁( writeInt ▁ != ▁0 ▁|| ▁oralInt ▁ != ▁0 ▁|| ▁ labInt ▁ != ▁0) ▁{ ▁newVotes ▁= ▁managerVotes . getVotesBy Id ( idVoto ); ▁newVotes . set Laboratory ( labInt ); ▁newVotes . set Oral ( oralInt ); ▁newVotes . set Written ( writeInt ); ▁managerVotes . update ( newVotes ); ▁} ▁else ▁managerVotes . delete ( managerVotes . getVotesBy Id ( idVoto )); ▁} ▁} ▁pResponse . se ndRe direct ( gotoPage ); ▁return ; ▁} ▁ catch ▁( SQLException ▁sqlException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁sqlException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁sqlException . printStackTrace (); ▁} ▁ catch ▁( Entity N otFoundException ▁entit yN otFoundException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁entit yN otFoundException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁entit yN otFoundException . printStackTrace (); ▁} ▁ catch ▁( Connection Exception ▁connection Exception ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁connection Exception . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁connection Exception . printStackTrace (); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁ catch ▁( Invalid ValueException ▁invalid ValueException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁invalid ValueException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁invalid ValueException . printStackTrace (); ▁} ▁ catch ▁( Mandatory FieldException ▁e ) ▁{ ▁// ▁TODO ▁ Auto - generate d ▁ catch ▁block ▁e . printStackTrace (); ▁} ▁pRequest . get Session () . set Attribute (" errorMessage ", ▁errorMessage ); ▁try ▁{ ▁pResponse . se ndRe direct ( gotoPage ); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁} ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doPost ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doPost ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁this . doGet ( pRequest , ▁pResponse ); ▁} ▁}