▁p ackage ▁smos . application . userManagement ; ▁import ▁smos . Environment ; ▁import ▁smos . bean . User ; ▁import ▁smos . exception . Duplicate dEntityException ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . exception . LoginException ; ▁import ▁smos . exception . Mandatory FieldException ; ▁import ▁smos . storage . ManagerUser ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁java . io . IOException ; ▁import ▁java . sql . SQLException ; ▁import ▁java x . s ervlet . http . HttpServlet ; ▁import ▁java x . s ervlet . http . HttpServlet Request ; ▁import ▁java x . s ervlet . http . HttpServlet Response ; ▁import ▁java x . s ervlet . http . HttpSession ; ▁/** ▁* ▁Servlet ▁ utilizzata ▁per ▁inserire ▁un ▁utente ▁nel ▁DataBase . ▁* ▁* ▁@ author ▁na polit ano ▁Vincen zo . ▁* ▁*/ ▁p ublic ▁class ▁ServletInsert User ▁ext ends ▁HttpServlet ▁{ ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁- 3860 5 69 607 87 009 941 9 L ; ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doGet ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p ublic ▁void ▁doGet ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁String ▁gotoPage ▁= ▁"./ s howUserList "; ▁String ▁errorMessage ▁= ▁" "; ▁ HttpSession ▁session ▁= ▁pRequest . get Session (); ▁ManagerUser ▁managerUser ▁= ▁ManagerUser . get Instance (); ▁User ▁loggedUser ▁= ▁( User ) ▁session . get Attribute (" loggedUser "); ▁try ▁{ ▁if ▁( loggedUser ▁== ▁null ) ▁{ ▁pResponse . se ndRe direct ( "./ index . htm "); ▁return ; ▁} ▁if ▁(! managerUser . isAdministrator ( loggedUser )) ▁{ ▁errorMessage ▁= ▁" L ' Utente ▁collegat o ▁non ▁ha ▁accesso ▁alla ▁" ▁+ ▁" funzionalit a '! "; ▁gotoPage ▁= ▁"./ error . jsp "; ▁} ▁User ▁user ▁= ▁new ▁User (); ▁user . set FirstName ( pRequest . getParameter (" firstName ") ); ▁user . setLast Name ( pRequest . getParameter (" lastName ") ); ▁user . setCell ( pRequest . getParameter (" cell ") ); ▁user . set EMail ( pRequest . getParameter (" eMail ") ); ▁/* ▁* ▁verific h iamo ▁che ▁la ▁login ▁sia ▁ unica . ▁*/ ▁String ▁login ▁= ▁pRequest . getParameter (" login "); ▁user . setLogin ( login ); ▁if ▁( managerUser . exists Login ( user )) ▁throw ▁new ▁Invalid ValueException (" La ▁login ▁inserita ▁esiste ▁gia ' . ▁Inseri re ▁una ▁nuova ▁login . "); ▁if ▁( pRequest . getParameter (" password ") . equals ( pRequest . getParameter (" password 1 ") )){ ▁user . setPassword ( ( pRequest . getParameter (" password "))); ▁} ▁else { ▁throw ▁new ▁LoginException (" I ▁valor i ▁inseriti ▁per ▁la ▁password ▁non ▁co i nc id ono !" ); ▁} ▁// inserimento ▁utente ▁if ▁(! managerUser . exists ( user )){ ▁managerUser . insert ( user ); ▁session . set Attribute (" user ", ▁user ); ▁} else ▁throw ▁new ▁ Duplicate dEntityException (" Utente ▁gia ' ▁esistente "); ▁} ▁ catch ▁( SQLException ▁SQLException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁SQLException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁SQLException . printStackTrace (); ▁} ▁ catch ▁( Connection Exception ▁connection Exception ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁connection Exception . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁connection Exception . printStackTrace (); ▁} ▁ catch ▁( Mandatory FieldException ▁mandat o ryFieldException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁mandat o ryFieldException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁mandat o ryFieldException . printStackTrace (); ▁} ▁ catch ▁( Entity N otFoundException ▁entit yN otFoundException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁entit yN otFoundException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁entit yN otFoundException . printStackTrace (); ▁} ▁ catch ▁( Invalid ValueException ▁invalid ValueException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁invalid ValueException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁invalid ValueException . printStackTrace (); ▁} ▁ catch ▁( Duplicate dEntityException ▁duplicate dEntityException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁duplicate dEntityException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁duplicate dEntityException . printStackTrace (); ▁} ▁ catch ▁( LoginException ▁loginException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁loginException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁loginException . printStackTrace (); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁session . set Attribute (" errorMessage ", ▁errorMessage ); ▁try ▁{ ▁pResponse . se ndRe direct ( gotoPage ); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁} ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doPost ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doPost ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁this . doGet ( pRequest , ▁pResponse ); ▁} ▁}