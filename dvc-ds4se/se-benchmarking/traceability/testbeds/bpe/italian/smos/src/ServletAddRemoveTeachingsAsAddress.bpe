▁p ackage ▁smos . application . a ddressManagement ; ▁import ▁smos . Environment ; ▁import ▁smos . bean . Address ; ▁import ▁smos . bean . User ; ▁import ▁smos . exception . Duplicate dEntityException ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . exception . Mandatory FieldException ; ▁import ▁smos . storage . ManagerAddress ; ▁import ▁smos . storage . ManagerTeaching ; ▁import ▁smos . storage . ManagerUser ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁java . io . IOException ; ▁import ▁java . sql . SQLException ; ▁import ▁java x . s ervlet . http . HttpServlet ; ▁import ▁java x . s ervlet . http . HttpServlet Request ; ▁import ▁java x . s ervlet . http . HttpServlet Response ; ▁import ▁java x . s ervlet . http . HttpSession ; ▁/** ▁* ▁Servlet ▁ utilizzata ▁per ▁assegnar e ▁Insegnamenti ▁ad ▁un ▁docente ▁* ▁* ▁* ▁@ author ▁Giu lio ▁D ' Amora ▁* ▁@ version ▁1.0 ▁* ▁* ▁2009 ▁  ▁C opy right ▁by ▁SMOS ▁*/ ▁p ublic ▁class ▁ServletAdd Remove Teachings AsAddress ▁ext ends ▁HttpServlet ▁{ ▁/** ▁* ▁*/ ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁-6 6927 11 2 867 4 6163 446 L ; ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doGet ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doGet ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁String ▁gotoPage ▁= ▁"./ showAddressList "; ▁String ▁errorMessage ▁= ▁" "; ▁ HttpSession ▁session ▁= ▁pRequest . get Session (); ▁ManagerUser ▁managerUser ▁= ▁ManagerUser . get Instance (); ▁ManagerTeaching ▁managerTeaching ▁= ▁ManagerTeaching . get Instance (); ▁ManagerAddress ▁managerAddress ▁= ▁ManagerAddress . get Instance (); ▁User ▁loggedUser ▁= ▁( User ) ▁session . get Attribute (" loggedUser "); ▁try ▁{ ▁if ▁( loggedUser ▁== ▁null ) ▁{ ▁pResponse . se ndRe direct ( "./ index . htm "); ▁return ; ▁} ▁if ▁(! managerUser . isAdministrator ( loggedUser )) ▁{ ▁errorMessage ▁= ▁" L ' Utente ▁collegat o ▁non ▁ha ▁accesso ▁alla ▁" ▁+ ▁" funzionalit a '! "; ▁gotoPage ▁= ▁"./ error . jsp "; ▁} ▁// ▁// Mi ▁serv ono ▁l ' id ▁dell ' address ▁e ▁le ▁due ▁list e ▁di ▁insegnamenti ! ▁Address ▁address ▁= ▁( Address ) ▁session . get Attribute (" address "); ▁String [] ▁ idSelectedList ▁= ▁pRequest . getParameter Values (" selected Teachings "); ▁String [] ▁ idUnselectedList ▁= ▁pRequest . getParameter Values (" unselected Teachings "); ▁int ▁ nSelected ▁= idSelectedList . length ; ▁int ▁ nUnselected ▁= idUnselectedList . length ; ▁int ▁temp ; ▁// Aggiungi amo ▁gli ▁insegnamenti ▁selezionati ! ! ▁for ( int ▁i =0; i < nSelected ; i ++) { ▁temp ▁= ▁Integer . valueOf ( idSelectedList [ i ]); ▁if (! managerAddress . has Teaching ( managerTeaching . getTeaching ById ( temp ) , ▁address )){ ▁managerAddress . assignTeach ingAsAddress ( address , ▁managerTeaching . getTeaching ById ( temp )); ▁} ▁} ▁// Rimuov iamo ▁gli ▁insegnamenti ▁non ▁selezionati ▁for ( int ▁i =0; i < nUnselected ; i ++) { ▁temp ▁= ▁Integer . valueOf ( idUnselectedList [ i ]); ▁if ( managerAddress . has Teaching ( managerTeaching . getTeaching ById ( temp ) , ▁address )){ ▁managerAddress . removeTeach ingAsAddress ( address , ▁managerTeaching . getTeaching ById ( temp )); ▁} ▁} ▁// session . set Attribute (" teachingList Teacher ", ▁listSelcected ); ▁} ▁ catch ▁( SQLException ▁sqlException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁sqlException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁sqlException . printStackTrace (); ▁} ▁ catch ▁( Entity N otFoundException ▁entit yN otFoundException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁entit yN otFoundException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁entit yN otFoundException . printStackTrace (); ▁} ▁ catch ▁( Connection Exception ▁connection Exception ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁connection Exception . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁connection Exception . printStackTrace (); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁ catch ▁( Invalid ValueException ▁e ) ▁{ ▁// ▁TODO ▁ Auto - generate d ▁ catch ▁block ▁e . printStackTrace (); ▁} ▁ catch ▁( Mandatory FieldException ▁e ) ▁{ ▁// ▁TODO ▁ Auto - generate d ▁ catch ▁block ▁e . printStackTrace (); ▁} ▁ catch ▁( Duplicate dEntityException ▁e ) ▁{ ▁// ▁TODO ▁ Auto - generate d ▁ catch ▁block ▁e . printStackTrace (); ▁} ▁pRequest . get Session () . set Attribute (" errorMessage ", ▁errorMessage ); ▁try ▁{ ▁pResponse . se ndRe direct ( gotoPage ); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error 6. jsp "; ▁ioException . printStackTrace (); ▁} ▁} ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doPost ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doPost ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁this . doGet ( pRequest , ▁pResponse ); ▁} ▁}