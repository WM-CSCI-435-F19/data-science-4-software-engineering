▁p ackage ▁smos . application . userManagement ; ▁import ▁java . io . IOException ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Collection ; ▁import ▁java . util . Iterator ; ▁import ▁java . util . Vector ; ▁import ▁java x . s ervlet . http . HttpServlet ; ▁import ▁java x . s ervlet . http . HttpServlet Request ; ▁import ▁java x . s ervlet . http . HttpServlet Response ; ▁import ▁java x . s ervlet . http . HttpSession ; ▁import ▁smos . Environment ; ▁import ▁smos . bean . User ; ▁import ▁smos . bean . UserListItem ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . storage . ManagerUser ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁/** ▁* ▁Servlet ▁che ▁modifica ▁il ▁record ▁dell o ▁studente ▁con ▁l ' id ▁del ▁padre . ▁* ▁* ▁@ author ▁Napoli ta no ▁Vincen zo . ▁* ▁*/ ▁p ublic ▁class ▁ServletAssign Parent Student ▁ext ends ▁HttpServlet ▁{ ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁- 4 5072 2 50 180 3014 7979 L ; ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doGet ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁*/ ▁p rot ected ▁void ▁doGet ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁String ▁gotoPage ▁= ▁" s howUserList "; ▁String ▁errorMessage ▁= ▁" "; ▁ HttpSession ▁session ▁= ▁pRequest . get Session (); ▁ManagerUser ▁managerUser ▁= ▁ManagerUser . get Instance (); ▁User ▁loggedUser ▁= ▁( User ) ▁session . get Attribute (" loggedUser "); ▁// ▁Verifica ▁che ▁l ' utente ▁abbia ▁effettuato ▁il ▁login ▁try ▁{ ▁if ▁( loggedUser ▁== ▁null ) ▁{ ▁pResponse . se ndRe direct ( "./ index . htm "); ▁return ; ▁} ▁if ▁((! managerUser . isAdministrator ( loggedUser ))) ▁{ ▁errorMessage ▁= ▁" L ' Utente ▁collegat o ▁non ▁ha ▁accesso ▁alla ▁" ▁+ ▁" funzionalit a '! "; ▁gotoPage ▁= ▁"./ error . jsp "; ▁} ▁User ▁user ▁= ▁( User ) ▁session . get Attribute (" user "); ▁int ▁idParent = user . getId (); ▁Collection < UserListItem > ▁students ▁= ▁new ▁Vector < UserListItem >(); ▁Iterator < UserListItem > ▁itStu ▁= ▁null ; ▁students ▁= ▁managerUser . getStudent s (); ▁String [] ▁selectedStudent ▁= ▁pRequest . getParameter Values (" selectedStudent "); ▁String [] ▁un selectedStudent ▁= ▁pRequest . getParameter Values (" un selectedStudent "); ▁if ▁( selectedStudent ▁ != ▁null ) ▁{ ▁int ▁selectedlength ▁= ▁selectedStudent . length ; ▁UserListItem ▁tmp ▁= ▁null ; ▁User ▁stu = null ; ▁int ▁ idStudent =0; ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁selectedlength ; ▁i ++) ▁{ ▁itStu ▁= ▁students . iterator (); ▁String ▁ dd ▁= ▁selectedStudent [ i ]; ▁ idStudent = Integer . parse Int ( dd ); ▁while ( itStu . hasNext ( )){ ▁tmp ▁= ▁( UserListItem ) itStu . next (); ▁if ( tmp . getId ()== idStudent ){ ▁stu = managerUser . getUserBy Id ( tmp . getId ());// recuper o ▁userStudent e ▁managerUser . assign Parent ( stu , ▁idParent ); ▁} ▁} ▁} ▁} ▁else ▁{ ▁gotoPage ="./ error . jsp "; ▁} ▁if ▁( un selectedStudent ▁ != ▁null ) ▁{ ▁itStu = null ; ▁int ▁ unselectedlength ▁= ▁un selectedStudent . length ; ▁UserListItem ▁tmp ▁= ▁null ; ▁User ▁stu = null ; ▁int ▁ idStudent =0; ▁for ▁( int ▁i ▁= ▁0; ▁i ▁< ▁ unselectedlength ; ▁i ++) ▁{ ▁itStu ▁= ▁students . iterator (); ▁String ▁ dd ▁= ▁un selectedStudent [ i ]; ▁ idStudent = Integer . parse Int ( dd ); ▁while ( itStu . hasNext ( )){ ▁tmp ▁= ▁( UserListItem ) itStu . next (); ▁if ( tmp . getId ()== idStudent ){ ▁stu = managerUser . getUserBy Id ( tmp . getId ());// recuper o ▁userStudent e ▁managerUser . remove Parent ( stu ); ▁} ▁} ▁} ▁} ▁session . set Attribute (" user ", ▁user ); ▁} ▁ catch ▁( Number FormatException ▁number FormatException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁number FormatException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁number FormatException . printStackTrace (); ▁} ▁ catch ▁( Entity N otFoundException ▁entit yN otFoundException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁entit yN otFoundException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁entit yN otFoundException . printStackTrace (); ▁} ▁ catch ▁( SQLException ▁SQLException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁SQLException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁SQLException . printStackTrace (); ▁} ▁ catch ▁( Connection Exception ▁connection Exception ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁connection Exception . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁connection Exception . printStackTrace (); ▁} ▁ catch ▁( Invalid ValueException ▁invalid ValueException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁invalid ValueException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁invalid ValueException . printStackTrace (); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁session . set Attribute (" errorMessage ", ▁errorMessage ); ▁try ▁{ ▁pResponse . se ndRe direct ( gotoPage ); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁} ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doPost ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doPost ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁this . doGet ( pRequest , ▁pResponse ); ▁} ▁}