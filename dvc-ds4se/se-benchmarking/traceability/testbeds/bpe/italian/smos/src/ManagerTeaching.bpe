▁p ackage ▁smos . storage ; ▁import ▁smos . bean . Teaching ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . exception . Mandatory FieldException ; ▁import ▁smos . storage . connect ionManagement . DBConnection ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁smos . utility . Utility ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Collection ; ▁import ▁java . util . Vector ; ▁import ▁java . sql . Connection ; ▁/** ▁* ▁* ▁Classe ▁manager ▁degli ▁insegnamenti . ▁* ▁* ▁@ author ▁Giu lio ▁D ' Amora ▁* ▁@ version ▁1.0 ▁* ▁* ▁2009 ▁  ▁C opy right ▁by ▁SMOS ▁*/ ▁p ublic ▁class ▁ManagerTeaching ▁{ ▁priv ate ▁static ▁ManagerTeaching ▁instance ; ▁/** ▁* ▁Il ▁nome ▁della ▁tabella ▁degli ▁insegnamenti . ▁*/ ▁p ublic ▁static ▁final ▁String ▁ TAB LE _ TEACHING ▁= ▁" teaching "; ▁/** ▁* ▁Il ▁nome ▁della ▁tabella ▁che ▁modella ▁l ' associazione ▁molti ▁a ▁molti ▁tra ▁* ▁indirizzi ▁ed ▁insegnamenti . ▁*/ ▁p ublic ▁static ▁final ▁String ▁ TAB LE _ ADDRESS _ TEACHINGS ▁= ▁" address _ has _ teaching "; ▁/** ▁* ▁Il ▁nome ▁della ▁tabella ▁che ▁modella ▁l ' associazione ▁molti ▁a ▁molti ▁tra ▁utenti ▁* ▁e ▁insegnamenti . ▁*/ ▁p ublic ▁static ▁final ▁String ▁ TAB LE _ TEACHER _ CLASSROOM ▁= ▁" teacher _ has _ classroom "; ▁/** ▁* ▁Il ▁c ostruttore ▁della ▁classe . ▁*/ ▁priv ate ▁ManagerTeaching () ▁{ ▁super (); ▁} ▁/** ▁* ▁Ritorna ▁la ▁sola ▁i stanza ▁dell ' insegnamento ▁esistente . ▁* ▁* ▁@ return ▁Ritorna ▁l ' istanza ▁della ▁classe . ▁*/ ▁p ublic ▁static ▁sy nch ron ized ▁ManagerTeaching ▁get Instance () ▁{ ▁if ▁( instance ▁== ▁null ) ▁{ ▁instance ▁= ▁new ▁ManagerTeaching (); ▁} ▁return ▁instance ; ▁} ▁/** ▁* ▁Verifica ▁l ' esistenza ▁di ▁un ▁insegnamento ▁nel ▁database . ▁* ▁* ▁@ param ▁pTeaching ▁* ▁L ' insegnamento ▁da ▁controllare . ▁* ▁@ return ▁Ritorna ▁true ▁se ▁esiste ▁l ' insegnamento ▁passato ▁come ▁parametro , ▁* ▁false ▁altrimenti . ▁* ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Connection Exception ▁*/ ▁p ublic ▁sy nch ron ized ▁boolean ▁exists ( Teaching ▁pTeaching ) ▁throws ▁ Mandatory FieldException , ▁Connection Exception , ▁SQLException ▁{ ▁boolean ▁result ▁= ▁false ; ▁Connection ▁connect ▁= ▁null ; ▁if ▁( pTeaching . getName () ▁== ▁null ) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁il ▁nome . "); ▁try ▁{ ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁String ▁sql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁W HER E ▁name ▁= ▁" ▁+ ▁Utility . is Null ( pTeaching . getName ()); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( tRs . next ()) ▁result ▁= ▁true ; ▁return ▁result ; ▁} ▁finally ▁{ ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Inserisc e ▁un ▁nuovo ▁insegnamento ▁nella ▁tabella ▁teaching . ▁* ▁* ▁@ param ▁pTeaching ▁* ▁L ' insegnamento ▁da ▁inserire . ▁* ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁void ▁insert ( Teaching ▁pTeaching ) ▁throws ▁ Mandatory FieldException , ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁Invalid ValueException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ▁controllo ▁dei ▁campi ▁obbligatori ▁if ▁( pTeaching . getName () ▁== ▁null ) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁il ▁campo ▁nome "); ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Prepar iamo ▁la ▁stringa ▁ Sql ▁String ▁sql ▁= ▁" INSER T ▁I NTO ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁( name ) ▁" ▁+ ▁" VALUES ▁ (" ▁+ ▁Utility . is Null ( pTeaching . getName ()) ▁+ ▁")" ; ▁Utility . execute Operation ( connect , ▁sql ); ▁pTeaching . setId ( Utility . getMax Value (" id _ teaching ", ▁ManagerTeaching . TAB LE _ TEACHING )); ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Aggiorna ▁un ▁insegnamento ▁presente ▁nella ▁tabella ▁teaching . ▁* ▁* ▁@ param ▁pTeaching ▁* ▁L ' insegnamento ▁da ▁modificare ▁* ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁ Mandatory FieldException ▁*/ ▁p ublic ▁sy nch ron ized ▁void ▁update ( Teaching ▁pTeaching ) ▁throws ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁ Mandatory FieldException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁if ▁( pTeaching . getId () ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException ( ▁" Im possibile ▁trova re ▁l ' insegnamento !" ); ▁if ▁( pTeaching . getName () ▁== ▁null ) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁il ▁campo ▁nome "); ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" UP DATE ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁SE T " ▁+ ▁" ▁name ▁= ▁" ▁+ ▁Utility . is Null ( pTeaching . getName ()) ▁+ ▁" ▁W HER E ▁id _ teaching ▁= ▁" ▁+ ▁Utility . is Null ( pTeaching . getId ()); ▁// ▁effettua ▁una ▁nuova ▁connessione ▁e ▁invia ▁la ▁query ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁Utility . execute Operation ( connect , ▁sql ); ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Elimina ▁un ▁insegnamento ▁dall a ▁tabella ▁teaching . ▁* ▁* ▁@ param ▁pTeaching ▁* ▁L ' insegnamento ▁da ▁eliminare . ▁* ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁Invalid ValueException ▁* ▁*/ ▁p ublic ▁sy nch ron ized ▁void ▁delete ( Teaching ▁pTeaching ) ▁throws ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁ Mandatory FieldException , ▁Invalid ValueException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ▁ManagerTeaching . get Instance () . teaching On DeleteC a scade ( pTeaching ); ▁connect ▁= ▁DBConnection . getConnection (); ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" DE LE TE ▁FR OM ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁W HER E ▁id _ teaching ▁= ▁" ▁+ ▁Utility . is Null ( pTeaching . getId ()); ▁Utility . execute Operation ( connect , ▁sql ); ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' id ▁dell ' insegnamento ▁passato ▁come ▁parametro . ▁* ▁* ▁@ param ▁pTeaching ▁* ▁L ' insegnamento ▁di ▁cui ▁si ▁richiede ▁l ' id . ▁* ▁@ return ▁Ritorna ▁l ' id ▁dell ' insegnamento ▁passato ▁come ▁parametro . ▁* ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁*/ ▁p ublic ▁sy nch ron ized ▁int ▁getTeachingId ( Teaching ▁pTeaching ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException ▁{ ▁int ▁result ▁= ▁0; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁if ▁( pTeaching ▁== ▁null ) ▁throw ▁new ▁Entity N otFoundException ( ▁" Im possibile ▁trova re ▁l ' insegnamento !" ); ▁/* ▁* ▁Prepar iamo ▁la ▁stringa ▁SQL ▁per ▁recuperare ▁le ▁informazioni ▁* ▁corrispondent i ▁all ' id ▁dell ' insegnamento ▁passato ▁come ▁parametro . ▁*/ ▁String ▁tSql ▁= ▁" SELECT ▁id _ teaching ▁FR OM ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁W HER E ▁name ▁= ▁" ▁+ ▁Utility . is Null ( pTeaching . getName ()); ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁tSql ); ▁if ▁( tRs . next ()) ▁result ▁= ▁tRs . getInt (" id _ teaching "); ▁return ▁result ; ▁} ▁finally ▁{ ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁il ▁nome ▁dell ' insegnamento ▁corrispondente ▁all ' id ▁passato ▁come ▁* ▁parametro . ▁* ▁* ▁@ param ▁pId ▁* ▁L ' id ▁dell ' insegnamento . ▁* ▁@ return ▁Ritorna ▁una ▁stringa ▁contenente ▁il ▁nome ▁dell ' insegnamento . ▁* ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁*/ ▁p ublic ▁sy nch ron ized ▁String ▁getTeaching Name ById ( int ▁pId ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException ▁{ ▁String ▁result ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ▁Se ▁non ▁e ' ▁stato ▁fornito ▁l ' id ▁restitui amo ▁un ▁codice ▁di ▁errore ▁if ▁( pId ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException ( ▁" Im possibile ▁trova re ▁l ' insegnamento !" ); ▁/* ▁* ▁Prepar iamo ▁la ▁stringa ▁SQL ▁per ▁recuperare ▁le ▁informazioni ▁* ▁corrispondent i ▁all ' id ▁dell ' insegnamento ▁passato ▁come ▁parametro ▁*/ ▁String ▁tSql ▁= ▁" SELECT ▁name ▁FR OM ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁W HER E ▁id _ teaching ▁= ▁" ▁+ ▁Utility . is Null ( pId ); ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁tSql ); ▁if ▁( tRs . next ()) ▁result ▁= ▁tRs . getString (" name "); ▁else ▁throw ▁new ▁Entity N otFoundException ( ▁" Im possibile ▁trova re ▁l ' insegnamento !" ); ▁return ▁result ; ▁} ▁finally ▁{ ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' insegnamento ▁corrispondente ▁all ' id ▁passato ▁come ▁parametro . ▁* ▁* ▁@ param ▁pId ▁* ▁L ' id ▁dell ' insegnamento . ▁* ▁@ return ▁Ritorna ▁l ' insegnamento ▁associato ▁all ' id ▁passato ▁come ▁parametro . ▁* ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁Teaching ▁getTeaching ById ( int ▁pId ) ▁throws ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁Invalid ValueException ▁{ ▁Teaching ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁if ▁( pId ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException ( ▁" Im possibile ▁trova re ▁l ' insegnamento !" ); ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁W HER E ▁id _ teaching ▁= ▁" ▁+ ▁Utility . is Null ( pId ); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁this . loadRecord From Rs ( pRs ); ▁else ▁throw ▁new ▁Entity N otFoundException ( ▁" Im possibile ▁trova re ▁l ' insegnamento !" ); ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' insi eme ▁di ▁tutti ▁gli ▁insegnamenti ▁presenti ▁nel ▁database . ▁* ▁* ▁@ return ▁Ritorna ▁una ▁collection ▁di ▁insegnamenti . ▁* ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁* ▁@ throws ▁Entity N otFoundException ▁*/ ▁p ublic ▁sy nch ron ized ▁Collection < Teaching > ▁ getTeachings () ▁throws ▁Connection Exception , ▁SQLException , ▁Invalid ValueException , ▁Entity N otFoundException ▁{ ▁Collection < Teaching > ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁ ORD ER ▁B Y ▁name "; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁this . loadRecord sFrom Rs ( pRs ); ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' insi eme ▁degli ▁insegnamenti ▁associati ▁all ' utente ▁corrispondente ▁* ▁all ' id ▁passato ▁come ▁ param entro . ▁* ▁* ▁@ param ▁pId ▁* ▁L ' id ▁dell ' utente . ▁* ▁@ return ▁Ritorna ▁una ▁collection ▁di ▁insegnamenti . ▁* ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁Collection < Teaching > ▁getTeachingsBy UserId ( int ▁pId ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException ▁{ ▁Collection < Teaching > ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁if ▁( pId ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" specifica re ▁l ' utente "); ▁try ▁{ ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" SELECT ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" .* ▁FR OM ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHER _ CLASSROOM ▁+ ▁" , ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁W HER E ▁ (" ▁+ ▁ManagerTeaching . TAB LE _ TEACHER _ CLASSROOM ▁+ ▁" . id _ teaching ▁= ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" . id _ teaching ▁ AND ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHER _ CLASSROOM ▁+ ▁" . id _ user ▁= ▁" ▁+ ▁Utility . is Null ( pId ) ▁+ ▁")" ▁+ ▁" ▁ ORD ER ▁B Y ▁name "; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁this . loadRecord sFrom Rs ( pRs ); ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' insi eme ▁degli ▁insegnamenti ▁che ▁il ▁docente ▁insegna ▁nella ▁classe ▁* ▁* ▁@ param ▁pIdTeacher ▁* ▁L ' id ▁dell ' utente . ▁* ▁@ param ▁pIdClass ▁* ▁l ' id ▁della ▁classe ▁* ▁@ return ▁Ritorna ▁una ▁collection ▁di ▁insegnamenti . ▁* ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁Collection < Teaching > ▁getTeachingsBy UserId ClassID ( int ▁pIdTeacher , int ▁pIdClass ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException ▁{ ▁Collection < Teaching > ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁if ▁( pIdTeacher ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" specifica re ▁l ' utente "); ▁if ▁( pIdClass ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" specifica re ▁la ▁classe "); ▁try ▁{ ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" SELECT ▁DIS TIN CT ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" .* ▁FR OM ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHER _ CLASSROOM ▁+ ▁" , ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁W HER E ▁ (" ▁+ ▁ManagerTeaching . TAB LE _ TEACHER _ CLASSROOM ▁+ ▁" . id _ user ▁= ▁" ▁+ ▁Utility . is Null ( pIdTeacher ) ▁+" ▁ AND ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHER _ CLASSROOM ▁+ ▁" . id _ teaching = ▁" ▁+ ▁Utility . is Null ( pIdClass ) ▁+ ▁" ▁ AND ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHER _ CLASSROOM ▁+ ▁" . id _ teaching ▁= ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" . id _ teaching ▁" ▁+ ") ▁ ORD ER ▁B Y ▁name "; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁this . loadRecord sFrom Rs ( pRs ); ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Verifica ▁se ▁un ▁insegnamento ▁ha ▁un ▁p rofessor e ▁assegnato . ▁* ▁* ▁@ param ▁pTeaching ▁* ▁L ' insegnamento ▁da ▁controllare . ▁* ▁@ return ▁Ritorna ▁true ▁se ▁l ' insegnamento ▁ha ▁un ▁p rofessor e ▁assegnato , ▁false ▁* ▁altrimenti . ▁* ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁boolean ▁has Teacher ( Teaching ▁pTeaching ) ▁throws ▁SQLException , ▁Entity N otFoundException , ▁Connection Exception , ▁Invalid ValueException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁boolean ▁result ▁= ▁false ; ▁if ▁( pTeaching . getId () ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" Specifi care ▁l ' insegnamento "); ▁try ▁{ ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Prepar ima o ▁la ▁stringa ▁sql ▁String ▁sql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHER _ CLASSROOM ▁+ ▁" ▁W HER E ▁id _ teaching ▁= ▁" ▁+ ▁Utility . is Null ( pTeaching . getId ()); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁database ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁true ; ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia mo ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' insi eme ▁degli ▁insegnamenti ▁associati ▁alla ▁classe ▁specifica ta ▁* ▁* ▁@ param ▁pId ▁* ▁L ' id ▁della ▁classe . ▁* ▁@ return ▁Ritorna ▁una ▁collection ▁di ▁insegnamenti . ▁* ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁Collection < Teaching > ▁getTeachingsBy Classroom Id ( int ▁pId ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException ▁{ ▁Collection < Teaching > ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁if ▁( pId ▁< ▁0) ▁throw ▁new ▁Entity N otFoundException (" specifica re ▁l ' id ▁della ▁Classe !" ); ▁try ▁{ ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" SELECT ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" .* ▁FR OM ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" , ▁" ▁+ ▁ManagerTeaching . TAB LE _ ADDRESS _ TEACHINGS ▁+ ▁" , ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁W HER E ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" . id _ classroom ▁= ▁" ▁+ ▁Utility . is Null ( pId ) ▁+ ▁" ▁ AND ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" . id _ address ▁= ▁" ▁+ ▁ManagerTeaching . TAB LE _ ADDRESS _ TEACHINGS ▁+ ▁" . id _ address ▁ AND ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" . id _ teaching = ▁" ▁+ ▁ManagerTeaching . TAB LE _ ADDRESS _ TEACHINGS ▁+ ▁" . id _ teaching ▁" ; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁this . loadRecord sFrom Rs ( pRs ); ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' insi eme ▁degli ▁insegnamenti ▁associati ▁alla ▁classe ▁specifica ta ▁* ▁* ▁@ param ▁name ▁* ▁Il ▁nome ▁della ▁classe . ▁* ▁@ return ▁Ritorna ▁una ▁collection ▁di ▁insegnamenti . ▁* ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁Collection < Teaching > ▁getTeachingsBy Classroom Name ( ▁String ▁name ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException ▁{ ▁Collection < Teaching > ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁if ▁( ( name ▁== ▁null ) ▁|| ▁( name ▁== ▁"")) ▁throw ▁new ▁Entity N otFoundException ( ▁" specifica re ▁il ▁nome ▁della ▁Classe !" ); ▁try ▁{ ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" SELECT ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" .* ▁FR OM ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" , ▁" ▁+ ▁ManagerTeaching . TAB LE _ ADDRESS _ TEACHINGS ▁+ ▁" , ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁W HER E ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" . name ▁= ▁" ▁+ ▁Utility . is Null ( name ) ▁+ ▁" ▁ AND ▁" ▁+ ▁ ManagerClassroom . TAB LE _ CLASSROOM ▁+ ▁" . id _ address ▁= ▁" ▁+ ▁ManagerTeaching . TAB LE _ ADDRESS _ TEACHINGS ▁+ ▁" . id _ address ▁ AND ▁" ▁+ ▁ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" . id _ teaching = ▁" ▁+ ▁ManagerTeaching . TAB LE _ ADDRESS _ TEACHINGS ▁+ ▁" . id _ teaching ▁" ; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁this . loadRecord sFrom Rs ( pRs ); ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁p ublic ▁sy nch ron ized ▁Collection < Teaching > ▁getTeachingsBy IdUser IdClassroom ( int ▁pUser , ▁int ▁p Class ) ▁throws ▁SQLException , ▁Entity N otFoundException , ▁Connection Exception , ▁Invalid ValueException ▁{ ▁Collection < Teaching > ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Prepar ima o ▁la ▁stringa ▁sql ▁// select ▁teaching .* ▁from ▁teacher _ has _ classroom ▁ AS ▁ TH C ▁ , ▁teaching ▁whe re ▁th c . id _ user ▁= ▁5 4 ▁// && ▁th c . id _ classroom ▁= ▁64 ▁&& ▁th c . id _ teaching ▁= ▁teaching . id _ teaching ▁String ▁sql ▁= ▁" SELECT ▁DIS TIN CT ▁" ▁+ ManagerTeaching . TAB LE _ TEACHING +".* " ▁+" ▁FR OM ▁" ▁+ ▁ManagerUser . TAB LE _ TEACHER _ CLASSROOM ▁+" ▁ , ▁" ▁+ ManagerTeaching . TAB LE _ TEACHING ▁+ ▁" ▁W HER E ▁" ▁+ ▁ManagerUser . TAB LE _ TEACHER _ CLASSROOM ▁+ ▁" . id _ user ▁= ▁" ▁+ ▁Utility . is Null ( pUser ) ▁+ ▁" ▁ AND ▁" ▁+ ▁ManagerUser . TAB LE _ TEACHER _ CLASSROOM ▁+ ▁" . id _ classroom = ▁" ▁+ ▁Utility . is Null ( pClass ) ▁+ ▁" ▁ AND ▁" ▁+ ▁ManagerUser . TAB LE _ TEACHER _ CLASSROOM ▁+". id _ teaching ▁=" ▁+ ManagerTeaching . TAB LE _ TEACHING ▁+". id _ teaching "; ▁// ▁Inv iamo ▁la ▁Query ▁al ▁database ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁this . loadRecord sFrom Rs ( pRs ); ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Con sente ▁la ▁lettura ▁di ▁un ▁record ▁dal ▁ResultSet . ▁* ▁* ▁@ param ▁pRs ▁* ▁Il ▁risultato ▁della ▁query . ▁* ▁@ return ▁Ritorna ▁l ' insegnamento ▁letto . ▁* ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁priv ate ▁Teaching ▁loadRecord From Rs ( ResultSet ▁pRs ) ▁throws ▁SQLException , ▁Invalid ValueException ▁{ ▁Teaching ▁teaching ▁= ▁new ▁Teaching (); ▁teaching . setName ( pRs . getString ( (" name "))); ▁teaching . setId ( pRs . getInt (" id _ teaching ") ); ▁return ▁teaching ; ▁} ▁/** ▁* ▁Con sente ▁la ▁lettura ▁dei ▁record ▁dal ▁ResultSet . ▁* ▁* ▁@ param ▁pRs ▁* ▁Il ▁risultato ▁della ▁query . ▁* ▁@ return ▁Ritorna ▁la ▁collection ▁di ▁insegnamenti ▁lett i . ▁* ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁priv ate ▁Collection < Teaching > ▁loadRecord sFrom Rs ( ResultSet ▁pRs ) ▁throws ▁SQLException , ▁Invalid ValueException ▁{ ▁Collection < Teaching > ▁result ▁= ▁new ▁Vector < Teaching >(); ▁do ▁{ ▁result . add ( loadRecord From Rs ( pRs )); ▁} ▁while ▁( pRs . next ()); ▁return ▁result ; ▁} ▁}