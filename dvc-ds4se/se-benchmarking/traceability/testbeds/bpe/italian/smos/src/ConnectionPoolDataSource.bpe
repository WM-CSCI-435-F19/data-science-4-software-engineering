▁/* ▁* ▁Connection PoolDataSource ▁* ▁*/ ▁p ackage ▁smos . storage . connect ionManagement ; ▁import ▁smos . storage . connect ionManagement . exception . Not Implemented YetException ; ▁import ▁java . io . PrintWriter ; ▁import ▁java . sql . Connection ; ▁import ▁java . sql . Driver ; ▁import ▁java . sql . DriverManager ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . List ; ▁import ▁java . util . Properties ; ▁import ▁java . util . Vector ; ▁import ▁java x . sql . DataSource ; ▁/** ▁* ▁Re alizzazione ▁del ▁pool ▁di ▁connessioni ▁ tramite ▁l ' implement azione ▁* ▁dell ' interfacc i a ▁java . sql . DataSource . ▁Il ▁pool ▁controlla ▁periodi ca mente ▁le ▁* ▁connessioni ▁attive ▁e ▁quell e ▁che ▁sono ▁pool , ▁ ossi a ▁quell e ▁rilasci ate ▁ma ▁ancora ▁* ▁utilizz abili ▁( presenti ▁c io e ' ▁in ▁memoria ) . ▁Il ▁tempo ▁di ▁rilasci o ▁delle ▁* ▁connessioni ▁attive ▁e ▁di ▁quell e ▁pool ▁ ï¿ 1 ⁄ 2 ▁rappresenta to ▁da ▁due ▁parametri ▁presenti ▁* ▁all ' intern o ▁della ▁classe ▁e ▁che ▁sono ▁connection PoolCloseTimeout ▁e ▁* ▁in activeMaxTimeout ; ▁tal i ▁valor i ▁cos i ▁come ▁tutti ▁gli ▁altri ▁inerent i ▁al ▁pool ▁* ▁h anno ▁un ▁loro ▁valore ▁di ▁default , ▁parametri zza bile ▁ tramite ▁il ▁file ▁di ▁* ▁properties ▁connection . properties ▁*/ ▁p ublic ▁class ▁Connection PoolDataSource ▁implements ▁ DataSource ▁{ ▁/** ▁* ▁Thread ▁inside ▁della ▁classe ▁Connection PoolDataSource ▁che ▁stabili sce ▁ogni ▁* ▁connection PoolCloseTimeout ▁millisecondi ▁il ▁rilasci o ▁delle ▁connessioni ▁* ▁pool . ▁*/ ▁priv ate ▁class ▁ ConnectionCloser ▁ext ends ▁Thread ▁{ ▁priv ate ▁long ▁connection Action Timestamp ▁= ▁0; ▁priv ate ▁int ▁connection PoolCloseTimeout ▁= ▁3 00000 ; ▁priv ate ▁long ▁timeStamp ▁= ▁0; ▁/** ▁* ▁ Costruttore ▁che ▁setta ▁il ▁tempo ▁di ▁rilasci o ▁delle ▁connessioni ▁pool ▁* ▁* ▁@ author ▁Di ▁Gior gio ▁D omen ico , ▁Cri s ▁Ma li nc onico ▁* ▁@ param ▁pTime ▁* ▁interval lo ▁di ▁tempo ▁ entro ▁cui ▁il ▁pool ▁svuota ▁la ▁lista ▁* ▁delle ▁connessioni ▁pool . ▁*/ ▁priv ate ▁ ConnectionCloser ( int ▁pTime ) ▁{ ▁setD a e mon ( true ); ▁ setName (" Connection Pool Close r "); ▁if ▁( p Time ▁ > ▁0) ▁this . connection PoolCloseTimeout ▁= ▁pTime ; ▁} ▁/** ▁* ▁O gni ▁ volta ▁che ▁una ▁connessione ▁genera ▁un ▁event o ▁con ▁un ' invo cazione ▁di ▁* ▁ getConnection () ▁o ▁ release () ▁il ▁time s ta mp ▁viene ▁setta to ▁al ▁valore ▁* ▁temp orale ▁corrente ▁ tramite ▁questo ▁metodo . ▁*/ ▁p ublic ▁void ▁connection Event () ▁{ ▁this . connection Action Timestamp ▁= ▁System . current Time Millis (); ▁} ▁/** ▁* ▁Controlla ▁ogni ▁connection PoolCloseTimeout ▁millisecondi ▁se ▁le ▁* ▁connessioni ▁pool ▁poss ono ▁essere ▁chiuse ▁libera ndo ▁in ▁tal ▁cas o ▁memoria . ▁*/ ▁p ublic ▁void ▁run () ▁{ ▁boolean ▁ working ▁= ▁true ; ▁while ▁( working ) ▁{ ▁try ▁{ ▁this . timeStamp ▁= ▁System . current Time Millis (); ▁Thread . s le ep ( this . connection PoolCloseTimeout ); ▁if ▁( this . connection Action Timestamp ▁< ▁this . timeStamp ) ▁{ ▁closeAll Connections ( Connection PoolDataSource . this . pool ); ▁} ▁} ▁ catch ▁( Interrupt edException ▁e ) ▁{ ▁ working ▁= ▁false ; ▁e . printStackTrace (); ▁} ▁ catch ▁( SQLException ▁e ) ▁{ ▁ working ▁= ▁false ; ▁e . printStackTrace (); ▁} ▁} ▁} ▁} ▁priv ate ▁List < SMOSConnection > ▁active ▁= ▁new ▁Vector < SMOSConnection >(); ▁priv ate ▁Properties ▁config ▁= ▁new ▁Properties (); ▁priv ate ▁ ConnectionCloser ▁ connectionCloser ; ▁priv ate ▁ Driver ▁driver ; ▁priv ate ▁String ▁full ConnectionString ; ▁priv ate ▁long ▁in activeMaxTimeout ▁= ▁2 0000 ; ▁priv ate ▁int ▁maxPoolSize ; ▁priv ate ▁List < Connection > ▁pool ▁= ▁new ▁Vector < Connection >(); ▁/** ▁* ▁Crea ▁una ▁nuova ▁i stanza ▁del ▁pool ▁di ▁connessioni . ▁* ▁* ▁@ param ▁pJdbcDriverName ▁* ▁nome ▁del ▁driver ▁jdbc ▁* ▁@ param ▁pFull ConnectionString ▁* ▁stringa ▁di ▁connessione ▁con ▁il ▁database ▁* ▁@ param ▁pUser ▁* ▁nome ▁utente ▁( amministratore ▁del ▁database ) ▁* ▁@ param ▁pPassword ▁* ▁password ▁amministratore ▁* ▁@ param ▁pMaxPoolSize ▁* ▁massimo ▁numero ▁di ▁connessioni ▁attive ▁nel ▁pool , ▁deve ▁essere ▁* ▁maggiore ▁di ▁0 ▁* ▁@ param ▁pPoolTime ▁* ▁interval lo ▁di ▁tempo ▁ entro ▁il ▁qual e ▁il ▁pool ▁sar ï¿ 1 ⁄ 2 ▁svuota to ▁ogni ▁* ▁ volta ▁delle ▁su e ▁connessioni ▁pool ▁( in ▁ms ) . ▁* ▁@ throws ▁Class N otFoundException ▁* ▁se ▁il ▁driver ▁jdbc ▁non ▁pu ï¿ 1 ⁄ 2 ▁essere ▁trovato ▁* ▁@ throws ▁SQLException ▁* ▁se ▁occorre ▁un ▁problema ▁dura nte ▁la ▁connessione ▁al ▁database ▁* ▁@ throws ▁ Illegal A rgumentException ▁* ▁se ▁i ▁parametri ▁forniti ▁in ▁input ▁non ▁sono ▁validi ▁*/ ▁p ublic ▁Connection PoolDataSource ( String ▁pJdbcDriverName , ▁String ▁pFull ConnectionString , ▁String ▁pUser , ▁String ▁pPassword , ▁int ▁pMaxPoolSize , ▁int ▁pPoolTime ) ▁throws ▁Class N otFoundException , ▁SQLException ▁{ ▁if ▁( pMaxPoolSize ▁< ▁1) ▁{ ▁throw ▁new ▁ Illegal A rgumentException ( ▁" maxPoolSize ▁deve ▁essere ▁ >0 ▁ma ▁ ï¿ 1 ⁄ 2 : ▁" ▁+ ▁pMaxPoolSize ); ▁} ▁if ▁( pFull ConnectionString ▁== ▁null ) ▁{ ▁throw ▁new ▁ Illegal A rgumentException (" full ConnectionString ▁" ▁+ ▁" h a ▁valore ▁ Null "); ▁} ▁if ▁( pUser ▁== ▁null ) ▁{ ▁throw ▁new ▁ Illegal A rgumentException (" il ▁nome ▁utente ▁ha ▁valore ▁ Null "); ▁} ▁this . maxPoolSize ▁= ▁pMaxPoolSize ; ▁this . full ConnectionString ▁= ▁pFull ConnectionString ; ▁this . config . put (" user ", ▁pUser ); ▁if ▁( pPassword ▁ != ▁null ) ▁{ ▁this . config . put (" password ", ▁pPassword ); ▁} ▁Class . forName ( pJdbcDriverName ); ▁this . driver ▁= ▁ DriverManager . get Driver ( pFull ConnectionString ); ▁this . connectionCloser ▁= ▁new ▁ ConnectionCloser ( pPoolTime ); ▁this . connectionCloser . start (); ▁} ▁/** ▁* ▁Re stituisc e ▁la ▁dimensione ▁della ▁lista ▁delle ▁connessioni ▁attive . ▁* ▁* ▁@ return ▁la ▁dimensione ▁della ▁lista ▁delle ▁connessioni ▁attual mente ▁attive . ▁*/ ▁p ublic ▁int ▁activeSize () ▁{ ▁return ▁this . active . size (); ▁} ▁/** ▁* ▁S vuota ▁il ▁pool ▁di ▁connessioni ▁da ▁quell e ▁attive ▁che ▁non ▁h anno ▁pi ï¿ 1 ⁄ 2 ▁eseguito ▁* ▁operazioni ▁per ▁in activeMaxTimeout ▁millisecondi . ▁* ▁*/ ▁p rot ected ▁void ▁clear Active () ▁{ ▁long ▁temp ▁= ▁0; ▁long ▁ TIME ▁= ▁System . current Time Millis (); ▁SMOSConnection ▁adc ▁= ▁null ; ▁for ▁( int ▁count ▁= ▁0; ▁count ▁< ▁this . active . size (); ▁count ++) ▁{ ▁adc ▁= ▁( SMOSConnection ) ▁this . active . get ( count ); ▁temp ▁= ▁ TIME ▁- ▁adc . getLast Time (); ▁if ▁( temp ▁>= ▁this . in activeMaxTimeout ) ▁{ ▁this . release ( adc . getConnection ()); ▁} ▁} ▁} ▁/** ▁* ▁Chiud e ▁tutt e ▁le ▁connessioni ▁del ▁pool ▁sia ▁quell e ▁attive ▁e ▁sia ▁quell e ▁che ▁* ▁sono ▁pool . ▁* ▁* ▁@ author ▁Di ▁Gior gio ▁D omen ico , ▁Cri s ▁Ma li nc onico ▁* ▁@ throws ▁SQLException ▁*/ ▁p ublic ▁sy nch ron ized ▁void ▁closeAll Connections () ▁throws ▁SQLException ▁{ ▁closeAll Connections ( this . pool ); ▁closeAll Connections ( this . active ); ▁} ▁/** ▁* ▁Chiud e ▁tutt e ▁le ▁connessioni ▁indicate ▁nella ▁lista ▁connection . ▁* ▁* ▁@ author ▁Di ▁Gior gio ▁D omen ico , ▁Cri s ▁Ma li nc onico ▁* ▁@ param ▁pConnections ▁* ▁la ▁lista ▁delle ▁conne sioni ▁che ▁devo no ▁essere ▁chiuse . ▁* ▁@ throws ▁SQLException ▁* ▁qual ora ▁sia ▁im possibile ▁chiudere ▁una ▁connessione . ▁*/ ▁priv ate ▁sy nch ron ized ▁void ▁closeAll Connections ( List ▁pConnections ) ▁throws ▁SQLException ▁{ ▁while ▁( pConnection s . size () ▁ > ▁0) ▁{ ▁Connection Wrapper ▁conn ▁= ▁( Connection Wrapper ) ▁pConnections . remove (0) ; ▁conn . close Wrappe dConnection (); ▁} ▁} ▁/** ▁* ▁Chiud e ▁tutt e ▁le ▁connessioni ▁del ▁pool ▁che ▁sono ▁nella ▁lista ▁pool . ▁* ▁* ▁@ throws ▁SQLException ▁* ▁qual ora ▁sia ▁im possibile ▁chiudere ▁una ▁connessione . ▁*/ ▁p ublic ▁sy nch ron ized ▁void ▁closeAll PooledConnection s () ▁throws ▁SQLException ▁{ ▁closeAll Connections ( this . pool ); ▁} ▁/** ▁* ▁M etodo ▁utilizzat o ▁da ▁ getConnection () ▁per ▁crea re ▁una ▁nuova ▁connessione ▁* ▁qual ora ▁nella ▁lista ▁delle ▁pool ▁non ▁sia no ▁presenti . ▁* ▁* ▁@ return ▁una ▁nuova ▁connessione ▁al ▁DataBase . ▁*/ ▁priv ate ▁sy nch ron ized ▁Connection ▁create New Connection () ▁{ ▁Connection ▁ rawConn ▁= ▁null ; ▁try ▁{ ▁ rawConn ▁= ▁this . driver . connect ( this . full ConnectionString , ▁this . config ); ▁Connection ▁conn ▁= ▁new ▁Connection Wrapper ( rawConn , ▁this ); ▁SMOSConnection ▁ac ▁= ▁new ▁SMOSConnection (); ▁ac . set Connection ( conn ); ▁ac . setLast Time ( System . current Time Millis ()); ▁this . active . add ( ac ); ▁return ▁conn ; ▁} ▁ catch ▁( SQLException ▁e ) ▁{ ▁System . out . println (" Cre azione ▁della ▁connessione ▁fall ita ▁" ▁+ ▁" in ▁Connection PoolDataSource :" ▁+ ▁e ); ▁return ▁null ; ▁} ▁} ▁/** ▁* ▁Re stituisc e ▁una ▁connessione ▁se ▁il ▁pool ▁non ▁ ï¿ 1 ⁄ 2 ▁pien o , ▁il ▁controllo ▁avvi ene ▁* ▁prima ▁nella ▁lista ▁delle ▁connessioni ▁pool ▁per ▁ev itare ▁delle ▁cre azioni ▁* ▁in util i ▁altrimenti ▁una ▁nuova ▁connessione ▁sar ï¿ 1 ⁄ 2 ▁crea ta . ▁* ▁* ▁@ return ▁la ▁connessione ▁al ▁database ▁qual ora ▁fosse ▁possibile ▁altrimenti ▁* ▁un ' eccezione ▁viene ▁generata ▁* ▁@ see ▁java x . sql . DataSource ▁ getConnection () ▁* ▁@ throws ▁SQLException ▁* ▁Se ▁un ▁problema ▁occorre ▁dura nte ▁la ▁connessione ▁al ▁database ▁* ▁in cl us o ▁il ▁fatt o ▁che ▁il ▁limit e ▁massimo ▁delle ▁connessioni ▁* ▁attive ▁veng a ▁raggiunto . ▁*/ ▁p ublic ▁sy nch ron ized ▁Connection ▁ getConnection () ▁throws ▁SQLException ▁{ ▁Connection ▁connection ▁= ▁get PooledConnection (0) ; ▁if ▁( connection ▁== ▁null ) ▁{ ▁if ▁( this . active . size () ▁>= ▁this . maxPoolSize ) ▁{ ▁throw ▁new ▁SQLException (" Connection ▁pool ▁limit ▁of ▁" ▁+ ▁this . maxPoolSize ▁+ ▁" ▁exceeded "); ▁} ▁else ▁{ ▁connection ▁= ▁create New Connection (); ▁} ▁} ▁this . connectionCloser . connection Event (); ▁// System . out . println (" GE T ▁ CONNE CTION : ▁" ▁+ ▁active . size () ▁+ ▁"/ " ▁+ ▁pool . size ()); ▁return ▁connection ; ▁} ▁/** ▁* ▁M etodo ▁non ▁implement ato ▁* ▁@ param ▁pArg 1 ▁* ▁@ param ▁pArg 2 ▁* ▁@ return ▁Connection ▁* ▁@ throws ▁SQLException ▁* ▁* ▁@ throws ▁Not Implemented YetException ▁*/ ▁p ublic ▁Connection ▁ getConnection ( String ▁pArg 1, ▁String ▁pArg 2) ▁throws ▁SQLException ▁{ ▁throw ▁new ▁Not Implemented YetException (); ▁} ▁/** ▁* ▁M etodo ▁non ▁implement ato ▁* ▁@ return ▁int ▁* ▁@ throws ▁SQLException ▁* ▁* ▁@ throws ▁Not Implemented YetException ▁*/ ▁p ublic ▁int ▁getLogin Timeout () ▁throws ▁SQLException ▁{ ▁throw ▁new ▁Not Implemented YetException (); ▁} ▁/** ▁* ▁M etodo ▁non ▁implement ato ▁* ▁@ return ▁PrintWriter ▁* ▁@ throws ▁SQLException ▁* ▁* ▁@ throws ▁Not Implemented YetException ▁*/ ▁p ublic ▁PrintWriter ▁get L o g Writer () ▁throws ▁SQLException ▁{ ▁throw ▁new ▁Not Implemented YetException (); ▁} ▁/** ▁* ▁Re stituisc e ▁il ▁numero ▁massimo ▁di ▁connessioni ▁attive ▁* ▁* ▁@ return ▁il ▁numero ▁massimo ▁di ▁connessioni ▁attive . ▁*/ ▁p ublic ▁int ▁get MaxPoolSize () ▁{ ▁return ▁this . maxPoolSize ; ▁} ▁/** ▁* ▁M etodo ▁utilizzat o ▁da ▁ getConnection () ▁per ▁stabili re ▁se ▁nella ▁lista ▁delle ▁* ▁connessioni ▁pool ▁ve ▁ne ▁sia ▁qualcun a ▁da ▁poter ▁riutilizza re . ▁* ▁* ▁@ param ▁pPoolIndex ▁* ▁indice ▁della ▁lista ▁delle ▁connessioni ▁pool ▁( s emp re ▁0) . ▁* ▁@ return ▁una ▁con ness sione ▁dall a ▁lista ▁di ▁quell e ▁pool ▁qual ora ▁ne ▁esista ▁* ▁una . ▁*/ ▁priv ate ▁sy nch ron ized ▁Connection ▁get PooledConnection ( int ▁pPoolIndex ) ▁{ ▁SMOSConnection ▁ac ▁= ▁new ▁SMOSConnection (); ▁Connection ▁connection ▁= ▁null ; ▁if ▁( this . pool . size () ▁ > ▁0) ▁{ ▁connection ▁= ▁( Connection ) ▁this . pool . remove ( pPoolIndex ); ▁ac . set Connection ( connection ); ▁ac . setLast Time ( System . current Time Millis ()); ▁this . active . add ( ac ); ▁} ▁return ▁ac . getConnection (); ▁} ▁/** ▁* ▁Re stituisc e ▁la ▁dimensione ▁della ▁lista ▁delle ▁connessioni ▁pool ▁* ▁* ▁@ return ▁la ▁dimensione ▁della ▁lista ▁delle ▁connessioni ▁pool . ▁*/ ▁p ublic ▁int ▁poolSize () ▁{ ▁return ▁this . pool . size (); ▁} ▁/** ▁* ▁Rilascia ▁una ▁connessione , ▁elimina ndo la ▁da ▁quell e ▁attive ▁ed ▁inserendo la ▁in ▁* ▁quell e ▁pool ▁per ▁poter ▁essere ▁successiv amente ▁riutilizza ta . ▁* ▁* ▁@ param ▁pConnection ▁* ▁La ▁connessione ▁che ▁deve ▁essere ▁ritorna ta ▁al ▁pool . ▁*/ ▁p ublic ▁sy nch ron ized ▁void ▁ release ( Connection ▁pConnection ) ▁{ ▁boolean ▁exists ▁= ▁false ; ▁int ▁activeIndex ▁= ▁0; ▁if ▁( pConnection ▁ != ▁null ) ▁{ ▁SMOSConnection ▁adc ▁= ▁null ; ▁while ▁( ( activeIndex ▁< ▁this . active . size ()) ▁&& ▁(! exists )) ▁{ ▁adc ▁= ▁( SMOSConnection ) ▁this . active . get ( activeIndex ); ▁if ▁( adc . equals ( pConnection )) ▁{ ▁this . active . remove ( adc ); ▁this . pool . add ( adc . getConnection ()); ▁exists ▁= ▁true ; ▁} ▁activeIndex ++ ; ▁} ▁this . connectionCloser . connection Event (); ▁// System . out . println (" RE LE ASE ▁ CONNE CTION : ▁" ▁+ ▁active . size () ▁+ ▁"/ " ▁+ ▁pool . size ()); ▁} ▁} ▁/** ▁* ▁Set ta ▁il ▁tempo ▁di ▁vi ta ▁delle ▁connessioni ▁attive ▁in ▁millisecondi . ▁* ▁* ▁@ param ▁pTimeOut ▁* ▁tempo ▁di ▁vi ta ▁della ▁connessione . ▁*/ ▁p ublic ▁void ▁ setActive d Timeout ( long ▁pTimeOut ) ▁{ ▁if ▁( pTimeOut ▁ > ▁0) ▁{ ▁this . in activeMaxTimeout ▁= ▁pTimeOut ; ▁} ▁} ▁/** ▁* ▁Ri azzera ▁il ▁tempo ▁di ▁vi ta ▁della ▁connessione ▁dovuto call ' esecuzione ▁di ▁* ▁un ' operazione . Da ▁questo ▁momento ▁la ▁connessione ▁potr ï¿ 1 ⁄ 2 ▁essere ▁attiva ▁senza ▁* ▁e se gui re ▁alcun a ▁ operazione ▁per ▁altri ▁in activeMaxTimeout ▁millisecondi . ▁* ▁* ▁@ param ▁pConnection ▁* ▁la ▁connessione ▁che ▁ha ▁eseguito ▁un ' operazione ▁e ▁qu indi ▁pu ï¿ 1 ⁄ 2 ▁* ▁rimane re ▁attiva . ▁*/ ▁void ▁ setLast Time ( Connection ▁pConnection ) ▁{ ▁boolean ▁exists ▁= ▁false ; ▁int ▁count ▁= ▁0; ▁SMOSConnection ▁adc ▁= ▁null ; ▁while ▁( ( count ▁< ▁this . active . size ()) ▁&& ▁(! exists )) ▁{ ▁adc ▁= ▁( SMOSConnection ) ▁this . active . get ( count ); ▁count ++ ; ▁if ▁( adc . equals ( pConnection )) ▁{ ▁adc . setLast Time ( System . current Time Millis ()); ▁exists ▁= ▁true ; ▁} ▁} ▁} ▁/** ▁* ▁M etodo ▁non ▁implement ato ▁* ▁@ param ▁pArg 0 ▁* ▁@ throws ▁SQLException ▁* ▁* ▁@ throws ▁Not Implemented YetException ▁*/ ▁p ublic ▁void ▁setLogin Timeout ( int ▁pArg 0) ▁throws ▁SQLException ▁{ ▁throw ▁new ▁Not Implemented YetException (); ▁} ▁/** ▁* ▁M etodo ▁non ▁implement ato ▁* ▁@ param ▁pArg 0 ▁* ▁@ throws ▁SQLException ▁* ▁* ▁@ throws ▁Not Implemented YetException ▁*/ ▁p ublic ▁void ▁set L o g Writer ( PrintWriter ▁pArg 0) ▁throws ▁SQLException ▁{ ▁throw ▁new ▁Not Implemented YetException (); ▁} ▁/** ▁* ▁Convert e ▁un ▁oggetto ▁della ▁classe ▁Connection PoolDataSource ▁in ▁String ▁* ▁* ▁@ return ▁la ▁rappresenta zione ▁nel ▁tipo ▁String ▁del ▁pool ▁di ▁connessioni . ▁*/ ▁p ublic ▁String ▁toString () ▁{ ▁StringBuffer ▁buf ▁= ▁new ▁StringBuffer (); ▁buf . appen d (" [ "); ▁buf . appen d (" maxPoolSize =") . appen d ( this . maxPoolSize ); ▁buf . appen d (" , ▁activeSize =") . appen d ( activeSize ()); ▁buf . appen d (" , ▁poolSize =") . appen d ( poolSize ()); ▁buf . appen d (" , ▁full ConnectionString =") . appen d ( this . full ConnectionString ); ▁buf . appen d (" ] "); ▁return ▁( buf . toString ()); ▁} ▁}