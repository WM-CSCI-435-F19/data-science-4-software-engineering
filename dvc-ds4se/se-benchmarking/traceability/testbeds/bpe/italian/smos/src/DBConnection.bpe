▁/* ▁* ▁DBConnection ▁* ▁*/ ▁p ackage ▁smos . storage . connect ionManagement ; ▁import ▁smos . Environment ; ▁import ▁smos . utility . Utility ; ▁import ▁java . sql .* ; ▁import ▁java . util .* ; ▁import ▁java . io .* ; ▁/** ▁* ▁Classe ▁che ▁s ' interfacc i a ▁con ▁il ▁pool ▁di ▁connessioni . ▁In ▁particolare ▁crea ▁un ▁* ▁unico ▁oggetto ▁Connection PoolDataSource ▁( il ▁pool ▁di ▁connessioni ) ▁ed ▁ ott iene ▁i ▁* ▁suo i ▁parametri ▁di ▁configurazione ▁dal ▁file ▁di ▁properties ▁* ▁connection . properties . ▁*/ ▁p ublic ▁class ▁DBConnection ▁{ ▁priv ate ▁static ▁int ▁ACTIVE _ TIMEOUT ; ▁priv ate ▁static ▁String ▁D RI VER _ MYSQL ▁= ▁" "; ▁priv ate ▁static ▁String ▁F ULL _ PATH _ DATABASE ▁= ▁" "; ▁priv ate ▁static ▁Control Connection ▁linker ▁= ▁null ; ▁priv ate ▁static ▁Connection PoolDataSource ▁manager ▁= ▁null ; ▁priv ate ▁static ▁int ▁MA X _ PO OL _ SIZE ; ▁priv ate ▁static ▁String ▁PASSWORD ▁= ▁" "; ▁priv ate ▁static ▁int ▁PO OL _ TIMEOUT ; ▁priv ate ▁static ▁Properties ▁properties ▁= ▁null ; ▁priv ate ▁static ▁String ▁U SER _ NAME ▁= ▁" "; ▁priv ate ▁static ▁int ▁WA IT _ TIMEOUT ; ▁/** ▁* ▁ Blocco ▁d ' inizializza zione ▁static o ▁che ▁si ▁occupa ▁di ▁genera re ▁il ▁pool ▁nel ▁* ▁momento ▁in ▁cui ▁ci ▁sar à ▁una ▁prima ▁ invo cazione ▁del ▁metodo ▁ getConnection () ▁*/ ▁static ▁{ ▁try ▁{ ▁properties ▁= ▁new ▁Properties (); ▁File ▁ fileProp ▁= ▁new ▁File ( Environment . getP o olPropertiesPath ()); ▁if ▁( fileProp . exists ()) ▁{ ▁properties . load ( new ▁FileInputStream ( fileProp )); ▁D RI VER _ MYSQL ▁= ▁properties . get Property (" connection . jdbc . name "); ▁if ▁( D RI VER _ MYSQL . equals ("")) ▁{ ▁D RI VER _ MYSQL ▁= ▁Utility . get DriverMySql (); ▁} ▁F ULL _ PATH _ DATABASE ▁= ▁properties ▁ . get Property (" connection . jdbc . full Path "); ▁if ▁( F ULL _ PATH _ DATABASE . equals ("")) ▁{ ▁F ULL _ PATH _ DATABASE ▁= ▁Utility . get FullPathDatabase (); ▁} ▁U SER _ NAME ▁= ▁properties . get Property (" connection . username "); ▁if ▁( U SER _ NAME . equals ("")) ▁{ ▁U SER _ NAME ▁= ▁Utility . get UserName (); ▁} ▁PASSWORD ▁= ▁properties . get Property (" connection . password "); ▁if ▁( PASSWORD . equals ("")) ▁{ ▁PASSWORD ▁= ▁Utility . getPassword (); ▁} ▁try ▁{ ▁MA X _ PO OL _ SIZE ▁= ▁Integer . parse Int ( properties ▁ . get Property (" connection . maxPoolSize ") ); ▁} ▁ catch ▁( Exception ▁ex ) ▁{ ▁MA X _ PO OL _ SIZE ▁= ▁Utility . get MaxPoolSize (); ▁} ▁try ▁{ ▁WA IT _ TIMEOUT ▁= ▁Integer . parse Int ( properties ▁ . get Property (" connection . waitTimeout ") ); ▁} ▁ catch ▁( Exception ▁ex ) ▁{ ▁WA IT _ TIMEOUT ▁= ▁Utility . get WaitTimeout (); ▁} ▁try ▁{ ▁ACTIVE _ TIMEOUT ▁= ▁Integer . parse Int ( properties ▁ . get Property (" connection . activeTimeout ") ); ▁} ▁ catch ▁( Exception ▁ex ) ▁{ ▁ACTIVE _ TIMEOUT ▁= ▁Utility . get ActiveTimeout (); ▁} ▁try ▁{ ▁PO OL _ TIMEOUT ▁= ▁Integer . parse Int ( properties ▁ . get Property (" connection . poolTimeout ") ); ▁} ▁ catch ▁( Exception ▁ex ) ▁{ ▁PO OL _ TIMEOUT ▁= ▁Utility . get PoolTimeout (); ▁} ▁} ▁else ▁{ ▁/* ▁Se ▁il ▁file ▁di ▁properties ▁non ▁esiste ▁carica ▁valor i ▁di ▁default ▁*/ ▁D RI VER _ MYSQL ▁= ▁Utility . get DriverMySql (); ▁F ULL _ PATH _ DATABASE ▁= ▁Utility . get FullPathDatabase (); ▁U SER _ NAME ▁= ▁Utility . get UserName (); ▁PASSWORD ▁= ▁Utility . getPassword (); ▁MA X _ PO OL _ SIZE ▁= ▁Utility . get MaxPoolSize (); ▁WA IT _ TIMEOUT ▁= ▁Utility . get WaitTimeout (); ▁ACTIVE _ TIMEOUT ▁= ▁Utility . get ActiveTimeout (); ▁PO OL _ TIMEOUT ▁= ▁Utility . get PoolTimeout (); ▁} ▁load Pool (); ▁// ▁Crea ▁il ▁manager ▁e ▁prepar a ▁il ▁pool ▁di ▁connessioni ▁} ▁ catch ▁( Exception ▁e ) ▁{ ▁/* ▁Se ▁un ' eccezione ▁viene ▁generata ▁in ▁preceden za ▁*/ ▁D RI VER _ MYSQL ▁= ▁Utility . get DriverMySql (); ▁F ULL _ PATH _ DATABASE ▁= ▁Utility . get FullPathDatabase (); ▁U SER _ NAME ▁= ▁Utility . get UserName (); ▁PASSWORD ▁= ▁Utility . getPassword (); ▁MA X _ PO OL _ SIZE ▁= ▁100; ▁WA IT _ TIMEOUT ▁= ▁200 0; ▁ACTIVE _ TIMEOUT ▁= ▁ 24 0000 ; ▁PO OL _ TIMEOUT ▁= ▁3 00000 ; ▁load Pool (); ▁// ▁Crea ▁il ▁manager ▁e ▁prepar a ▁il ▁pool ▁di ▁connessioni ▁} ▁} ▁/** ▁* ▁Re stituisc e ▁una ▁connessione ▁dal ▁pool . ▁* ▁* ▁@ return ▁la ▁connessione ▁se ▁possibile ▁null ▁altrimenti ▁*/ ▁p ublic ▁static ▁Connection ▁ getConnection () ▁{ ▁try ▁{ ▁return ▁manager . getConnection (); ▁} ▁ catch ▁( SQLException ▁e ) ▁{ ▁System . out . println (" E ccezione ▁generata " ▁+ ▁" in ▁DBConnection . getConnection () ▁" ▁+ ▁e ); ▁return ▁null ; ▁} ▁} ▁/** ▁* ▁Crea zione ▁ effettiva ▁del ▁pool ▁di ▁connessione . ▁* ▁*/ ▁priv ate ▁static ▁void ▁load Pool () ▁{ ▁try ▁{ ▁manager ▁= ▁new ▁Connection PoolDataSource ( D RI VER _ MYSQL , ▁F ULL _ PATH _ DATABASE , ▁U SER _ NAME , ▁PASSWORD , ▁MA X _ PO OL _ SIZE , ▁PO OL _ TIMEOUT ); ▁manager . setActive d Timeout ( ACTIVE _ TIMEOUT ); ▁linker ▁= ▁new ▁Control Connection ( manager , ▁WA IT _ TIMEOUT ); ▁linker . start (); ▁} ▁ catch ▁( Exception ▁e ) ▁{ ▁System . out . println (" Im possibile ▁crea re ▁il ▁pool " ▁+ ▁" di ▁connessioni ▁in ▁DBConnection :" ▁+ ▁e ); ▁} ▁} ▁/** ▁* ▁Re stituisc e ▁una ▁connessione ▁al ▁pool ▁che ▁sar à ▁inserita ▁nella ▁lista ▁delle ▁* ▁conne sioni ▁pool , ▁ ossi a ▁quell e ▁riutilizza bili ▁in ▁se gui to . ▁* ▁* ▁@ param ▁pConnection ▁* ▁la ▁connessione ▁non ▁pi ù ▁attiva . ▁*/ ▁p ublic ▁static ▁void ▁ release Connection ( Connection ▁pConnection ) ▁{ ▁manager . release ( pConnection ); ▁} ▁}