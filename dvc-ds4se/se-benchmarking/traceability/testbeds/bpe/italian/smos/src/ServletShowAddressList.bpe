▁p ackage ▁smos . application . a ddressManagement ; ▁import ▁java . io . IOException ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Collection ; ▁import ▁smos . Environment ; ▁import ▁smos . bean . Address ; ▁import ▁smos . bean . User ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . storage . ManagerAddress ; ▁import ▁smos . storage . ManagerUser ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁java x . s ervlet . http . HttpServlet ; ▁import ▁java x . s ervlet . http . HttpServlet Request ; ▁import ▁java x . s ervlet . http . HttpServlet Response ; ▁import ▁java x . s ervlet . http . HttpSession ; ▁/** ▁* ▁Servlet ▁ utilizzata ▁per ▁visualizzare ▁tutti ▁gli ▁indirizzi . ▁* ▁* ▁@ author ▁ Vecchi one ▁Giuseppe ▁* ▁*/ ▁p ublic ▁class ▁ServletShow AddressList ▁ext ends ▁HttpServlet ▁{ ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁8 7979 1 2020 763 9 35 35 3 L ; ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doGet ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doGet ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ){ ▁String ▁errorMessage =" "; ▁String ▁gotoPage ="./ persist e ntDataManagement / a ddressManagement / showAddressList . jsp "; ▁ HttpSession ▁session = pRequest . get Session (); ▁Collection < Address > ▁addressList = null ; ▁ManagerUser ▁managerUser = ▁ManagerUser . get Instance (); ▁ManagerAddress ▁managerAddress = ▁ManagerAddress . get Instance (); ▁User ▁loggedUser ▁= ▁( User ) session . get Attribute (" loggedUser "); ▁try ▁{ ▁if ( loggedUser == null ){ ▁pResponse . se ndRe direct ( "./ index . htm "); ▁return ; ▁} ▁if (! managerUser . isAdministrator ( loggedUser )){ ▁errorMessage =" L ' ▁utente ▁collegat o ▁non ▁ha ▁accesso ▁alla ▁funzionalit a '! "; ▁gotoPage ="./ error . jsp "; ▁} ▁addressList = managerAddress . get AddressList (); ▁session . set Attribute (" addressList ", ▁addressList ); ▁pResponse . se ndRe direct ( gotoPage ); ▁return ; ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁ catch ▁( SQLException ▁sqlException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁sqlException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁sqlException . printStackTrace (); ▁} ▁ catch ▁( Entity N otFoundException ▁entit yN otFoundException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁entit yN otFoundException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁entit yN otFoundException . printStackTrace (); ▁} ▁ catch ▁( Connection Exception ▁connection Exception ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁connection Exception . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁connection Exception . printStackTrace (); ▁} ▁ catch ▁( Invalid ValueException ▁invalid ValueException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁invalid ValueException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁invalid ValueException . printStackTrace (); ▁} ▁pRequest . get Session () . set Attribute (" errorMessage ", errorMessage ); ▁try ▁{ ▁pResponse . se ndRe direct ( gotoPage ); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁} ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doPost ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doPost ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁this . doGet ( pRequest , ▁pResponse ); ▁} ▁}