▁p ackage ▁smos . application . userManagement ; ▁import ▁smos . Environment ; ▁import ▁smos . bean . User ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . storage . ManagerUser ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁smos . utility . Utility ; ▁import ▁java . io . IOException ; ▁import ▁java . sql . SQLException ; ▁import ▁java x . s ervlet . http . HttpServlet ; ▁import ▁java x . s ervlet . http . HttpServlet Request ; ▁import ▁java x . s ervlet . http . HttpServlet Response ; ▁import ▁java x . s ervlet . http . HttpSession ; ▁/** ▁* ▁Servlet ▁ utilizzata ▁per ▁visualizzare ▁il ▁form ▁di ▁gestione ▁* ▁dei ▁ruoli ▁degli ▁utenti . ▁* ▁* ▁@ author ▁Napoli ta no ▁Vincen zo . ▁* ▁*/ ▁p ublic ▁class ▁ServletShowUser Role Form ▁ext ends ▁HttpServlet ▁{ ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁- 22 10 76 1 17 5 4 35 1 3733 1 L ; ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doGet ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doGet ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁String ▁gotoPage ▁= ▁"./ persist e ntDataManagement / userManagement / user Role z . jsp "; ▁String ▁errorMessage ▁= ▁" "; ▁ HttpSession ▁session ▁= ▁pRequest . get Session (); ▁boolean ▁ isTeacherBoolean ▁= ▁false ; ▁boolean ▁ isAdministrator Boolean ▁= ▁false ; ▁boolean ▁isParentBoolean ▁= ▁false ; ▁boolean ▁ isStudentBoolean ▁= ▁false ; ▁boolean ▁ isAtaBoolean ▁= ▁false ; ▁boolean ▁i sDirectorBoolean ▁= ▁false ; ▁int ▁isTeacher ▁= ▁0; ▁int ▁ isAdministrator ▁= ▁0; ▁int ▁isDirector ▁= ▁0; ▁int ▁isParent ▁= ▁0; ▁int ▁isStudent ▁= ▁0; ▁int ▁isAta ▁= ▁0; ▁User ▁user ▁= ▁null ; ▁ManagerUser ▁managerUser ▁= ▁ManagerUser . get Instance (); ▁User ▁loggedUser ▁= ▁( User ) ▁session . get Attribute (" loggedUser "); ▁try ▁{ ▁if ▁( loggedUser ▁== ▁null ) ▁{ ▁pResponse . se ndRe direct ( "./ index . htm "); ▁return ; ▁} ▁if ▁((! managerUser . isAdministrator ( loggedUser ))) ▁{ ▁errorMessage ▁= ▁" L ' Utente ▁collegat o ▁non ▁ha ▁accesso ▁alla ▁" ▁+ ▁" funzionalit a '! "; ▁gotoPage ▁= ▁"./ error . jsp "; ▁} ▁user ▁= ▁( User ) ▁session . get Attribute (" user "); ▁// prepar iamo ▁i ▁valor i ▁da ▁passa re ▁alla ▁ jsp ▁ isTeacherBoolean ▁= ▁managerUser . isTeacher ( user ); ▁ isAdministrator Boolean ▁= ▁managerUser . isAdministrator ( user ); ▁ isAtaBoolean ▁= ▁managerUser . is AtaPeople ( user ); ▁i sDirectorBoolean = ▁managerUser . isDirector ( user ); ▁ isStudentBoolean = ▁managerUser . isStudent ( user ); ▁isParentBoolean = ▁managerUser . isParent ( user ); ▁isTeacher ▁= ▁Utility . Boolean To Int ( isTeacherBoolean ); ▁isDirector ▁= ▁Utility . Boolean To Int ( i sDirectorBoolean ); ▁ isAdministrator ▁= ▁Utility . Boolean To Int ( isAdministrator Boolean ); ▁isAta ▁= ▁Utility . Boolean To Int ( isAtaBoolean ); ▁isStudent ▁= ▁Utility . Boolean To Int ( isStudentBoolean ); ▁isParent ▁= ▁Utility . Boolean To Int ( isParentBoolean ); ▁gotoPage ▁= ▁"./ persist e ntDataManagement / userManagement / user Role z . jsp ? isTeacher ="+ isTeacher +"& is Admin ="+ isAdministrator +"& isAta ="+ isAta ▁ +"& isStudent ="+ isStudent +"& isParent ="+ isParent +"& isDirector ="+ isDirector ; ▁pResponse . se ndRe direct ( gotoPage ); ▁return ; ▁} ▁ catch ▁( SQLException ▁sqlException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁sqlException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁sqlException . printStackTrace (); ▁} ▁ catch ▁( Entity N otFoundException ▁entit yN otFoundException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁entit yN otFoundException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁entit yN otFoundException . printStackTrace (); ▁} ▁ catch ▁( Connection Exception ▁connection Exception ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁connection Exception . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁connection Exception . printStackTrace (); ▁} catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁ catch ▁( Invalid ValueException ▁invalid ValueException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁invalid ValueException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁invalid ValueException . printStackTrace (); ▁} ▁pRequest . get Session () . set Attribute (" errorMessage ", ▁errorMessage ); ▁try ▁{ ▁pResponse . se ndRe direct ( gotoPage ); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁} ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doPost ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doPost ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁this . doGet ( pRequest , ▁pResponse ); ▁} ▁}