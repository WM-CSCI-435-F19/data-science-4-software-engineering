▁p ackage ▁smos . storage ; ▁import ▁smos . bean . Address ; ▁import ▁smos . bean . Teaching ; ▁import ▁smos . exception . Duplicate dEntityException ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . exception . Mandatory FieldException ; ▁import ▁smos . storage . connect ionManagement . DBConnection ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁smos . utility . Utility ; ▁import ▁java . sql . ResultSet ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Collection ; ▁import ▁java . util . Vector ; ▁import ▁java . sql . Connection ; ▁/** ▁* ▁* ▁Classe ▁manager ▁degli ▁indirizzi ▁* ▁*/ ▁p ublic ▁class ▁ManagerAddress ▁{ ▁priv ate ▁static ▁ManagerAddress ▁instance ; ▁/** ▁* ▁Il ▁nome ▁della ▁tabella ▁degli ▁indirizzi ▁*/ ▁p ublic ▁static ▁final ▁String ▁ TAB LE _ ADDRESS ▁= ▁" address "; ▁p ublic ▁static ▁final ▁String ▁ TAB LE _ ADDRESS _ HA S _ TEACHING ▁= ▁" address _ has _ teaching "; ▁priv ate ▁ManagerAddress () ▁{ ▁super (); ▁} ▁/** ▁* ▁Ritorna ▁la ▁sola ▁i stanza ▁della ▁classe ▁esistente . ▁* ▁* ▁@ return ▁Ritorna ▁l ' istanza ▁della ▁classe . ▁*/ ▁p ublic ▁static ▁sy nch ron ized ▁ManagerAddress ▁get Instance ( ){ ▁if ( instance == null ){ ▁instance ▁= ▁new ▁ManagerAddress (); ▁} ▁return ▁instance ; ▁} ▁/** ▁* ▁Verifica ▁l ' esistenza ▁di ▁un ▁indirizzo ▁nel ▁database . ▁* ▁* ▁@ param ▁pAddress ▁* ▁L ' indirizzo ▁da ▁controllare . ▁* ▁@ return ▁Ritorna ▁true ▁se ▁esiste ▁gi à ▁l ' indirizzo ▁passato ▁come ▁parametro , ▁* ▁false ▁altrimenti . ▁* ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁*/ ▁p ublic ▁sy nch ron ized ▁boolean ▁has Teaching ( Teaching ▁pTeaching , ▁Address ▁pAddress ) ▁throws ▁SQLException , ▁Entity N otFoundException , ▁Connection Exception , ▁Invalid ValueException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁boolean ▁result ▁= ▁false ; ▁if ▁( pTeaching . getId () ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" Specifi care ▁l ' insegnamento "); ▁try ▁{ ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Prepar ima o ▁la ▁stringa ▁sql ▁String ▁sql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ManagerTeaching . TAB LE _ ADDRESS _ TEACHINGS ▁+ ▁" ▁W HER E ▁id _ teaching ▁= ▁" ▁+ ▁Utility . is Null ( pTeaching . getId ()) ▁+" ▁ AND ▁id _ address ▁= ▁" ▁+ ▁Utility . is Null ( pAddress . get IdAddress ()); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁database ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁true ; ▁return ▁result ; ▁} ▁finally ▁{ ▁// ▁rilascia mo ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁p ublic ▁sy nch ron ized ▁boolean ▁exists ▁( Address ▁pAddress ) ▁throws ▁ Mandatory FieldException , ▁Connection Exception , ▁SQLException ▁{ ▁boolean ▁result = ▁false ; ▁Connection ▁connect ▁= ▁null ; ▁if ▁( pAddress . getName () ▁== ▁null ) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁il ▁nome . "); ▁try { ▁// Otten iamo ▁la ▁connessione ▁al ▁database ▁connect = ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁String ▁sql ▁=" ▁ SELECT ▁* ▁FR OM ▁" ▁+ ▁ManagerAddress . TAB LE _ ADDRESS ▁+ ▁" ▁W HER E ▁name ▁= ▁" ▁+ ▁Utility . is Null ( pAddress . getName ()); ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ( tRs . next ()) ▁result ▁= ▁true ; ▁return ▁result ; ▁} ▁finally { ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Inserisc e ▁un ▁nuovo ▁indirizzo ▁nella ▁tabella ▁address . ▁* ▁* ▁@ param ▁pAddress ▁* ▁L ' indirizzo ▁da ▁inserire . ▁* ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁void ▁insert ( Address ▁pAddress ) ▁throws ▁ Mandatory FieldException , ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁Invalid ValueException { ▁Connection ▁connect = ▁null ; ▁try { ▁// ▁controllo ▁dei ▁campi ▁obbligatori ▁if ( pAddress . getName ()== null ) ▁throw ▁new ▁ Mandatory FieldException (" Specifi care ▁il ▁campo ▁nome "); ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect == null ) ▁throw ▁new ▁Connection Exception (); ▁// Prepar iamo ▁la ▁stringa ▁ Sql ▁String ▁sql ▁= ▁" INSER T ▁I NTO ▁" ▁+ ▁ManagerAddress . TAB LE _ ADDRESS ▁+ ▁" ▁( name ) ▁" ▁+ ▁" VALUES ▁ (" ▁+ ▁Utility . is Null ( pAddress . getName ()) ▁+ ▁")" ; ▁Utility . execute Operation ( connect , sql ); ▁pAddress . set IdAddress ( Utility . getMax Value (" id _ address ", ManagerAddress . TAB LE _ ADDRESS )); ▁} finally ▁{ ▁// rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Elimina ▁un ▁indirizzo ▁dall a ▁tabella ▁address . ▁* ▁* ▁@ param ▁pAddress ▁* ▁L ' indirizzo ▁da ▁eliminare . ▁* ▁* ▁@ throws ▁ Mandatory FieldException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁Invalid ValueException ▁* ▁*/ ▁p ublic ▁sy nch ron ized ▁void ▁delete ▁( Address ▁pAddress ) ▁throws ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁ Mandatory FieldException , ▁Invalid ValueException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ManagerAddress . get Instance () . Address On DeleteC a scade ( pAddress ); ▁connect ▁= ▁DBConnection . getConnection (); ▁// Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" DE LE TE ▁FR OM ▁" ▁+ ▁ManagerAddress . TAB LE _ ADDRESS ▁+ ▁" ▁W HER E ▁id _ address ▁= ▁" ▁+ ▁Utility . is Null ( pAddress . get IdAddress ()); ▁Utility . execute Operation ( connect , ▁sql ); ▁} ▁finally ▁{ ▁// rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁p ublic ▁sy nch ron ized ▁void ▁ assignTeach ingAsAddress ▁( Address ▁pAddress , ▁Teaching ▁pTeaching ) ▁throws ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁ Mandatory FieldException , ▁Invalid ValueException , ▁ Duplicate dEntityException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁ManagerAddress ▁managerAddress ▁= ▁ManagerAddress . get Instance (); ▁if ( managerAddress . has Teaching ( pTeaching , ▁pAddress )) ▁throw ▁new ▁ Duplicate dEntityException (" Questo ▁indirizzo ▁ha ▁gi à ▁quest ' insegnamento ▁associato "); ▁try ▁{ ▁// ManagerAddress . get Instance () . Address On DeleteC a scade ( pAddress ); ▁connect ▁= ▁DBConnection . getConnection (); ▁// Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" INSER T ▁I NTO ▁" ▁+ ▁ManagerAddress . TAB LE _ ADDRESS _ HA S _ TEACHING ▁+ ▁" ▁( id _ address , ▁id _ teaching ) ▁" ▁+ ▁" ▁VALUES ( ▁" ▁+ ▁Utility . is Null ( pAddress . get IdAddress ()) ▁+ ▁" ▁ , ▁" ▁+ ▁Utility . is Null ( pTeaching . getId ()) ▁+ ▁" ▁) "; ▁Utility . execute Operation ( connect , ▁sql ); ▁} ▁finally ▁{ ▁// rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁p ublic ▁sy nch ron ized ▁void ▁ removeTeach ingAsAddress ▁( Address ▁pAddress , ▁Teaching ▁pTeaching ) ▁throws ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁ Mandatory FieldException , ▁Invalid ValueException ▁{ ▁Connection ▁connect ▁= ▁null ; ▁ManagerAddress ▁managerAddress ▁= ▁ManagerAddress . get Instance (); ▁if (! managerAddress . has Teaching ( pTeaching , ▁pAddress )) ▁throw ▁new ▁Entity N otFoundException (" Questo ▁indirizzo ▁non ▁contiene ▁l ' insegnamento ▁da ▁rimuovere "); ▁try ▁{ ▁// ManagerAddress . get Instance () . Address On DeleteC a scade ( pAddress ); ▁connect ▁= ▁DBConnection . getConnection (); ▁// Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" DE LE TE ▁FR OM ▁" ▁+ ▁ManagerAddress . TAB LE _ ADDRESS _ HA S _ TEACHING ▁+ ▁" ▁W HER E ▁id _ address = ▁" ▁+ ▁Utility . is Null ( pAddress . get IdAddress ()) ▁+ ▁" ▁ AND ▁id _ teaching ▁= ▁" ▁+ ▁Utility . is Null ( pTeaching . getId ()); ▁Utility . execute Operation ( connect , ▁sql ); ▁} ▁finally ▁{ ▁// rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' id ▁dell ' indirizzo ▁passato ▁come ▁parametro . ▁* ▁* ▁@ param ▁pAddress ▁* ▁L ' indirizzo ▁di ▁cui ▁si ▁richiede ▁l ' id . ▁* ▁@ return ▁Ritorna ▁l ' id ▁dell ' indirizzo ▁passato ▁come ▁parametro . ▁* ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁*/ ▁p ublic ▁sy nch ron ized ▁int ▁getAddress Id ( Address ▁pAddress ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException ▁{ ▁int ▁result ▁= ▁0; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁if ▁( pAddress ▁== ▁null ) ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁trova re ▁l ' indirizzo !" ); ▁/* ▁* ▁Prepar iamo ▁la ▁stringa ▁SQL ▁per ▁recuperare ▁le ▁informazioni ▁* ▁corrispondent i ▁all ' id ▁dell ' indirizzo ▁passato ▁come ▁parametro . ▁*/ ▁String ▁tSql ▁= ▁" SELECT ▁id _ address ▁FR OM ▁" ▁+ ▁ManagerAddress . TAB LE _ ADDRESS ▁+ ▁" ▁W HER E ▁name ▁= ▁" ▁+ ▁Utility . is Null ( pAddress . getName ()); ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁tSql ); ▁if ▁( tRs . next ()) ▁result ▁= ▁tRs . getInt (" id _ address "); ▁return ▁result ; ▁} ▁finally ▁{ ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' indirizzo ▁corrispondente ▁all ' id ▁passato ▁come ▁parametro . ▁* ▁* ▁@ param ▁pIdAddress ▁* ▁L ' id ▁dell ' indirizzo . ▁* ▁@ return ▁Ritorna ▁l ' indirizzo ▁associato ▁all ' id ▁passato ▁come ▁parametro . ▁* ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁Address ▁ getAddressById ▁( int ▁pIdAddress ) ▁throws ▁Connection Exception , ▁SQLException , ▁Entity N otFoundException , ▁Invalid ValueException { ▁Address ▁result ▁= ▁null ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁if ▁( pIdAddress ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁trova re ▁l ' indirizzo !" ); ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Prepar iamo ▁la ▁stringa ▁SQL ▁String ▁sql ▁= ▁" SELECT ▁* ▁FR OM ▁" ▁+ ▁ManagerAddress . TAB LE _ ADDRESS ▁+ ▁" ▁W HER E ▁id _ address ▁= ▁" ▁+ ▁Utility . is Null ( pIdAddress ); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁pRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( pRs . next ()) ▁result ▁= ▁this . loadRecord From Rs ( pRs ); ▁else ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁trova re ▁l ' utente !" ); ▁return ▁result ; ▁} finally { ▁// rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁l ' insi eme ▁di ▁tutti ▁gli ▁indirizzi ▁presenti ▁nel ▁database . ▁* ▁* ▁@ return ▁Ritorna ▁una ▁collection ▁di ▁indirizzi . ▁* ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁Collection < Address > ▁get AddressList () ▁throws ▁Connection Exception , ▁Entity N otFoundException , ▁SQLException , ▁Invalid ValueException { ▁Connection ▁connect ▁= ▁null ; ▁Collection < Address > ▁result ▁= ▁new ▁Vector < Address >(); ; ▁try ▁{ ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// Prepar iamo ▁la ▁stringa ▁sql ▁String ▁sql ▁= ▁" SELECT ▁* ▁" ▁+ ▁" ▁FR OM ▁" ▁+ ▁ManagerAddress . TAB LE _ ADDRESS ▁+ ▁" ▁ ORD ER ▁B Y ▁id _ address "; ▁// Invia mo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁sql ); ▁if ▁( tRs . next ()) ▁result ▁= ▁this . loadRecord sFrom Rs ( tRs ); ▁return ▁result ; ▁} ▁finally ▁{ ▁// rilascia ▁le ▁ris or se ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁il ▁nome ▁dell ' indirizzo ▁corrispondente ▁all ' id ▁* ▁passato ▁come ▁parametro . ▁* ▁* ▁@ param ▁pIdAddress ▁* ▁L ' id ▁dell ' indirizzo . ▁* ▁@ return ▁Ritorna ▁una ▁stringa ▁contenente ▁il ▁nome ▁dell ' indirizzo . ▁* ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁*/ ▁p ublic ▁sy nch ron ized ▁String ▁getAddress Name ById ( int ▁pIdAddress ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException { ▁String ▁result ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ▁Se ▁non ▁e ' ▁stato ▁fornito ▁l ' id ▁restitui amo ▁un ▁codice ▁di ▁errore ▁if ▁( pIdAddress ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁trova re ▁l ' indirizzo !" ); ▁/* ▁* ▁Prepar iamo ▁la ▁stringa ▁SQL ▁per ▁recuperare ▁le ▁informazioni ▁* ▁corrispondent i ▁all ' id ▁dell ' utente ▁passato ▁come ▁parametro ▁*/ ▁String ▁tSql ▁= ▁" SELECT ▁name ▁FR OM ▁" ▁+ ▁ManagerAddress . TAB LE _ ADDRESS ▁+ ▁" ▁W HER E ▁id _ address ▁= ▁" ▁+ ▁Utility . is Null ( pIdAddress ) ▁ ; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁tSql ); ▁if ▁( tRs . next ()) ▁result ▁= ▁tRs . getString (" name "); ▁else ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁trova re ▁l ' indirizzo !" ); ▁return ▁result ; ▁} finally { ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/** ▁* ▁Ritorna ▁una ▁collection ▁con ▁gli ▁id ▁degli ▁insegnamenti ▁associati ▁all ' id ▁* ▁passato ▁come ▁parametro . ▁* ▁* ▁@ param ▁pIdAddress ▁* ▁L ' id ▁dell ' indirizzo . ▁* ▁@ return ▁Ritorna ▁una ▁collection ▁con ▁di ▁int ▁* ▁* ▁@ throws ▁Entity N otFoundException ▁* ▁@ throws ▁Connection Exception ▁* ▁@ throws ▁SQLException ▁* ▁@ throws ▁Invalid ValueException ▁*/ ▁p ublic ▁sy nch ron ized ▁Collection < Integer > ▁getAddress T e ch ing s ( int ▁pIdAddress ) ▁throws ▁Entity N otFoundException , ▁Connection Exception , ▁SQLException , ▁Invalid ValueException { ▁Collection < Integer > ▁result ; ▁Connection ▁connect ▁= ▁null ; ▁try ▁{ ▁// ▁Se ▁non ▁e ' ▁stato ▁fornito ▁l ' id ▁restitui amo ▁un ▁codice ▁di ▁errore ▁if ▁( pIdAddress ▁<= ▁0) ▁throw ▁new ▁Entity N otFoundException (" Im possibile ▁trova re ▁l ' indirizzo !" ); ▁/* ▁* ▁Prepar iamo ▁la ▁stringa ▁SQL ▁per ▁recuperare ▁le ▁informazioni ▁* ▁corrispondent i ▁all ' id ▁dell ' utente ▁passato ▁come ▁parametro ▁*/ ▁String ▁tSql ▁= ▁" SELECT ▁id _ teaching ▁FR OM ▁" ▁+ ▁ManagerAddress . TAB LE _ ADDRESS _ HA S _ TEACHING ▁+ ▁" ▁W HER E ▁id _ address ▁= ▁" ▁+ ▁Utility . is Null ( pIdAddress ) ▁ ; ▁// ▁Otten iamo ▁una ▁ Connessione ▁al ▁DataBase ▁connect ▁= ▁DBConnection . getConnection (); ▁if ▁( connect ▁== ▁null ) ▁throw ▁new ▁Connection Exception (); ▁// ▁Inv iamo ▁la ▁Query ▁al ▁DataBase ▁ResultSet ▁tRs ▁= ▁Utility . query Operation ( connect , ▁tSql ); ▁result ▁= ▁this . load Integer sFrom Rs ( tRs ); ▁return ▁result ; ▁} finally { ▁DBConnection . release Connection ( connect ); ▁} ▁} ▁/* ▁* ▁Con sente ▁la ▁lettura ▁di ▁un ▁record ▁dal ▁ResultSet . ▁*/ ▁priv ate ▁Address ▁loadRecord From Rs ( ResultSet ▁pRs ) ▁throws ▁SQLException , ▁Invalid ValueException { ▁Address ▁address ▁= ▁new ▁Address (); ▁address . setName ( pRs . getString (" name ") ); ▁address . set IdAddress ( pRs . getInt (" id _ address ") ); ▁return ▁address ; ▁} ▁/* ▁* ▁Con sente ▁la ▁lettura ▁dei ▁record ▁dal ▁ResultSet . ▁*/ ▁priv ate ▁Collection < Address > ▁loadRecord sFrom Rs ( ResultSet ▁pRs ) ▁throws ▁SQLException , ▁Invalid ValueException { ▁Collection < Address > ▁result ▁= ▁new ▁Vector < Address >(); ▁do ▁{ ▁result . add ( loadRecord From Rs ( pRs )); ▁} ▁while ▁( pRs . next ()); ▁return ▁result ; ▁} ▁priv ate ▁Collection < Integer > ▁load Integer sFrom Rs ( ResultSet ▁pRs ) ▁throws ▁SQLException , ▁Invalid ValueException { ▁Collection < Integer > ▁result ▁= ▁new ▁Vector < Integer >(); ▁while ( pRs . next ()) ▁{ ▁result . add ( pRs . getInt (" id _ teaching ") ); ▁} ▁return ▁result ; ▁} ▁}