▁p ackage ▁smos . application . re gisterManagement ; ▁import ▁java . io . IOException ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Collection ; ▁import ▁java . util . Date ; ▁import ▁java . util . Vector ; ▁import ▁java x . s ervlet . http . HttpServlet ; ▁import ▁java x . s ervlet . http . HttpServlet Request ; ▁import ▁java x . s ervlet . http . HttpServlet Response ; ▁import ▁java x . s ervlet . http . HttpSession ; ▁import ▁smos . Environment ; ▁import ▁smos . bean . User ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . storage . ManagerClassroom ; ▁import ▁smos . storage . ManagerUser ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁p ublic ▁class ▁Servlet Co mput ate Statistics ▁ext ends ▁HttpServlet ▁{ ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁ 6690 1 624 45 4 33 48 6 239 L ; ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doGet ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁@ Supp ress Warning s (" d eprecat ion ") ▁p rot ected ▁void ▁doGet ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁String ▁gotoPage ▁= ▁"./ statistics Management / show Statistic ts ByAcademicYear . jsp "; ▁String ▁errorMessage ▁= ▁" "; ▁ HttpSession ▁session ▁= ▁pRequest . get Session (); ▁Integer ▁academicYear ▁= ▁Integer . valueOf ( pRequest . getParameter (" academicYear ") ); ▁Integer ▁absenceLimit ▁= ▁Integer . valueOf ( pRequest . getParameter (" absenceLimit ") ); ▁Integer ▁noteLimit ▁= ▁Integer . valueOf ( pRequest . getParameter (" noteLimit ") ); ▁ManagerUser ▁managerUser ▁= ▁ManagerUser . get Instance (); ▁User ▁loggedUser ▁= ▁( User ) ▁session . get Attribute (" loggedUser "); ▁Collection ▁< User > ▁alertStudent Absence ▁= ▁new ▁Vector < User >(); ▁Date ▁today ▁= ▁new ▁Date (); ▁int ▁[] [] ▁un justifiedAbsence ▁= ▁null ; ▁Collection ▁< User > ▁ alertStudentNote ▁= ▁new ▁Vector < User >(); ▁int ▁[] [] ▁note ▁= ▁null ; ▁User ▁ tmpUser ▁= ▁null ; ▁try ▁{ ▁if ▁( loggedUser ▁== ▁null ) ▁{ ▁pResponse . se ndRe direct ( "./ index . htm "); ▁return ; ▁} ▁if ▁((! managerUser . isAdministrator ( loggedUser )) ▁&& ▁(! managerUser . isDirector ( loggedUser ))) ▁{ ▁errorMessage ▁= ▁" L ' Utente ▁collegat o ▁non ▁ha ▁accesso ▁alla ▁" ▁+ ▁" funzionalit a '! "; ▁gotoPage ▁= ▁"./ error . jsp "; ▁} ▁if ▁( academicYear ▁== ▁0) { ▁academicYear ▁= ▁today . getYear () ▁+ ▁ 1900 ; ▁} ▁Collection ▁< Integer > ▁ academicYearList ▁= ▁ ManagerClassroom . get Instance () . getAcademicYear List (); ▁un justifiedAbsence ▁= ▁managerUser . getH ighlightsStudent Absence ( academicYear ); ▁if ▁( un justifiedAbsence ▁ != ▁null ){ ▁for ▁( int ▁i =0; ▁i < ▁un justifiedAbsence . length ; ▁i ++) { ▁if ▁( un justifiedAbsence [ i ] [0] ▁>= ▁absenceLimit ){ ▁ tmpUser ▁= ▁managerUser . getUserBy Id ( un justifiedAbsence [ i ] [1] ); ▁alertStudent Absence . add ( tmpUser ); ▁} ▁} ▁} ▁note ▁= ▁managerUser . getH ighlightsStudent Note ( academicYear ); ▁if ▁( note ▁ != ▁null ){ ▁for ▁( int ▁i =0; ▁i < ▁note . length ; ▁i ++) { ▁if ▁( note [ i ] [0] ▁>= ▁noteLimit ){ ▁ tmpUser ▁= ▁managerUser . getUserBy Id ( note [ i ] [1] ); ▁ alertStudentNote . add ( tmpUser ); ▁} ▁} ▁} ▁session . set Attribute (" ale rtStudentAbsence ", ▁alertStudent Absence ); ▁session . set Attribute (" alertStudentNote ", ▁ alertStudentNote ); ▁session . set Attribute (" academicYearList ", ▁ academicYearList ); ▁session . set Attribute (" absenceLimit ", ▁absenceLimit ); ▁session . set Attribute (" noteLimit ", ▁noteLimit ); ▁session . set Attribute (" year Selected ", ▁academicYear ); ▁} ▁ catch ▁( SQLException ▁sqlException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁sqlException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁sqlException . printStackTrace (); ▁} ▁ catch ▁( Entity N otFoundException ▁entit yN otFoundException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁entit yN otFoundException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁entit yN otFoundException . printStackTrace (); ▁} ▁ catch ▁( Connection Exception ▁connection Exception ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁connection Exception . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁connection Exception . printStackTrace (); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁ catch ▁( Invalid ValueException ▁invalid ValueException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁invalid ValueException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁invalid ValueException . printStackTrace (); ▁} ▁try ▁{ ▁pResponse . se ndRe direct ( gotoPage ); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁session . set Attribute (" errorMessage ", ▁errorMessage ); ▁} ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doPost ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doPost ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁this . doGet ( pRequest , ▁pResponse ); ▁} ▁}