▁p ackage ▁smos . storage ; ▁import ▁java . sql . SQLException ; ▁import ▁java . util . Collection ; ▁import ▁java . util . Date ; ▁import ▁java . util . Gr egorianCalendar ; ▁import ▁smos . bean . Absence ; ▁import ▁smos . bean . Delay ; ▁import ▁smos . bean . Justify ; ▁import ▁smos . bean . Note ; ▁import ▁smos . bean . RegisterLine ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . storage . ManagerRegister ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁import ▁smos . utility . Utility ; ▁p ublic ▁class ▁Test Register ▁{ ▁// ▁database ▁err ato , ▁im possibile ▁inserire ▁null ▁nel ▁campo ▁id _ justify ▁di ▁absence ▁p ublic ▁static ▁void ▁main ( String [] ▁args ) ▁{ ▁ManagerRegister ▁mr = ▁ManagerRegister . get Instance (); ▁Date ▁datenow = ▁new ▁Date (); ▁Absence ▁absence ▁= ▁new ▁Absence (); ▁absence . set IdUser (6 1); ▁absence . set DateAbsence ( datenow ); ▁absence . set IdJustify (0) ; ▁absence . s etAcademicYear ( 2009 ); ▁// absence . setId Absence ( 13 ); ▁/* ▁try ▁{ ▁absence = ▁mr . getAbsenceById Absence ( 12 ); ▁} ▁ catch ▁( Invalid ValueException ▁e 1) ▁{ ▁// ▁TODO ▁ Auto - generate d ▁ catch ▁block ▁e 1. printStackTrace (); ▁} ▁ catch ▁( Entity N otFoundException ▁e 1) ▁{ ▁// ▁TODO ▁ Auto - generate d ▁ catch ▁block ▁e 1. printStackTrace (); ▁} ▁ catch ▁( Connection Exception ▁e 1) ▁{ ▁// ▁TODO ▁ Auto - generate d ▁ catch ▁block ▁e 1. printStackTrace (); ▁} ▁ catch ▁( SQLException ▁e 1) ▁{ ▁// ▁TODO ▁ Auto - generate d ▁ catch ▁block ▁e 1. printStackTrace (); ▁} ▁*/ ▁Justify ▁justifynew = ▁new ▁Justify (); ▁justifynew . set IdUser ( 1); ▁justifynew . set DateJustify ( datenow ); ▁justifynew . s etAcademicYear ( 2008 ); ▁justifynew . set IdJustify (6 ); ▁Delay ▁delay ▁= ▁new ▁Delay (); ▁// delay . set IdDelay ( 3 ); ▁delay . set IdUser (6 2 ); ▁delay . set DateDelay ( datenow ); ▁delay . set TimeDelay ( "10:00 :00" ); ▁delay . s etAcademicYear ( 2009 ); ▁Note ▁notenew = ▁new ▁Note (); ▁notenew . set IdUser ( 2 ); ▁notenew . set Teacher (" bo h "); ▁notenew . s etAcademicYear ( 2009 ); ▁notenew . set DateNote ( datenow ); ▁notenew . set Description (" lo ▁studente ▁dorm e ▁in ▁classe "); ▁notenew . set IdNote ( 1); ▁try { ▁// mr . insert Absence ( absence ); ▁// if ( mr . exists ( absence )) ▁System . out . println (" esiste "); ; ▁// mr . deleteAbsence ( absence ); ▁// mr . updateAbsence ( absence ); ▁mr . insert Delay ( delay ); ▁// if ( mr . exists ( delay )) ▁System . out . println (" esiste "); ; ▁// mr . updateDelay ( delay ); ▁// mr . deleteDelay ( delay ); ▁// mr . insert Note ( notenew ); ▁// mr . deleteNote ( notenew ); ▁// mr . i nsertJustify ( justifynew , ▁absence ); ▁// mr . deleteJustify ( justifynew . get IdJustify ()); ▁// if ( mr . has Justify ( absence )) System . out . println (" giustificata "); ▁// absence = ▁mr . getAbsence ByIDUserAnd Date ( 2, ▁" 2009 -05 - 18 "); ▁// absence = ▁mr . getAbsenceById Justify ( 1); ▁// System . out . println ( absence . get DateAbsence ()); ▁// Collection < Absence > ▁ac = ▁mr . getAbsence ByIDUserAnd AcademicYear ( 2, ▁2009 ); ▁// for ( Absence ▁ x ▁ : ▁ac ) ▁System . out . println ( x . get DateAbsence ()); ▁// justifynew = mr . getJustifyBy Absence ( absence ); ▁// System . out . println ( justifynew . get DateJustify ()); ▁// Collection < Note > ▁ nc ▁= ▁mr . getNoteByI DUserAnd AcademicYear ( 2, ▁2009 ); ▁// for ( Note ▁ x ▁ : ▁ nc ) ▁System . out . println ( x . getDescription ()); ▁// delay = ▁mr . getDelay ByIDUserAnd Date ( 1, ▁datenow ); ▁// System . out . println ( delay . get DateDelay ()); ▁// System . out . println ( delay . get TimeDelay ()); ▁// / * ▁Collection < RegisterLine > ▁crl ▁= ▁mr . get Register ByClass IDA ndDate ( 64 , ▁datenow ▁ ); ▁for ( RegisterLine ▁ x ▁ : ▁crl ){ ▁System . out . println ( x . getStudent () . getName ()); ▁if ( mr . has Absence ( x )){ ▁System . out . println (" assente "); ▁} ▁System . out . println ( mr . has Absence ( x )); ▁if ( mr . has Delay ( x )){ ▁System . out . println (" ritardo "); ▁} ▁} ▁// */ ▁Gr egorianCalendar ▁ gc ▁= ▁new ▁Gr egorianCalendar (); ▁String ▁date =" "; ▁int ▁year = gc . get ( Gr egorianCalendar . Y EAR ); ▁int ▁month = gc . get ( Gr egorianCalendar . MO N TH ) +1; ▁String ▁months =" "; ▁if ( month <10) { ▁months ="0"+ month ; ▁} else { ▁months = ▁months + month ; ▁} ▁int ▁day = gc . get ( Gr egorianCalendar . DAY _ O F _ MO N TH ); ▁String ▁days =" "; ▁if ( day <10) { ▁days ="0"+ day ; ▁} else { ▁days = ▁days + day ; ▁} ▁date = ▁date ▁+ ▁year +"-"+ months +"-"+ days ; ▁System . out . println ( date ); ▁} catch ▁( Exception ▁e ) ▁{ ▁System . out . println (" errore "); ▁System . out . println ( e . getMessage ()); ▁} ▁System . out . println ( datenow . toString ()); ▁System . out . println ( Utility . is Null ( datenow )); ▁System . out . println (" TEST ▁ COMPLETA TO "); ▁} ▁}