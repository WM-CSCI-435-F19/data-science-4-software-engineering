▁p ackage ▁smos . application . classroom Management ; ▁import ▁java . io . IOException ; ▁import ▁java . sql . SQLException ; ▁import ▁java x . s ervlet . http . HttpServlet ; ▁import ▁java x . s ervlet . http . HttpServlet Request ; ▁import ▁java x . s ervlet . http . HttpServlet Response ; ▁import ▁java x . s ervlet . http . HttpSession ; ▁import ▁smos . Environment ; ▁import ▁smos . bean . Classroom ; ▁import ▁smos . bean . User ; ▁import ▁smos . exception . Duplicate dEntityException ; ▁import ▁smos . exception . Entity N otFoundException ; ▁import ▁smos . exception . Invalid ValueException ; ▁import ▁smos . exception . Mandatory FieldException ; ▁import ▁smos . storage . ManagerClassroom ; ▁import ▁smos . storage . ManagerUser ; ▁import ▁smos . storage . connect ionManagement . exception . Connection Exception ; ▁p ublic ▁class ▁ServletInsert Classroom ▁ext ends ▁HttpServlet ▁{ ▁/** ▁* ▁Servlet ▁per ▁inserire ▁una ▁classe ▁* ▁@ author ▁ N icola ▁Pi santi ▁* ▁@ version ▁0. 9 ▁*/ ▁priv ate ▁static ▁final ▁long ▁s erial Version UID ▁= ▁ 135 515 954 5 34 3 902 216 L ; ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doGet ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p ublic ▁void ▁doGet ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁int ▁aC = Integer . valueOf ( pRequest . getParameter (" academicYear ") ); ▁String ▁gotoPage ▁= ▁"./ s howClassroomList ? academicYear ="+ aC ; ▁String ▁errorMessage ▁= ▁" "; ▁ HttpSession ▁session ▁= ▁pRequest . get Session (); ▁ManagerUser ▁managerUser ▁= ▁ManagerUser . get Instance (); ▁ ManagerClassroom ▁ managerClassroom = ▁ ManagerClassroom . get Instance (); ▁User ▁loggedUser ▁= ▁( User ) ▁session . get Attribute (" loggedUser "); ▁String ▁isWizard ▁= ▁" y es "; ▁try ▁{ ▁if ▁( loggedUser ▁== ▁null ) ▁{ ▁pResponse . se ndRe direct ( "./ index . htm "); ▁return ; ▁} ▁if ▁(! managerUser . isAdministrator ( loggedUser )) ▁{ ▁errorMessage ▁= ▁" L ' Utente ▁collegat o ▁non ▁ha ▁accesso ▁alla ▁" ▁+ ▁" funzionalit a '! "; ▁gotoPage ▁= ▁"./ error . jsp "; ▁} ▁int ▁ idAdd = ▁( int ) ▁Integer . valueOf ( pRequest . getParameter (" address ") ); ▁Classroom ▁classroom = ▁new ▁Classroom (); ▁classroom . setName ( pRequest . getParameter (" name ") ); ▁classroom . s etAcademicYear ( aC ); ▁classroom . set IdAddress ( idAdd ); ▁if ( classroom . getAcademicYear () < 1970) { ▁throw ▁new ▁Invalid ValueException (" l ' anno ▁inserito ▁ Ã ▁ ̈ ▁tr oppo ▁vecchi o "); ▁} ▁if (! ( managerClassroom . exists ( classroom ) )){ ▁ managerClassroom . insert ( classroom ); ▁session . set Attribute (" isWizard ", ▁isWizard ); ▁} else { ▁throw ▁new ▁ Duplicate dEntityException (" la ▁classe ▁gi Ã ▁esiste ▁nel ▁database "); ▁} ▁} ▁ catch ▁( SQLException ▁SQLException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁SQLException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁SQLException . printStackTrace (); ▁} ▁ catch ▁( Connection Exception ▁connection Exception ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁connection Exception . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁connection Exception . printStackTrace (); ▁} ▁ catch ▁( Mandatory FieldException ▁mandat o ryFieldException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁mandat o ryFieldException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁mandat o ryFieldException . printStackTrace (); ▁} ▁ catch ▁( Entity N otFoundException ▁entit yN otFoundException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁entit yN otFoundException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁entit yN otFoundException . printStackTrace (); ▁} ▁ catch ▁( Invalid ValueException ▁invalid ValueException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁invalid ValueException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁invalid ValueException . printStackTrace (); ▁} ▁ catch ▁( Duplicate dEntityException ▁duplicate dEntityException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁duplicate dEntityException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁duplicate dEntityException . printStackTrace (); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁session . set Attribute (" errorMessage ", ▁errorMessage ); ▁try ▁{ ▁pResponse . se ndRe direct ( gotoPage ); ▁} ▁ catch ▁( IOException ▁ioException ) ▁{ ▁errorMessage ▁= ▁Environment . DEF A ULT _ ERROR _ MESSAGE ▁+ ▁ioException . getMessage (); ▁gotoPage ▁= ▁"./ error . jsp "; ▁ioException . printStackTrace (); ▁} ▁} ▁/** ▁* ▁Definizione ▁del ▁metodo ▁doPost ▁* ▁* ▁@ param ▁pRequest ▁* ▁@ param ▁pResponse ▁* ▁*/ ▁p rot ected ▁void ▁doPost ( HttpServlet Request ▁pRequest , ▁HttpServlet Response ▁pResponse ) ▁{ ▁this . doGet ( pRequest , ▁pResponse ); ▁} ▁}