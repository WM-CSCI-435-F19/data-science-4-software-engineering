▁7 2 ▁" Balance ▁/** ▁* ▁Symbol ▁represent s ▁wh at ▁will ▁be ▁place d ▁on ▁the ▁stack . ▁*/ ▁private ▁static ▁class ▁Symbol ▁{ ▁public ▁char to k en ; ▁public ▁int ▁the Line ; ▁public ▁Symbol ( ▁char ▁tok , ▁int ▁line ▁) ▁{ ▁token ▁= ▁/** ▁* ▁Constructor . ▁* ▁@ param ▁inStream ▁the ▁stream ▁containing ▁a ▁program . ▁*/ ▁public ▁ Balance ( ▁ Reader ▁inStream ▁) ▁{ ▁errors ▁= ▁0; ▁tok ▁= ▁new ▁Tokenizer ( ▁inStream ▁ ); ▁} /** ▁* ▁Print ▁an ▁error ▁message ▁for ▁un bal anced ▁symbol s . ▁* ▁@ return ▁number ▁of ▁errors ▁detected . ▁*/ ▁public ▁int ▁check Balance ( ▁) ▁{ ▁char ▁ch ; ▁Symbol ▁match ▁= ▁null ; ▁Stack ▁ pending Token s ▁= ▁new ▁Stack ( ▁ ); ▁private ▁Tokenizer ▁tok ; ▁private ▁int ▁errors ; ▁/** ▁* ▁Print ▁an ▁error ▁message ▁if ▁clSym ▁do es ▁not ▁match ▁opSym . ▁* ▁Update ▁errors . ▁*/ ▁private ▁void ▁check M atch ( ▁Symbol ▁opSym , ▁Symbol ▁clSym ▁) ▁{ ▁if ( ▁opSym . ▁token ▁== ▁' ( ' ▁&& ▁clSym . ▁token ▁ != ▁' ) ' ▁|| ▁/** ▁* ▁main ▁routine ▁for ▁ bal anced ▁symbol ▁check er . ▁* ▁S li gh t ly ▁different ▁from ▁text . ▁* ▁I f ▁no ▁command ▁line ▁parameters , ▁st anda rd ▁input ▁is ▁used . ▁* ▁Otherwise , ▁files ▁in ▁command ▁line ▁are ▁used . ▁*/ ▁public ▁static ▁void ▁main ( ▁St "