▁ 88 ▁" Event ▁Model ▁prot ected ▁Vector ▁EventShapes ▁= ▁new ▁Vector (); ▁prot ected ▁Vector ▁EventLines ▁= ▁new ▁Vector (); ▁prot ected ▁E B ▁Shape ▁ebs , ▁ebs 2; ▁prot ected ▁EventLine ▁m line ; ▁prot ected ▁Color ▁Shape Color ▁= ▁new ▁Color ▁( 190, 190, 1 90 ); ▁public ▁EventModel ( EBT ▁e ) ▁{ ▁ebt ▁= ▁e ; ▁CurrentEvent ▁= ▁ -1; ▁NotifyButton ▁= ▁new ▁JButton ("" Notify ""); ▁ setLayout ( ▁null ); ▁NotifyButton . ▁ setBounds (305, 26 5, 80, 25 ); ▁MinimumNoRects ▁= ▁1; ▁add ▁public ▁void ▁get IP ▁Server ( ▁String ▁serverIP ) ▁{ ▁this . ▁serverIP ▁= ▁serverIP ; ▁} ▁public ▁void ▁Clear Vector s () ▁{ ▁EventShapes . ▁ re moveAllElements (); ▁EventLines . ▁ re moveAllElements (); ▁} public ▁void ▁draw Model () ▁{ ▁repaint (); ▁} ▁public ▁void ▁draw Model ( EBShape ▁sh ) ▁{ ▁EventShapes . ▁set Element At ( ▁sh , ▁E S Cursor ); ▁repaint (); ▁} ▁private ▁void ▁Clear Data () ▁{ ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁EventShapes . ▁size (); ▁i ++) ▁{ ▁ebs ▁= ▁( EBShape ) EventShapes . ▁element At ( ▁i ); ▁ebs . Update requirement ▁ Info ("" "","" "","" ""); ▁} ▁} public ▁void ▁ Clicked ▁( ▁int ▁ x , ▁int ▁ y ) ▁{ ▁int ▁H it ▁= ▁0; ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁EventShapes . ▁size (); ▁i ++) ▁{ ▁ebs ▁= ▁( EBShape ) EventShapes . ▁element At ( ▁i ); ▁if ▁( ( ▁ x ▁>= ▁ebs . G et X () ▁&& ▁( ▁ x ▁<= ▁ebs ▁public ▁void ▁Check Notify Status () ▁{ ▁// Check ▁if ▁ Min im um ▁Standard s ▁have ▁be en ▁ met . ▁int ▁j ▁= ▁0; ▁for ▁( ▁j ▁= ▁0; ▁j ▁< ▁MinimumNoRects ; ▁j ++) ▁{ ▁ebs 2 ▁= ▁( EBShape ) EventShapes . ▁element At ( ▁j ); ▁if ▁( ( ((( pr o t ected ▁void ▁Build Event ( ){} ▁prot ected ▁void ▁Add Line ( ▁int ▁t , ▁int ▁l , ▁int ▁r , ▁int ▁b ) ▁{ ▁EventLines . ▁add Element ( ▁new ▁EventLine ( ▁t , ▁l , ▁r , ▁b )); ▁} ▁prot ected ▁void ▁AddEventRect ( ▁int ▁ x , ▁int ▁ y , ▁int ▁colorStatus ) ▁{ ▁if ▁( ▁colorStatus ▁== ▁1) ▁{ ▁EventShapes . ▁add Element ( ▁new ▁ EBShape ( ▁ x , ▁ y , ▁new ▁Color ▁(100, 10 0, 10 0) )); ▁} ▁else ▁{ ▁Even ▁public ▁String ▁get requirement ▁Text ( String ▁r , ▁String ▁p , ▁String ▁m ) ▁{ ▁return ▁new ▁String ("" requirement w ill ▁go ▁here ""); ▁} ▁public ▁StringBuffer ▁GenerateEvent () ▁{ ▁return ▁new ▁StringBuffer ("" ▁" "); ▁} // ▁end ▁of ▁GenerateEvent ▁method ▁prot ected ▁void ▁paint Component ( Graphics ▁g ) ▁{ ▁super . ▁paint Component ( ▁g ); ▁for ▁( ▁int ▁i ▁= ▁0; ▁i ▁< ▁EventShapes . ▁size (); ▁i ++) ▁{ ▁ebs ▁= ▁( EBShape ) EventShapes . ▁element At ( ▁i ); ▁g . ▁setC "