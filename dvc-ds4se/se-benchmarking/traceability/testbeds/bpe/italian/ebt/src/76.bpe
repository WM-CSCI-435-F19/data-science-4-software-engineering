▁76 ▁" E val u ato r private ▁static ▁final ▁int ▁EOL ▁= ▁0; ▁private ▁static ▁final ▁int ▁VALUE ▁= ▁1; ▁private ▁static ▁final ▁int ▁O PAREN = ▁2 ; ▁private ▁static ▁final ▁int ▁C PAREN = ▁3; ▁private ▁static ▁final ▁int ▁E X P ▁= ▁4 ; ▁private ▁static ▁final ▁int ▁M ULT = ▁private ▁static ▁class ▁Precedence ▁{ ▁public ▁int ▁input Symbol ; ▁// ▁refer s ▁to ▁the ▁p recedence ▁ level ▁of ▁operator ▁public ▁int ▁top Of S t ack ; ▁// ▁store s ▁the ▁operator ▁in ▁the ▁form ▁of ▁integer ▁public ▁Precedence ( ▁int ▁in Symbol , ▁int ▁// ▁ Prec Table ▁match es ▁order ▁of ▁Token ▁e num e ration ▁private ▁static ▁Precedence ▁[ ▁ ] ▁ prec Table ▁= ▁new ▁Precedence [ ▁ ] ▁{ ▁new ▁Precedence ( ▁0, ▁-1 ▁) , // ▁EOL ▁new ▁Precedence ( ▁0, 0 ▁) , // ▁VALUE ▁new ▁Precedence ( ▁100 private ▁static ▁class ▁Token ▁{ ▁public ▁Token ( ▁) ▁{ ▁this ( ▁EOL ▁ ); ▁} ▁public ▁Token ( ▁int ▁t ▁) ▁{ ▁this ( ▁t , ▁0 ▁ ); ▁} ▁public ▁Token ( ▁int ▁t , ▁double ▁v ▁) ▁{ ▁System . ▁out . ▁println ("" ▁I NSI DE ▁Token . Token () ""); ▁private ▁static ▁class ▁EvalTokenizer ▁{ ▁public ▁EvalTokenizer ( ▁StringTokenizer ▁is ▁) ▁{ ▁System . ▁out . ▁println ("" INS ID E ▁EvalTokenizer ""); ▁str ▁= ▁is ; ▁} ▁/** ▁* ▁Fin d ▁the ▁next ▁token , ▁skip p ing ▁blank s , ▁and ▁return ▁it . ▁* ▁For ▁VALUE ▁token , ▁place ▁the ▁processed ▁value ▁in ▁current Value . ▁* ▁Print ▁error ▁message ▁if ▁input ▁is ▁un re co g nized . ▁*/ ▁public ▁Token ▁get Token ▁/** ▁* ▁Construct ▁an ▁evaluat or ▁object . ▁* ▁@ param ▁s ▁the ▁string ▁containing ▁the ▁ex press ion . ▁*/ ▁public ▁Evaluator ( ▁String ▁s ▁) ▁{ ▁opStack ▁= ▁new ▁Stack ( ▁ ); ▁postfixStack ▁= ▁new ▁Stack ( ▁ ); ▁str ▁= ▁new ▁String Token i ▁// ▁The ▁on ly ▁public ly ▁visible ▁routine ▁/** ▁* ▁Public ▁routine ▁that ▁performs ▁the ▁evaluat ion . ▁* ▁Examin e ▁the pos tf i x ▁machine ▁to ▁ see ▁if ▁a ▁si ngle ▁result ▁is ▁* ▁left ▁and ▁if ▁so , ▁return ▁it ; ▁otherwise ▁print ▁error . ▁* ▁@ return ▁the ▁result . ▁private ▁Stack ▁opStack ; ▁// ▁Operator ▁stack ▁for ▁conversion ▁private ▁Stack ▁postfixStack ;// ▁Stack ▁for ▁postfix ▁machine ▁that ▁store s ▁the ▁number s ▁c ould ▁be ▁values ▁or ▁result ▁private ▁StringTokenizer ▁str ; ▁// ▁StringTokenizer ▁stream , ▁con te ▁/** ▁* ▁Internal ▁method ▁that ▁h id es ▁type - cast ing . ▁* ▁ Changed ▁the ▁method ▁to ▁support ▁double ▁*/ ▁private ▁double ▁ postFixTopAndPop ( ▁) ▁{ ▁System . ▁out . ▁println ("" INS ID E ▁ postFixTopAndPop ▁method ""); ▁System ▁/** ▁* ▁An o th er ▁internal ▁method ▁that ▁h id es ▁type - cast ing . ▁*/ ▁private ▁int ▁opStack Top ( ▁) ▁{ ▁return ▁( ▁( Integer ) ▁( ▁opStack . ▁p e e k ( ▁) ▁) ▁) . ▁intValue ( ▁ ); ▁} ▁/** ▁* ▁ After ▁a ▁token ▁is ▁read , ▁use ▁operator ▁p recedence ▁par sing ▁* ▁algorithm ▁to ▁process ▁it ; ▁miss ing ▁open ing ▁parenthes es ▁* ▁are ▁detected ▁here . ▁*/ ▁private ▁void ▁process Token ( ▁Token ▁last Token ▁) ▁{ ▁System . ▁out . ▁print l ▁/* ▁* ▁top And P o p ▁the ▁postfix ▁machine ▁stack ; ▁return ▁the ▁result . ▁* ▁I f ▁the ▁stack ▁is ▁empty , ▁print ▁an ▁error ▁message . ▁*/ ▁private ▁double ▁get Top ( ▁) ▁{ ▁// ▁change ▁to ▁support ▁double ▁System . ▁out . ▁println ("" INS ID E ▁ GE T ▁ TOP /** ▁* ▁Internal ▁routine ▁to ▁compute ▁ x ^ ▁n . ▁*/ ▁private ▁static ▁double ▁ pow ( ▁double ▁ x , ▁double ▁n ▁) ▁{ ▁System . ▁out . ▁println ("" INS ID E ▁ pow ""); ▁if ( ▁ x ▁== ▁0 ▁) ▁{ ▁if ( ▁n ▁== ▁0 ▁ ){ ▁System . ▁out . ▁/** ▁* ▁Process ▁an ▁operator ▁by ▁ ta k ing ▁two ▁items ▁off ▁the ▁postfix ▁* ▁stack , ▁a p p ly ing ▁the ▁operator , ▁and ▁push ing ▁the ▁result . ▁* ▁Print ▁error ▁if ▁miss ing ▁clos ing ▁parenthes is ▁or ▁di vision ▁by ▁0. ▁*/ ▁private ▁void ▁b in ary O p ( ▁int ▁top O p /** ▁* ▁Sim p le ▁main ▁to ▁ex er ci se ▁Evaluator ▁class . ▁*/ ▁public ▁static ▁void ▁main ( ▁String ▁[ ▁ ] ▁args ▁) ▁{ ▁String ▁str ; ▁BufferedReader ▁in ▁= ▁new ▁BufferedReader ( ▁new ▁ InputStream Reader ( ▁System . ▁in ▁) ▁ ); ▁try ▁{ ▁"