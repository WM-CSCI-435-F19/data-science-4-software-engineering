▁60 ▁" Thread ▁ Pool ▁/** ▁* ▁The ▁threads ▁in ▁the ▁pool . ▁*/ ▁prot ected ▁Thread ▁threads [] ▁= ▁null ; ▁/** ▁* ▁The ▁back log ▁of ▁assignments , ▁which ▁are ▁waiting ▁* ▁for ▁the ▁thread ▁pool . ▁*/ ▁Collection ▁assignments ▁= ▁new ▁ArrayList ( 3 ); ▁/** ▁* ▁A ▁ Done ▁object ▁that ▁is ▁/** ▁* ▁The ▁constructor . ▁* ▁* ▁@ param ▁size H ow ▁man y ▁threads ▁in ▁the ▁thread ▁pool . ▁*/ ▁public ▁ThreadPool ( ▁int ▁size ) ▁{ ▁threads ▁= ▁new ▁WorkerThread [ ▁size ]; ▁for ▁( ▁int ▁i =0; ▁i < ▁threads . ▁length ; ▁i ++) ▁{ ▁th r ▁/** ▁* ▁Add ▁a ▁task ▁to ▁the ▁thread ▁pool . ▁An y ▁class ▁* ▁which ▁implements ▁the ▁ Runnable ▁interface ▁* ▁may ▁be ▁assigned . ▁When ▁this ▁task ▁runs , ▁its ▁* ▁run ▁method ▁will ▁be ▁called . ▁* ▁* ▁@ param ▁r ▁An ▁object ▁that ▁implements ▁the ▁ Runnable ▁interface ▁*/ ▁pu b ▁/** ▁* ▁Get ▁a ▁new ▁work ▁assignment . ▁* ▁* ▁@ return ▁A ▁new ▁assignment ▁*/ ▁public ▁sy nc hro nized ▁ Runnable ▁get A ssignment () ▁{ ▁try ▁{ ▁while ▁( ▁! ▁assignments . ▁iterator () . ▁ hasNext () ▁) ▁wait (); ▁ Runnable ▁r ▁= ▁( Runnable ) ▁assignments . /** ▁* ▁Call ed ▁to ▁block ▁the ▁current ▁thread ▁until ▁* ▁the ▁thread ▁pool ▁has ▁no ▁mo re ▁work . ▁*/ ▁public ▁void ▁complete () ▁{ ▁done . ▁wait Be gin (); ▁done . ▁wait Done (); ▁} ▁prot ected ▁void ▁final ize () ▁{ ▁done . ▁reset (); ▁for ▁( ▁int ▁i =0; ▁i < ▁threads . ▁length ; ▁i ++) ▁{ ▁threads [ ▁i ]. ▁interrupt (); ▁done . ▁worker Be gin (); ▁threads [ ▁i ]. ▁des tro y (); ▁} ▁done . ▁wait Done (); ▁} ▁} "