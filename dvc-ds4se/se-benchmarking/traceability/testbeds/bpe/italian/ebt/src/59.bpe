▁59 ▁" Done ▁/** ▁* ▁The ▁number ▁of ▁Worker ▁object ▁* ▁threads ▁that ▁are ▁currently ▁working ▁* ▁on ▁something . ▁*/ ▁private ▁int ▁ _ ▁activeThreads ▁= ▁0; ▁/** ▁* ▁ This ▁boolean ▁keeps ▁track ▁of ▁if ▁* ▁the ▁ very ▁first ▁thread ▁has ▁started ▁* ▁or ▁not . ▁ This ▁prevent s ▁this ▁o b j e c ▁/** ▁* ▁ This ▁method ▁can ▁be ▁called ▁to ▁block ▁* ▁the ▁current ▁thread ▁until ▁the ▁ThreadPool ▁* ▁is ▁done . ▁*/ ▁sy nc hro nized ▁public ▁void ▁wait Done () ▁{ ▁try ▁{ ▁while ▁( ▁ _ ▁activeThreads >0 ▁) ▁{ ▁wait (); ▁} ▁} ▁catch ▁( ▁Interru ptedException /** ▁* ▁Call ed ▁to ▁wait ▁for ▁the ▁first ▁thread ▁to ▁* ▁start . ▁On ce ▁this ▁method ▁returns ▁the ▁* ▁process ▁has ▁begun . ▁*/ ▁sy nc hro nized ▁public ▁void ▁wait Be gin () ▁{ ▁try ▁{ ▁while ▁( ▁! _ ▁started ▁) ▁{ ▁wait (); ▁} ▁} ▁catch ▁( ▁Interru ptedException ▁e /** ▁* ▁Call ed ▁by ▁a ▁Worker ▁object ▁* ▁to ▁indicate ▁that ▁it ▁has ▁begun ▁* ▁working ▁on ▁a ▁work load . ▁*/ ▁sy nc hro nized ▁public ▁void ▁worker Be gin () ▁{ ▁ _ ▁activeThreads ++ ; ▁ _ ▁started ▁= ▁true ; ▁notify (); ▁} ▁/** ▁* ▁Call ed ▁by ▁a ▁Worker ▁object ▁to ▁* ▁indicate ▁that ▁it ▁has ▁completed ▁a ▁* ▁work load . ▁*/ ▁sy nc hro nized ▁public ▁void ▁worker E nd () ▁{ ▁ _ ▁activeThreads -- ; ▁notify (); ▁} ▁/** ▁* ▁Call ed ▁to ▁reset ▁this ▁object ▁to ▁* ▁its ▁initial ▁state . ▁*/ ▁sy nc hro nized ▁public ▁void ▁reset () ▁{ ▁ _ ▁activeThreads ▁= ▁0; ▁} "