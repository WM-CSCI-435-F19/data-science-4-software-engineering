▁5 6 ▁" Event ▁ Parser ▁private ▁Connection ▁conn ; ▁private ▁ResultSet ▁rs ; ▁private ▁Statement ▁stmt ; ▁// Event Parser ▁Constructor ▁// ▁initialize s ▁the ▁Database ▁connection ▁public ▁EventParser () ▁{ ▁try ▁{ ▁Class . ▁for Name ("" ▁ sun . ▁jdbc . ▁odbc . Jdbc O dbcDriver ""); ▁this . ▁conn ▁= ▁ DriverManager . ▁ getConnection ("" ▁jdbc : ▁odbc : ▁public ▁void ▁update Event ( String ▁str , ▁String ▁ID ) ▁{ ▁String ▁m Project ; ▁String ▁m Event ; ▁String ▁m Type ; ▁String ▁m N um ; ▁String ▁m requirement ▁ ; ▁String ▁m Module ; ▁String ▁mSQL ; ▁String ▁m Date ; ▁String ▁mR e q text ; ▁// Check ▁if ▁a ▁subscription ▁exists ▁public ▁boolean ▁Check Subscription ( String ▁str ) ▁{ ▁StringTokenizer ▁tokens ▁= ▁new ▁StringTokenizer ( ▁str , ▁ ""|""); ▁String ▁Message ▁type ▁= ▁tokens . ▁nextToken (); ▁String ▁SubscriberName ▁= ▁tokens . ▁next ▁// Insert ▁a ▁subscription ▁into ▁the ▁"" Subscription "" ▁table ▁public ▁void ▁Add Subscription ( String ▁str , ▁int ▁ID ) ▁{ ▁// ▁Parse ▁the ▁message ▁string ▁and ▁get ▁the ▁fields ▁StringTokenizer ▁tokens ▁= ▁new ▁StringTokenizer ( ▁str , ▁ ""|""); ▁String ▁Messag ▁// Delete Subscription ▁from ▁the ▁"" Subscription "" ▁table ▁public ▁void ▁Delete Subscription ( String ▁str , ▁int ▁ID ) ▁{ ▁// ▁Parse ▁the ▁message ▁string ▁and ▁get ▁the ▁fields ▁StringTokenizer ▁tokens ▁= ▁new ▁StringTokenizer ( ▁str , ▁ ""|""); ▁String ▁Messag ▁// Speculate ▁method ▁will ▁receive ▁a ▁string ▁from ▁the ▁S peculative ▁GUI ▁// ▁tool ▁and ▁parse ▁it ▁us ing ▁CallBack ▁class ▁to ▁identify ▁the ▁// ▁performance ▁models ▁public ▁void ▁speculate ( String ▁str ) ▁{ ▁System . ▁out . ▁println ("" Speculate ""); ▁CallBack ▁public ▁void ▁impactReport ( String ▁str ) ▁{ ▁CallBack ▁cb ▁= ▁new ▁CallBack (); ▁cb . ▁parse ImpactReport ( ▁str ); ▁} // ▁end ▁impactReport () "